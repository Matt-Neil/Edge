[{"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/index.js":"1","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/App.js":"2","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Contexts/currentUserContext.js":"3","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/auth.js":"4","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Sign-In.jsx":"5","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Account.jsx":"6","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Header.jsx":"7","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/files.js":"8","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/users.js":"9","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/images.js":"10","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Home.jsx":"11","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Not-Found.jsx":"12","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Workspace.jsx":"13","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Search.jsx":"14","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Header-Open-Item.jsx":"15","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Contexts/openItemsContext.js":"16","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Item-Row-Card.jsx":"17","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Item-Square-Card.jsx":"18","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/View-Items.jsx":"19","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/global.js":"20","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Dataset.jsx":"21","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/items.js":"22","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Model-Node.jsx":"23","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/train.js":"24","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Shortcut.jsx":"25"},{"size":475,"mtime":1646433770047,"results":"26","hashOfConfig":"27"},{"size":4784,"mtime":1646447074943,"results":"28","hashOfConfig":"27"},{"size":1703,"mtime":1643565273503,"results":"29","hashOfConfig":"27"},{"size":134,"mtime":1639341716098,"results":"30","hashOfConfig":"27"},{"size":4016,"mtime":1646430274776,"results":"31","hashOfConfig":"27"},{"size":5244,"mtime":1646449553807,"results":"32","hashOfConfig":"27"},{"size":927,"mtime":1646407304798,"results":"33","hashOfConfig":"27"},{"size":134,"mtime":1640810261516,"results":"34","hashOfConfig":"27"},{"size":135,"mtime":1641219148050,"results":"35","hashOfConfig":"27"},{"size":136,"mtime":1641050477587,"results":"36","hashOfConfig":"27"},{"size":4155,"mtime":1646449563462,"results":"37","hashOfConfig":"27"},{"size":157,"mtime":1643322933916,"results":"38","hashOfConfig":"27"},{"size":36065,"mtime":1646487645464,"results":"39","hashOfConfig":"27"},{"size":6000,"mtime":1646449574231,"results":"40","hashOfConfig":"27"},{"size":1340,"mtime":1646434014449,"results":"41","hashOfConfig":"27"},{"size":1236,"mtime":1643565439585,"results":"42","hashOfConfig":"27"},{"size":5036,"mtime":1646431564476,"results":"43","hashOfConfig":"27"},{"size":5509,"mtime":1646431710027,"results":"44","hashOfConfig":"27"},{"size":8941,"mtime":1646449583585,"results":"45","hashOfConfig":"27"},{"size":136,"mtime":1643133085776,"results":"46","hashOfConfig":"27"},{"size":114,"mtime":1646402770142,"results":"47","hashOfConfig":"27"},{"size":135,"mtime":1643901354878,"results":"48","hashOfConfig":"27"},{"size":561,"mtime":1644496588053,"results":"49","hashOfConfig":"27"},{"size":141,"mtime":1645959654919,"results":"50","hashOfConfig":"27"},{"size":3408,"mtime":1646446293650,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"yw0j30",{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/index.js",[],["110","111"],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/App.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Contexts/currentUserContext.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/auth.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Sign-In.jsx",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Account.jsx",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Header.jsx",["112"],"import React from 'react'\nimport { Link } from 'react-router-dom'\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\nimport AddIcon from '@mui/icons-material/Add';\nimport HeaderOpenItem from '../Components/Header-Open-Item'\n\nconst Header = ({openItems}) => {\n    return (\n        <div className=\"header\">\n            <Link to=\"/home\" className=\"header-link\">Home</Link>\n            <div className=\"header-open\">\n                {openItems.length !== 0 &&\n                    <>\n                        {openItems.map((item, i) => {\n                            return <HeaderOpenItem item={item} key={i} />\n                        })}\n                    </>\n                }\n            </div>\n            <span />\n            <Link to=\"/account\" className=\"header-account\">\n                <AccountCircleIcon className=\"header-account-icon\" />\n            </Link>\n        </div>\n    )\n}\n\nexport default Header","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/files.js",[],["113","114"],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/users.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/images.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Home.jsx",["115","116"],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Not-Found.jsx",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Workspace.jsx",["117","118","119","120","121","122","123","124","125","126","127","128","129","130"],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Search.jsx",["131","132","133","134"],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Header-Open-Item.jsx",["135","136","137","138"],"import React, {useState, useContext, useEffect} from 'react'\nimport { useLocation, Link, useHistory } from 'react-router-dom'\nimport CloseIcon from '@mui/icons-material/Close';\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\n\nconst HeaderOpenItems = ({item}) => {\n    const history = useHistory();\n    const location = useLocation();\n    const {removeOpenItems} = useContext(OpenItemsContext);\n\n    const checkCurrent = () => {\n        if (location.pathname.substring(11) === item.id || location.pathname.substring(9) === item.id) return true\n\n        return false\n    }\n\n    const closeItem = () => {\n        removeOpenItems(item.id)\n        \n        if (checkCurrent()) {\n            history.replace(\"/home\")\n        }\n    }\n\n    return (\n        <div  className={`item-header ${checkCurrent() && \"item-header-selected\"}`}>\n            {item.type === \"workspace\" ? <img src=\"http://localhost:3000/workspace.png\" /> : <img src=\"http://localhost:3000/dataset.png\" />}\n            <Link to={item.type === \"workspace\" ? `/workspace/${item.id}` : `/dataset/${item.id}`} className=\"item-header-link\">\n                <p className=\"item-header-title\">{item.title}</p>\n            </Link>\n            <CloseIcon className=\"item-header-close\" onClick={() => {closeItem()}} />\n        </div>\n    )\n}\n\nexport default HeaderOpenItems","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Contexts/openItemsContext.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Item-Row-Card.jsx",["139","140","141","142"],"import React, {useState, useEffect, useContext} from 'react'\nimport { Link } from 'react-router-dom'\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport globalAPI from '../API/global'\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\n\nconst WorkspaceRowCard = ({item, created, creator, currentUserID}) => {\n    const [bookmarked, setBookmarked] = useState(item.bookmarked)\n    const [upvoted, setUpvoted] = useState(item.upvoted)\n    const [upvotes, setUpvotes] = useState(item.upvotes)\n    const [visibility, setVisibility] = useState(item.visibility)\n    const {addOpenItems} = useContext(OpenItemsContext);\n    const [date, setDate] = useState(\"\");\n\n    useEffect(() => {\n        const updatedDate = new Date(item.updated);\n        const currentDate = new Date();\n\n        if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} years ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} days ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hours ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minutes ago`)\n        } else {\n            setDate(\"Updated just now\")\n        }\n    }, [])\n\n    const addHeader = () => {\n        if (item.creator === currentUserID) {\n            addOpenItems(item._id, item.title, item.type)\n        }\n    }\n\n    const updateUpvote = async () => {\n        try {\n            await globalAPI.put(`/upvote/${item._id}?state=${upvoted}`);\n\n            if (upvoted) {\n                setUpvotes(state => state-1)\n            } else {\n                setUpvotes(state => state+1)\n            }\n\n            setUpvoted(state => !state)\n        } catch (err) {}\n    }\n\n    const updateBookmark = async () => {\n        try {\n            await globalAPI.put(`/bookmark/${item._id}?state=${bookmarked}`);\n            \n            setBookmarked(state => !state)\n        } catch (err) {}\n    }\n\n    const updateVisibility = async () => {\n        try {\n            await globalAPI.put(`/visibility/${item._id}`);\n\n            setVisibility(state => !state)\n        } catch (err) {}\n    }\n\n    return (\n        <div className=\"item-row-card\" onClick={() => {addHeader()}}>\n            <Link to={item.type === \"workspace\" ? `/workspace/${item._id}` : `/dataset/${item._id}`}>\n                <img src={`http://localhost:4000/images/${item.picture}`} className=\"item-row-card-picture\" />\n            </Link>\n            <div className=\"item-row-card-information\">\n                <div className=\"item-row-card-heading\">\n                    {item.type === \"workspace\" ? <img src=\"http://localhost:3000/workspace.png\" /> : <img src=\"http://localhost:3000/dataset.png\" />}\n                    <Link to={item.type === \"workspace\" ? `/workspace/${item._id}` : `/dataset/${item._id}`} className=\"item-row-card-title\">{item.title}</Link>\n                </div>\n                <div>\n                    {!created && <p className=\"item-row-card-meta\">{creator}</p>}\n                    <p className=\"item-row-card-meta\">{date}</p>\n                </div>\n            </div>\n            <div>\n                {!created && item.creator !== currentUserID && <BookmarkIcon className={`item-row-card-icon ${bookmarked ? \"blue2\" : \"white\"}`} onClick={() => {updateBookmark()}} />}\n                <ThumbUpIcon className={`item-row-card-icon ${upvoted ? \"blue2\" : \"white\"}`} onClick={() => {updateUpvote()}} />\n                <p className={`item-row-card-upvotes ${upvoted ? \"blue2\" : \"white\"}`}>{upvotes}</p>\n                {created && \n                    <>\n                        {visibility ? \n                            <VisibilityIcon className=\"item-row-card-visibility\" onClick={() => {updateVisibility()}} />\n                        :\n                            <VisibilityOffIcon className=\"item-row-card-visibility\" onClick={() => {updateVisibility()}} />\n                        }\n                    </>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default WorkspaceRowCard","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Item-Square-Card.jsx",["143","144","145","146"],"import React, {useState, useEffect, useContext} from 'react'\nimport { Link } from 'react-router-dom'\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport globalAPI from '../API/global'\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\n\nconst WorkspaceSquareCard = ({item, created, creator, currentUserID}) => {\n    const [bookmarked, setBookmarked] = useState(item.bookmarked)\n    const [upvoted, setUpvoted] = useState(item.upvoted)\n    const [upvotes, setUpvotes] = useState(item.upvotes)\n    const [visibility, setVisibility] = useState(item.visibility)\n    const {addOpenItems} = useContext(OpenItemsContext);\n    const [date, setDate] = useState(\"\");\n\n    useEffect(() => {\n        const updatedDate = new Date(item.updated);\n        const currentDate = new Date();\n\n        if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} years ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} days ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hours ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minutes ago`)\n        } else {\n            setDate(\"Updated just now\")\n        }\n    }, [])\n\n    const addHeader = () => {\n        if (item.creator === currentUserID) {\n            addOpenItems(item._id, item.title, item.type)\n        }\n    }\n\n    const updateUpvote = async () => {\n        try {\n            await globalAPI.put(`/upvote/${item._id}?state=${upvoted}`);\n\n            if (upvoted) {\n                setUpvotes(state => state-1)\n            } else {\n                setUpvotes(state => state+1)\n            }\n\n            setUpvoted(state => !state)\n        } catch (err) {}\n    }\n\n    const updateBookmark = async () => {\n        try {\n            await globalAPI.put(`/bookmark/${item._id}?state=${bookmarked}`);\n            \n            setBookmarked(state => !state)\n        } catch (err) {}\n    }\n\n    const updateVisibility = async () => {\n        try {\n            await globalAPI.put(`/visibility/${item._id}`);\n\n            setVisibility(state => !state)\n        } catch (err) {}\n    }\n\n    return (\n        <div className=\"item-square-card\" onClick={() => {addHeader()}}>\n            <Link to={item.type === \"workspace\" ? `/workspace/${item._id}` : `/dataset/${item._id}`}>\n                <img src={`http://localhost:4000/images/${item.picture}`} className=\"item-square-card-picture\" />\n            </Link>\n            <div className=\"item-square-card-heading\">\n                {item.type === \"workspace\" ? <img src=\"http://localhost:3000/workspace.png\" /> : <img src=\"http://localhost:3000/dataset.png\" />}\n                <Link to={item.type === \"workspace\" ? `/workspace/${item._id}` : `/dataset/${item._id}`} className=\"item-square-card-title\">{item.title}</Link>\n            </div>\n            <div>\n                {!created && <p className=\"item-square-card-meta\">{creator}</p>}\n                <p className=\"item-square-card-meta\">{date}</p>\n                {created && \n                    <div className=\"item-square-card-bottom\">\n                        <ThumbUpIcon className={`item-square-card-icon ${upvoted ? \"blue2\" : \"white\"}`} onClick={() => {updateUpvote()}} />\n                        <p className={`item-square-card-upvotes ${upvoted ? \"blue2\" : \"white\"}`}>{upvotes}</p>\n                        {created && \n                            <>\n                                {visibility ? \n                                    <VisibilityIcon className=\"item-square-card-visibility\" onClick={() => {updateVisibility()}} />\n                                :\n                                    <VisibilityOffIcon className=\"item-square-card-visibility\" onClick={() => {updateVisibility()}} />\n                                }\n                            </>\n                        }\n                    </div>\n                }\n            </div>\n            {!created &&\n                <div className=\"item-square-card-other\">\n                    {item.creator !== currentUserID && <BookmarkIcon className={`item-square-card-icon ${bookmarked ? \"blue2\" : \"white\"}`} onClick={() => {updateBookmark()}} />}\n                    <ThumbUpIcon className={`item-square-card-icon ${upvoted ? \"blue2\" : \"white\"}`} onClick={() => {updateUpvote()}} />\n                    <p className={`item-square-card-upvotes ${upvoted ? \"blue2\" : \"white\"}`}>{upvotes}</p>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default WorkspaceSquareCard","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/View-Items.jsx",["147","148","149","150","151","152","153","154","155","156","157","158","159"],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/global.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Dataset.jsx",["160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176"],"import React, {useState, useEffect, useRef, useContext} from 'react'\nimport {useParams, useHistory} from \"react-router-dom\"\nimport itemsAPI from '../API/items'\nimport globalAPI from '../API/global'\nimport imageAPI from '../API/images'\nimport fileAPI from '../API/files'\nimport DataTable from '../Components/Data-Table';\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport ItemRowCard from '../Components/Item-Row-Card'\nimport ItemSquareCard from '../Components/Item-Square-Card'\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport CloseIcon from '@mui/icons-material/Close';\n\nconst Dataset = ({currentUser}) => {\n    const [loaded, setLoaded] = useState(false)\n    const [exist, setExist] = useState()\n    const [dataset, setDataset] = useState()\n    const [workspaces, setWorkspaces] = useState()\n    const [finishedWorkspaces, setFinishedWorkspaces] = useState(false)\n    const [section, setSection] = useState(\"data\")\n    const [dataTable, setDataTable] = useState()\n    const [updated, setUpdated] = useState()\n    const [start, setStart] = useState(0)\n    const [end, setEnd] = useState(30)\n    const [dataFile, setDataFile] = useState()\n    const [row, setRow] = useState()\n    const [maxRows, setMaxRows] = useState()\n    const [page, setPage] = useState(1)\n    const [rowFormat, setRowFormat] = useState(false)\n    const [changedData, setChangedData] = useState(false)\n    const [changedSettings, setChangedSettings] = useState(false)\n    const [date, setDate] = useState(\"\");\n    const [picture, setPicture] = useState()\n    const [copyData, setCopyData] = useState(true)\n    const [bookmarked, setBookmarked] = useState()\n    const [upvoted, setUpvoted] = useState()\n    const [images, setImages] = useState([])\n    const [assignedLabels, setAssignedLabels] = useState([])\n    const [labels, setLabels] = useState()\n    const [addLabel, setAddLabel] = useState(\"\")\n    const [upvotes, setUpvotes] = useState()\n    const [visibility, setVisibility] = useState()\n    const [targetAttribute, setTargetAttribute] = useState()\n    const [dataAttributes, setDataAttributes] = useState([])\n    const [comments, setComments] = useState()\n    const [comment, setComment] = useState(\"\")\n    const [data, setData] = useState()\n    const [title, setTitle] = useState(\"\")\n    const [description, setDescription] = useState(\"\")\n    const [image, setImage] = useState();\n    const [refreshLabels, setRefreshLabels] = useState()\n    const [refreshData, setRefreshData] = useState()\n    const {addOpenItems, removeOpenItems} = useContext(OpenItemsContext);\n    const copyInterval = useRef(0)\n    const datasetID = useParams().id;\n    const history = useHistory()\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const dataset = await itemsAPI.get(`/${datasetID}?type=dataset`);\n                const comments = await globalAPI.get(`/comment/${datasetID}`);\n                const workspaces = await itemsAPI.get(`/associated-workspaces?id=${datasetID}&date=${new Date().toISOString()}`);\n\n                if (workspaces.data.data.length < 21) {\n                    setFinishedWorkspaces(true)\n                }\n\n                if (dataset.data.data.self) {\n                    addOpenItems(dataset.data.data._id, dataset.data.data.title, dataset.data.data.type)\n                }\n\n                setDataset(dataset.data.data);\n                setUpdated(dataset.data.data.updated);\n                setBookmarked(dataset.data.data.bookmarked)\n                setUpvoted(dataset.data.data.upvoted)\n                setData(dataset.data.data.datafile)\n                setUpvotes(dataset.data.data.upvotes)\n                setVisibility(dataset.data.data.visibility)\n                setTitle(dataset.data.data.title)\n                setPicture(dataset.data.data.picture)\n                setDescription(dataset.data.data.description)\n                setWorkspaces(workspaces.data.data)\n                setComments(comments.data.data)\n\n                if (dataset.data.data.dataType === \"value\") {\n                    setTargetAttribute(dataset.data.data.target)\n\n                    fetch(`http://127.0.0.1:5000/files/${dataset.data.data.datafile}.csv`)\n                        .then(response => response.text())\n                        .then(text => {\n                            setDataTable(text)\n                            setMaxRows(text.slice(text.indexOf('\\n')+1).split('\\n').length)\n                            setDataAttributes(text.slice(0, text.indexOf('\\n')).split(','))\n                            setExist(true)\n                            setLoaded(true)\n                        }).catch(() => {\n                            setExist(true)\n                            setLoaded(true)\n                        });\n                } else {\n                    setLabels(dataset.data.data.labels)\n\n                    fetch(`http://127.0.0.1:5000/files/${dataset.data.data.datafile}/labels.json`)\n                        .then(response => response.json())\n                        .then(images => {\n                            images.map(image => {\n                                setImages(state => [...state, image.filename])\n                                setAssignedLabels(state => [...state, image.label])\n                            })\n                            setExist(true)\n                            setLoaded(true)\n                        }).catch(() => {\n                            setExist(true)\n                            setLoaded(true)\n                        });\n                }\n            } catch (err) {\n                setExist(false)\n                setLoaded(true)\n            }\n        }\n        fetchData();\n    }, [])\n\n    useEffect(() => {\n        if (loaded && exist) {\n            const updatedDate = new Date(updated);\n            const currentDate = new Date();\n    \n            if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} years ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} days ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hours ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minutes ago`)\n            } else {\n                setDate(\"Updated just now\")\n            }\n        }\n    }, [loaded, updated])\n\n    const fetchDataWorkspaces = async (date) => {\n        if (!finishedWorkspaces) {\n            try {\n                const fetchedWorkspaces = await itemsAPI.get(`/associated-workspaces?id=${datasetID}&date=${date}`);;\n    \n                if (fetchedWorkspaces.data.data.length < 21) {\n                    setFinishedWorkspaces(true)\n                }\n\n                setWorkspaces(items => [...items, ...fetchedWorkspaces.data.data]);\n            } catch (err) {}\n        }\n    }\n\n    const loadMore = () => {\n        if (workspaces.length !== 0) {\n            {fetchDataWorkspaces(workspaces[workspaces.length-1].createdAt)}\n        }\n    };\n\n    const copiedInterval = () => {\n        clearInterval(copyInterval.current)\n        navigator.clipboard.writeText(dataset.datafile);\n        setCopyData(false);\n        copyInterval.current = setInterval(() => {\n            setCopyData(true);\n        }, 800)\n        return ()=> {clearInterval(copyInterval.current)};\n    }\n\n    const updateUpvote = async () => {\n        try {\n            await globalAPI.put(`/upvote/${dataset._id}?state=${upvoted}`);\n\n            if (upvoted) {\n                setUpvotes(state => state-1)\n            } else {\n                setUpvotes(state => state+1)\n            }\n\n            setUpvoted(state => !state)\n        } catch (err) {}\n    }\n\n    const updateBookmark = async () => {\n        try {\n            await globalAPI.put(`/bookmark/${dataset._id}?state=${bookmarked}`);\n            \n            setBookmarked(state => !state)\n        } catch (err) {}\n    }\n\n    const updateVisibility = async () => {\n        try {\n            await globalAPI.put(`/visibility/${dataset._id}`);\n\n            setVisibility(state => !state)\n        } catch (err) {}\n    }\n\n    const addComment = async (e) => {\n        e.preventDefault()\n\n        try {\n            await globalAPI.put(`/comment/${datasetID}`, {\n                comment: comment\n            });\n\n            setComments([{\n                user: {name: currentUser.name},\n                comment: comment\n            }, ...comments])\n            setComment(\"\")\n        } catch (err) {}\n    }\n\n    const fetchRow = () => {\n        if (!isNaN(row) && row !== \"\") {\n            setStart(row-1)\n            setEnd(row)\n            setRefreshData(new Date().getTime())\n        } else {\n            if (start === (page-1)*30 && end === page*30) {\n                setRow(\"\")\n            } else {\n                setStart((page-1)*30)\n                setEnd(page*30)\n                setRefreshData(new Date().getTime())\n            }\n        }\n    }\n\n    const cancelRow = () => {\n        if (!(start === (page-1)*30 && end === page*30)) {\n            setStart((page-1)*30)\n            setEnd(page*30)\n            setRefreshData(new Date().getTime())\n        }\n        setRow(\"\")\n    }\n\n    const previousPage = () => {\n        if (page > 1) {\n            setStart((page-2)*30)\n            setEnd((page-1)*30)\n            setPage(state => state-1)\n            setRefreshData(new Date().getTime())\n        }\n    }\n    \n    const nextPage = () => {\n        if ((dataset.dataType === \"value\" && page*30 < maxRows && maxRows > 30) ||\n            (dataset.dataType === \"image\" && page*30 < maxRows && maxRows > 30)) {\n            setPage(state => state+1)\n            setStart((page)*30)\n            setEnd((page+1)*30)\n            setRefreshData(new Date().getTime())\n        }\n    }\n\n    const commentDate = (date) => {\n        const updatedDate = new Date(date);\n        const currentDate = new Date();\n\n        if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n            return `Posted ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} years ago`\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n            return `Posted ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n            return `Posted ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} days ago`\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n            return `Posted ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hours ago`\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n            return `Posted ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minutes ago`\n        } else {\n            return \"Posted just now\"\n        }\n    }\n\n    const updateDataset = async () => {\n        if (image) {\n            const formImage = new FormData();\n            formImage.append('image', image);\n            \n            try {\n                const tempPicture = picture\n                const imageResponse = await imageAPI.post(\"/upload\", formImage);\n\n                let updateDataset = {\n                    title: title,\n                    description: description,\n                    picture: imageResponse.data.data,\n                    datafile: data,\n                    updated: new Date().toISOString()\n                }\n\n                if (dataset.dataType === \"value\") {\n                    updateDataset.target = targetAttribute\n                } else {\n                    updateDataset.labels = labels\n                }\n\n                await itemsAPI.put(`/${datasetID}?type=dataset`, updateDataset)\n\n                setImage(undefined)\n                setPicture(imageResponse.data.data)\n\n                if (tempPicture !== \"default.png\") {\n                    await imageAPI.put('/remove', {picture: tempPicture});\n                }\n            } catch (err) {}\n        } else {\n            try {\n                let updateDataset = {\n                    title: title,\n                    description: description,\n                    picture: picture,\n                    datafile: data,\n                    updated: new Date().toISOString()\n                }\n\n                if (dataset.dataType === \"value\") {\n                    updateDataset.target = targetAttribute\n                } else {\n                    updateDataset.labels = labels\n                }\n\n                await itemsAPI.put(`/${datasetID}?type=dataset`, updateDataset)\n            } catch (err) {}\n        }\n\n        setUpdated(new Date().toISOString())\n        setChangedSettings(false)\n    }\n\n    const replaceData = async () => {\n        if (dataFile !== undefined && ((dataset.dataType === \"image\" && !assignedLabels.includes(\"No label\")) \n            || (dataset.dataType === \"value\" && targetAttribute !== \"\"))) {\n\n            const formData = new FormData();\n            const file = dataFile;\n            const reader = new FileReader();\n            const removeData = new FormData();\n            const id = new Date().toISOString();\n\n            if (dataset.dataType === \"image\") {\n                for (let i = 0; i < dataFile.length; i++) {\n                    formData.append('data[]', dataFile[i]);\n                    formData.append('labels[]', assignedLabels[i]);\n                }\n            } else {\n                reader.onload = function(e) {\n                    setDataTable(e.target.result);\n                    setMaxRows(e.target.result.slice(e.target.result.indexOf('\\n')+1).split('\\n').length)\n                    setRefreshData(new Date().getTime())\n                }\n    \n                reader.readAsText(file)\n\n                formData.append('data', dataFile);\n            }\n            \n            formData.append('id', id)\n            removeData.append('id', dataset.datafile)\n\n            try {\n                let updateDataset = {\n                    title: title,\n                    description: description,\n                    picture: picture,\n                    datafile: id,\n                    updated: new Date().toISOString()\n                }\n\n                if (dataset.dataType === \"value\") {\n                    updateDataset.target = targetAttribute\n                } else {\n                    updateDataset.labels = labels\n                }\n\n                await itemsAPI.put(`/${datasetID}?type=dataset`, updateDataset)\n\n                await fileAPI.post(\"/upload\", formData);\n                await fileAPI.post(\"/remove\", formData);\n\n                setData(id)\n                setUpdated(new Date().toISOString())\n                setDataFile(undefined)\n                setChangedData(false)\n                setRefreshData(new Date().getTime())\n            } catch (err) {}\n        }\n    }\n\n    const deleteDataset = async () => {\n        try {\n            await itemsAPI.delete(`/${datasetID}`)\n\n            removeOpenItems(datasetID)\n            history.replace(\"/home\")\n        } catch (err) {}\n    }\n\n    return (\n        <>\n            {loaded && exist ?\n                <div className=\"width-body\">  \n                    <div className=\"item-body\">\n                        <div className=\"item-top\">\n                            <img className=\"item-picture\" src={`http://localhost:4000/images/${picture}`} />\n                            {dataset.self && \n                                <input className=\"item-image-input\"\n                                        type=\"file\" \n                                        name=\"image\" \n                                        onChange={e => {\n                                            setImage(e.target.files[0])\n                                            {!changedSettings && setChangedSettings(true)}\n                                        }} />\n                            }\n                            <div className=\"item-heading\">\n                                {dataset.self ? \n                                    <>\n                                        <img src=\"http://localhost:3000/dataset.png\" />\n                                        <input className=\"item-title-input\"\n                                                placeholder=\"Title\" \n                                                value={title}\n                                                onChange={e => {\n                                                    setTitle(e.target.value)\n                                                    {!changedSettings && setChangedSettings(true)}\n                                                }} /> \n                                    </>\n                                : \n                                    <>\n                                        <img src=\"http://localhost:3000/dataset.png\" />\n                                        <h1>{dataset.title}</h1>\n                                    </>\n                                }\n                            </div>\n                            <div>\n                                {!dataset.self && <p className=\"item-meta\">{dataset.creatorName.name}</p>}\n                                <p className=\"item-meta\">{date}</p>\n                                <span />\n                                {!dataset.self && <BookmarkIcon className={`item-icon ${bookmarked ? \"blue\" : \"grey\"}`} onClick={() => {updateBookmark()}} />}\n                                {dataset.self && \n                                    <>\n                                        {visibility ? \n                                            <VisibilityIcon className=\"item-visibility\" onClick={() => {updateVisibility()}} />\n                                        :\n                                            <VisibilityOffIcon className=\"item-visibility\" onClick={() => {updateVisibility()}} />\n                                        }\n                                    </>\n                                }\n                                <ThumbUpIcon className={`item-icon ${upvoted ? \"blue\" : \"grey\"}`} onClick={() => {updateUpvote()}} />\n                                <p className={`item-upvotes ${upvoted ? \"blue\" : \"grey\"}`}>{upvotes}</p>\n                            </div>\n                            {dataset.self ? \n                                <>\n                                    <textarea className=\"item-description-input\"\n                                                placeholder=\"Description\" \n                                                value={description}\n                                                onChange={e => {\n                                                    setDescription(e.target.value)\n                                                    {!changedSettings && setChangedSettings(true)}\n                                                }} /> \n                                    <div className=\"item-middle\">\n                                        <button className=\"dark-grey-button item-delete\"\n                                                onClick={() => {deleteDataset()}}>Delete</button>\n                                        <button className={`item-save ${!changedSettings ? \"grey-button\" : \"blue-button\"}`}\n                                                disabled={!changedSettings}\n                                                onClick={() => {updateDataset()}}>Save Changes</button>\n                                    </div>\n                                </>\n                            : \n                                <p className=\"item-description\">{dataset.description}</p>\n                            }\n                            <select className=\"item-select\" onChange={e => {setSection(e.target.value)}}>\n                                <option value=\"data\">Data</option>\n                                <option value=\"workspaces\">Workspaces</option>\n                                <option value=\"comments\">Comments</option>\n                            </select>\n                        </div>\n                        <div className=\"item-bottom\">\n                            {section === \"data\" ? \n                                <> \n                                    <div className=\"item-options\">\n                                        {dataset.self && \n                                            <>\n                                                <p>Change Data</p>\n                                                {dataset.dataType === \"value\" ?\n                                                    <input type=\"file\" \n                                                            name=\"data\"\n                                                            accept=\".txt, .csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\"\n                                                            onChange={e => {\n                                                                setDataFile(e.target.files[0])\n                                                                setPage(1)\n                                                                setChangedData(true)\n                                                            }} />\n                                                :\n                                                    <input type=\"file\" \n                                                            name=\"data\"\n                                                            accept=\"image/*\"\n                                                            multiple\n                                                            onChange={e => {\n                                                                setDataFile(e.target.files)\n                                                                setAssignedLabels(Array(e.target.files.length).fill(\"No label\"))\n                                                                setPage(1)\n                                                                setChangedData(true)\n                                                            }} />\n                                                }\n                                                <button className=\"blue-button item-replace-button\"\n                                                        disabled={!changedData}\n                                                        onClick={() => {replaceData()}}>Upload</button>\n                                                <button className=\"white-button item-replace-button\"\n                                                        onClick={() => {\n                                                            setDataFile(undefined)\n                                                            setChangedData(false)\n                                                        }}\n                                                        disabled={!changedData}>Clear</button>\n                                            </>\n                                        }\n                                        <div className=\"dataset-copy\">\n                                            {copyData ? <p>Data ID</p> : <p>Copied</p>}\n                                            <button disabled={!copyData} onClick={() => {copiedInterval()}}>\n                                                <ContentCopyIcon className=\"dataset-copy-icon\" />\n                                            </button>\n                                        </div>\n                                        <a href={`http://127.0.0.1:5000/files/${dataset.datafile}.csv`} download>Download</a>\n                                    </div>\n                                    {dataset.dataType === \"image\" &&\n                                        <div className=\"item-labels-row\">\n                                            <input className=\"item-label-input\"\n                                                    placeholder=\"Label name\"\n                                                    onChange={e => {setAddLabel(e.target.value)}}\n                                                    value={addLabel} />\n                                            <button className=\"blue-button\"\n                                                    onClick={() => {\n                                                        addLabel !== \"\" && !labels.includes(addLabel) && setLabels(state => [...state, addLabel])\n                                                        setAddLabel(\"\")\n                                                    }}>Add</button>\n                                            <div className=\"item-labels-list\" key={refreshLabels}>\n                                                {labels.length === 0 ?\n                                                    <p>No labels created</p>\n                                                :\n                                                    <>\n                                                        {labels.map((label, i) => {\n                                                            return (\n                                                                <div className=\"item-created-label\" key={i}>\n                                                                    <p>{label}</p>\n                                                                    <div onClick={() => {\n                                                                        assignedLabels.map((assignedLabel, j) => {\n                                                                            if (assignedLabel === labels[i]) {\n                                                                                setAssignedLabels(state => {\n                                                                                    const stateCopy = [...state]\n                                                                                \n                                                                                    stateCopy[j] = \"No label\"\n                                                                                \n                                                                                    return stateCopy\n                                                                                })\n                                                                            }\n                                                                        })\n                                                                        labels.splice(i, 1)\n                                                                        setRefreshLabels(new Date().getTime())\n                                                                    }}>\n                                                                        <CloseIcon className=\"item-created-label-close\" /> \n                                                                    </div>\n                                                                </div>\n                                                            )\n                                                        })}\n                                                    </>\n                                                }\n                                            </div>\n                                        </div>\n                                    }\n                                    <div className=\"item-data-pagination\">\n                                        {dataset.dataType ===\"value\" &&\n                                            <>\n                                                <input placeholder=\"Row number\" value={row} onChange={e => {setRow(e.target.value)}} />\n                                                <button onClick={() => {cancelRow()}} className=\"white-button item-data-cancel-find\">Cancel</button>\n                                                <button onClick={() => {fetchRow()}} className=\"blue-button item-data-find\">Find</button>\n                                                <span />\n                                                <p className=\"item-data-information-label\">Target Attribute</p>\n                                                <select value={targetAttribute}\n                                                        onChange={e => {\n                                                            setTargetAttribute(e.target.value)\n                                                            setChangedSettings(true)\n                                                        }}>\n                                                    <option defaultValue value=\"\"></option>\n                                                    {dataAttributes.map((attribute, j) => \n                                                        <option value={attribute} key={j}>{attribute}</option>\n                                                    )}\n                                                </select>\n                                            </>\n                                        }\n                                        <span />\n                                        <ArrowBackIosNewIcon className=\"item-data-pagination-icon\" onClick={() => {previousPage()}} />\n                                        {dataset.dataType ===\"value\" ?\n                                            <p>Page {page} / {Math.ceil(maxRows/30)}</p>\n                                        :\n                                            <p>Page {page} / {Math.ceil(images.length/30)}</p>\n                                        }\n                                        <ArrowForwardIosIcon className=\"item-data-pagination-icon\" onClick={() => {nextPage()}} />\n                                    </div>\n                                    {dataset.dataType ===\"value\" ?\n                                        <div className=\"item-data-table\">\n                                            <DataTable dataTable={dataTable} start={start} end={end} key={refreshData} />\n                                        </div>\n                                    :\n                                        <div className=\"item-data-images\" key={refreshData}>\n                                            {dataFile !== undefined && changedData ?\n                                                <>\n                                                    {[...dataFile].map((image, i) => {\n                                                        if (i >= start && i < end) {\n                                                            return (\n                                                                <div className=\"item-data-images-list\" key={i}>\n                                                                    <div>\n                                                                        <img src={URL.createObjectURL(image)} />\n                                                                        <select value={assignedLabels[i]}\n                                                                                onChange={e => {setAssignedLabels(state => {\n                                                                                            const stateCopy = [...state]\n                                                                                        \n                                                                                            stateCopy[i] = e.target.value\n                                                                                        \n                                                                                            return stateCopy\n                                                                                        })\n                                                                                        setRefreshLabels(new Date().getTime())}}>\n                                                                            <option value=\"No label\">No label</option>\n                                                                            {labels.map((label, j) => \n                                                                                <option value={label} key={j}>{label}</option>\n                                                                            )}\n                                                                        </select>\n                                                                    </div>\n                                                                </div>\n                                                            )\n                                                        }\n                                                    })}\n                                                </>\n                                            :\n                                                <>\n                                                    {images.map((image, i) => {\n                                                        if (i >= start && i < end) {\n                                                            return (\n                                                                <div className=\"item-data-images-list\" key={i}>\n                                                                    <div>\n                                                                        <img src={`http://127.0.0.1:5000/files/${dataset.datafile}/${image}.jpg`} />\n                                                                        <select value={assignedLabels[i]}\n                                                                                onChange={e => {setAssignedLabels(state => {\n                                                                                            const stateCopy = [...state]\n                                                                                        \n                                                                                            stateCopy[i] = e.target.value\n                                                                                        \n                                                                                            return stateCopy\n                                                                                        })\n                                                                                        setRefreshLabels(new Date().getTime())}}>\n                                                                            <option value=\"No label\">No label</option>\n                                                                            {labels.map((label, j) => \n                                                                                <option value={label} key={j}>{label}</option>\n                                                                            )}\n                                                                        </select>\n                                                                    </div>\n                                                                </div>\n                                                            )\n                                                        }\n                                                    })}\n                                                </>\n                                            }\n                                        </div>\n                                    }\n                                </>\n                            : section === \"workspaces\" ?\n                                <>\n                                    <div className=\"item-workspaces\">\n                                        <p>{`${workspaces.length} Workspaces use this dataset`}</p>\n                                        <img src=\"http://localhost:3000/List.png\" className=\"item-workspaces-row-icon\" onClick={() => {setRowFormat(true)}} />\n                                        <img src=\"http://localhost:3000/Grid.png\" className=\"item-workspaces-grid-icon\" onClick={() => {setRowFormat(false)}} />\n                                    </div>\n                                    <div className=\"item-workspaces-list\">\n                                        {workspaces.length > 0 &&\n                                            <>\n                                                {workspaces.map((workspace, i) => {\n                                                    return rowFormat ? <ItemRowCard item={workspace} creator={workspace.creatorName.name} currentUserID={currentUser.id} created={workspace.creator === currentUser.id} key={i} /> : <ItemSquareCard item={workspace} creator={workspace.creatorName.name} currentUserID={currentUser.id} created={workspace.creator === currentUser.id} key={i} />\n                                                })}\n                                            </>\n                                        }\n                                    </div>\n                                    <div className=\"item-workspaces-end\">\n                                        {workspaces.length >= 0 && finishedWorkspaces ?\n                                            <p className=\"end-items\">No more workspaces</p>\n                                            :\n                                            <p className=\"load-items\" onClick={() => {loadMore()}}>Load more</p>\n                                        }\n                                    </div>\n                                </>\n                            :\n                                <>\n                                    <form className=\"item-comment-form\" method=\"PUT\" onSubmit={addComment}>\n                                        <p className=\"item-comment\">Leave a Comment</p>\n                                        <textarea className=\"item-comment-input\" placeholder=\"Write here\" value={comment} onChange={e => {setComment(e.target.value)}} />\n                                        <button className=\"blue-button\">Comment</button>\n                                    </form>\n                                    <div className=\"item-comments\">\n                                        {comments.length === 0 ?\n                                            <p className=\"end-items\">No comments</p>\n                                            :\n                                            <>\n                                                {comments.map((comment, i) => {\n                                                    return (\n                                                        <div className=\"comment-card\" key={i}>\n                                                            <div>\n                                                                <p className=\"comment-card-user\">{comment.user}</p>\n                                                                <p className=\"comment-card-date\">{commentDate(comment.createdAt)}</p>\n                                                            </div>\n                                                            <p className=\"comment-card-comment\">{comment.comment}</p>\n                                                        </div>\n                                                    )\n                                                })}\n                                            </>\n                                        }\n                                    </div>\n                                </>\n                            }\n                        </div>\n                    </div>\n                </div>\n            :   loaded && !exist &&\n                <div className=\"width-body\">  \n                    <p className=\"item-exist\">Cannot find dataset</p>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default Dataset","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/items.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Model-Node.jsx",["177"],"import React from 'react'\n\nconst ModelNode = ({type, value, selected, last}) => {\n    return (\n        <div className={`model-node ${type === \"Input\" && \"model-node-input\"}`}>\n            <div className={selected ? \"model-node-selected\" : \"model-node-unselected\"}>\n                <p>{type}</p>\n            </div>\n            <p className=\"model-node-value\">{value}</p>\n            {!last &&\n                <img src=\"http://localhost:3000/Node-Connector.png\" className=\"model-node-connector\" />\n            }\n        </div>\n    )\n};\n\nexport default ModelNode;\n","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/train.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Shortcut.jsx",["178","179"],{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","replacedBy":"183"},{"ruleId":"184","severity":1,"message":"185","line":4,"column":8,"nodeType":"186","messageId":"187","endLine":4,"endColumn":15},{"ruleId":"180","replacedBy":"188"},{"ruleId":"182","replacedBy":"189"},{"ruleId":"190","severity":1,"message":"191","line":78,"column":29,"nodeType":"192","endLine":78,"endColumn":148},{"ruleId":"190","severity":1,"message":"191","line":79,"column":29,"nodeType":"192","endLine":79,"endColumn":150},{"ruleId":"184","severity":1,"message":"193","line":15,"column":12,"nodeType":"186","messageId":"187","endLine":15,"endColumn":17},{"ruleId":"184","severity":1,"message":"194","line":25,"column":12,"nodeType":"186","messageId":"187","endLine":25,"endColumn":22},{"ruleId":"184","severity":1,"message":"195","line":36,"column":12,"nodeType":"186","messageId":"187","endLine":36,"endColumn":19},{"ruleId":"184","severity":1,"message":"196","line":38,"column":12,"nodeType":"186","messageId":"187","endLine":38,"endColumn":25},{"ruleId":"197","severity":1,"message":"198","line":52,"column":54,"nodeType":"199","messageId":"200","endLine":52,"endColumn":56},{"ruleId":"197","severity":1,"message":"198","line":121,"column":46,"nodeType":"199","messageId":"200","endLine":121,"endColumn":48},{"ruleId":"201","severity":1,"message":"202","line":127,"column":29,"nodeType":"203","messageId":"204","endLine":129,"endColumn":30},{"ruleId":"184","severity":1,"message":"205","line":175,"column":11,"nodeType":"186","messageId":"187","endLine":175,"endColumn":16},{"ruleId":"197","severity":1,"message":"198","line":194,"column":46,"nodeType":"199","messageId":"200","endLine":194,"endColumn":48},{"ruleId":"197","severity":1,"message":"198","line":197,"column":28,"nodeType":"199","messageId":"200","endLine":197,"endColumn":30},{"ruleId":"201","severity":1,"message":"202","line":272,"column":90,"nodeType":"203","messageId":"204","endLine":284,"endColumn":90},{"ruleId":"201","severity":1,"message":"202","line":309,"column":89,"nodeType":"203","messageId":"204","endLine":321,"endColumn":90},{"ruleId":"197","severity":1,"message":"206","line":499,"column":76,"nodeType":"199","messageId":"207","endLine":499,"endColumn":78},{"ruleId":"190","severity":1,"message":"191","line":504,"column":73,"nodeType":"192","endLine":504,"endColumn":158},{"ruleId":"208","severity":1,"message":"209","line":46,"column":8,"nodeType":"210","endLine":46,"endColumn":10,"suggestions":"211"},{"ruleId":"201","severity":1,"message":"202","line":78,"column":13,"nodeType":"203","messageId":"204","endLine":78,"endColumn":56},{"ruleId":"190","severity":1,"message":"191","line":116,"column":29,"nodeType":"192","endLine":116,"endColumn":148},{"ruleId":"190","severity":1,"message":"191","line":117,"column":29,"nodeType":"192","endLine":117,"endColumn":150},{"ruleId":"184","severity":1,"message":"212","line":1,"column":16,"nodeType":"186","messageId":"187","endLine":1,"endColumn":24},{"ruleId":"184","severity":1,"message":"213","line":1,"column":38,"nodeType":"186","messageId":"187","endLine":1,"endColumn":47},{"ruleId":"190","severity":1,"message":"191","line":27,"column":42,"nodeType":"192","endLine":27,"endColumn":91},{"ruleId":"190","severity":1,"message":"191","line":27,"column":94,"nodeType":"192","endLine":27,"endColumn":141},{"ruleId":"208","severity":1,"message":"214","line":35,"column":8,"nodeType":"210","endLine":35,"endColumn":10,"suggestions":"215"},{"ruleId":"190","severity":1,"message":"191","line":76,"column":17,"nodeType":"192","endLine":76,"endColumn":111},{"ruleId":"190","severity":1,"message":"191","line":80,"column":50,"nodeType":"192","endLine":80,"endColumn":99},{"ruleId":"190","severity":1,"message":"191","line":80,"column":102,"nodeType":"192","endLine":80,"endColumn":149},{"ruleId":"208","severity":1,"message":"214","line":35,"column":8,"nodeType":"210","endLine":35,"endColumn":10,"suggestions":"216"},{"ruleId":"190","severity":1,"message":"191","line":76,"column":17,"nodeType":"192","endLine":76,"endColumn":114},{"ruleId":"190","severity":1,"message":"191","line":79,"column":46,"nodeType":"192","endLine":79,"endColumn":95},{"ruleId":"190","severity":1,"message":"191","line":79,"column":98,"nodeType":"192","endLine":79,"endColumn":145},{"ruleId":"217","severity":1,"message":"218","line":24,"column":17,"nodeType":"219","messageId":"220","endLine":40,"endColumn":18},{"ruleId":"208","severity":1,"message":"221","line":51,"column":8,"nodeType":"210","endLine":51,"endColumn":10,"suggestions":"222"},{"ruleId":"217","severity":1,"message":"218","line":72,"column":17,"nodeType":"219","messageId":"220","endLine":88,"endColumn":18},{"ruleId":"223","severity":1,"message":"224","line":74,"column":25,"nodeType":"186","messageId":"225","endLine":74,"endColumn":30},{"ruleId":"223","severity":1,"message":"224","line":77,"column":25,"nodeType":"186","messageId":"225","endLine":77,"endColumn":30},{"ruleId":"223","severity":1,"message":"224","line":80,"column":25,"nodeType":"186","messageId":"225","endLine":80,"endColumn":30},{"ruleId":"223","severity":1,"message":"224","line":83,"column":25,"nodeType":"186","messageId":"225","endLine":83,"endColumn":30},{"ruleId":"223","severity":1,"message":"224","line":86,"column":25,"nodeType":"186","messageId":"225","endLine":86,"endColumn":30},{"ruleId":"201","severity":1,"message":"202","line":102,"column":17,"nodeType":"203","messageId":"204","endLine":102,"endColumn":66},{"ruleId":"201","severity":1,"message":"202","line":104,"column":17,"nodeType":"203","messageId":"204","endLine":104,"endColumn":66},{"ruleId":"217","severity":1,"message":"218","line":112,"column":9,"nodeType":"219","messageId":"220","endLine":128,"endColumn":10},{"ruleId":"190","severity":1,"message":"191","line":177,"column":29,"nodeType":"192","endLine":177,"endColumn":148},{"ruleId":"190","severity":1,"message":"191","line":178,"column":29,"nodeType":"192","endLine":178,"endColumn":150},{"ruleId":"197","severity":1,"message":"198","line":113,"column":46,"nodeType":"199","messageId":"200","endLine":113,"endColumn":48},{"ruleId":"208","severity":1,"message":"226","line":130,"column":8,"nodeType":"210","endLine":130,"endColumn":10,"suggestions":"227"},{"ruleId":"208","severity":1,"message":"228","line":151,"column":8,"nodeType":"210","endLine":151,"endColumn":25,"suggestions":"229"},{"ruleId":"201","severity":1,"message":"202","line":169,"column":13,"nodeType":"203","messageId":"204","endLine":169,"endColumn":77},{"ruleId":"190","severity":1,"message":"191","line":422,"column":29,"nodeType":"192","endLine":422,"endColumn":109},{"ruleId":"201","severity":1,"message":"202","line":429,"column":45,"nodeType":"203","messageId":"204","endLine":429,"endColumn":91},{"ruleId":"190","severity":1,"message":"191","line":435,"column":41,"nodeType":"192","endLine":435,"endColumn":88},{"ruleId":"201","severity":1,"message":"202","line":441,"column":53,"nodeType":"203","messageId":"204","endLine":441,"endColumn":99},{"ruleId":"190","severity":1,"message":"191","line":446,"column":41,"nodeType":"192","endLine":446,"endColumn":88},{"ruleId":"201","severity":1,"message":"202","line":475,"column":53,"nodeType":"203","messageId":"204","endLine":475,"endColumn":99},{"ruleId":"197","severity":1,"message":"198","line":562,"column":111,"nodeType":"199","messageId":"200","endLine":562,"endColumn":113},{"ruleId":"197","severity":1,"message":"206","line":623,"column":83,"nodeType":"199","messageId":"207","endLine":623,"endColumn":85},{"ruleId":"190","severity":1,"message":"191","line":628,"column":73,"nodeType":"192","endLine":628,"endColumn":113},{"ruleId":"197","severity":1,"message":"206","line":651,"column":76,"nodeType":"199","messageId":"207","endLine":651,"endColumn":78},{"ruleId":"190","severity":1,"message":"191","line":656,"column":73,"nodeType":"192","endLine":656,"endColumn":149},{"ruleId":"190","severity":1,"message":"191","line":685,"column":41,"nodeType":"192","endLine":685,"endColumn":159},{"ruleId":"190","severity":1,"message":"191","line":686,"column":41,"nodeType":"192","endLine":686,"endColumn":161},{"ruleId":"190","severity":1,"message":"191","line":11,"column":17,"nodeType":"192","endLine":11,"endColumn":104},{"ruleId":"208","severity":1,"message":"221","line":30,"column":8,"nodeType":"210","endLine":30,"endColumn":10,"suggestions":"230"},{"ruleId":"190","severity":1,"message":"191","line":70,"column":45,"nodeType":"192","endLine":70,"endColumn":105},"no-native-reassign",["231"],"no-negated-in-lhs",["232"],"no-unused-vars","'AddIcon' is defined but never used.","Identifier","unusedVar",["231"],["232"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'stage' is assigned a value but never used.","'workspaces' is assigned a value but never used.","'results' is assigned a value but never used.","'disableCreate' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'train' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history', 'searchPhrase', and 'urlPhrase'. Either include them or remove the dependency array.","ArrayExpression",["233"],"'useState' is defined but never used.","'useEffect' is defined but never used.","React Hook useEffect has a missing dependency: 'item.updated'. Either include it or remove the dependency array.",["234"],["235"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has a missing dependency: 'type'. Either include it or remove the dependency array.",["236"],"no-const-assign","'items' is constant.","const","React Hook useEffect has missing dependencies: 'addOpenItems' and 'datasetID'. Either include them or remove the dependency array.",["237"],"React Hook useEffect has a missing dependency: 'exist'. Either include it or remove the dependency array.",["238"],["239"],"no-global-assign","no-unsafe-negation",{"desc":"240","fix":"241"},{"desc":"242","fix":"243"},{"desc":"242","fix":"244"},{"desc":"245","fix":"246"},{"desc":"247","fix":"248"},{"desc":"249","fix":"250"},{"desc":"245","fix":"251"},"Update the dependencies array to be: [history, searchPhrase, urlPhrase]",{"range":"252","text":"253"},"Update the dependencies array to be: [item.updated]",{"range":"254","text":"255"},{"range":"256","text":"255"},"Update the dependencies array to be: [type]",{"range":"257","text":"258"},"Update the dependencies array to be: [addOpenItems, datasetID]",{"range":"259","text":"260"},"Update the dependencies array to be: [exist, loaded, updated]",{"range":"261","text":"262"},{"range":"263","text":"258"},[1702,1704],"[history, searchPhrase, urlPhrase]",[2207,2209],"[item.updated]",[2210,2212],[2137,2139],"[type]",[6114,6116],"[addOpenItems, datasetID]",[7563,7580],"[exist, loaded, updated]",[1073,1075]]