[{"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/index.js":"1","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/App.js":"2","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Contexts/currentUserContext.js":"3","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/auth.js":"4","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Sign-In.jsx":"5","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Account.jsx":"6","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Header.jsx":"7","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/files.js":"8","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/users.js":"9","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/images.js":"10","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Home.jsx":"11","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Not-Found.jsx":"12","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Workspace.jsx":"13","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Search.jsx":"14","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Header-Open-Item.jsx":"15","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Contexts/openItemsContext.js":"16","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Item-Row-Card.jsx":"17","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Item-Square-Card.jsx":"18","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/View-Items.jsx":"19","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/global.js":"20","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Dataset.jsx":"21","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/items.js":"22","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Model-Node.jsx":"23","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/train.js":"24","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Shortcut.jsx":"25","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Contexts/cardFormatContext.js":"26"},{"size":666,"mtime":1646834639945,"results":"27","hashOfConfig":"28"},{"size":4784,"mtime":1646834713874,"results":"29","hashOfConfig":"28"},{"size":1703,"mtime":1643565273503,"results":"30","hashOfConfig":"28"},{"size":134,"mtime":1639341716098,"results":"31","hashOfConfig":"28"},{"size":4191,"mtime":1646678806933,"results":"32","hashOfConfig":"28"},{"size":5273,"mtime":1646571654257,"results":"33","hashOfConfig":"28"},{"size":927,"mtime":1646407304798,"results":"34","hashOfConfig":"28"},{"size":134,"mtime":1640810261516,"results":"35","hashOfConfig":"28"},{"size":135,"mtime":1641219148050,"results":"36","hashOfConfig":"28"},{"size":136,"mtime":1641050477587,"results":"37","hashOfConfig":"28"},{"size":4432,"mtime":1646834900366,"results":"38","hashOfConfig":"28"},{"size":157,"mtime":1643322933916,"results":"39","hashOfConfig":"28"},{"size":56949,"mtime":1646833578908,"results":"40","hashOfConfig":"28"},{"size":6478,"mtime":1646835002586,"results":"41","hashOfConfig":"28"},{"size":2077,"mtime":1646652642621,"results":"42","hashOfConfig":"28"},{"size":1236,"mtime":1643565439585,"results":"43","hashOfConfig":"28"},{"size":5036,"mtime":1646753419272,"results":"44","hashOfConfig":"28"},{"size":5505,"mtime":1646753502579,"results":"45","hashOfConfig":"28"},{"size":9511,"mtime":1646834938353,"results":"46","hashOfConfig":"28"},{"size":136,"mtime":1643133085776,"results":"47","hashOfConfig":"28"},{"size":39092,"mtime":1646834239465,"results":"48","hashOfConfig":"28"},{"size":135,"mtime":1643901354878,"results":"49","hashOfConfig":"28"},{"size":561,"mtime":1644496588053,"results":"50","hashOfConfig":"28"},{"size":141,"mtime":1645959654919,"results":"51","hashOfConfig":"28"},{"size":3791,"mtime":1646597094714,"results":"52","hashOfConfig":"28"},{"size":806,"mtime":1646834516798,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"yw0j30",{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"60"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"60"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"60"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"60"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"60"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"60"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"60"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/index.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/App.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Contexts/currentUserContext.js",[],["116","117"],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/auth.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Sign-In.jsx",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Account.jsx",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Header.jsx",["118"],"import React from 'react'\nimport { Link } from 'react-router-dom'\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\nimport AddIcon from '@mui/icons-material/Add';\nimport HeaderOpenItem from '../Components/Header-Open-Item'\n\nconst Header = ({openItems}) => {\n    return (\n        <div className=\"header\">\n            <Link to=\"/home\" className=\"header-link\">Home</Link>\n            <div className=\"header-open\">\n                {openItems.length !== 0 &&\n                    <>\n                        {openItems.map((item, i) => {\n                            return <HeaderOpenItem item={item} key={i} />\n                        })}\n                    </>\n                }\n            </div>\n            <span />\n            <Link to=\"/account\" className=\"header-account\">\n                <AccountCircleIcon className=\"header-account-icon\" />\n            </Link>\n        </div>\n    )\n}\n\nexport default Header","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/files.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/users.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/images.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Home.jsx",["119","120"],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Not-Found.jsx",[],["121","122"],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Workspace.jsx",["123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139"],"import React, {useState, useEffect, useRef, useContext} from 'react'\nimport {useHistory, useParams, Link} from \"react-router-dom\"\nimport usersAPI from '../API/users'\nimport itemsAPI from '../API/items'\nimport globalAPI from '../API/global'\nimport imageAPI from '../API/images'\nimport trainAPI from '../API/train'\nimport ModelNode from '../Components/Model-Node';\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\n\nconst Workspace = ({currentUser, type}) => {\n    const [stage, setStage] = useState(\"model\");\n    const [title, setTitle] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [visibility, setVisibility] = useState(false);\n    const [bookmarked, setBookmarked] = useState()\n    const [upvoted, setUpvoted] = useState()\n    const [upvotes, setUpvotes] = useState()\n    const [updated, setUpdated] = useState()\n    const [picture, setPicture] = useState()\n    const [date, setDate] = useState(\"\")\n    const [start, setStart] = useState(0)\n    const [end, setEnd] = useState(20)\n    const [page, setPage] = useState(1)\n    const [image, setImage] = useState();\n    const [datasetID, setDatasetID] = useState(\"\")\n    const [uploadedDataset, setUploadedDataset] = useState()\n    const [workspace, setWorkspace] = useState([]);\n    const [images, setImages] = useState([])\n    const [assignedLabels, setAssignedLabels] = useState([])\n    const [refreshData, setRefreshData] = useState()\n    const [refreshDiagram, setRefreshDiagram] = useState()\n    const [changedSettings, setChangedSettings] = useState(false)\n    const [model, setModel] = useState([])\n    const [selectedNode, setSelectedNode] = useState(0)\n    const [configuration, setConfiguration] = useState({epochs: \"\", training_split: \"\", validation_split: \"\", test_split: \"\", improvement: \"\",\n                                                        patience: \"\", batch: \"\", lr_scheduler: false, optimiser: \"\", loss: \"\"})\n    const [addNode, setAddNode] = useState(false)\n    const [results, setResults] = useState()\n    const [loaded, setLoaded] = useState(false);\n    const [exist, setExist] = useState()\n    const [noData, setNoData] = useState()\n    const [disableCreate, setDisabledCreate] = useState(false)\n    const [disableTrain, setDisabledTrain] = useState(true)\n    const [displayPublic, setDisplayPublic] = useState(false)\n    const [displayExist, setDisplayExist] = useState(false)\n    const {addOpenItems, removeOpenItems} = useContext(OpenItemsContext);\n    const modelRef = useRef(null)\n    const workspaceID = useParams().id;\n    const publicInterval = useRef(0)\n    const existInterval = useRef(0)\n    const history = useHistory();\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                if (type === \"create\") {\n                    const workspace = await usersAPI.get(\"/created?type=workspace\");\n    \n                    workspace.data.data.map((workspace) => {\n                        setWorkspace(previous => [...previous, workspace.title]);\n                    })\n\n                    setExist(true)\n                    setLoaded(true)\n                } else {\n                    const workspace = await itemsAPI.get(`/${workspaceID}?type=workspace`);\n\n                    if (workspace.data.data.self) {\n                        addOpenItems(workspace.data.data._id, workspace.data.data.title, workspace.data.data.type)\n                    }\n\n                    setWorkspace(workspace.data.data);\n                    setUpdated(workspace.data.data.updated);\n                    setBookmarked(workspace.data.data.bookmarked)\n                    setUpvoted(workspace.data.data.upvoted)\n                    setPicture(workspace.data.data.picture)\n                    setUpvotes(workspace.data.data.upvotes)\n                    setDatasetID(workspace.data.data.dataset._id)\n                    setVisibility(workspace.data.data.visibility)\n                    setTitle(workspace.data.data.title)\n                    setDescription(workspace.data.data.description)\n                    setModel(workspace.data.data.model)\n                    setConfiguration(workspace.data.data.configuration)\n                    setUploadedDataset(workspace.data.data.dataset)\n\n                    fetch(`http://127.0.0.1:5000/files/${workspace.data.data.dataset.imageFile}/labels.json`)\n                        .then(response => response.json())\n                        .then(images => {\n                            images.map(image => {\n                                setImages(state => [...state, image.filename])\n                                setAssignedLabels(state => [...state, image.label])\n                            })\n                            setExist(true)\n                            setNoData(false)\n                            setLoaded(true)\n                        }).catch(() => {\n                            setExist(true)\n                            setNoData(true)\n                            setLoaded(true)\n                        });\n                }\n            } catch (err) {\n                setExist(false)\n                setLoaded(true)\n            }\n        }\n        fetchData();\n    }, [])\n\n    useEffect(() => {\n        if (modelRef.current) {\n            modelRef.current.scrollIntoView({\n                behavior: 'smooth',\n                block: 'end',\n                inline: 'end'\n            })\n        }\n    }, [model, addNode])\n\n    useEffect(() => {\n        if (loaded && exist) {\n            const updatedDate = new Date(updated);\n            const currentDate = new Date();\n    \n            if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} years ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} days ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hours ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minutes ago`)\n            } else {\n                setDate(\"Updated just now\")\n            }\n        }\n    }, [loaded, updated])\n\n    const searchFunctionKey = (e) => {\n        if (e.key === \"Enter\" && datasetID !== \"\") {\n            existingDataset()\n        }\n    }\n\n    const updateUpvote = async () => {\n        try {\n            await globalAPI.put(`/upvote/${workspaceID}?state=${upvoted}`);\n\n            if (upvoted) {\n                setUpvotes(state => state-1)\n            } else {\n                setUpvotes(state => state+1)\n            }\n\n            setUpvoted(state => !state)\n        } catch (err) {}\n    }\n\n    const updateBookmark = async () => {\n        try {\n            await globalAPI.put(`/bookmark/${workspaceID}?state=${bookmarked}`);\n            \n            setBookmarked(state => !state)\n        } catch (err) {}\n    }\n\n    const updateVisibility = async () => {\n        try {\n            await globalAPI.put(`/visibility/${workspaceID}`);\n\n            setVisibility(state => !state)\n        } catch (err) {}\n    }\n\n    const displayPublicInterval = () => {\n        clearInterval(publicInterval.current)\n        setDisplayPublic(true);\n        publicInterval.current = setInterval(() => {\n            setDisplayPublic(false);\n        }, 1200)\n        return ()=> {clearInterval(publicInterval.current)};\n    }\n\n    const displayExistInterval = () => {\n        clearInterval(existInterval.current)\n        setDisplayExist(true);\n        existInterval.current = setInterval(() => {\n            setDisplayExist(false);\n        }, 1200)\n        return ()=> {clearInterval(existInterval.current)};\n    }\n\n    const previousPage = () => {\n        if (page > 1) {\n            setStart((page-2)*20)\n            setEnd((page-1)*20)\n            setPage(state => state-1)\n            setRefreshData(new Date().getTime())\n        }\n    }\n    \n    const nextPage = () => {\n        if (page*20 < images.length && images.length > 20) {\n            setPage(state => state+1)\n            setStart((page)*20)\n            setEnd((page+1)*20)\n            setRefreshData(new Date().getTime())\n        }\n    }\n\n    const existingDataset = async () => {\n        try {\n            const checkPublic = await itemsAPI.get(`/check-public-dataset?id=${datasetID}`)\n    \n            if (checkPublic.data.success && checkPublic.data.data.visibility) {\n                fetch(`http://127.0.0.1:5000/files/${checkPublic.data.data.imageFile}/labels.json`)\n                        .then(response => response.json())\n                        .then(images => {\n                            images.map(image => {\n                                setImages(state => [...state, image.filename])\n                                setAssignedLabels(state => [...state, image.label])\n                            })\n                            setUploadedDataset(checkPublic.data.data)\n                            setRefreshData(new Date().getTime())\n                            {model.length === 0 &&\n                                setModel([{type: \"Input\", value: 1, activation: \"none\"}])\n                            }\n                            setChangedSettings(true)\n                        })\n            } else if (checkPublic.data.success && !checkPublic.data.data.visibility) {\n                displayPublicInterval()\n            } else {\n                displayExistInterval()\n            }\n        } catch (err) {}\n    }\n\n    const uploadImage = async () => {\n        setDisabledCreate(true)\n\n        if (uploadedDataset && title !== \"\" && description !== \"\") {\n            const formImage = new FormData();\n            formImage.append('image', image);\n\n            try {\n                const imageResponse = await imageAPI.post(\"/upload\", formImage);\n\n                uploadData(imageResponse.data.data)\n            } catch (err) {}\n        } else {\n            uploadData(\"default.png\")\n        }\n    }\n\n    const uploadData = async (imageName) => {\n        try {\n            const workspaceResponse = await itemsAPI.post(\"/\", {\n                title: title,\n                dataset: uploadedDataset._id,\n                creator: currentUser.id,\n                description: description,\n                picture: imageName,\n                upvotes: [],\n                bookmarks: [],\n                model: model,\n                configuration: configuration,\n                updated: new Date().toISOString(),\n                visibility: visibility,\n                type: \"workspace\"\n            });\n\n            history.push(`/workspace/${workspaceResponse.data.data}`)\n        } catch (err) {}\n    }\n\n    const train = async () => {\n        try {\n            // setDisabledTrain(true)\n            setStage(\"train\")\n    \n            const formData = new FormData();\n        \n            formData.append('epochs', configuration.epochs)\n            formData.append('training_split', configuration.training_split)\n            formData.append('validation_split', configuration.validation_split)\n            formData.append('test_split', configuration.test_split)\n            formData.append('improvement', configuration.improvement)\n            formData.append('patience', configuration.patience)\n            formData.append('batch', configuration.batch)\n            formData.append('lr_scheduler', configuration.lr_scheduler)\n            formData.append('optimiser', configuration.optimiser)\n            formData.append('loss', configuration.loss)\n            formData.append('imageFile', uploadedDataset.imageFile)\n\n            uploadedDataset.labels.map(label => {\n                formData.append('labels[]', label)\n            })\n            model.map(node => {\n                formData.append('activations[]', node.activation)\n                formData.append('units[]', node.value)\n            })\n\n            const response = await trainAPI.post(\"\", formData);\n\n            if (response) {\n                setResults(response)\n                setStage(\"evaluation\")\n            } else {\n                setDisabledTrain(false)\n            }\n        } catch (err) {}\n    }\n\n    const updateWorkspace = async () => {\n        if (image) {\n            const formImage = new FormData();\n            formImage.append('image', image);\n            \n            try {\n                const tempPicture = picture\n                const imageResponse = await imageAPI.post(\"/upload\", formImage);\n\n                await itemsAPI.put(`/${workspaceID}?type=workspace`, {\n                    title: title,\n                    description: description,\n                    picture: imageResponse.data.data,\n                    dataset: uploadedDataset._id,\n                    model: model,\n                    configuration: configuration,\n                    updated: new Date().toISOString()\n                })\n\n                setImage(undefined)\n                setPicture(imageResponse.data.data)\n\n                if (tempPicture !== \"default.png\") {\n                    await imageAPI.put('/remove', {picture: tempPicture});\n                }\n            } catch (err) {}\n        } else {\n            try {\n                await itemsAPI.put(`/${workspaceID}?type=workspace`, {\n                    title: title,\n                    description: description,\n                    picture: picture,\n                    dataset: uploadedDataset._id,\n                    model: model,\n                    configuration: configuration,\n                    updated: new Date().toISOString()\n                })\n            } catch (err) {}\n        }\n\n        setUpdated(new Date().toISOString())\n        setChangedSettings(false)\n    }\n\n    const deleteWorkspace = async () => {\n        try {\n            await itemsAPI.delete(`/${workspaceID}`)\n\n            removeOpenItems(workspaceID)\n            history.replace(\"/home\")\n        } catch (err) {}\n    }\n\n    return (\n        <>\n            {loaded && exist ?\n                <div className=\"main-body\">\n                    <div className=\"sidebar\">\n                        <div className=\"sidebar-header\">\n                            <img src=\"http://localhost:3000/workspace.png\"\n                                    className={!(type === \"view\" && !workspace.self) ? \"create-item-edit-image\" : undefined} />\n                            <input className={`create-item-title ${!(type === \"view\" && !workspace.self) && \"create-item-edit-input\"}`}\n                                    placeholder=\"Title\"\n                                    onChange={e => {\n                                        setTitle(e.target.value)\n                                        setChangedSettings(true)\n                                    }}\n                                    disabled={!(workspace.self || type === \"create\")}\n                                    value={title} />\n                        </div>\n                        <textarea className={`create-item-description ${!(type === \"view\" && !workspace.self) && \"create-item-edit-textarea\"}`}\n                                    placeholder=\"Description\"\n                                    onChange={e => {\n                                        setDescription(e.target.value)\n                                        setChangedSettings(true)\n                                    }}\n                                    disabled={!(workspace.self || type === \"create\")}\n                                    value={description} />\n                        {(workspace.self || type === \"create\") &&\n                            <>\n                                <div className=\"create-item-setup\">\n                                    <label className=\"create-item-setup-label\">Picture</label>\n                                    <input className=\"create-item-setup-input\"\n                                            type=\"file\" \n                                            name=\"image\" \n                                            onChange={e => {\n                                                setImage(e.target.files[0])\n                                                setChangedSettings(true)\n                                            }} />\n                                </div>\n                                {type === \"create\" &&\n                                    <div className=\"create-item-setup\">\n                                        <label className=\"create-item-setup-label\">Public?</label>\n                                        <input type=\"checkbox\" \n                                                onChange={() => {\n                                                    setVisibility(previous => !previous)\n                                                    setChangedSettings(true)\n                                                }}\n                                                checked={visibility} />\n                                    </div>\n                                }\n                            </>\n                        }\n                        {!workspace.self && type !== \"create\" && <p className=\"item-creator\">{workspace.creatorName.name}</p>}\n                        <div className=\"item-information\">\n                            {type !== \"create\" && <p className=\"item-date\">{date}</p>}\n                            <span />\n                            {!workspace.self && type !== \"create\" && <BookmarkIcon className={`item-icon ${bookmarked ? \"blue2\" : \"white\"}`} onClick={() => {updateBookmark()}} />}\n                            {workspace.self && type !== \"create\" && \n                                <>\n                                    {visibility ? \n                                        <VisibilityIcon className=\"item-visibility\" onClick={() => {updateVisibility()}} />\n                                    :\n                                        <VisibilityOffIcon className=\"item-visibility\" onClick={() => {updateVisibility()}} />\n                                    }\n                                </>\n                            }\n                            {type !== \"create\" &&\n                                <>\n                                    <ThumbUpIcon className={`item-icon ${upvoted ? \"blue2\" : \"white\"}`} onClick={() => {updateUpvote()}} />\n                                    <p className={upvoted ? \"blue2\" : \"white\"}>{upvotes}</p>\n                                </>\n                            }\n                        </div>\n                        <div className=\"sidebar-divided\" />\n                        <div className=\"create-workspace-uploaded-dataset\">\n                            {(type === \"create\" || workspace.self) ?\n                                <>\n                                    <input className={`create-workspace-import-existing ${!(type === \"view\" && !workspace.self) && \"create-item-edit-input\"}`}\n                                            placeholder=\"Dataset ID\"\n                                            onChange={e => {setDatasetID(e.target.value)}}\n                                            onKeyPress={searchFunctionKey}\n                                            value={datasetID} />\n                                    {type === \"view\" && <Link className=\"create-item-view-dataset\" to={`/dataset/${datasetID}`}><OpenInNewIcon /></Link>}\n                                </>\n                            :\n                                <Link to={`/dataset/${datasetID}`}className=\"create-workspace-uploaded-dataset-link\">\n                                    <img src={`http://localhost:4000/images/${uploadedDataset.picture}`} />\n                                    <p>{uploadedDataset.title}</p>\n                                </Link>\n                            }\n                        </div>\n                        \n                        {type === \"view\" &&\n                            <>\n                                {workspace.self &&\n                                    <>\n                                        <div className=\"sidebar-divided\" />\n                                        <button className=\"blue-button item-save\"\n                                                disabled={!changedSettings}\n                                                onClick={() => {updateWorkspace()}}>Save Changes</button>\n                                        <button className=\"text-button item-delete\"\n                                                onClick={() => {deleteWorkspace()}}>Delete</button>\n                                    </>\n                                }\n                            </>\n                        }\n                        {displayPublic && <p className=\"create-item-data-notification\">Dataset not public</p>}\n                        {displayExist && <p className=\"create-item-data-notification\">Dataset does not exist</p>}\n                    </div>\n                    <div className=\"inner\">\n                        <div className=\"workspace-body\">\n                            <div className=\"workspace-inner\">\n                                <div className=\"view-items-top\">\n                                    {type === \"create\" &&\n                                        <>\n                                            <h1>Create Workspace</h1>\n                                            <button className=\"blue-button\"\n                                                    disabled={disableTrain}\n                                                    onClick={() => {uploadImage()}}>Train</button>\n                                        </>\n                                    }\n                                    {type === \"view\" &&\n                                        <>\n                                            <button className={`text-button ${stage === \"model\" ? \"item-header-button-selected\" : \"item-header-button-unselected\"}`}\n                                                    onClick={() => {setStage(\"model\")}}>Model</button>\n                                            <button className={`text-button ${stage === \"evaluation\" ? \"item-header-button-selected\" : \"item-header-button-unselected\"}`}\n                                                    onClick={() => {setStage(\"evaluation\")}}>Evaluation</button>\n                                        </>\n                                    }\n                                </div>\n                                {stage === \"model\" ?\n                                    <>\n                                        {model.length !== 0 ?\n                                            <div className=\"create-modelling-body\">\n                                                <div className=\"create-model\">\n                                                    <div className=\"create-model-diagram\" key={refreshDiagram}>\n                                                        {model.map((node, i) => {\n                                                            return (\n                                                                <div key={i}>\n                                                                    <div className={\"create-model-diagram-node\"}>\n                                                                        <div onClick={() => {setSelectedNode(i)}}>\n                                                                            <ModelNode setSelectedNode={setSelectedNode} type={node.type} value={node.value} selected={i === selectedNode} last={i === model.length-1} />\n                                                                        </div>\n                                                                        {node.type !== \"Input\" && (workspace.self || type === \"create\") &&\n                                                                            <div onClick={() => {{selectedNode === i ?\n                                                                                                    setSelectedNode(state => state-1)\n                                                                                                : selectedNode < i ?\n                                                                                                    setSelectedNode(state => state)\n                                                                                                : selectedNode > i &&\n                                                                                                    <>\n                                                                                                        {selectedNode-i === 1 ?\n                                                                                                            setSelectedNode(state => state-1)\n                                                                                                        :\n                                                                                                            setSelectedNode(i)\n                                                                                                        } \n                                                                                                    </>  \n                                                                                                }\n                                                                                                model.splice(i, 1)\n                                                                                                setChangedSettings(true)\n                                                                                                setRefreshDiagram(new Date().getTime())}}>\n                                                                                <ClearIcon className=\"create-model-diagram-remove\" />\n                                                                            </div>\n                                                                        }\n                                                                    </div>\n                                                                    {i === model.length-1 && node.type !== \"Output\" &&\n                                                                        <>\n                                                                            {addNode && (workspace.self || type === \"create\") ?\n                                                                                <div className=\"create-model-diagram-add\">\n                                                                                    <div onClick={() => {setAddNode(false)}}>\n                                                                                        <RemoveIcon className=\"create-model-diagram-add-icon\" />\n                                                                                    </div>\n                                                                                    <div className=\"create-model-diagram-add-options\">\n                                                                                        <button onClick={() => {setModel(state => [...state, {\n                                                                                                type: \"Dense\",\n                                                                                                value: 0,\n                                                                                                activation: \"\"\n                                                                                            }])\n                                                                                            setSelectedNode(model.length)\n                                                                                            setAddNode(false)\n                                                                                            setChangedSettings(true)\n                                                                                        }}>Dense</button>\n                                                                                        {model.length > 1 &&\n                                                                                            <button onClick={() => {\n                                                                                                    {uploadedDataset.labels.length === 2 ?\n                                                                                                        setModel(state => [...state, {\n                                                                                                            type: \"Output\",\n                                                                                                            value: 1,\n                                                                                                            activation: \"\"\n                                                                                                        }])\n                                                                                                    :\n                                                                                                        setModel(state => [...state, {\n                                                                                                            type: \"Output\",\n                                                                                                            value: uploadedDataset.labels.length,\n                                                                                                            activation: \"\"\n                                                                                                        }])\n                                                                                                    }\n                                                                                                setSelectedNode(model.length)\n                                                                                                setAddNode(false)\n                                                                                                setChangedSettings(true)\n                                                                                            }}>Output</button>\n                                                                                        }\n                                                                                    </div>\n                                                                                </div>\n                                                                            :\n                                                                                <>  \n                                                                                    {(workspace.self || type === \"create\") &&\n                                                                                        <div onClick={() => {setAddNode(true)}}>\n                                                                                            <AddIcon className=\"create-model-diagram-add-icon\" />\n                                                                                        </div>\n                                                                                    }\n                                                                                </>\n                                                                            }\n                                                                        </>\n                                                                    }\n                                                                </div>\n                                                            )\n                                                        })}\n                                                        <div ref={modelRef} />\n                                                    </div>\n                                                </div>\n                                                <div>\n                                                    <div className=\"create-model-selected\">\n                                                        <p>{model[selectedNode].type}</p>\n                                                        <div className=\"create-model-selected-input\">\n                                                            <div>\n                                                                <label>Units</label>\n                                                                <input value={model[selectedNode].value} \n                                                                        disabled={(model[selectedNode].type === \"Input\" || model[selectedNode].type === \"Output\") && !(workspace.self || type === \"create\")}\n                                                                        onChange={e => {setModel(state => {\n                                                                                            const stateCopy = [...state]\n                                                                                        \n                                                                                            stateCopy[selectedNode] = {\n                                                                                                ...stateCopy[selectedNode],\n                                                                                                value: Number(e.target.value)\n                                                                                            }\n                                                                                        \n                                                                                            return stateCopy\n                                                                                        })\n                                                                                        setChangedSettings(true)\n                                                                                        setRefreshDiagram(new Date().getTime())}} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Activation</label>\n                                                                {model[selectedNode].type !== \"Input\" ?\n                                                                    <select value={model[selectedNode].activation} \n                                                                            disabled={!(workspace.self || type === \"create\")}\n                                                                            onChange={e => {setModel(state => {\n                                                                                                const stateCopy = [...state]\n                                                                                            \n                                                                                                stateCopy[selectedNode] = {\n                                                                                                    ...stateCopy[selectedNode],\n                                                                                                    activation: e.target.value\n                                                                                                }\n                                                                                            \n                                                                                                return stateCopy\n                                                                                            })\n                                                                                            setChangedSettings(true)\n                                                                                            setRefreshDiagram(new Date().getTime())}}>\n                                                                            <option disabled defaultValue value=\"\"></option>\n                                                                            <option value=\"sigmoid\">Sigmoid</option>\n                                                                            <option value=\"softmax\">Softmax</option>\n                                                                            <option value=\"softplus\">Softplus</option>\n                                                                            <option value=\"softsign\">Softsign</option>\n                                                                            <option value=\"swish\">Swish</option>\n                                                                            <option value=\"selu\">Selu</option>\n                                                                            <option value=\"tanh\">Tanh</option>\n                                                                            <option value=\"elu\">Elu</option>\n                                                                            <option value=\"exponential\">Exponential</option>\n                                                                            <option value=\"gelu\">Gelu</option>\n                                                                            <option value=\"hard_sigmoid\">Hard Sigmoid</option>\n                                                                            <option value=\"linear\">Linear</option>\n                                                                            <option value=\"relu\">Relu</option>\n                                                                    </select>\n                                                                :\n                                                                    <p>None</p>\n                                                                }\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"create-model-configuration\">\n                                                        <div className=\"create-model-configuration-option\">\n                                                            <div>\n                                                                <label>Epochs</label>\n                                                                <input value={configuration.epochs}\n                                                                        disabled={!(workspace.self || type === \"create\")} \n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                epochs: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Training Split</label>\n                                                                <input value={configuration.training_split} \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                training_split: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Validation Split</label>\n                                                                <input value={configuration.validation_split} \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                validation_split: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Test Split</label>\n                                                                <input value={configuration.test_split} \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                test_split: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Minimum Improvement</label>\n                                                                <input value={configuration.improvement} \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                improvement: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Patience</label>\n                                                                <input value={configuration.patience} \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                patience: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Batch Size</label>\n                                                                <input value={configuration.batch} \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                batch: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Learning Rate Scheduler</label>\n                                                                <input className=\"create-model-configuration-option-checkbox\"\n                                                                        type=\"checkbox\" \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                lr_scheduler: !configuration.lr_scheduler\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }}\n                                                                        checked={configuration.lr_scheduler} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Optimiser</label>\n                                                                <select value={configuration.optimiser} \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                optimiser: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }}>\n                                                                    <option disabled defaultValue value=\"\"></option>\n                                                                    <option value=\"Adadelta\">Adadelta</option>\n                                                                    <option value=\"Adagrad\">Adagrad</option>\n                                                                    <option value=\"Adam\">Adam</option>\n                                                                    <option value=\"Adamax\">Adamax</option>\n                                                                    <option value=\"Ftrl\">Ftrl</option>\n                                                                    <option value=\"Nadam\">Nadam</option>\n                                                                    <option value=\"RMSprop\">RMSprop</option>\n                                                                    <option value=\"SGD\">SGD</option>\n                                                                </select>\n                                                            </div>\n                                                            <div>\n                                                                <label>Loss</label>\n                                                                <select value={configuration.loss} \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                loss: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }}>\n                                                                    <option disabled defaultValue value=\"\"></option>\n                                                                    {uploadedDataset.labels.length === 2 &&\n                                                                        <>\n                                                                            <option value=\"binary_crossentropy\">Binary Crossentropy</option>\n                                                                            <option value=\"hinge\">Hinge</option>\n                                                                            <option value=\"squared_hinge\">Squared Hinge</option>\n                                                                        </>\n                                                                    }\n                                                                    {uploadedDataset.labels.length > 2 &&\n                                                                        <>\n                                                                            <option value=\"categorical_crossentropy\">Categorical Crossentropy</option>\n                                                                            <option value=\"sparse_categorical_crossentropy\">Sparse Categorical Crossentropy</option>\n                                                                            <option value=\"kl_divergence\">Kullback Leibler Divergence</option>\n                                                                        </>\n                                                                    }\n                                                                </select>\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        :\n                                            <p className=\"end-items\">Select a dataset...</p>\n                                        }\n                                    </>\n                                : (stage === \"evaluation\") ?\n                                    <></>\n                                : \n                                    <></>\n                                }\n                            </div>\n                            {uploadedDataset && \n                                <>\n                                    {noData ?\n                                        <p className=\"end-items\">Cannot find dataset</p>\n                                    :\n                                        <div className=\"create-workspace-data\">\n                                            <p className=\"create-workspace-data-header\">Selected Dataset:</p>\n                                            <p className=\"create-workspace-data-header-dataset\">{uploadedDataset.title}</p>\n                                            <div className=\"sidebar-divided\" />\n                                            <div className=\"create-workspace-data-images-list\" key={refreshData}>\n                                                {images.map((image, i) => {\n                                                    if (i >= start && i < end) {\n                                                        return (\n                                                            <div className=\"create-workspace-data-image\" key={i}>\n                                                                <img src={`http://127.0.0.1:5000/files/${uploadedDataset.imageFile}/${image}.jpg`} />\n                                                                <p>{assignedLabels[i]}</p>\n                                                            </div>\n                                                        )\n                                                    }\n                                                })}\n                                            </div>\n                                            <div className=\"sidebar-divided\" />\n                                            <div className=\"create-workspace-pagination\">\n                                                <ArrowBackIosNewIcon className=\"create-workspace-pagination-icon\" onClick={() => {previousPage()}} />\n                                                <p>Page {page} / {Math.ceil(images.length/20)}</p>\n                                                <ArrowForwardIosIcon className=\"create-workspace-pagination-icon\" onClick={() => {nextPage()}} />\n                                            </div>\n                                        </div>\n                                    }   \n                                </>\n                            }\n                        </div>\n                    </div>\n                </div>\n            : loaded && !exist &&\n                <div className=\"inner\">  \n                    <p className=\"item-exist\">Cannot find workspace</p>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default Workspace","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Search.jsx",["140","141","142","143"],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Header-Open-Item.jsx",["144","145","146","147"],"import React, {useState, useContext} from 'react'\nimport { useLocation, Link, useHistory } from 'react-router-dom'\nimport CloseIcon from '@mui/icons-material/Close';\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\n\nconst HeaderOpenItems = ({item}) => {\n    const [mouseOver, setMouseOver] = useState(false)\n    const history = useHistory();\n    const location = useLocation();\n    const {removeOpenItems} = useContext(OpenItemsContext);\n\n    const checkCurrent = () => {\n        if (location.pathname.substring(11) === item.id || location.pathname.substring(9) === item.id) return true\n\n        return false\n    }\n\n    const closeItem = () => {\n        removeOpenItems(item.id)\n        \n        if (checkCurrent()) {\n            history.replace(\"/home\")\n        }\n    }\n\n    return (\n        <div className={`item-header ${checkCurrent() && \"item-header-selected\"}`}\n                onMouseEnter={() => {setMouseOver(true)}}\n                onMouseLeave={() => {setMouseOver(false)}}>\n            {item.type === \"workspace\" ? \n                <>\n                    {(checkCurrent() || mouseOver) ? \n                        <img src=\"http://localhost:3000/workspace.png\" /> \n                    : \n                        <img src=\"http://localhost:3000/workspace-grey.png\" />\n                    } \n                </>\n            : \n                <>  \n                    {(checkCurrent() || mouseOver) ? \n                        <img src=\"http://localhost:3000/dataset.png\" /> \n                    :\n                        <img src=\"http://localhost:3000/dataset-grey.png\" />\n                    }\n                </>\n            }\n            <Link to={item.type === \"workspace\" ? `/workspace/${item.id}` : `/dataset/${item.id}`} className=\"item-header-link\">\n                <p className={`item-header-title ${(checkCurrent() || mouseOver) && \"item-header-title-selected\"}`}>{item.title}</p>\n            </Link>\n            <CloseIcon className=\"item-header-close\" onClick={() => {closeItem()}} />\n        </div>\n    )\n}\n\nexport default HeaderOpenItems","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Contexts/openItemsContext.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Item-Row-Card.jsx",["148","149","150","151"],"import React, {useState, useEffect, useContext} from 'react'\nimport { Link } from 'react-router-dom'\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport globalAPI from '../API/global'\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\n\nconst WorkspaceRowCard = ({item, created, creator, currentUserID}) => {\n    const [bookmarked, setBookmarked] = useState(item.bookmarked)\n    const [upvoted, setUpvoted] = useState(item.upvoted)\n    const [upvotes, setUpvotes] = useState(item.upvotes)\n    const [visibility, setVisibility] = useState(item.visibility)\n    const {addOpenItems} = useContext(OpenItemsContext);\n    const [date, setDate] = useState(\"\");\n\n    useEffect(() => {\n        const updatedDate = new Date(item.updated);\n        const currentDate = new Date();\n\n        if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} years ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} days ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hours ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minutes ago`)\n        } else {\n            setDate(\"Updated just now\")\n        }\n    }, [])\n\n    const addHeader = () => {\n        if (item.creator === currentUserID) {\n            addOpenItems(item._id, item.title, item.type)\n        }\n    }\n\n    const updateUpvote = async () => {\n        try {\n            await globalAPI.put(`/upvote/${item._id}?state=${upvoted}`);\n\n            if (upvoted) {\n                setUpvotes(state => state-1)\n            } else {\n                setUpvotes(state => state+1)\n            }\n\n            setUpvoted(state => !state)\n        } catch (err) {}\n    }\n\n    const updateBookmark = async () => {\n        try {\n            await globalAPI.put(`/bookmark/${item._id}?state=${bookmarked}`);\n            \n            setBookmarked(state => !state)\n        } catch (err) {}\n    }\n\n    const updateVisibility = async () => {\n        try {\n            await globalAPI.put(`/visibility/${item._id}`);\n\n            setVisibility(state => !state)\n        } catch (err) {}\n    }\n\n    return (\n        <div className=\"item-row-card\" onClick={() => {addHeader()}}>\n            <Link to={item.type === \"workspace\" ? `/workspace/${item._id}` : `/dataset/${item._id}`}>\n                <img src={`http://localhost:4000/images/${item.picture}`} className=\"item-row-card-picture\" />\n            </Link>\n            <div className=\"item-row-card-information\">\n                <div className=\"item-row-card-heading\">\n                    {item.type === \"workspace\" ? <img src=\"http://localhost:3000/workspace.png\" /> : <img src=\"http://localhost:3000/dataset.png\" />}\n                    <Link to={item.type === \"workspace\" ? `/workspace/${item._id}` : `/dataset/${item._id}`} className=\"item-row-card-title\">{item.title}</Link>\n                </div>\n                <div>\n                    {!created && <p className=\"item-row-card-meta\">{creator}</p>}\n                    <p className=\"item-row-card-meta\">{date}</p>\n                </div>\n            </div>\n            <div>\n                {!created && item.creator !== currentUserID && <BookmarkIcon className={`item-row-card-icon ${bookmarked ? \"blue2\" : \"white\"}`} onClick={() => {updateBookmark()}} />}\n                <ThumbUpIcon className={`item-row-card-icon ${upvoted ? \"blue2\" : \"white\"}`} onClick={() => {updateUpvote()}} />\n                <p className={`item-row-card-upvotes ${upvoted ? \"blue2\" : \"white\"}`}>{upvotes}</p>\n                {created && \n                    <>\n                        {visibility ? \n                            <VisibilityIcon className=\"item-row-card-visibility\" onClick={() => {updateVisibility()}} />\n                        :\n                            <VisibilityOffIcon className=\"item-row-card-visibility\" onClick={() => {updateVisibility()}} />\n                        }\n                    </>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default WorkspaceRowCard","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Item-Square-Card.jsx",["152","153","154","155"],"import React, {useState, useEffect, useContext} from 'react'\nimport { Link } from 'react-router-dom'\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport globalAPI from '../API/global'\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\n\nconst WorkspaceSquareCard = ({item, created, creator, currentUserID}) => {\n    const [bookmarked, setBookmarked] = useState(item.bookmarked)\n    const [upvoted, setUpvoted] = useState(item.upvoted)\n    const [upvotes, setUpvotes] = useState(item.upvotes)\n    const [visibility, setVisibility] = useState(item.visibility)\n    const {addOpenItems} = useContext(OpenItemsContext);\n    const [date, setDate] = useState(\"\");\n\n    useEffect(() => {\n        const updatedDate = new Date(item.updated);\n        const currentDate = new Date();\n\n        if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} years ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} days ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hours ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minutes ago`)\n        } else {\n            setDate(\"Updated just now\")\n        }\n    }, [])\n\n    const addHeader = () => {\n        if (item.creator === currentUserID) {\n            addOpenItems(item._id, item.title, item.type)\n        }\n    }\n\n    const updateUpvote = async () => {\n        try {\n            await globalAPI.put(`/upvote/${item._id}?state=${upvoted}`);\n\n            if (upvoted) {\n                setUpvotes(state => state-1)\n            } else {\n                setUpvotes(state => state+1)\n            }\n\n            setUpvoted(state => !state)\n        } catch (err) {}\n    }\n\n    const updateBookmark = async () => {\n        try {\n            await globalAPI.put(`/bookmark/${item._id}?state=${bookmarked}`);\n            \n            setBookmarked(state => !state)\n        } catch (err) {}\n    }\n\n    const updateVisibility = async () => {\n        try {\n            await globalAPI.put(`/visibility/${item._id}`);\n\n            setVisibility(state => !state)\n        } catch (err) {}\n    }\n\n    return (\n        <div className=\"item-square-card\" onClick={() => {addHeader()}}>\n            <Link to={item.type === \"workspace\" ? `/workspace/${item._id}` : `/dataset/${item._id}`}>\n                <img src={`http://localhost:4000/images/${item.picture}`} className=\"item-square-card-picture\" />\n            </Link>\n            <div className=\"item-square-card-heading\">\n                {item.type === \"workspace\" ? <img src=\"http://localhost:3000/workspace.png\" /> : <img src=\"http://localhost:3000/dataset.png\" />}\n                <Link to={item.type === \"workspace\" ? `/workspace/${item._id}` : `/dataset/${item._id}`} className=\"item-square-card-title\">{item.title}</Link>\n            </div>\n            <div>\n                <p className=\"item-square-card-meta\">{created ? \"You\" : creator}</p>\n                <p className=\"item-square-card-meta\">{date}</p>\n            </div>\n            <div className=\"item-square-card-bottom\">\n                {!created ?\n                    <>\n                        {item.creator !== currentUserID && <BookmarkIcon className={`item-square-card-icon ${bookmarked ? \"blue2\" : \"white\"}`} onClick={() => {updateBookmark()}} />}\n                        <ThumbUpIcon className={`item-square-card-icon ${upvoted ? \"blue2\" : \"white\"}`} onClick={() => {updateUpvote()}} />\n                        <p className={`item-square-card-upvotes ${upvoted ? \"blue2\" : \"white\"}`}>{upvotes}</p>\n                    </>\n                    :\n                    <>\n                        <ThumbUpIcon className={`item-square-card-icon ${upvoted ? \"blue2\" : \"white\"}`} onClick={() => {updateUpvote()}} />\n                        <p className={`item-square-card-upvotes ${upvoted ? \"blue2\" : \"white\"}`}>{upvotes}</p>\n                        {created && \n                            <>\n                                {visibility ? \n                                    <VisibilityIcon className=\"item-square-card-visibility\" onClick={() => {updateVisibility()}} />\n                                :\n                                    <VisibilityOffIcon className=\"item-square-card-visibility\" onClick={() => {updateVisibility()}} />\n                                }\n                            </>\n                        }\n                    </>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default WorkspaceSquareCard","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/View-Items.jsx",["156","157","158","159","160","161","162","163","164","165","166","167","168"],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/global.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Dataset.jsx",["169","170","171","172","173","174","175","176","177","178","179","180","181","182","183"],"import React, {useState, useEffect, useRef, useContext} from 'react'\nimport {useHistory, useParams, Link} from \"react-router-dom\"\nimport usersAPI from '../API/users'\nimport itemsAPI from '../API/items'\nimport globalAPI from '../API/global'\nimport imageAPI from '../API/images'\nimport fileAPI from '../API/files'\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport CloseIcon from '@mui/icons-material/Close';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport Shortcut from '../Components/Shortcut'\n\nconst Dataset = ({currentUser, type}) => {\n    const [title, setTitle] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [visibility, setVisibility] = useState(false);\n    const [rgb, setRgb] = useState(false)\n    const [bookmarked, setBookmarked] = useState()\n    const [upvoted, setUpvoted] = useState()\n    const [upvotes, setUpvotes] = useState()\n    const [updated, setUpdated] = useState()\n    const [picture, setPicture] = useState()\n    const [date, setDate] = useState(\"\")\n    const [start, setStart] = useState(0)\n    const [end, setEnd] = useState(30)\n    const [page, setPage] = useState(1)\n    const [image, setImage] = useState();\n    const [dataset, setDataset] = useState([]);\n    const [labels, setLabels] = useState([])\n    const [appendedLabels, setAppendedLabels] = useState([])\n    const [copyData, setCopyData] = useState(true)\n    const [changedSettings, setChangedSettings] = useState(false)\n    const [changedData, setChangedData] = useState(false)\n    const [uploadedImages, setUploadedImages] = useState([])\n    const [appendedImages, setAppendedImages] = useState([])\n    const [imageFiles, setImageFiles] = useState([])\n    const [assignedLabels, setAssignedLabels] = useState([])\n    const [refreshData, setRefreshData] = useState()\n    const [refreshLabels, setRefreshLabels] = useState()\n    const [loaded, setLoaded] = useState(false);\n    const [exist, setExist] = useState()\n    const [addLabel, setAddLabel] = useState(\"\")\n    const [disableCreate, setDisabledCreate] = useState(false)\n    const {addOpenItems, removeOpenItems} = useContext(OpenItemsContext);\n    const colours = [\"label-blue1\", \"label-red\", \"label-green1\", \"label-orange1\", \"label-pink\", \n        \"label-orange2\", \"label-blue2\", \"label-yellow1\", \"label-green2\", \"label-yellow2\"]\n    const datasetID = useParams().id;\n    const copyInterval = useRef(0)\n    const history = useHistory();\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                if (type === \"create\") {\n                    const dataset = await usersAPI.get(\"/created?type=dataset\");\n    \n                    dataset.data.data.map((dataset) => {\n                        setDataset(previous => [...previous, dataset.title]);\n                    })\n\n                    setExist(true)\n                    setLoaded(true)\n                } else {\n                    const dataset = await itemsAPI.get(`/${datasetID}?type=dataset`);\n\n                    if (dataset.data.data.self) {\n                        addOpenItems(dataset.data.data._id, dataset.data.data.title, dataset.data.data.type)\n                    }\n\n                    setDataset(dataset.data.data);\n                    setUpdated(dataset.data.data.updated);\n                    setBookmarked(dataset.data.data.bookmarked)\n                    setUpvoted(dataset.data.data.upvoted)\n                    setPicture(dataset.data.data.picture)\n                    setUpvotes(dataset.data.data.upvotes)\n                    setVisibility(dataset.data.data.visibility)\n                    setTitle(dataset.data.data.title)\n                    setDescription(dataset.data.data.description)\n                    setLabels(dataset.data.data.labels)\n                    setRgb(dataset.data.data.rgb)\n\n                    fetch(`http://127.0.0.1:5000/files/${dataset.data.data.imageFile}/labels.json`)\n                        .then(response => response.json())\n                        .then(images => {\n                            images.map(image => {\n                                setUploadedImages(state => [...state, image.filename])\n                                setAssignedLabels(state => [...state, image.label])\n                            })\n                            setExist(true)\n                            setLoaded(true)\n                        }).catch(() => {\n                            setExist(true)\n                            setLoaded(true)\n                        });\n                }\n            } catch (err) {\n              setExist(false)\n              setLoaded(true)\n            }\n        }\n        fetchData();\n    }, [])\n\n    useEffect(() => {\n        if (loaded && exist) {\n            const updatedDate = new Date(updated);\n            const currentDate = new Date();\n    \n            if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} years ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} days ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hours ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minutes ago`)\n            } else {\n                setDate(\"Updated just now\")\n            }\n        }\n    }, [loaded, updated])\n\n    const copiedInterval = () => {\n        clearInterval(copyInterval.current)\n        navigator.clipboard.writeText(dataset.datafile);\n        setCopyData(false);\n        copyInterval.current = setInterval(() => {\n            setCopyData(true);\n        }, 800)\n        return ()=> {clearInterval(copyInterval.current)};\n    }\n\n    const addFunctionKey = (e) => {\n        if (e.key === \"Enter\" && addLabel !== \"\") {\n            setLabels(state => [...state, addLabel])\n            setChangedSettings(true)\n            setAddLabel(\"\")\n        }\n    }\n\n    const updateUpvote = async () => {\n        try {\n            await globalAPI.put(`/upvote/${datasetID}?state=${upvoted}`);\n\n            if (upvoted) {\n                setUpvotes(state => state-1)\n            } else {\n                setUpvotes(state => state+1)\n            }\n\n            setUpvoted(state => !state)\n        } catch (err) {}\n    }\n\n    const updateBookmark = async () => {\n        try {\n            await globalAPI.put(`/bookmark/${datasetID}?state=${bookmarked}`);\n            \n            setBookmarked(state => !state)\n        } catch (err) {}\n    }\n\n    const updateVisibility = async () => {\n        try {\n            await globalAPI.put(`/visibility/${datasetID}`);\n\n            setVisibility(state => !state)\n        } catch (err) {}\n    }\n\n    const previousPage = () => {\n        if (page > 1) {\n            setStart((page-2)*30)\n            setEnd((page-1)*30)\n            setPage(state => state-1)\n            setRefreshData(new Date().getTime())\n        }\n    }\n\n    const fetchImages = () => {\n        try {\n            fetch(`http://127.0.0.1:5000/files/${dataset.imageFile}/labels.json`)\n            .then(response => response.json())\n            .then(images => {\n                images.map(image => {\n                    setUploadedImages(state => [...state, image.filename])\n                    setAssignedLabels(state => [...state, image.label])\n                })\n            }).catch();\n        } catch (err) {}\n    }\n    \n    const nextPage = () => {\n        if (page*30 < uploadedImages.length && uploadedImages.length > 30) {\n            setPage(state => state+1)\n            setStart((page)*30)\n            setEnd((page+1)*30)\n            setRefreshData(new Date().getTime())\n        }\n    }\n\n    const deleteImage = async (filename, index) => {\n        uploadedImages.splice(index, 1)\n        assignedLabels.splice(index, 1)\n\n        if (type === \"view\") {\n            const formData = new FormData();\n\n            formData.append('id', dataset.imageFile)\n            formData.append('index', index)\n            formData.append('filename', filename)\n\n            try {\n                updateDataset()\n\n                await fileAPI.post(\"/delete\", formData);\n            } catch (err) {}\n        }\n\n        setRefreshData(new Date().getTime())\n    }\n\n    const addImages = async () => {\n        for (let i = 0; i < imageFiles.length; i++) {\n            setUploadedImages(state => [...state, imageFiles[i]])\n        }\n\n        setAssignedLabels(Array(imageFiles).fill(\"No label\"))\n        setPage(1)\n        setRefreshData(new Date().getTime())\n        setImageFiles([])\n    }\n\n    const replaceImages = async () => {\n        if (type === \"create\") {\n            for (let i = 0; i < imageFiles.length; i++) {\n                setUploadedImages(state => [...state, imageFiles[i]])\n            }\n        } else {\n            const formData = new FormData();\n\n            formData.append('id', dataset.imageFile)\n\n            for (let i = 0; i < imageFiles.length; i++) {\n                formData.append('data[]', imageFiles[i]);\n                formData.append('labels[]', assignedLabels[i]);\n            }\n\n            try {\n                updateDataset()\n\n                await fileAPI.post(\"/replace\", formData);\n\n                for (let i = 0; i < imageFiles.length; i++) {\n                    setUploadedImages(state => [...state, i])\n                }\n            } catch (err) {}\n        }\n        setAssignedLabels(Array(imageFiles).fill(\"No label\"))\n        setPage(1)\n        setRefreshData(new Date().getTime())\n        setImageFiles([])\n    }\n    \n    const appendImages = () => {\n        for (let i = 0; i < imageFiles.length; i++) {\n            setAppendedImages(state => [...state, imageFiles[i]])\n        }\n\n        setAppendedLabels(Array(imageFiles).fill(\"No label\"))\n        setImageFiles([])\n    }\n\n    const deleteAppended = (index) => {\n        appendedImages.splice(index, 1)\n        appendedLabels.splice(index, 1)\n    }\n\n    const uploadAppended = async () => {\n        if (type === \"create\") {\n            for (let i = 0; i < appendedImages.length; i++) {\n                setUploadedImages(state => [...state, appendedImages[i]])\n            }\n\n            setAssignedLabels(state => [...state, ...appendedLabels])\n        } else {\n            let filenames = []\n\n            const formData = new FormData();\n\n            formData.append('id', dataset.imageFile)\n            formData.append('last', uploadedImages.length-1)\n\n            for (let i = 0; i < appendedImages.length; i++) {\n                formData.append('data[]', appendedImages[i]);\n                formData.append('labels[]', appendedLabels[i]);\n                formData.append('filenames[]', parseInt(uploadedImages[uploadedImages.length-1])+i+1);\n                filenames.push((parseInt(uploadedImages[uploadedImages.length-1])+i+1).toString())\n            }\n\n            try {\n                setUploadedImages(state => [...state, ...filenames])\n                setAssignedLabels(state => [...state, ...appendedLabels])\n                updateDataset()\n\n                await fileAPI.post(\"/append\", formData)\n\n            } catch (err) {}\n        }\n\n        setAppendedImages([])\n        setAppendedLabels([])\n        setRefreshData(new Date().getTime())\n    }\n\n    const uploadImage = async () => {\n        setDisabledCreate(true)\n\n        if (uploadedImages.length !== 0 && !assignedLabels.includes(\"No label\") && title !== \"\" && description !== \"\") {\n            const formData = new FormData();\n            const id = new Date().toISOString();\n\n            formData.append('id', id)\n\n            for (let i = 0; i < uploadedImages.length; i++) {\n                formData.append('data[]', uploadedImages[i]);\n                formData.append('labels[]', assignedLabels[i]);\n            }\n\n            try {\n                await fileAPI.post(\"/upload\", formData);\n            } catch (err) {}\n\n            if (image) {\n                const formImage = new FormData();\n                formImage.append('image', image);\n                \n                try {\n                    const imageResponse = await imageAPI.post(\"/upload\", formImage);\n    \n                    uploadDataset(imageResponse.data.data, id)\n                } catch (err) {}\n            } else {\n                uploadDataset(\"default.png\", id)\n            }\n        } else {\n            setDisabledCreate(false)\n        }\n    }\n\n    const uploadDataset = async (imageName, id) => {\n        try {\n            const datasetResponse = await itemsAPI.post(\"/\", {\n                title: title,\n                imageFile: id,\n                creator: currentUser.id,\n                description: description,\n                picture: imageName,\n                upvotes: [],\n                bookmarks: [],\n                labels: labels,\n                rgb: rgb,\n                updated: new Date().toISOString(),\n                visibility: visibility,\n                type: \"dataset\"\n            });\n\n            history.push(`/dataset/${datasetResponse.data.data}`)\n        } catch (err) {}\n    }\n\n    const updateDataset = async () => {\n        if (image) {\n            try {\n                const formImage = new FormData();\n                formImage.append('image', image);\n    \n                const tempPicture = picture\n                const imageResponse = await imageAPI.post(\"/upload\", formImage);\n\n                await itemsAPI.put(`/${datasetID}?type=dataset`, {\n                    title: title,\n                    description: description,\n                    picture: imageResponse.data.data,\n                    labels: labels,\n                    rgb: rgb,\n                    updated: new Date().toISOString()\n                })\n\n                setImage(undefined)\n                setPicture(imageResponse.data.data)\n    \n                if (tempPicture !== \"default.png\") {\n                    await imageAPI.put('/remove', {picture: tempPicture});\n                }\n            } catch (err) {}\n        } else {\n            try {\n                await itemsAPI.put(`/${datasetID}?type=dataset`, {\n                    title: title,\n                    description: description,\n                    picture: picture,\n                    labels: labels,\n                    rgb: rgb,\n                    updated: new Date().toISOString()\n                })\n            } catch (err) {}\n        }\n\n        setUpdated(new Date().toISOString())\n        setChangedData(false)\n        setChangedSettings(false)\n    }\n\n    const deleteDataset = async () => {\n        try {\n            const formData = new formData()\n\n            formData.append('id', dataset.imageFile)\n\n            await itemsAPI.delete(`/${datasetID}`)\n            await fileAPI.post(\"/remove\", formData);\n\n            removeOpenItems(datasetID)\n            history.replace(\"/home\")\n        } catch (err) {}\n    }\n\n    return (\n        <>\n            {loaded && exist ?\n                <div className=\"main-body\">\n                    <div className=\"sidebar\">\n                        <div className=\"sidebar-header\">\n                            <img src=\"http://localhost:3000/dataset.png\"\n                                    className={!(type === \"view\" && !dataset.self) ? \"create-item-edit-image\" : undefined} />\n                            <input className={`create-item-title ${!(type === \"view\" && !dataset.self) && \"create-item-edit-input\"}`}\n                                    placeholder=\"Title\"\n                                    onChange={e => {\n                                        setTitle(e.target.value)\n                                        setChangedSettings(true)\n                                    }}\n                                    disabled={!(dataset.self || type === \"create\")}\n                                    value={title} />\n                        </div>\n                        <textarea className={`create-item-description ${!(type === \"view\" && !dataset.self) && \"create-item-edit-textarea\"}`}\n                                    placeholder=\"Description\"\n                                    onChange={e => {\n                                        setDescription(e.target.value)\n                                        setChangedSettings(true)\n                                    }}\n                                    disabled={!(dataset.self || type === \"create\")}\n                                    value={description} />\n                        {(dataset.self || type === \"create\") &&\n                            <>\n                                <div className=\"create-item-setup\">\n                                    <label className=\"create-item-setup-label\">Picture</label>\n                                    <input className=\"create-item-setup-input\"\n                                            type=\"file\" \n                                            name=\"image\" \n                                            onChange={e => {\n                                                setImage(e.target.files[0])\n                                                setChangedSettings(true)\n                                            }} />\n                                </div>\n                                {type === \"create\" &&\n                                    <div className=\"create-item-setup\">\n                                        <label className=\"create-item-setup-label\">Public?</label>\n                                        <input type=\"checkbox\" \n                                                onChange={() => {\n                                                    setVisibility(previous => !previous)\n                                                    setChangedSettings(true)\n                                                }}\n                                                checked={visibility} />\n                                    </div>\n                                }\n                                <div className=\"create-item-setup\">\n                                    <label className=\"create-item-setup-label\">RGB Images?</label>\n                                    <input type=\"checkbox\" \n                                            onChange={() => {\n                                                setRgb(previous => !previous)\n                                                setChangedSettings(true)\n                                            }}\n                                            checked={rgb} />\n                                </div>\n                            </>\n                        }\n                        {!dataset.self && type !== \"create\" && <p className=\"item-creator\">{dataset.creatorName.name}</p>}\n                        <div className=\"item-information\">\n                            {type !== \"create\" && <p className=\"item-date\">{date}</p>}\n                            <span />\n                            {!dataset.self && type !== \"create\" && <BookmarkIcon className={`item-icon ${bookmarked ? \"blue2\" : \"white\"}`} onClick={() => {updateBookmark()}} />}\n                            {dataset.self && type !== \"create\" && \n                                <>\n                                    {visibility ? \n                                        <VisibilityIcon className=\"item-visibility\" onClick={() => {updateVisibility()}} />\n                                    :\n                                        <VisibilityOffIcon className=\"item-visibility\" onClick={() => {updateVisibility()}} />\n                                    }\n                                </>\n                            }\n                            {type !== \"create\" &&\n                                <>\n                                    <ThumbUpIcon className={`item-icon ${upvoted ? \"blue2\" : \"white\"}`} onClick={() => {updateUpvote()}} />\n                                    <p className={upvoted ? \"blue2\" : \"white\"}>{upvotes}</p>\n                                </>\n                            }\n                        </div>\n                        {type === \"view\" && !dataset.self &&\n                            <>\n                                <div className=\"sidebar-divided\" />\n                                <div className=\"sidebar-dataset-copy\">\n                                    <div>\n                                        {copyData ? <p>Data ID</p> : <p>Copied</p>}\n                                        <button disabled={!copyData} onClick={() => {copiedInterval()}}>\n                                            <ContentCopyIcon className=\"dataset-copy-icon\" />\n                                        </button>\n                                    </div>\n                                    <a href={`http://127.0.0.1:5000/files/${dataset.imageFile}`} download>\n                                        <DownloadIcon className=\"dataset-download-icon\" />\n                                    </a>\n                                </div>\n                            </>\n                        }\n                        {type === \"view\" && !dataset.self &&\n                            <>\n                                <div className=\"sidebar-divided\" />\n                                <Shortcut type={\"related\"} datasetID={datasetID} />\n                            </>\n                        }\n                        {type === \"view\" &&\n                            <>\n                                {dataset.self &&\n                                    <>\n                                        <div className=\"sidebar-divided\" />\n                                        <button className=\"blue-button item-save\"\n                                                disabled={!changedSettings && !changedData}\n                                                onClick={() => {updateDataset()}}>Save Changes</button>\n                                        <button className=\"text-button item-delete\"\n                                                onClick={() => {deleteDataset()}}>Delete</button>\n                                    </>\n                                }\n                            </>\n                        }\n                    </div>\n                    <div className=\"inner\">\n                        <div className=\"workspace-body\">\n                            <div className=\"workspace-inner\">\n                                {(type === \"create\" || dataset.self) ?\n                                    <>\n                                        <div className=\"view-items-top\">\n                                            {type === \"create\" ?\n                                                <>\n                                                    <h1>Create Dataset</h1>\n                                                    <button className=\"blue-button\"\n                                                            disabled={disableCreate}\n                                                            onClick={() => {uploadImage()}}>Create</button>\n                                                </>\n                                            :\n                                                <p>Dataset</p>\n                                            }\n                                        </div>\n                                        <div className=\"create-dataset-upload\">\n                                            <input type=\"file\" \n                                                    name=\"data\"\n                                                    accept=\"image/*\"\n                                                    multiple\n                                                    onChange={e => {setImageFiles(e.target.files)}} />\n                                            {type === \"create\" && uploadedImages.length === 0 && \n                                                <button className=\"white-button\"\n                                                        disabled={imageFiles.length === 0}\n                                                        onClick={() => {\n                                                            addImages()\n                                                            setChangedData(true)\n                                                        }}>Add</button>\n                                            }\n                                            {(dataset.self || type === \"create\") && uploadedImages.length !== 0 && \n                                                <>\n                                                    <button className=\"white-button\"\n                                                            disabled={imageFiles.length === 0}\n                                                            onClick={() => {\n                                                                setUploadedImages([])\n                                                                replaceImages()\n                                                                setChangedData(true)\n                                                            }}>Replace</button>\n                                                    <button className=\"white-button\"\n                                                            disabled={imageFiles.length === 0}\n                                                            onClick={() => {\n                                                                if (appendedImages.length !== 0) {\n                                                                    setAppendedImages([])\n                                                                    setAppendedLabels([])\n                                                                }\n                                                                appendImages()\n                                                                setChangedData(true)\n                                                            }}>Add</button>\n                                                </>\n                                            }\n                                            {uploadedImages.length !== 0 &&\n                                                <div className=\"create-dataset-pagination\">\n                                                    <ArrowBackIosNewIcon className=\"create-dataset-pagination-icon\" onClick={() => {previousPage()}} />\n                                                    <p>Page {page} / {Math.ceil(uploadedImages.length/30)}</p>\n                                                    <ArrowForwardIosIcon className=\"create-dataset-pagination-icon\" onClick={() => {nextPage()}} />\n                                                </div>\n                                            }\n                                        </div>\n                                        {(type === \"create\" || dataset.self) && appendedImages.length !== 0 && \n                                            <div className=\"create-dataset-appended\">\n                                                <div className=\"create-dataset-appended-header\">\n                                                    <p>Uploaded Images</p>\n                                                    <button className=\"text-button\"\n                                                            onClick={() => {\n                                                        setAppendedImages([])\n                                                        setAppendedLabels([])\n                                                    }}>Discard</button>\n                                                </div>\n                                                <div className=\"create-dataset-appended-list\">\n                                                    {appendedImages.map((image, i) => {\n                                                        return (\n                                                            <div className=\"create-dataset-image\" key={i}>\n                                                                <img src={URL.createObjectURL(image)} />\n                                                                <div>\n                                                                    <select value={appendedLabels[i]}\n                                                                            onChange={e => {setAppendedLabels(state => {\n                                                                                        const stateCopy = [...state]\n                                                                                    \n                                                                                        stateCopy[i] = e.target.value\n                                                                                    \n                                                                                        return stateCopy\n                                                                                    })}}>\n                                                                        <option value=\"No label\">No label</option>\n                                                                        {labels.map((label, j) => \n                                                                            <option value={label} key={j}>{label}</option>\n                                                                        )}\n                                                                    </select>\n                                                                    <div onClick={() => {deleteAppended(i)}}>\n                                                                        <DeleteIcon className=\"create-dataset-image-delete\" />\n                                                                    </div>\n                                                                </div>\n                                                            </div>\n                                                        )\n                                                    })}\n                                                </div>\n                                                <div className=\"create-dataset-appended-footer\">\n                                                    <button className=\"blue-button\" \n                                                            disabled={appendedLabels.includes(\"No label\")}\n                                                            onClick={() => {uploadAppended()}}>Upload</button>\n                                                </div>\n                                            </div>\n                                        }\n                                        <div className=\"create-dataset-images-list\" key={refreshData}>\n                                            {uploadedImages.map((image, i) => {\n                                                if (i >= start && i < end) {\n                                                    return (\n                                                        <div className=\"create-dataset-image\" key={i}>\n                                                            <img src={type === \"create\" ? URL.createObjectURL(image) : `http://127.0.0.1:5000/files/${dataset.imageFile}/${image}.jpg`} />\n                                                            <div>\n                                                                <select value={assignedLabels[i]}\n                                                                        onChange={e => {setAssignedLabels(state => {\n                                                                                    const stateCopy = [...state]\n                                                                                \n                                                                                    stateCopy[i] = e.target.value\n                                                                                \n                                                                                    return stateCopy\n                                                                                })\n                                                                                setChangedData(true)\n                                                                                setRefreshLabels(new Date().getTime())}}>\n                                                                    <option value=\"No label\">No label</option>\n                                                                    {labels.map((label, j) => \n                                                                        <option value={label} key={j}>{label}</option>\n                                                                    )}\n                                                                </select>\n                                                                <div onClick={() => {deleteImage(image, i)}}>\n                                                                    <DeleteIcon className=\"create-dataset-image-delete\" />\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                    )\n                                                }\n                                            })}\n                                        </div>\n                                    </>\n                                :   \n                                    <>\n                                        <div className=\"view-items-top\">\n                                            <p>Dataset</p>\n                                        </div>\n                                        <div className=\"create-dataset-images-list\" key={refreshData}>\n                                            {uploadedImages.map((image, i) => {\n                                                if (i >= start && i < end) {\n                                                    return (\n                                                        <div className=\"create-dataset-image\" key={i}>\n                                                            <img src={`http://127.0.0.1:5000/files/${dataset.imageFile}/${image}.jpg`} />\n                                                            <div>\n                                                                <p>{assignedLabels[i]}</p>\n                                                            </div>\n                                                        </div>\n                                                    )\n                                                }\n                                            })}\n                                        </div>\n                                    </>\n                                }\n                            </div>\n                            <div className=\"create-workspace-data\">\n                                <p className=\"create-workspace-data-header\">Labels:</p>\n                                <div className=\"sidebar-divided\" />\n                                {(type === \"create\" || dataset.self) &&\n                                    <input className=\"create-dataset-label-input\"\n                                            placeholder=\"Add Label\"\n                                            onChange={e => {setAddLabel(e.target.value)}}\n                                            onKeyPress={addFunctionKey}\n                                            value={addLabel} />\n                                }\n                                <div className=\"create-dataset-labels-list\" key={refreshLabels}>\n                                    {labels.map((label, i) => {\n                                        return (\n                                            <div className={`create-dataset-label ${colours[i % colours.length]}`} key={i}>\n                                                <p>{label}</p>\n                                                {(type === \"create\" || dataset.self) &&\n                                                    <div onClick={() => {\n                                                        assignedLabels.map((assignedLabel, j) => {\n                                                            if (assignedLabel === labels[i]) {\n                                                                setAssignedLabels(state => {\n                                                                    const stateCopy = [...state]\n                                                                \n                                                                    stateCopy[j] = \"No label\"\n                                                                \n                                                                    return stateCopy\n                                                                })\n                                                            }\n                                                        })\n                                                        labels.splice(i, 1)\n                                                        setRefreshLabels(new Date().getTime())\n                                                    }}>\n                                                        <CloseIcon className=\"create-dataset-label-icon\" /> \n                                                    </div>\n                                                }\n                                            </div>\n                                        )\n                                    })}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            : loaded && !exist &&\n                <div className=\"inner-body\">  \n                    <p className=\"item-exist\">Cannot find dataset</p>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default Dataset","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/items.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Model-Node.jsx",["184"],"import React from 'react'\n\nconst ModelNode = ({type, value, selected, last}) => {\n    return (\n        <div className={`model-node ${type === \"Input\" && \"model-node-input\"}`}>\n            <div className={selected ? \"model-node-selected\" : \"model-node-unselected\"}>\n                <p>{type}</p>\n            </div>\n            <p className=\"model-node-value\">{value}</p>\n            {!last &&\n                <img src=\"http://localhost:3000/Node-Connector.png\" className=\"model-node-connector\" />\n            }\n        </div>\n    )\n};\n\nexport default ModelNode;\n","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/train.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Shortcut.jsx",["185","186"],"import React, {useState, useEffect, useContext} from 'react'\nimport { Link } from 'react-router-dom';\nimport usersAPI from '../API/users'\nimport itemsAPI from '../API/items'\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport AddIcon from '@mui/icons-material/Add';\n\nconst Shortcut = ({type, currentUserID, datasetID}) => {\n    const {addOpenItems} = useContext(OpenItemsContext);\n    const [items, setItems] = useState();\n    const [loaded, setLoaded] = useState(false);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                let items;\n\n                if (type === \"workspaces\") {\n                    items = await usersAPI.get(`/created-shortcut?type=workspace`);\n                } else if (type === \"datasets\") {\n                    items = await usersAPI.get(`/created-shortcut?type=dataset`);\n                } else if (type === \"bookmarked\") {\n                    items = await usersAPI.get(`/bookmarked-shortcut`);\n                } else {\n                    items = await itemsAPI.get(`/associated-workspaces?id=${datasetID}`);\n                }\n\n                setItems(items.data.data)\n                setLoaded(true);\n            } catch (err) {}\n        }\n        fetchData();\n    }, [])\n\n    const addHeader = (item) => {\n        if (item.creator === currentUserID) {\n            addOpenItems(item._id, item.title, item.type)\n        }\n    }\n\n    return (\n        <>\n            {loaded &&\n                <div className=\"shortcut\">\n                    <div className=\"shortcut-header\">\n                        {type === \"related\" ?\n                            <p className=\"shortcut-link\">Related Workspaces</p>\n                        :\n                            <Link className=\"shortcut-link\"\n                                    to={type === \"workspaces\" ? \"/created-workspaces\" : (type === \"datasets\") ? \"/created-datasets\" : \"/bookmarked\"}>\n                                {type === \"workspaces\" ? \"Your Workspaces\" : (type === \"datasets\") ? \"Your Datasets\" : \"Your Bookmarked\"}\n                            </Link>\n                        }\n                        <span />\n                        {type === \"workspaces\" && \n                            <Link to=\"/create-workspace\">\n                                <AddIcon className=\"shortcut-icon\" />\n                            </Link>\n                        }\n                        {type === \"datasets\" && \n                            <Link to=\"/create-dataset\">\n                                <AddIcon className=\"shortcut-icon\" />\n                            </Link>\n                        }\n                    </div>\n                    <div className=\"shortcut-body\">\n                        {items.length === 0 ?\n                            <p className=\"shortcut-none\">Empty</p>\n                        :\n                            <>\n                                {items.map((item, i) => {\n                                    return (\n                                        <Link to={item.type === \"workspace\" ? `/workspace/${item._id}` : `/dataset/${item._id}`}\n                                                className=\"shortcut-item\" \n                                                onClick={() => {addHeader(item)}}\n                                                key={i}>\n                                            <img src={`http://localhost:4000/images/${item.picture}`} />\n                                            <p>{item.title}</p>\n                                        </Link>\n                                    )\n                                })}\n                            </>\n                        }\n                    </div>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default Shortcut","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Contexts/cardFormatContext.js",[],{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","replacedBy":"190"},{"ruleId":"191","severity":1,"message":"192","line":4,"column":8,"nodeType":"193","messageId":"194","endLine":4,"endColumn":15},{"ruleId":"195","severity":1,"message":"196","line":79,"column":37,"nodeType":"197","endLine":79,"endColumn":156},{"ruleId":"195","severity":1,"message":"196","line":80,"column":37,"nodeType":"197","endLine":80,"endColumn":157},{"ruleId":"187","replacedBy":"198"},{"ruleId":"189","replacedBy":"199"},{"ruleId":"191","severity":1,"message":"200","line":49,"column":12,"nodeType":"193","messageId":"194","endLine":49,"endColumn":19},{"ruleId":"191","severity":1,"message":"201","line":53,"column":12,"nodeType":"193","messageId":"194","endLine":53,"endColumn":25},{"ruleId":"202","severity":1,"message":"203","line":70,"column":57,"nodeType":"204","messageId":"205","endLine":70,"endColumn":59},{"ruleId":"202","severity":1,"message":"203","line":100,"column":46,"nodeType":"204","messageId":"205","endLine":100,"endColumn":48},{"ruleId":"206","severity":1,"message":"207","line":119,"column":8,"nodeType":"208","endLine":119,"endColumn":10,"suggestions":"209"},{"ruleId":"206","severity":1,"message":"210","line":150,"column":8,"nodeType":"208","endLine":150,"endColumn":25,"suggestions":"211"},{"ruleId":"202","severity":1,"message":"203","line":232,"column":46,"nodeType":"204","messageId":"205","endLine":232,"endColumn":48},{"ruleId":"212","severity":1,"message":"213","line":238,"column":29,"nodeType":"214","messageId":"215","endLine":240,"endColumn":30},{"ruleId":"191","severity":1,"message":"216","line":289,"column":11,"nodeType":"193","messageId":"194","endLine":289,"endColumn":16},{"ruleId":"202","severity":1,"message":"203","line":308,"column":46,"nodeType":"204","messageId":"205","endLine":308,"endColumn":48},{"ruleId":"202","severity":1,"message":"203","line":311,"column":28,"nodeType":"204","messageId":"205","endLine":311,"endColumn":30},{"ruleId":"195","severity":1,"message":"196","line":386,"column":29,"nodeType":"197","endLine":387,"endColumn":128},{"ruleId":"195","severity":1,"message":"196","line":464,"column":37,"nodeType":"197","endLine":464,"endColumn":108},{"ruleId":"212","severity":1,"message":"213","line":522,"column":98,"nodeType":"214","messageId":"215","endLine":534,"endColumn":98},{"ruleId":"212","severity":1,"message":"213","line":561,"column":101,"nodeType":"214","messageId":"215","endLine":573,"endColumn":102},{"ruleId":"202","severity":1,"message":"217","line":831,"column":72,"nodeType":"204","messageId":"218","endLine":831,"endColumn":74},{"ruleId":"195","severity":1,"message":"196","line":835,"column":65,"nodeType":"197","endLine":835,"endColumn":150},{"ruleId":"206","severity":1,"message":"219","line":47,"column":8,"nodeType":"208","endLine":47,"endColumn":10,"suggestions":"220"},{"ruleId":"212","severity":1,"message":"213","line":79,"column":13,"nodeType":"214","messageId":"215","endLine":79,"endColumn":56},{"ruleId":"195","severity":1,"message":"196","line":118,"column":37,"nodeType":"197","endLine":118,"endColumn":156},{"ruleId":"195","severity":1,"message":"196","line":119,"column":37,"nodeType":"197","endLine":119,"endColumn":157},{"ruleId":"195","severity":1,"message":"196","line":33,"column":25,"nodeType":"197","endLine":33,"endColumn":74},{"ruleId":"195","severity":1,"message":"196","line":35,"column":25,"nodeType":"197","endLine":35,"endColumn":79},{"ruleId":"195","severity":1,"message":"196","line":41,"column":25,"nodeType":"197","endLine":41,"endColumn":72},{"ruleId":"195","severity":1,"message":"196","line":43,"column":25,"nodeType":"197","endLine":43,"endColumn":77},{"ruleId":"206","severity":1,"message":"221","line":35,"column":8,"nodeType":"208","endLine":35,"endColumn":10,"suggestions":"222"},{"ruleId":"195","severity":1,"message":"196","line":76,"column":17,"nodeType":"197","endLine":76,"endColumn":111},{"ruleId":"195","severity":1,"message":"196","line":80,"column":50,"nodeType":"197","endLine":80,"endColumn":99},{"ruleId":"195","severity":1,"message":"196","line":80,"column":102,"nodeType":"197","endLine":80,"endColumn":149},{"ruleId":"206","severity":1,"message":"221","line":35,"column":8,"nodeType":"208","endLine":35,"endColumn":10,"suggestions":"223"},{"ruleId":"195","severity":1,"message":"196","line":76,"column":17,"nodeType":"197","endLine":76,"endColumn":114},{"ruleId":"195","severity":1,"message":"196","line":79,"column":46,"nodeType":"197","endLine":79,"endColumn":95},{"ruleId":"195","severity":1,"message":"196","line":79,"column":98,"nodeType":"197","endLine":79,"endColumn":145},{"ruleId":"224","severity":1,"message":"225","line":25,"column":17,"nodeType":"226","messageId":"227","endLine":41,"endColumn":18},{"ruleId":"206","severity":1,"message":"228","line":52,"column":8,"nodeType":"208","endLine":52,"endColumn":10,"suggestions":"229"},{"ruleId":"224","severity":1,"message":"225","line":73,"column":17,"nodeType":"226","messageId":"227","endLine":89,"endColumn":18},{"ruleId":"230","severity":1,"message":"231","line":75,"column":25,"nodeType":"193","messageId":"232","endLine":75,"endColumn":30},{"ruleId":"230","severity":1,"message":"231","line":78,"column":25,"nodeType":"193","messageId":"232","endLine":78,"endColumn":30},{"ruleId":"230","severity":1,"message":"231","line":81,"column":25,"nodeType":"193","messageId":"232","endLine":81,"endColumn":30},{"ruleId":"230","severity":1,"message":"231","line":84,"column":25,"nodeType":"193","messageId":"232","endLine":84,"endColumn":30},{"ruleId":"230","severity":1,"message":"231","line":87,"column":25,"nodeType":"193","messageId":"232","endLine":87,"endColumn":30},{"ruleId":"212","severity":1,"message":"213","line":103,"column":17,"nodeType":"214","messageId":"215","endLine":103,"endColumn":66},{"ruleId":"212","severity":1,"message":"213","line":105,"column":17,"nodeType":"214","messageId":"215","endLine":105,"endColumn":66},{"ruleId":"224","severity":1,"message":"225","line":113,"column":9,"nodeType":"226","messageId":"227","endLine":129,"endColumn":10},{"ruleId":"195","severity":1,"message":"196","line":171,"column":37,"nodeType":"197","endLine":171,"endColumn":156},{"ruleId":"195","severity":1,"message":"196","line":172,"column":37,"nodeType":"197","endLine":172,"endColumn":157},{"ruleId":"191","severity":1,"message":"233","line":2,"column":32,"nodeType":"193","messageId":"194","endLine":2,"endColumn":36},{"ruleId":"202","severity":1,"message":"203","line":65,"column":53,"nodeType":"204","messageId":"205","endLine":65,"endColumn":55},{"ruleId":"202","severity":1,"message":"203","line":93,"column":46,"nodeType":"204","messageId":"205","endLine":93,"endColumn":48},{"ruleId":"206","severity":1,"message":"234","line":110,"column":8,"nodeType":"208","endLine":110,"endColumn":10,"suggestions":"235"},{"ruleId":"206","severity":1,"message":"210","line":131,"column":8,"nodeType":"208","endLine":131,"endColumn":25,"suggestions":"236"},{"ruleId":"191","severity":1,"message":"237","line":190,"column":11,"nodeType":"193","messageId":"194","endLine":190,"endColumn":22},{"ruleId":"202","severity":1,"message":"203","line":195,"column":34,"nodeType":"204","messageId":"205","endLine":195,"endColumn":36},{"ruleId":"238","severity":1,"message":"239","line":427,"column":34,"nodeType":"193","messageId":"240","endLine":427,"endColumn":42},{"ruleId":"195","severity":1,"message":"196","line":445,"column":29,"nodeType":"197","endLine":446,"endColumn":126},{"ruleId":"195","severity":1,"message":"196","line":630,"column":65,"nodeType":"197","endLine":630,"endColumn":105},{"ruleId":"202","severity":1,"message":"217","line":661,"column":76,"nodeType":"204","messageId":"218","endLine":661,"endColumn":78},{"ruleId":"195","severity":1,"message":"196","line":665,"column":61,"nodeType":"197","endLine":665,"endColumn":187},{"ruleId":"202","severity":1,"message":"217","line":698,"column":76,"nodeType":"204","messageId":"218","endLine":698,"endColumn":78},{"ruleId":"195","severity":1,"message":"196","line":702,"column":61,"nodeType":"197","endLine":702,"endColumn":138},{"ruleId":"202","severity":1,"message":"203","line":731,"column":95,"nodeType":"204","messageId":"205","endLine":731,"endColumn":97},{"ruleId":"195","severity":1,"message":"196","line":11,"column":17,"nodeType":"197","endLine":11,"endColumn":104},{"ruleId":"206","severity":1,"message":"241","line":33,"column":8,"nodeType":"208","endLine":33,"endColumn":10,"suggestions":"242"},{"ruleId":"195","severity":1,"message":"196","line":77,"column":45,"nodeType":"197","endLine":77,"endColumn":105},"no-native-reassign",["243"],"no-negated-in-lhs",["244"],"no-unused-vars","'AddIcon' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["243"],["244"],"'results' is assigned a value but never used.","'disableCreate' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'addOpenItems', 'type', and 'workspaceID'. Either include them or remove the dependency array.","ArrayExpression",["245"],"React Hook useEffect has a missing dependency: 'exist'. Either include it or remove the dependency array.",["246"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'train' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","React Hook useEffect has missing dependencies: 'history', 'searchPhrase', and 'urlPhrase'. Either include them or remove the dependency array.",["247"],"React Hook useEffect has a missing dependency: 'item.updated'. Either include it or remove the dependency array.",["248"],["249"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has a missing dependency: 'type'. Either include it or remove the dependency array.",["250"],"no-const-assign","'items' is constant.","const","'Link' is defined but never used.","React Hook useEffect has missing dependencies: 'addOpenItems', 'datasetID', and 'type'. Either include them or remove the dependency array.",["251"],["252"],"'fetchImages' is assigned a value but never used.","no-use-before-define","'formData' was used before it was defined.","usedBeforeDefined","React Hook useEffect has missing dependencies: 'datasetID' and 'type'. Either include them or remove the dependency array.",["253"],"no-global-assign","no-unsafe-negation",{"desc":"254","fix":"255"},{"desc":"256","fix":"257"},{"desc":"258","fix":"259"},{"desc":"260","fix":"261"},{"desc":"260","fix":"262"},{"desc":"263","fix":"264"},{"desc":"265","fix":"266"},{"desc":"256","fix":"267"},{"desc":"268","fix":"269"},"Update the dependencies array to be: [addOpenItems, type, workspaceID]",{"range":"270","text":"271"},"Update the dependencies array to be: [exist, loaded, updated]",{"range":"272","text":"273"},"Update the dependencies array to be: [history, searchPhrase, urlPhrase]",{"range":"274","text":"275"},"Update the dependencies array to be: [item.updated]",{"range":"276","text":"277"},{"range":"278","text":"277"},"Update the dependencies array to be: [type]",{"range":"279","text":"280"},"Update the dependencies array to be: [addOpenItems, datasetID, type]",{"range":"281","text":"282"},{"range":"283","text":"273"},"Update the dependencies array to be: [datasetID, type]",{"range":"284","text":"285"},[5775,5777],"[addOpenItems, type, workspaceID]",[7471,7488],"[exist, loaded, updated]",[1801,1803],"[history, searchPhrase, urlPhrase]",[2207,2209],"[item.updated]",[2210,2212],[2236,2238],"[type]",[5177,5179],"[addOpenItems, datasetID, type]",[6626,6643],[1262,1264],"[datasetID, type]"]