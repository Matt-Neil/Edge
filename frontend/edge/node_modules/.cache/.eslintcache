[{"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/index.js":"1","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/App.js":"2","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Contexts/currentUserContext.js":"3","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/auth.js":"4","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Sign-In.jsx":"5","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Account.jsx":"6","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Header.jsx":"7","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/files.js":"8","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/users.js":"9","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/images.js":"10","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Home.jsx":"11","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Not-Found.jsx":"12","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Workspace.jsx":"13","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Search.jsx":"14","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Header-Open-Item.jsx":"15","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Contexts/openItemsContext.js":"16","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Item-Row-Card.jsx":"17","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Item-Square-Card.jsx":"18","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/View-Items.jsx":"19","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/global.js":"20","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Dataset.jsx":"21","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/items.js":"22","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Model-Node.jsx":"23","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/train.js":"24","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Shortcut.jsx":"25","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Contexts/cardFormatContext.js":"26","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Chart.jsx":"27","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/predict.js":"28"},{"size":666,"mtime":1646834639945,"results":"29","hashOfConfig":"30"},{"size":4784,"mtime":1646834713874,"results":"31","hashOfConfig":"30"},{"size":1703,"mtime":1647389201688,"results":"32","hashOfConfig":"30"},{"size":134,"mtime":1639341716098,"results":"33","hashOfConfig":"30"},{"size":4191,"mtime":1646678806933,"results":"34","hashOfConfig":"30"},{"size":5273,"mtime":1646933352831,"results":"35","hashOfConfig":"30"},{"size":984,"mtime":1648485970081,"results":"36","hashOfConfig":"30"},{"size":107,"mtime":1648468753698,"results":"37","hashOfConfig":"30"},{"size":135,"mtime":1641219148050,"results":"38","hashOfConfig":"30"},{"size":136,"mtime":1641050477587,"results":"39","hashOfConfig":"30"},{"size":4428,"mtime":1646999247096,"results":"40","hashOfConfig":"30"},{"size":157,"mtime":1643322933916,"results":"41","hashOfConfig":"30"},{"size":102538,"mtime":1649251753230,"results":"42","hashOfConfig":"30"},{"size":6456,"mtime":1647457044707,"results":"43","hashOfConfig":"30"},{"size":2077,"mtime":1647457064895,"results":"44","hashOfConfig":"30"},{"size":1236,"mtime":1643565439585,"results":"45","hashOfConfig":"30"},{"size":5026,"mtime":1647457090258,"results":"46","hashOfConfig":"30"},{"size":5495,"mtime":1647457092395,"results":"47","hashOfConfig":"30"},{"size":9511,"mtime":1646834938353,"results":"48","hashOfConfig":"30"},{"size":136,"mtime":1643133085776,"results":"49","hashOfConfig":"30"},{"size":43372,"mtime":1649244692271,"results":"50","hashOfConfig":"30"},{"size":135,"mtime":1643901354878,"results":"51","hashOfConfig":"30"},{"size":498,"mtime":1648575114667,"results":"52","hashOfConfig":"30"},{"size":141,"mtime":1645959654919,"results":"53","hashOfConfig":"30"},{"size":3791,"mtime":1646597094714,"results":"54","hashOfConfig":"30"},{"size":806,"mtime":1646834516798,"results":"55","hashOfConfig":"30"},{"size":2707,"mtime":1649067921557,"results":"56","hashOfConfig":"30"},{"size":143,"mtime":1649247579439,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"yw0j30",{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"60"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"60"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"60"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"60"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"60"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"60"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/index.js",[],["127","128"],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/App.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Contexts/currentUserContext.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/auth.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Sign-In.jsx",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Account.jsx",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Header.jsx",["129"],"import React from 'react'\nimport { Link } from 'react-router-dom'\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\nimport HeaderOpenItem from '../Components/Header-Open-Item'\n\nconst Header = ({openItems}) => {\n    return (\n        <div className=\"header\">\n            <Link to=\"/home\" className=\"header-home\">\n                <img src=\"http://localhost:3000/home-icon.png\" className=\"header-home-icon\" />\n            </Link>\n            <div className=\"header-open\">\n                {openItems.length !== 0 &&\n                    <>\n                        {openItems.map((item, i) => {\n                            return <HeaderOpenItem item={item} key={i} />\n                        })}\n                    </>\n                }\n            </div>\n            <span />\n            <Link to=\"/account\" className=\"header-account\">\n                <AccountCircleIcon className=\"header-account-icon\" />\n            </Link>\n        </div>\n    )\n}\n\nexport default Header","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/files.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/users.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/images.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Home.jsx",["130","131"],"import React, {useState, useEffect, useContext} from 'react'\nimport { Link, useHistory } from 'react-router-dom'\nimport { CardFormatContext } from '../Contexts/cardFormatContext';\nimport usersAPI from '../API/users'\nimport SearchIcon from '@mui/icons-material/Search';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ItemRowCard from '../Components/Item-Row-Card'\nimport ItemSquareCard from '../Components/Item-Square-Card'\nimport Shortcut from '../Components/Shortcut';\n\nconst Home = ({setSearchPhrase}) => {\n    const [recent, setRecent] = useState()\n    const [loaded, setLoaded] = useState(false)\n    const [input, setInput] = useState(\"\");\n    const {cardFormat, changeCardFormat} = useContext(CardFormatContext);\n    const history = useHistory();\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const recent = await usersAPI.get(\"/recent\");\n\n                setRecent(recent.data.data);\n                setLoaded(true);\n            } catch (err) {}\n        }\n        fetchData();\n    }, [])\n\n    const searchFunctionKey = (e) => {\n        if (e.key === \"Enter\" && input !== \"\") {\n            setSearchPhrase(input);\n            history.push(`/search-results/${input}`);\n        }\n    }\n\n    const searchFunctionButton = () => {\n        if (input !== \"\") {\n            setSearchPhrase(input);\n            history.push(`/search-results/${input}`);\n        }\n    }\n\n    return (\n        <>\n            {loaded &&\n                <div className=\"main-body\">\n                    <div className=\"sidebar\">\n                        <div className=\"home-search\">\n                            <input className=\"home-search-input\" \n                                    placeholder=\"Search\"\n                                    value={input}\n                                    onChange={e => setInput(e.target.value)}\n                                    onKeyPress={searchFunctionKey} />\n                            <SearchIcon className=\"home-search-icon\" onClick={e => searchFunctionButton()} />\n                        </div>\n                        <div className=\"sidebar-divided\" />\n                        <Link className=\"home-options-link\" to=\"/public-workspaces\">\n                            <p>Public Workspaces</p>\n                            <ArrowForwardIosIcon className=\"home-options-icon\" />\n                        </Link>\n                        <Link className=\"home-options-link\" to=\"public-datasets\">\n                            <p>Public Datasets</p>\n                            <ArrowForwardIosIcon className=\"home-options-icon\" />\n                        </Link>\n                        <div className=\"sidebar-divided\" />\n                        <Shortcut type={\"workspaces\"} />\n                        <div className=\"sidebar-divided\" />\n                        <Shortcut type={\"datasets\"} />\n                        <div className=\"sidebar-divided\" />\n                        <Shortcut type={\"bookmarked\"} />\n                    </div>\n                    <div className=\"inner\">\n                        <div className=\"home-inner\">\n                            <div className=\"view-items-top\">\n                                <h1>Your Recents</h1>\n                                <div className=\"toggle-card-type\">\n                                    <span />\n                                    <img src=\"http://localhost:3000/List.png\" className=\"toggle-card-type-row-icon\" onClick={() => {changeCardFormat()}} />\n                                    <img src=\"http://localhost:3000/Grid.png\" className=\"toggle-card-type-grid-icon\" onClick={() => {changeCardFormat()}} />\n                                </div>\n                            </div>\n                            <div className=\"view-items-list\">\n                                {recent.length > 0 &&\n                                    <>\n                                        {recent.map((item, i) => {\n                                            return cardFormat ? <ItemRowCard item={item} created={true} key={i} /> : <ItemSquareCard item={item} created={true} key={i} />\n                                        })}\n                                    </>\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default Home\n","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Not-Found.jsx",[],["132","133"],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Workspace.jsx",["134","135","136","137","138","139","140","141","142","143","144","145","146","147"],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Search.jsx",["148","149","150","151"],"import React, {useState, useEffect, useContext} from 'react'\nimport {Link, useHistory, useParams} from \"react-router-dom\"\nimport { CardFormatContext } from '../Contexts/cardFormatContext';\nimport ItemRowCard from '../Components/Item-Row-Card'\nimport ItemSquareCard from '../Components/Item-Square-Card'\nimport globalAPI from '../API/global'\nimport SearchIcon from '@mui/icons-material/Search';\nimport Shortcut from '../Components/Shortcut'\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\n\nconst Search = ({searchPhrase, setSearchPhrase, currentUser}) => {\n    const [items, setItems] = useState();\n    const [loaded, setLoaded] = useState(false);\n    const [input, setInput] = useState(\"\");\n    const [finishedItems, setFinishedItems] = useState(false);\n    const {cardFormat, changeCardFormat} = useContext(CardFormatContext);\n    const urlPhrase = useParams().id;\n    const history = useHistory();\n\n    useEffect(() => {\n        const fetchData = async () => {\n            if (searchPhrase === null) {\n                if (urlPhrase) {\n                    const items = await globalAPI.get(`/search?phrase=${urlPhrase}`);\n\n                    if (items.data.data.length < 21) {\n                        setFinishedItems(true)\n                    }\n\n                    setItems(items.data.data);\n                    setLoaded(true);\n                } else {\n                    history.push(\"/home\");\n                }\n            } else {\n                const items = await globalAPI.get(`/search?phrase=${searchPhrase}`);\n\n                if (items.data.data.length < 21) {\n                    setFinishedItems(true)\n                }\n\n                setItems(items.data.data);\n                setLoaded(true);\n            }\n        }\n        fetchData();\n    }, [])\n\n    const searchFunctionKey = (e) => {\n        if (e.key === \"Enter\" && input !== \"\") {\n            setSearchPhrase(input);\n            history.push(`/search-results/${input}`);\n        }\n    }\n\n    const searchFunctionButton = () => {\n        if (input !== \"\") {\n            setSearchPhrase(input);\n            history.push(`/search-results/${input}`);\n        }\n    }\n\n    const fetchDataItems = async (id) => {\n        if (!finishedItems) {\n            try {\n                const fetchedItems = await globalAPI.get(`/search?phrase=${urlPhrase}&id=${id}`);\n    \n                if (fetchedItems.data.data.length < 21) {\n                    setFinishedItems(true)\n                }\n\n                setItems(items => [...items, ...fetchedItems.data.data]);\n            } catch (err) {}\n        }\n    }\n\n    const loadMore = () => {\n        if (items.length !== 0) {\n            {fetchDataItems(items[items.length-1]._id)}\n        }\n    };\n\n    return (\n        <>\n            {loaded &&\n                <div className=\"main-body\">\n                    <div className=\"sidebar\">\n                        <div className=\"home-search\">\n                            <input className=\"home-search-input\" \n                                    placeholder=\"Search\"\n                                    value={input}\n                                    onChange={e => setInput(e.target.value)}\n                                    onKeyPress={searchFunctionKey} />\n                            <SearchIcon className=\"home-search-icon\" onClick={e => searchFunctionButton()} />\n                        </div>\n                        <div className=\"sidebar-divided\" />\n                        <Link className=\"home-options-link\" to=\"/public-workspaces\">\n                            <p>Public Workspaces</p>\n                            <ArrowForwardIosIcon className=\"home-options-icon\" />\n                        </Link>\n                        <Link className=\"home-options-link\" to=\"public-datasets\">\n                            <p>Public Datasets</p>\n                            <ArrowForwardIosIcon className=\"home-options-icon\" />\n                        </Link>\n                        <div className=\"sidebar-divided\" />\n                        <Shortcut type={\"workspaces\"} />\n                        <div className=\"sidebar-divided\" />\n                        <Shortcut type={\"datasets\"} />\n                        <div className=\"sidebar-divided\" />\n                        <Shortcut type={\"bookmarked\"} />\n                    </div>\n                    <div className=\"inner\">\n                        <div className=\"home-inner\">\n                            <div className=\"view-items-top\">\n                                <h1>Search Results: {urlPhrase}</h1>\n                                <div className=\"toggle-card-type\">\n                                    <span />\n                                    <img src=\"http://localhost:3000/List.png\" className=\"toggle-card-type-row-icon\" onClick={() => {changeCardFormat()}} />\n                                    <img src=\"http://localhost:3000/Grid.png\" className=\"toggle-card-type-grid-icon\" onClick={() => {changeCardFormat()}} />\n                                </div>\n                            </div>\n                            <p className=\"view-items-results\">{`${items.length} Results`}</p>\n                            <div className=\"view-items-list\">\n                                {items.length > 0 &&\n                                    <>\n                                        {items.map((item, i) => {\n                                            return cardFormat ? \n                                                <ItemRowCard item={item} creator={item.creatorName.name} currentUserID={currentUser.id} created={currentUser.id === item.creator} key={i} /> \n                                                : \n                                                <ItemSquareCard item={item} creator={item.creatorName.name} currentUserID={currentUser.id} created={currentUser.id === item.creator} key={i} />\n                                        })}\n                                    </>\n                                }\n                            </div>\n                            {items.length >= 0 && finishedItems ?\n                                <p className=\"end-items\">End reached</p>\n                                :\n                                <p className=\"load-items\" onClick={() => {loadMore()}}>Load more</p>\n                            }\n                        </div>\n                    </div>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default Search","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Header-Open-Item.jsx",["152","153","154","155"],"import React, {useState, useContext} from 'react'\nimport { useLocation, Link, useHistory } from 'react-router-dom'\nimport CloseIcon from '@mui/icons-material/Close';\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\n\nconst HeaderOpenItems = ({item}) => {\n    const [mouseOver, setMouseOver] = useState(false)\n    const history = useHistory();\n    const location = useLocation();\n    const {removeOpenItems} = useContext(OpenItemsContext);\n\n    const checkCurrent = () => {\n        if (location.pathname.substring(11) === item.id || location.pathname.substring(9) === item.id) return true\n\n        return false\n    }\n\n    const closeItem = () => {\n        removeOpenItems(item.id)\n        \n        if (checkCurrent()) {\n            history.replace(\"/home\")\n        }\n    }\n\n    return (\n        <div className={`item-header ${checkCurrent() && \"item-header-selected\"}`}\n                onMouseEnter={() => {setMouseOver(true)}}\n                onMouseLeave={() => {setMouseOver(false)}}>\n            {item.type === \"workspace\" ? \n                <>\n                    {(checkCurrent() || mouseOver) ? \n                        <img src=\"http://localhost:3000/workspace.png\" /> \n                    : \n                        <img src=\"http://localhost:3000/workspace-grey.png\" />\n                    } \n                </>\n            : \n                <>  \n                    {(checkCurrent() || mouseOver) ? \n                        <img src=\"http://localhost:3000/dataset.png\" /> \n                    :\n                        <img src=\"http://localhost:3000/dataset-grey.png\" />\n                    }\n                </>\n            }\n            <Link to={item.type === \"workspace\" ? `/workspace/${item.id}` : `/dataset/${item.id}`} className=\"item-header-link\">\n                <p className={`item-header-title ${(checkCurrent() || mouseOver) && \"item-header-title-selected\"}`}>{item.title}</p>\n            </Link>\n            <CloseIcon className=\"item-header-close\" onClick={() => {closeItem()}} />\n        </div>\n    )\n}\n\nexport default HeaderOpenItems","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Contexts/openItemsContext.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Item-Row-Card.jsx",["156","157","158","159"],"import React, {useState, useEffect, useContext} from 'react'\nimport { Link } from 'react-router-dom'\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport globalAPI from '../API/global'\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\n\nconst ItemRowCard = ({item, created, creator, currentUserID}) => {\n    const [bookmarked, setBookmarked] = useState(item.bookmarked)\n    const [upvoted, setUpvoted] = useState(item.upvoted)\n    const [upvotes, setUpvotes] = useState(item.upvotes)\n    const [visibility, setVisibility] = useState(item.visibility)\n    const {addOpenItems} = useContext(OpenItemsContext);\n    const [date, setDate] = useState(\"\");\n\n    useEffect(() => {\n        const updatedDate = new Date(item.updated);\n        const currentDate = new Date();\n\n        if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} years ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} days ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hours ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minutes ago`)\n        } else {\n            setDate(\"Updated just now\")\n        }\n    }, [])\n\n    const addHeader = () => {\n        if (item.creator === currentUserID) {\n            addOpenItems(item._id, item.title, item.type)\n        }\n    }\n\n    const updateUpvote = async () => {\n        try {\n            await globalAPI.put(`/upvote/${item._id}?state=${upvoted}`);\n\n            if (upvoted) {\n                setUpvotes(state => state-1)\n            } else {\n                setUpvotes(state => state+1)\n            }\n\n            setUpvoted(state => !state)\n        } catch (err) {}\n    }\n\n    const updateBookmark = async () => {\n        try {\n            await globalAPI.put(`/bookmark/${item._id}?state=${bookmarked}`);\n            \n            setBookmarked(state => !state)\n        } catch (err) {}\n    }\n\n    const updateVisibility = async () => {\n        try {\n            await globalAPI.put(`/visibility/${item._id}`);\n\n            setVisibility(state => !state)\n        } catch (err) {}\n    }\n\n    return (\n        <div className=\"item-row-card\" onClick={() => {addHeader()}}>\n            <Link to={item.type === \"workspace\" ? `/workspace/${item._id}` : `/dataset/${item._id}`}>\n                <img src={`http://localhost:4000/images/${item.picture}`} className=\"item-row-card-picture\" />\n            </Link>\n            <div className=\"item-row-card-information\">\n                <div className=\"item-row-card-heading\">\n                    {item.type === \"workspace\" ? <img src=\"http://localhost:3000/workspace.png\" /> : <img src=\"http://localhost:3000/dataset.png\" />}\n                    <Link to={item.type === \"workspace\" ? `/workspace/${item._id}` : `/dataset/${item._id}`} className=\"item-row-card-title\">{item.title}</Link>\n                </div>\n                <div>\n                    {!created && <p className=\"item-row-card-meta\">{creator}</p>}\n                    <p className=\"item-row-card-meta\">{date}</p>\n                </div>\n            </div>\n            <div>\n                <ThumbUpIcon className={`item-row-card-icon ${upvoted ? \"blue2\" : \"white\"}`} onClick={() => {updateUpvote()}} />\n                <p className={`item-row-card-upvotes ${upvoted ? \"blue2\" : \"white\"}`}>{upvotes}</p>\n                {!created && item.creator !== currentUserID && <BookmarkIcon className={`item-row-card-icon ${bookmarked ? \"blue2\" : \"white\"}`} onClick={() => {updateBookmark()}} />}\n                {created && \n                    <>\n                        {visibility ? \n                            <VisibilityIcon className=\"item-row-card-visibility\" onClick={() => {updateVisibility()}} />\n                        :\n                            <VisibilityOffIcon className=\"item-row-card-visibility\" onClick={() => {updateVisibility()}} />\n                        }\n                    </>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default ItemRowCard","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Item-Square-Card.jsx",["160","161","162","163"],"import React, {useState, useEffect, useContext} from 'react'\nimport { Link } from 'react-router-dom'\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport globalAPI from '../API/global'\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\n\nconst ItemSquareCard = ({item, created, creator, currentUserID}) => {\n    const [bookmarked, setBookmarked] = useState(item.bookmarked)\n    const [upvoted, setUpvoted] = useState(item.upvoted)\n    const [upvotes, setUpvotes] = useState(item.upvotes)\n    const [visibility, setVisibility] = useState(item.visibility)\n    const {addOpenItems} = useContext(OpenItemsContext);\n    const [date, setDate] = useState(\"\");\n\n    useEffect(() => {\n        const updatedDate = new Date(item.updated);\n        const currentDate = new Date();\n\n        if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} years ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} days ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hours ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minutes ago`)\n        } else {\n            setDate(\"Updated just now\")\n        }\n    }, [])\n\n    const addHeader = () => {\n        if (item.creator === currentUserID) {\n            addOpenItems(item._id, item.title, item.type)\n        }\n    }\n\n    const updateUpvote = async () => {\n        try {\n            await globalAPI.put(`/upvote/${item._id}?state=${upvoted}`);\n\n            if (upvoted) {\n                setUpvotes(state => state-1)\n            } else {\n                setUpvotes(state => state+1)\n            }\n\n            setUpvoted(state => !state)\n        } catch (err) {}\n    }\n\n    const updateBookmark = async () => {\n        try {\n            await globalAPI.put(`/bookmark/${item._id}?state=${bookmarked}`);\n            \n            setBookmarked(state => !state)\n        } catch (err) {}\n    }\n\n    const updateVisibility = async () => {\n        try {\n            await globalAPI.put(`/visibility/${item._id}`);\n\n            setVisibility(state => !state)\n        } catch (err) {}\n    }\n\n    return (\n        <div className=\"item-square-card\" onClick={() => {addHeader()}}>\n            <Link to={item.type === \"workspace\" ? `/workspace/${item._id}` : `/dataset/${item._id}`}>\n                <img src={`http://localhost:4000/images/${item.picture}`} className=\"item-square-card-picture\" />\n            </Link>\n            <div className=\"item-square-card-heading\">\n                {item.type === \"workspace\" ? <img src=\"http://localhost:3000/workspace.png\" /> : <img src=\"http://localhost:3000/dataset.png\" />}\n                <Link to={item.type === \"workspace\" ? `/workspace/${item._id}` : `/dataset/${item._id}`} className=\"item-square-card-title\">{item.title}</Link>\n            </div>\n            <div>\n                <p className=\"item-square-card-meta\">{created ? \"You\" : creator}</p>\n                <p className=\"item-square-card-meta\">{date}</p>\n            </div>\n            <div className=\"item-square-card-bottom\">\n                {!created ?\n                    <>\n                        <ThumbUpIcon className={`item-square-card-icon ${upvoted ? \"blue2\" : \"white\"}`} onClick={() => {updateUpvote()}} />\n                        <p className={`item-square-card-upvotes ${upvoted ? \"blue2\" : \"white\"}`}>{upvotes}</p>\n                        {item.creator !== currentUserID && <BookmarkIcon className={`item-square-card-icon ${bookmarked ? \"blue2\" : \"white\"}`} onClick={() => {updateBookmark()}} />}\n                    </>\n                    :\n                    <>\n                        <ThumbUpIcon className={`item-square-card-icon ${upvoted ? \"blue2\" : \"white\"}`} onClick={() => {updateUpvote()}} />\n                        <p className={`item-square-card-upvotes ${upvoted ? \"blue2\" : \"white\"}`}>{upvotes}</p>\n                        {created && \n                            <>\n                                {visibility ? \n                                    <VisibilityIcon className=\"item-square-card-visibility\" onClick={() => {updateVisibility()}} />\n                                :\n                                    <VisibilityOffIcon className=\"item-square-card-visibility\" onClick={() => {updateVisibility()}} />\n                                }\n                            </>\n                        }\n                    </>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default ItemSquareCard","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/View-Items.jsx",["164","165","166","167","168","169","170","171","172","173","174","175","176"],"import React, {useState, useEffect, useContext} from 'react'\nimport {useHistory, Link} from \"react-router-dom\"\nimport { CardFormatContext } from '../Contexts/cardFormatContext';\nimport ItemRowCard from '../Components/Item-Row-Card'\nimport ItemSquareCard from '../Components/Item-Square-Card'\nimport Shortcut from '../Components/Shortcut'\nimport usersAPI from '../API/users'\nimport itemsAPI from '../API/items'\nimport SearchIcon from '@mui/icons-material/Search';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\n\nconst ViewItems = ({type, currentUser, setSearchPhrase}) => {\n    const [items, setItems] = useState();\n    const [loaded, setLoaded] = useState(false);\n    const [input, setInput] = useState(\"\");\n    const [finishedItems, setFinishedItems] = useState(false);\n    const {cardFormat, changeCardFormat} = useContext(CardFormatContext);\n    const history = useHistory();\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                let items;\n\n                switch (type) {\n                    case \"created-datasets\":\n                        items = await usersAPI.get(`/created?type=dataset&date=${new Date().toISOString()}`);\n                        break;\n                    case \"created-workspaces\":\n                        items = await usersAPI.get(`/created?type=workspace&date=${new Date().toISOString()}`);\n                        break;\n                    case \"bookmarks\":\n                        items = await usersAPI.get(`/bookmarked?date=${new Date().toISOString()}`);\n                        break;\n                    case \"public-workspaces\":\n                        items = await itemsAPI.get(`/public?type=workspace&date=${new Date().toISOString()}`);\n                        break;\n                    case \"public-datasets\":\n                        items = await itemsAPI.get(`/public?type=dataset&date=${new Date().toISOString()}`);\n                        break;\n                }\n\n                if (items.data.data.length < 21) {\n                    setFinishedItems(true)\n                }\n\n                setItems(items.data.data);\n                setLoaded(true);\n            } catch (err) {}\n        }\n        fetchData();\n    }, [])\n\n    const searchFunctionKey = (e) => {\n        if (e.key === \"Enter\" && input !== \"\") {\n            setSearchPhrase(input);\n            history.push(`/search-results/${input}`);\n        }\n    }\n\n    const searchFunctionButton = () => {\n        if (input !== \"\") {\n            setSearchPhrase(input);\n            history.push(`/search-results/${input}`);\n        }\n    }\n    \n    const fetchDataItems = async (date) => {\n        if (!finishedItems) {\n            try {\n                let fetchedItems;\n\n                switch (type) {\n                    case \"created-datasets\":\n                        items = await usersAPI.get(`/created?type=dataset&date=${date}`);\n                        break;\n                    case \"created-workspaces\":\n                        items = await usersAPI.get(`/created?type=workspace&date=${date}`);\n                        break;\n                    case \"bookmarks\":\n                        items = await usersAPI.get(`/bookmarked?date=${date}`);\n                        break;\n                    case \"public-workspaces\":\n                        items = await itemsAPI.get(`/public?type=workspace&date=${date}`);\n                        break;\n                    case \"public-datasets\":\n                        items = await itemsAPI.get(`/public?type=dataset&date=${date}`);\n                        break;   \n                }\n    \n                if (fetchedItems.data.data.length < 21) {\n                    setFinishedItems(true)\n                }\n\n                setItems(items => [...items, ...fetchedItems.data.data]);\n            } catch (err) {}\n        }\n    }\n\n    const loadMore = () => {\n        if (items.length !== 0) {\n            if (type === \"public-workspaces\" || type === \"public-datasets\") {\n                {fetchDataItems(items[items.length-1].createdAt)}\n            } else {\n                {fetchDataItems(items[items.length-1].updatedAt)}\n            }\n        }\n    };\n\n    const displayHeading = () => {\n        let heading;\n\n        switch (type) {\n            case \"created-workspaces\":\n                heading = \"Your Workspaces\"\n                break;\n            case \"created-datasets\":\n                heading = \"Your Datasets\"\n                break;\n            case \"bookmarks\":\n                heading = \"Your Bookmarks\"\n                break;\n            case \"public-workspaces\":\n                heading = \"Public Workspaces\"\n                break;\n            case \"public-datasets\":\n                heading = \"Public Datasets\"\n                break;\n        }\n\n        return <h1>{heading}</h1>\n    }\n    \n    return (\n        <>\n            {loaded &&\n                <div className=\"main-body\">\n                    <div className=\"sidebar\">\n                        <div className=\"home-search\">\n                            <input className=\"home-search-input\" \n                                    placeholder=\"Search\"\n                                    value={input}\n                                    onChange={e => setInput(e.target.value)}\n                                    onKeyPress={searchFunctionKey} />\n                            <SearchIcon className=\"home-search-icon\" onClick={e => searchFunctionButton()} />\n                        </div>\n                        <div className=\"sidebar-divided\" />\n                        <Link className=\"home-options-link\" to=\"/public-workspaces\">\n                            <p>Public Workspaces</p>\n                            <ArrowForwardIosIcon className=\"home-options-icon\" />\n                        </Link>\n                        <Link className=\"home-options-link\" to=\"public-datasets\">\n                            <p>Public Datasets</p>\n                            <ArrowForwardIosIcon className=\"home-options-icon\" />\n                        </Link>\n                        <div className=\"sidebar-divided\" />\n                        <Shortcut type={\"workspaces\"} />\n                        <div className=\"sidebar-divided\" />\n                        <Shortcut type={\"datasets\"} />\n                        <div className=\"sidebar-divided\" />\n                        <Shortcut type={\"bookmarks\"} />\n                    </div>\n                    <div className=\"inner\">\n                        <div className=\"home-inner\">\n                            <div className=\"view-items-top\">\n                                {displayHeading()}\n                                {type === \"created-workspaces\" && <Link to=\"/create-workspace\" className=\"blue-button\">Create Workspace</Link>}\n                                {type === \"created-datasets\" && <Link to=\"/create-dataset\" className=\"blue-button\">Create Dataset</Link>}\n                                <div className=\"toggle-card-type\">\n                                    <span />\n                                    <img src=\"http://localhost:3000/List.png\" className=\"toggle-card-type-row-icon\" onClick={() => {changeCardFormat()}} />\n                                    <img src=\"http://localhost:3000/Grid.png\" className=\"toggle-card-type-grid-icon\" onClick={() => {changeCardFormat()}} />\n                                </div>\n                            </div>\n                            {(type === \"created-workspaces\" || type === \"public-workspaces\") ?\n                                <p className=\"view-items-results\">{`${items.length} Workspaces`}</p>\n                            : (type === \"created-datasets\" || type === \"public-datasets\") ?\n                                <p className=\"view-items-results\">{`${items.length} Datasets`}</p>\n                            :\n                                <p className=\"view-items-results\">{`${items.length} Bookmarks`}</p>\n                            }\n                            <div className=\"view-items-list\">\n                                {items.length > 0 &&\n                                    <>\n                                        {items.map((item, i) => {\n                                            if (type === \"created-workspaces\" || type === \"created-datasets\") return cardFormat ? <ItemRowCard item={item} created={true} key={i} /> : <ItemSquareCard item={item} created={true} key={i} />\n\n                                            return cardFormat ?\n                                                <ItemRowCard item={item} creator={item.creatorName.name} currentUserID={currentUser.id} created={currentUser.id === item.creator} key={i} /> \n                                                : \n                                                <ItemSquareCard item={item} creator={item.creatorName.name} currentUserID={currentUser.id} created={currentUser.id === item.creator} key={i} />\n                                        })}\n                                    </>\n                                }\n                            </div>\n                            {items.length >= 0 && finishedItems ?\n                                <p className=\"end-items\">End reached</p>\n                                :\n                                <p className=\"load-items\" onClick={() => {loadMore()}}>Load more</p>\n                            }\n                        </div>\n                    </div>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default ViewItems","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/global.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Dataset.jsx",["177","178","179","180","181","182","183","184","185","186","187","188","189"],"import React, {useState, useEffect, useRef, useContext} from 'react'\nimport {useHistory, useParams} from \"react-router-dom\"\nimport usersAPI from '../API/users'\nimport itemsAPI from '../API/items'\nimport globalAPI from '../API/global'\nimport imageAPI from '../API/images'\nimport fileAPI from '../API/files'\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport CloseIcon from '@mui/icons-material/Close';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport Shortcut from '../Components/Shortcut'\n\nconst Dataset = ({currentUser, type}) => {\n    const [title, setTitle] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [visibility, setVisibility] = useState(false);\n    const [rgb, setRgb] = useState(false)\n    const [bookmarked, setBookmarked] = useState()\n    const [upvoted, setUpvoted] = useState()\n    const [upvotes, setUpvotes] = useState()\n    const [updated, setUpdated] = useState()\n    const [picture, setPicture] = useState()\n    const [width, setWidth] = useState()\n    const [height, setHeight] = useState()\n    const [date, setDate] = useState(\"\")\n    const [start, setStart] = useState(0)\n    const [end, setEnd] = useState(30)\n    const [page, setPage] = useState(1)\n    const [image, setImage] = useState();\n    const [dataset, setDataset] = useState([]);\n    const [labels, setLabels] = useState([])\n    const [appendedLabels, setAppendedLabels] = useState([])\n    const [copyData, setCopyData] = useState(true)\n    const [changedSettings, setChangedSettings] = useState(false)\n    const [changedData, setChangedData] = useState(false)\n    const [uploadedImages, setUploadedImages] = useState([])\n    const [appendedImages, setAppendedImages] = useState([])\n    const [imageFiles, setImageFiles] = useState([])\n    const [assignedLabels, setAssignedLabels] = useState([])\n    const [refreshData, setRefreshData] = useState()\n    const [refreshLabels, setRefreshLabels] = useState()\n    const [loaded, setLoaded] = useState(false);\n    const [exist, setExist] = useState()\n    const [addLabel, setAddLabel] = useState(\"\")\n    const [disableCreate, setDisabledCreate] = useState(false)\n    const {addOpenItems, removeOpenItems} = useContext(OpenItemsContext);\n    const colours = [\"label-blue1\", \"label-red\", \"label-green1\", \"label-orange1\", \"label-pink\", \n        \"label-orange2\", \"label-blue2\", \"label-yellow1\", \"label-green2\", \"label-yellow2\"]\n    const datasetID = useParams().id;\n    const copyInterval = useRef(0)\n    const firstRender = useRef(true);\n    const history = useHistory();\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                if (type === \"create\") {\n                    const dataset = await usersAPI.get(\"/created?type=dataset\");\n    \n                    dataset.data.data.map((dataset) => {\n                        setDataset(previous => [...previous, dataset.title]);\n                    })\n\n                    setExist(true)\n                    setLoaded(true)\n                } else {\n                    const dataset = await itemsAPI.get(`/${datasetID}?type=dataset`);\n\n                    if (dataset.data.data.self) {\n                        addOpenItems(dataset.data.data._id, dataset.data.data.title, dataset.data.data.type)\n                    }\n\n                    setDataset(dataset.data.data);\n                    setUpdated(dataset.data.data.updated);\n                    setBookmarked(dataset.data.data.bookmarked)\n                    setUpvoted(dataset.data.data.upvoted)\n                    setPicture(dataset.data.data.picture)\n                    setUpvotes(dataset.data.data.upvotes)\n                    setVisibility(dataset.data.data.visibility)\n                    setTitle(dataset.data.data.title)\n                    setDescription(dataset.data.data.description)\n                    setLabels(dataset.data.data.labels)\n                    setRgb(dataset.data.data.rgb)\n                    setHeight(dataset.data.data.height)\n                    setWidth(dataset.data.data.width)\n\n                    fetch(`http://127.0.0.1:5000/files/${dataset.data.data.imageFile}/labels.json`)\n                        .then(response => response.json())\n                        .then(images => {\n                            images.map(image => {\n                                setUploadedImages(state => [...state, image.filename])\n                                setAssignedLabels(state => [...state, image.label])\n                            })\n                            setExist(true)\n                            setLoaded(true)\n                        }).catch(() => {\n                            setExist(true)\n                            setLoaded(true)\n                        });\n                }\n            } catch (err) {\n              setExist(false)\n              setLoaded(true)\n            }\n        }\n        fetchData();\n    }, [])\n\n    useEffect(() => {\n        if (loaded && exist) {\n            const updatedDate = new Date(updated);\n            const currentDate = new Date();\n    \n            if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} years ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} days ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hours ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minutes ago`)\n            } else {\n                setDate(\"Updated just now\")\n            }\n        }\n    }, [loaded, updated])\n\n    useEffect(() => {\n        if (!firstRender.current && loaded) {\n            updateDataset()\n        } else {\n            firstRender.current = false\n        }\n    }, [labels])\n\n    const copiedInterval = () => {\n        clearInterval(copyInterval.current)\n        navigator.clipboard.writeText(dataset.datafile);\n        setCopyData(false);\n        copyInterval.current = setInterval(() => {\n            setCopyData(true);\n        }, 800)\n        return ()=> {clearInterval(copyInterval.current)};\n    }\n\n    const addFunctionKey = async (e) => {\n        if (e.key === \"Enter\" && addLabel !== \"\" && !labels.includes(addLabel)) {\n            setLabels(state => [...state, addLabel])\n            setChangedSettings(true)\n            setAddLabel(\"\")\n            \n            const formData = new FormData();\n\n            formData.append('id', dataset.imageFile)\n            formData.append('label', addLabel)\n\n            await fileAPI.post(\"/add-label\", formData)\n        }\n    }\n\n    const deleteLabel = async (index) => {\n        try {\n            assignedLabels.map((assignedLabel, j) => {\n                if (assignedLabel === labels[index]) {\n                    setAssignedLabels(state => {\n                        const stateCopy = [...state]\n                    \n                        stateCopy[j] = \"No label\"\n                    \n                        return stateCopy\n                    })\n                }\n            })\n\n            const formData = new FormData();\n\n            formData.append('id', dataset.imageFile)\n            formData.append('label', labels[index])\n\n            labels.splice(index, 1)\n\n            await fileAPI.post(\"/delete-label\", formData).then(() => {\n                updateDataset()\n            });\n\n            setRefreshLabels(new Date().getTime())\n            setRefreshData(new Date().getTime())\n        } catch (err) {}\n    }\n\n    const updateLabel = async (e, index) => {\n        try {\n            const formData = new FormData();\n\n            formData.append('id', dataset.imageFile)\n            formData.append('filename', uploadedImages[index])\n            formData.append('oldLabel', assignedLabels[index])\n            formData.append('newLabel', e.target.value)\n            formData.append('index', index)\n\n            setAssignedLabels(state => {\n                const stateCopy = [...state]\n            \n                stateCopy[index] = e.target.value\n            \n                return stateCopy\n            })\n\n            await fileAPI.post(\"/update-image\", formData);\n\n            setChangedData(true)\n            setRefreshLabels(new Date().getTime())\n        } catch (err) {}\n    }\n\n    const updateUpvote = async () => {\n        try {\n            await globalAPI.put(`/upvote/${datasetID}?state=${upvoted}`);\n\n            if (upvoted) {\n                setUpvotes(state => state-1)\n            } else {\n                setUpvotes(state => state+1)\n            }\n\n            setUpvoted(state => !state)\n        } catch (err) {}\n    }\n\n    const updateBookmark = async () => {\n        try {\n            await globalAPI.put(`/bookmark/${datasetID}?state=${bookmarked}`);\n            \n            setBookmarked(state => !state)\n        } catch (err) {}\n    }\n\n    const updateVisibility = async () => {\n        try {\n            await globalAPI.put(`/visibility/${datasetID}`);\n\n            setVisibility(state => !state)\n        } catch (err) {}\n    }\n\n    const previousPage = () => {\n        if (page > 1) {\n            setStart((page-2)*30)\n            setEnd((page-1)*30)\n            setPage(state => state-1)\n            setRefreshData(new Date().getTime())\n        }\n    }\n    \n    const nextPage = () => {\n        if (page*30 < uploadedImages.length && uploadedImages.length > 30) {\n            setPage(state => state+1)\n            setStart((page)*30)\n            setEnd((page+1)*30)\n            setRefreshData(new Date().getTime())\n        }\n    }\n\n    const deleteImage = async (filename, index, label) => {\n        uploadedImages.splice(index, 1)\n        assignedLabels.splice(index, 1)\n\n        if (type === \"view\") {\n            const formData = new FormData();\n\n            formData.append('id', dataset.imageFile)\n            formData.append('index', index)\n            formData.append('label', label)\n            formData.append('filename', filename)\n\n            updateDataset()\n\n            try {\n                await fileAPI.post(\"/delete-image\", formData);\n            } catch (err) {}\n        }\n\n        setRefreshData(new Date().getTime())\n    }\n\n    const addImages = async () => {\n        for (let i = 0; i < imageFiles.length; i++) {\n            setUploadedImages(state => [...state, imageFiles[i]])\n        }\n\n        setAssignedLabels(Array(imageFiles).fill(\"No label\"))\n        setPage(1)\n        setRefreshData(new Date().getTime())\n        setImageFiles([])\n    }\n\n    const replaceImages = async () => {\n        if (type === \"create\") {\n            for (let i = 0; i < imageFiles.length; i++) {\n                setUploadedImages(state => [...state, imageFiles[i]])\n            }\n        } else {\n            const formData = new FormData();\n\n            formData.append('id', dataset.imageFile)\n\n            for (let i = 0; i < imageFiles.length; i++) {\n                formData.append('data[]', imageFiles[i]);\n                formData.append('labels[]', assignedLabels[i]);\n            }\n\n            updateDataset()\n\n            try {\n                await fileAPI.post(\"/replace-image\", formData);\n\n                for (let i = 0; i < imageFiles.length; i++) {\n                    setUploadedImages(state => [...state, i])\n                }\n            } catch (err) {}\n        }\n        setAssignedLabels(Array(imageFiles).fill(\"No label\"))\n        setPage(1)\n        setRefreshData(new Date().getTime())\n        setImageFiles([])\n    }\n    \n    const appendImages = () => {\n        for (let i = 0; i < imageFiles.length; i++) {\n            setAppendedImages(state => [...state, imageFiles[i]])\n        }\n\n        setAppendedLabels(Array(imageFiles).fill(\"No label\"))\n        setImageFiles([])\n    }\n\n    const deleteAppended = (index) => {\n        appendedImages.splice(index, 1)\n        appendedLabels.splice(index, 1)\n    }\n\n    const uploadAppended = async () => {\n        if (type === \"create\") {\n            for (let i = 0; i < appendedImages.length; i++) {\n                setUploadedImages(state => [...state, appendedImages[i]])\n            }\n\n            setAssignedLabels(state => [...state, ...appendedLabels])\n        } else {\n            let filenames = []\n\n            const formData = new FormData();\n\n            formData.append('id', dataset.imageFile)\n            formData.append('last', uploadedImages.length-1)\n\n            for (let i = 0; i < appendedImages.length; i++) {\n                formData.append('data[]', appendedImages[i]);\n                formData.append('labels[]', appendedLabels[i]);\n                formData.append('filenames[]', parseInt(uploadedImages[uploadedImages.length-1])+i+1);\n                filenames.push((parseInt(uploadedImages[uploadedImages.length-1])+i+1).toString())\n            }\n\n            setUploadedImages(state => [...state, ...filenames])\n            setAssignedLabels(state => [...state, ...appendedLabels])\n            updateDataset()\n\n            try {\n                await fileAPI.post(\"/append-image\", formData)\n            } catch (err) {}\n        }\n\n        setAppendedImages([])\n        setAppendedLabels([])\n        setRefreshData(new Date().getTime())\n    }\n\n    const uploadImage = async () => {\n        setDisabledCreate(true)\n\n        if (uploadedImages.length !== 0 && !assignedLabels.includes(\"No label\") && title !== \"\" && description !== \"\") {\n            const formData = new FormData();\n            const id = new Date().toISOString();\n\n            formData.append('id', id)\n\n            for (let i = 0; i < uploadedImages.length; i++) {\n                formData.append('data[]', uploadedImages[i]);\n                formData.append('labels[]', assignedLabels[i]);\n            }\n\n            try {\n                await fileAPI.post(\"/upload\", formData);\n            } catch (err) {}\n\n            if (image) {\n                const formImage = new FormData();\n                formImage.append('image', image);\n                \n                try {\n                    const imageResponse = await imageAPI.post(\"/upload-image\", formImage);\n    \n                    uploadDataset(imageResponse.data.data, id)\n                } catch (err) {}\n            } else {\n                uploadDataset(\"default.png\", id)\n            }\n        } else {\n            setDisabledCreate(false)\n        }\n    }\n\n    const uploadDataset = async (imageName, id) => {\n        try {\n            const datasetResponse = await itemsAPI.post(\"/\", {\n                title: title,\n                imageFile: id,\n                creator: currentUser.id,\n                description: description,\n                picture: imageName,\n                upvotes: [],\n                bookmarks: [],\n                labels: labels,\n                rgb: rgb,\n                width: width,\n                height: height,\n                updated: new Date().toISOString(),\n                visibility: visibility,\n                type: \"dataset\"\n            });\n\n            history.push(`/dataset/${datasetResponse.data.data}`)\n        } catch (err) {}\n    }\n\n    const updateDataset = async () => {\n        if (image) {\n            try {\n                const formImage = new FormData();\n                formImage.append('image', image);\n    \n                const tempPicture = picture\n                const imageResponse = await imageAPI.post(\"/upload\", formImage);\n\n                await itemsAPI.put(`/${datasetID}?type=dataset`, {\n                    title: title,\n                    description: description,\n                    picture: imageResponse.data.data,\n                    labels: labels,\n                    rgb: rgb,\n                    width: width,\n                    height: height,\n                    updated: new Date().toISOString()\n                })\n\n                setImage(undefined)\n                setPicture(imageResponse.data.data)\n    \n                if (tempPicture !== \"default.png\") {\n                    await imageAPI.put('/remove', {picture: tempPicture});\n                }\n            } catch (err) {}\n        } else {\n            try {\n                await itemsAPI.put(`/${datasetID}?type=dataset`, {\n                    title: title,\n                    description: description,\n                    picture: picture,\n                    labels: labels,\n                    rgb: rgb,\n                    width: width,\n                    height: height,\n                    updated: new Date().toISOString()\n                })\n            } catch (err) {}\n        }\n\n        setUpdated(new Date().toISOString())\n        setChangedData(false)\n        setChangedSettings(false)\n    }\n\n    const deleteDataset = async () => {\n        try {\n            const formData = new formData()\n            formData.append('id', dataset.imageFile)\n\n            await itemsAPI.delete(`/${datasetID}`)\n            await fileAPI.post(\"/remove-dataset\", formData);\n\n            removeOpenItems(datasetID)\n            history.replace(\"/home\")\n        } catch (err) {}\n    }\n\n    return (\n        <>\n            {loaded && exist ?\n                <div className=\"main-body\">\n                    <div className=\"sidebar\">\n                        <div className=\"sidebar-header\">\n                            <img src=\"http://localhost:3000/dataset.png\"\n                                    className={!(type === \"view\" && !dataset.self) ? \"create-item-edit-image\" : undefined} />\n                            <input className={`create-item-title ${!(type === \"view\" && !dataset.self) && \"create-item-edit-input\"}`}\n                                    placeholder=\"Title\"\n                                    onChange={e => {\n                                        setTitle(e.target.value)\n                                        setChangedSettings(true)\n                                    }}\n                                    disabled={!(dataset.self || type === \"create\")}\n                                    value={title} />\n                        </div>\n                        <textarea className={`create-item-description ${!(type === \"view\" && !dataset.self) && \"create-item-edit-textarea\"}`}\n                                    placeholder=\"Description\"\n                                    onChange={e => {\n                                        setDescription(e.target.value)\n                                        setChangedSettings(true)\n                                    }}\n                                    disabled={!(dataset.self || type === \"create\")}\n                                    value={description} />\n                        {(dataset.self || type === \"create\") &&\n                            <>\n                                <div className=\"create-item-setup\">\n                                    <label className=\"create-item-setup-label\">Picture</label>\n                                    <input className=\"create-item-setup-input\"\n                                            type=\"file\" \n                                            name=\"image\" \n                                            onChange={e => {\n                                                setImage(e.target.files[0])\n                                                setChangedSettings(true)\n                                            }} />\n                                </div>\n                                {type === \"create\" &&\n                                    <div className=\"create-item-setup\">\n                                        <label className=\"create-item-setup-label\">Public?</label>\n                                        <input type=\"checkbox\" \n                                                onChange={() => {\n                                                    setVisibility(previous => !previous)\n                                                    setChangedSettings(true)\n                                                }}\n                                                checked={visibility} />\n                                    </div>\n                                }\n                                <div className=\"create-item-setup\">\n                                    <label className=\"create-item-setup-label\">RGB Images?</label>\n                                    <input type=\"checkbox\" \n                                            onChange={() => {\n                                                setRgb(previous => !previous)\n                                                setChangedSettings(true)\n                                            }}\n                                            checked={rgb} />\n                                </div>\n                                <div className=\"create-item-setup\">\n                                    <label className=\"create-item-setup-label\">Image Height</label>\n                                    <input className=\"create-item-setup-dimension\"\n                                            placeholder=\"Pixels\"\n                                            disabled={!(dataset.self || type === \"create\")}\n                                            value={height}\n                                            onChange={e => {\n                                                setHeight(e.target.value)\n                                                setChangedSettings(true)\n                                            }} />\n                                </div>\n                                <div className=\"create-item-setup\">\n                                    <label className=\"create-item-setup-label\">Image Width</label>\n                                    <input className=\"create-item-setup-dimension\"\n                                            placeholder=\"Pixels\"\n                                            disabled={!(dataset.self || type === \"create\")}\n                                            value={width}\n                                            onChange={e => {\n                                                setWidth(e.target.value)\n                                                setChangedSettings(true)\n                                            }} />\n                                </div>\n                            </>\n                        }\n                        {!dataset.self && type !== \"create\" && <p className=\"item-creator\">{dataset.creatorName.name}</p>}\n                        <div className=\"item-information\">\n                            {type !== \"create\" && <p className=\"item-date\">{date}</p>}\n                            <span />\n                            {type !== \"create\" &&\n                                <>\n                                    <ThumbUpIcon className={`item-icon ${upvoted ? \"blue2\" : \"white\"}`} onClick={() => {updateUpvote()}} />\n                                    <p className={upvoted ? \"blue2\" : \"white\"}>{upvotes}</p>\n                                </>\n                            }\n                            {!dataset.self && type !== \"create\" && <BookmarkIcon className={`item-icon ${bookmarked ? \"blue2\" : \"white\"}`} onClick={() => {updateBookmark()}} />}\n                            {dataset.self && type !== \"create\" && \n                                <>\n                                    {visibility ? \n                                        <VisibilityIcon className=\"item-visibility\" onClick={() => {updateVisibility()}} />\n                                    :\n                                        <VisibilityOffIcon className=\"item-visibility\" onClick={() => {updateVisibility()}} />\n                                    }\n                                </>\n                            }\n                        </div>\n                        {!dataset.self && type !== \"create\" &&\n                            <>\n                                <div className=\"sidebar-divided\" />\n                                <div className=\"create-item-setup\">\n                                    <label className=\"create-item-setup-label\">Image Height</label>\n                                    <p className=\"dataset-dimension\">{height}</p>\n                                </div>\n                                <div className=\"create-item-setup\">\n                                    <label className=\"create-item-setup-label\">Image Width</label>\n                                    <p className=\"dataset-dimension\">{width}</p>\n                                </div>\n                            </>\n                        }\n                        {type === \"view\" && !dataset.self &&\n                            <>\n                                <div className=\"sidebar-divided\" />\n                                <div className=\"sidebar-dataset-copy\">\n                                    <div>\n                                        {copyData ? <p>Data ID</p> : <p>Copied</p>}\n                                        <button disabled={!copyData} onClick={() => {copiedInterval()}}>\n                                            <ContentCopyIcon className=\"dataset-copy-icon\" />\n                                        </button>\n                                    </div>\n                                    <a href={`http://127.0.0.1:5000/files/${dataset.imageFile}`} download>\n                                        <DownloadIcon className=\"dataset-download-icon\" />\n                                    </a>\n                                </div>\n                            </>\n                        }\n                        {type === \"view\" && !dataset.self &&\n                            <>\n                                <div className=\"sidebar-divided\" />\n                                <Shortcut type={\"related\"} datasetID={datasetID} />\n                            </>\n                        }\n                        {type === \"view\" &&\n                            <>\n                                {dataset.self &&\n                                    <>\n                                        <div className=\"sidebar-divided\" />\n                                        <button className=\"blue-button item-save\"\n                                                disabled={!changedSettings && !changedData}\n                                                onClick={() => {updateDataset()}}>Save Dataset</button>\n                                        <button className=\"text-button item-delete\"\n                                                onClick={() => {deleteDataset()}}>Delete</button>\n                                    </>\n                                }\n                            </>\n                        }\n                    </div>\n                    <div className=\"inner\">\n                        <div className=\"workspace-body\">\n                            <div className=\"workspace-inner\">\n                                {(type === \"create\" || dataset.self) ?\n                                    <>\n                                        <div className=\"view-items-top\">\n                                            {type === \"create\" ?\n                                                <>\n                                                    <h1>Create Dataset</h1>\n                                                    <div>\n                                                        <span />\n                                                        <button className=\"blue-button\"\n                                                                disabled={disableCreate}\n                                                                onClick={() => {uploadImage()}}>Create</button>\n                                                    </div>\n                                                </>\n                                            :\n                                                <>\n                                                    <h1>Dataset</h1>\n                                                    <div className=\"create-dataset-upload\">\n                                                        <input type=\"file\" \n                                                                name=\"data\"\n                                                                accept=\"image/*\"\n                                                                multiple\n                                                                onChange={e => {setImageFiles(e.target.files)}} />\n                                                        {type === \"create\" && uploadedImages.length === 0 && \n                                                            <button className=\"white-button\"\n                                                                    disabled={imageFiles.length === 0}\n                                                                    onClick={() => {\n                                                                        addImages()\n                                                                        setChangedData(true)\n                                                                    }}>Add</button>\n                                                        }\n                                                        {(dataset.self || type === \"create\") && uploadedImages.length !== 0 && \n                                                            <>\n                                                                <button className=\"white-button\"\n                                                                        disabled={imageFiles.length === 0}\n                                                                        onClick={() => {\n                                                                            setUploadedImages([])\n                                                                            replaceImages()\n                                                                            setChangedData(true)\n                                                                        }}>Replace</button>\n                                                                <button className=\"white-button\"\n                                                                        disabled={imageFiles.length === 0}\n                                                                        onClick={() => {\n                                                                            if (appendedImages.length !== 0) {\n                                                                                setAppendedImages([])\n                                                                                setAppendedLabels([])\n                                                                            }\n                                                                            appendImages()\n                                                                            setChangedData(true)\n                                                                        }}>Add</button>\n                                                            </>\n                                                        }\n                                                        {uploadedImages.length !== 0 &&\n                                                            <div className=\"create-dataset-pagination\">\n                                                                <ArrowBackIosNewIcon className=\"create-dataset-pagination-icon\" onClick={() => {previousPage()}} />\n                                                                <p>Page {page} / {Math.ceil(uploadedImages.length/30)}</p>\n                                                                <ArrowForwardIosIcon className=\"create-dataset-pagination-icon\" onClick={() => {nextPage()}} />\n                                                            </div>\n                                                        }\n                                                    </div>\n                                                </>\n                                            }\n                                        </div>\n                                        {(type === \"create\" || dataset.self) && appendedImages.length !== 0 && \n                                            <div className=\"create-dataset-appended\">\n                                                <div className=\"create-dataset-appended-header\">\n                                                    <p>Uploaded Images</p>\n                                                    <button className=\"text-button\"\n                                                            onClick={() => {\n                                                        setAppendedImages([])\n                                                        setAppendedLabels([])\n                                                    }}>Discard</button>\n                                                </div>\n                                                <div className=\"create-dataset-appended-list\">\n                                                    {appendedImages.map((image, i) => {\n                                                        return (\n                                                            <div className=\"create-dataset-image\" key={i}>\n                                                                <img src={URL.createObjectURL(image)} />\n                                                                <div>\n                                                                    <select value={appendedLabels[i]}\n                                                                            onChange={e => {setAppendedLabels(state => {\n                                                                                        const stateCopy = [...state]\n                                                                                    \n                                                                                        stateCopy[i] = e.target.value\n                                                                                    \n                                                                                        return stateCopy\n                                                                                    })}}>\n                                                                        <option value=\"No label\">No label</option>\n                                                                        {labels.map((label, j) => \n                                                                            <option value={label} key={j}>{label}</option>\n                                                                        )}\n                                                                    </select>\n                                                                    <div onClick={() => {deleteAppended(i)}}>\n                                                                        <DeleteIcon className=\"create-dataset-image-delete\" />\n                                                                    </div>\n                                                                </div>\n                                                            </div>\n                                                        )\n                                                    })}\n                                                </div>\n                                                <div className=\"create-dataset-appended-footer\">\n                                                    <button className=\"blue-button\" \n                                                            disabled={appendedLabels.includes(\"No label\")}\n                                                            onClick={() => {uploadAppended()}}>Upload</button>\n                                                </div>\n                                            </div>\n                                        }\n                                        <div className=\"create-dataset-images-list\" key={refreshData}>\n                                            {uploadedImages.map((image, i) => {\n                                                if (i >= start && i < end) {\n                                                    return (\n                                                        <div className=\"create-dataset-image\" key={i}>\n                                                            <img src={type === \"create\" ? \n                                                                            URL.createObjectURL(image) \n                                                                        : assignedLabels[i] === \"No label\" ?\n                                                                            `http://127.0.0.1:5000/files/${dataset.imageFile}/no-label/${image}.jpg`\n                                                                        : assignedLabels[i] !== \"No label\" ?\n                                                                            `http://127.0.0.1:5000/files/${dataset.imageFile}/images/${assignedLabels[i]}/${image}.jpg`\n                                                                        :\n                                                                            URL.createObjectURL(image) \n                                                                        } \n                                                            />\n                                                            <div>\n                                                                <select value={assignedLabels[i]}\n                                                                        onChange={e => {updateLabel(e, i)}}>\n                                                                    <option value=\"No label\">No label</option>\n                                                                    {labels.map((label, j) => \n                                                                        <option value={label} key={j}>{label}</option>\n                                                                    )}\n                                                                </select>\n                                                                <div onClick={() => {deleteImage(image, i, assignedLabels[i])}}>\n                                                                    <DeleteIcon className=\"create-dataset-image-delete\" />\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                    )\n                                                }\n                                            })}\n                                        </div>\n                                    </>\n                                :   \n                                    <>\n                                        <div className=\"view-items-top\">\n                                            <p>Dataset</p>\n                                        </div>\n                                        <div className=\"create-dataset-images-list\" key={refreshData}>\n                                            {uploadedImages.map((image, i) => {\n                                                if (i >= start && i < end) {\n                                                    return (\n                                                        <div className=\"create-dataset-image\" key={i}>\n                                                            <img src={`http://127.0.0.1:5000/files/${dataset.imageFile}/images/${assignedLabels[i]}/${image}.jpg`} />\n                                                            <div>\n                                                                <p>{assignedLabels[i]}</p>\n                                                            </div>\n                                                        </div>\n                                                    )\n                                                }\n                                            })}\n                                        </div>\n                                    </>\n                                }\n                            </div>\n                            <div className=\"create-workspace-data\">\n                                <p className=\"create-workspace-data-header\">Labels:</p>\n                                <div className=\"sidebar-divided\" />\n                                {(type === \"create\" || dataset.self) &&\n                                    <input className=\"create-dataset-label-input\"\n                                            placeholder=\"Add Label\"\n                                            onChange={e => {setAddLabel(e.target.value)}}\n                                            onKeyPress={addFunctionKey}\n                                            value={addLabel} />\n                                }\n                                <div className=\"create-dataset-labels-list\" key={refreshLabels}>\n                                    {labels.map((label, i) => {\n                                        return (\n                                            <div className={`create-dataset-label ${colours[i % colours.length]}`} key={i}>\n                                                <p>{label}</p>\n                                                {(type === \"create\" || dataset.self) &&\n                                                    <div onClick={() => {deleteLabel(i)}}>\n                                                        <CloseIcon className=\"create-dataset-label-icon\" /> \n                                                    </div>\n                                                }\n                                            </div>\n                                        )\n                                    })}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            : loaded && !exist &&\n                <div className=\"inner-body\">  \n                    <p className=\"item-exist\">Cannot find dataset</p>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default Dataset","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/items.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Model-Node.jsx",["190"],"import React from 'react'\n\nconst ModelNode = ({type, selected, last}) => {\n    return (\n        <div className={`model-node ${type === \"Input\" && \"model-node-input\"}`}>\n            <div className={selected ? \"model-node-selected\" : \"model-node-unselected\"}>\n                <p>{type}</p>\n            </div>\n            {!last &&\n                <img src=\"http://localhost:3000/Node-Connector.png\" className=\"model-node-connector\" />\n            }\n        </div>\n    )\n};\n\nexport default ModelNode;\n","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/train.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Shortcut.jsx",["191","192"],"import React, {useState, useEffect, useContext} from 'react'\nimport { Link } from 'react-router-dom';\nimport usersAPI from '../API/users'\nimport itemsAPI from '../API/items'\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport AddIcon from '@mui/icons-material/Add';\n\nconst Shortcut = ({type, currentUserID, datasetID}) => {\n    const {addOpenItems} = useContext(OpenItemsContext);\n    const [items, setItems] = useState();\n    const [loaded, setLoaded] = useState(false);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                let items;\n\n                if (type === \"workspaces\") {\n                    items = await usersAPI.get(`/created-shortcut?type=workspace`);\n                } else if (type === \"datasets\") {\n                    items = await usersAPI.get(`/created-shortcut?type=dataset`);\n                } else if (type === \"bookmarked\") {\n                    items = await usersAPI.get(`/bookmarked-shortcut`);\n                } else {\n                    items = await itemsAPI.get(`/associated-workspaces?id=${datasetID}`);\n                }\n\n                setItems(items.data.data)\n                setLoaded(true);\n            } catch (err) {}\n        }\n        fetchData();\n    }, [])\n\n    const addHeader = (item) => {\n        if (item.creator === currentUserID) {\n            addOpenItems(item._id, item.title, item.type)\n        }\n    }\n\n    return (\n        <>\n            {loaded &&\n                <div className=\"shortcut\">\n                    <div className=\"shortcut-header\">\n                        {type === \"related\" ?\n                            <p className=\"shortcut-link\">Related Workspaces</p>\n                        :\n                            <Link className=\"shortcut-link\"\n                                    to={type === \"workspaces\" ? \"/created-workspaces\" : (type === \"datasets\") ? \"/created-datasets\" : \"/bookmarked\"}>\n                                {type === \"workspaces\" ? \"Your Workspaces\" : (type === \"datasets\") ? \"Your Datasets\" : \"Your Bookmarked\"}\n                            </Link>\n                        }\n                        <span />\n                        {type === \"workspaces\" && \n                            <Link to=\"/create-workspace\">\n                                <AddIcon className=\"shortcut-icon\" />\n                            </Link>\n                        }\n                        {type === \"datasets\" && \n                            <Link to=\"/create-dataset\">\n                                <AddIcon className=\"shortcut-icon\" />\n                            </Link>\n                        }\n                    </div>\n                    <div className=\"shortcut-body\">\n                        {items.length === 0 ?\n                            <p className=\"shortcut-none\">Empty</p>\n                        :\n                            <>\n                                {items.map((item, i) => {\n                                    return (\n                                        <Link to={item.type === \"workspace\" ? `/workspace/${item._id}` : `/dataset/${item._id}`}\n                                                className=\"shortcut-item\" \n                                                onClick={() => {addHeader(item)}}\n                                                key={i}>\n                                            <img src={`http://localhost:4000/images/${item.picture}`} />\n                                            <p>{item.title}</p>\n                                        </Link>\n                                    )\n                                })}\n                            </>\n                        }\n                    </div>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default Shortcut","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Contexts/cardFormatContext.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Chart.jsx",["193"],"import React from 'react'\nimport { Line } from 'react-chartjs-2';\nimport Chart from '../Components/Chart';\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend,\n} from 'chart.js';\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n);\n\nconst ChartComponent = ({x, y1, y2, type}) => {\n    return (\n        <div className=\"chart\">\n            <p className=\"chart-title\">{type} / Epochs</p>\n            <Line \n                data={{\n                    labels: x,\n                    datasets: [\n                        {\n                            label: `Training ${type}`,\n                            data: y1,\n                            borderColor: '#3C51F9',\n                            tension: 0,\n                            backgroundColor: ['#FBFBFB'],\n                        },\n                        {\n                            label: `Validation ${type}`,\n                            fill: false,\n                            borderDash: [5, 5],\n                            data: y2,\n                            borderColor: '#3C51F9',\n                            tension: 0,\n                            backgroundColor: ['#FBFBFB'],\n                        }\n                    ],\n                }} \n                options={{\n                    plugins: {\n                        legend: {\n                            display: true,\n                            position: 'right'\n                        }\n                    },\n                    scales: {\n                        x: {\n                            display: true,\n                            title: {\n                                display: true,\n                                text: 'Epochs',\n                                color: '#FBFBFB',\n                                padding: {top: 10, left: 0, right: 0, bottom: 0}\n                            }\n                        },\n                        y: {\n                            display: true,\n                            title: {\n                                display: true,\n                                text: type,\n                                color: '#FBFBFB',\n                                padding: {top: 0, left: 0, right: 0, bottom: 10}\n                            }\n                        }\n                    },\n                    maintainAspectRatio: false,\n                    responsive: false,\n                    animation: false\n                }}\n                height={400} \n                width={650}\n            />\n        </div>\n    )\n}\n\nexport default ChartComponent","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/predict.js",[],{"ruleId":"194","replacedBy":"195"},{"ruleId":"196","replacedBy":"197"},{"ruleId":"198","severity":1,"message":"199","line":10,"column":17,"nodeType":"200","endLine":10,"endColumn":95},{"ruleId":"198","severity":1,"message":"199","line":79,"column":37,"nodeType":"200","endLine":79,"endColumn":156},{"ruleId":"198","severity":1,"message":"199","line":80,"column":37,"nodeType":"200","endLine":80,"endColumn":157},{"ruleId":"194","replacedBy":"201"},{"ruleId":"196","replacedBy":"202"},{"ruleId":"203","severity":1,"message":"204","line":59,"column":12,"nodeType":"205","messageId":"206","endLine":59,"endColumn":26},{"ruleId":"207","severity":1,"message":"208","line":76,"column":57,"nodeType":"209","messageId":"210","endLine":76,"endColumn":59},{"ruleId":"207","severity":1,"message":"208","line":116,"column":46,"nodeType":"209","messageId":"210","endLine":116,"endColumn":48},{"ruleId":"211","severity":1,"message":"212","line":135,"column":8,"nodeType":"213","endLine":135,"endColumn":10,"suggestions":"214"},{"ruleId":"211","severity":1,"message":"215","line":175,"column":8,"nodeType":"213","endLine":175,"endColumn":25,"suggestions":"216"},{"ruleId":"207","severity":1,"message":"208","line":257,"column":46,"nodeType":"209","messageId":"210","endLine":257,"endColumn":48},{"ruleId":"207","severity":1,"message":"208","line":351,"column":28,"nodeType":"209","messageId":"210","endLine":351,"endColumn":30},{"ruleId":"207","severity":1,"message":"208","line":390,"column":46,"nodeType":"209","messageId":"210","endLine":390,"endColumn":48},{"ruleId":"198","severity":1,"message":"199","line":476,"column":29,"nodeType":"200","endLine":477,"endColumn":128},{"ruleId":"198","severity":1,"message":"199","line":560,"column":41,"nodeType":"200","endLine":560,"endColumn":112},{"ruleId":"217","severity":1,"message":"218","line":623,"column":98,"nodeType":"219","messageId":"220","endLine":635,"endColumn":98},{"ruleId":"217","severity":1,"message":"218","line":792,"column":109,"nodeType":"219","messageId":"220","endLine":804,"endColumn":110},{"ruleId":"207","severity":1,"message":"221","line":1304,"column":72,"nodeType":"209","messageId":"222","endLine":1304,"endColumn":74},{"ruleId":"198","severity":1,"message":"199","line":1308,"column":65,"nodeType":"200","endLine":1308,"endColumn":179},{"ruleId":"211","severity":1,"message":"223","line":47,"column":8,"nodeType":"213","endLine":47,"endColumn":10,"suggestions":"224"},{"ruleId":"217","severity":1,"message":"218","line":79,"column":13,"nodeType":"219","messageId":"220","endLine":79,"endColumn":56},{"ruleId":"198","severity":1,"message":"199","line":118,"column":37,"nodeType":"200","endLine":118,"endColumn":156},{"ruleId":"198","severity":1,"message":"199","line":119,"column":37,"nodeType":"200","endLine":119,"endColumn":157},{"ruleId":"198","severity":1,"message":"199","line":33,"column":25,"nodeType":"200","endLine":33,"endColumn":74},{"ruleId":"198","severity":1,"message":"199","line":35,"column":25,"nodeType":"200","endLine":35,"endColumn":79},{"ruleId":"198","severity":1,"message":"199","line":41,"column":25,"nodeType":"200","endLine":41,"endColumn":72},{"ruleId":"198","severity":1,"message":"199","line":43,"column":25,"nodeType":"200","endLine":43,"endColumn":77},{"ruleId":"211","severity":1,"message":"225","line":35,"column":8,"nodeType":"213","endLine":35,"endColumn":10,"suggestions":"226"},{"ruleId":"198","severity":1,"message":"199","line":76,"column":17,"nodeType":"200","endLine":76,"endColumn":111},{"ruleId":"198","severity":1,"message":"199","line":80,"column":50,"nodeType":"200","endLine":80,"endColumn":99},{"ruleId":"198","severity":1,"message":"199","line":80,"column":102,"nodeType":"200","endLine":80,"endColumn":149},{"ruleId":"211","severity":1,"message":"225","line":35,"column":8,"nodeType":"213","endLine":35,"endColumn":10,"suggestions":"227"},{"ruleId":"198","severity":1,"message":"199","line":76,"column":17,"nodeType":"200","endLine":76,"endColumn":114},{"ruleId":"198","severity":1,"message":"199","line":79,"column":46,"nodeType":"200","endLine":79,"endColumn":95},{"ruleId":"198","severity":1,"message":"199","line":79,"column":98,"nodeType":"200","endLine":79,"endColumn":145},{"ruleId":"228","severity":1,"message":"229","line":25,"column":17,"nodeType":"230","messageId":"231","endLine":41,"endColumn":18},{"ruleId":"211","severity":1,"message":"232","line":52,"column":8,"nodeType":"213","endLine":52,"endColumn":10,"suggestions":"233"},{"ruleId":"228","severity":1,"message":"229","line":73,"column":17,"nodeType":"230","messageId":"231","endLine":89,"endColumn":18},{"ruleId":"234","severity":1,"message":"235","line":75,"column":25,"nodeType":"205","messageId":"236","endLine":75,"endColumn":30},{"ruleId":"234","severity":1,"message":"235","line":78,"column":25,"nodeType":"205","messageId":"236","endLine":78,"endColumn":30},{"ruleId":"234","severity":1,"message":"235","line":81,"column":25,"nodeType":"205","messageId":"236","endLine":81,"endColumn":30},{"ruleId":"234","severity":1,"message":"235","line":84,"column":25,"nodeType":"205","messageId":"236","endLine":84,"endColumn":30},{"ruleId":"234","severity":1,"message":"235","line":87,"column":25,"nodeType":"205","messageId":"236","endLine":87,"endColumn":30},{"ruleId":"217","severity":1,"message":"218","line":103,"column":17,"nodeType":"219","messageId":"220","endLine":103,"endColumn":66},{"ruleId":"217","severity":1,"message":"218","line":105,"column":17,"nodeType":"219","messageId":"220","endLine":105,"endColumn":66},{"ruleId":"228","severity":1,"message":"229","line":113,"column":9,"nodeType":"230","messageId":"231","endLine":129,"endColumn":10},{"ruleId":"198","severity":1,"message":"199","line":171,"column":37,"nodeType":"200","endLine":171,"endColumn":156},{"ruleId":"198","severity":1,"message":"199","line":172,"column":37,"nodeType":"200","endLine":172,"endColumn":157},{"ruleId":"207","severity":1,"message":"208","line":68,"column":53,"nodeType":"209","messageId":"210","endLine":68,"endColumn":55},{"ruleId":"207","severity":1,"message":"208","line":98,"column":46,"nodeType":"209","messageId":"210","endLine":98,"endColumn":48},{"ruleId":"211","severity":1,"message":"237","line":115,"column":8,"nodeType":"213","endLine":115,"endColumn":10,"suggestions":"238"},{"ruleId":"211","severity":1,"message":"215","line":136,"column":8,"nodeType":"213","endLine":136,"endColumn":25,"suggestions":"239"},{"ruleId":"211","severity":1,"message":"240","line":144,"column":8,"nodeType":"213","endLine":144,"endColumn":16,"suggestions":"241"},{"ruleId":"207","severity":1,"message":"208","line":173,"column":51,"nodeType":"209","messageId":"210","endLine":173,"endColumn":53},{"ruleId":"242","severity":1,"message":"243","line":495,"column":34,"nodeType":"205","messageId":"244","endLine":495,"endColumn":42},{"ruleId":"198","severity":1,"message":"199","line":512,"column":29,"nodeType":"200","endLine":513,"endColumn":126},{"ruleId":"198","severity":1,"message":"199","line":737,"column":65,"nodeType":"200","endLine":737,"endColumn":105},{"ruleId":"207","severity":1,"message":"221","line":768,"column":76,"nodeType":"209","messageId":"222","endLine":768,"endColumn":78},{"ruleId":"198","severity":1,"message":"199","line":772,"column":61,"nodeType":"200","endLine":781,"endColumn":63},{"ruleId":"207","severity":1,"message":"221","line":806,"column":76,"nodeType":"209","messageId":"222","endLine":806,"endColumn":78},{"ruleId":"198","severity":1,"message":"199","line":810,"column":61,"nodeType":"200","endLine":810,"endColumn":166},{"ruleId":"198","severity":1,"message":"199","line":10,"column":17,"nodeType":"200","endLine":10,"endColumn":104},{"ruleId":"211","severity":1,"message":"245","line":33,"column":8,"nodeType":"213","endLine":33,"endColumn":10,"suggestions":"246"},{"ruleId":"198","severity":1,"message":"199","line":77,"column":45,"nodeType":"200","endLine":77,"endColumn":105},{"ruleId":"203","severity":1,"message":"247","line":3,"column":8,"nodeType":"205","messageId":"206","endLine":3,"endColumn":13},"no-native-reassign",["248"],"no-negated-in-lhs",["249"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["248"],["249"],"no-unused-vars","'disabledCreate' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'addOpenItems', 'type', and 'workspaceID'. Either include them or remove the dependency array.","ArrayExpression",["250"],"React Hook useEffect has a missing dependency: 'exist'. Either include it or remove the dependency array.",["251"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","React Hook useEffect has missing dependencies: 'history', 'searchPhrase', and 'urlPhrase'. Either include them or remove the dependency array.",["252"],"React Hook useEffect has a missing dependency: 'item.updated'. Either include it or remove the dependency array.",["253"],["254"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has a missing dependency: 'type'. Either include it or remove the dependency array.",["255"],"no-const-assign","'items' is constant.","const","React Hook useEffect has missing dependencies: 'addOpenItems', 'datasetID', and 'type'. Either include them or remove the dependency array.",["256"],["257"],"React Hook useEffect has missing dependencies: 'loaded' and 'updateDataset'. Either include them or remove the dependency array.",["258"],"no-use-before-define","'formData' was used before it was defined.","usedBeforeDefined","React Hook useEffect has missing dependencies: 'datasetID' and 'type'. Either include them or remove the dependency array.",["259"],"'Chart' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"260","fix":"261"},{"desc":"262","fix":"263"},{"desc":"264","fix":"265"},{"desc":"266","fix":"267"},{"desc":"266","fix":"268"},{"desc":"269","fix":"270"},{"desc":"271","fix":"272"},{"desc":"262","fix":"273"},{"desc":"274","fix":"275"},{"desc":"276","fix":"277"},"Update the dependencies array to be: [addOpenItems, type, workspaceID]",{"range":"278","text":"279"},"Update the dependencies array to be: [exist, loaded, updated]",{"range":"280","text":"281"},"Update the dependencies array to be: [history, searchPhrase, urlPhrase]",{"range":"282","text":"283"},"Update the dependencies array to be: [item.updated]",{"range":"284","text":"285"},{"range":"286","text":"285"},"Update the dependencies array to be: [type]",{"range":"287","text":"288"},"Update the dependencies array to be: [addOpenItems, datasetID, type]",{"range":"289","text":"290"},{"range":"291","text":"281"},"Update the dependencies array to be: [labels, loaded, updateDataset]",{"range":"292","text":"293"},"Update the dependencies array to be: [datasetID, type]",{"range":"294","text":"295"},[6861,6863],"[addOpenItems, type, workspaceID]",[8817,8834],"[exist, loaded, updated]",[1790,1792],"[history, searchPhrase, urlPhrase]",[2202,2204],"[item.updated]",[2205,2207],[2236,2238],"[type]",[5403,5405],"[addOpenItems, datasetID, type]",[6852,6869],[7042,7050],"[labels, loaded, updateDataset]",[1262,1264],"[datasetID, type]"]