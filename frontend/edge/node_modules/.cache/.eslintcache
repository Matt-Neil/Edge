[{"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/index.js":"1","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/App.js":"2","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Contexts/currentUserContext.js":"3","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/auth.js":"4","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Sign-In.jsx":"5","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Account.jsx":"6","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Header.jsx":"7","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/files.js":"8","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/users.js":"9","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/images.js":"10","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Home.jsx":"11","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Not-Found.jsx":"12","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Workspace.jsx":"13","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Search.jsx":"14","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Header-Open-Item.jsx":"15","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Contexts/openItemsContext.js":"16","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Item-Row-Card.jsx":"17","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Item-Square-Card.jsx":"18","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/View-Items.jsx":"19","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/global.js":"20","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Dataset.jsx":"21","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/items.js":"22","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Model-Node.jsx":"23","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/train.js":"24","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Shortcut.jsx":"25","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Contexts/cardFormatContext.js":"26","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Chart.jsx":"27","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/predict.js":"28","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Contexts/messageContext.js":"29","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/MessageCard.jsx":"30"},{"size":825,"mtime":1649422925662,"results":"31","hashOfConfig":"32"},{"size":4784,"mtime":1646834713874,"results":"33","hashOfConfig":"32"},{"size":1348,"mtime":1649772965557,"results":"34","hashOfConfig":"32"},{"size":134,"mtime":1639341716098,"results":"35","hashOfConfig":"32"},{"size":5341,"mtime":1649496660909,"results":"36","hashOfConfig":"32"},{"size":6119,"mtime":1649496662606,"results":"37","hashOfConfig":"32"},{"size":984,"mtime":1648485970081,"results":"38","hashOfConfig":"32"},{"size":107,"mtime":1648468753698,"results":"39","hashOfConfig":"32"},{"size":135,"mtime":1641219148050,"results":"40","hashOfConfig":"32"},{"size":136,"mtime":1641050477587,"results":"41","hashOfConfig":"32"},{"size":4428,"mtime":1646999247096,"results":"42","hashOfConfig":"32"},{"size":157,"mtime":1643322933916,"results":"43","hashOfConfig":"32"},{"size":112879,"mtime":1650237378398,"results":"44","hashOfConfig":"32"},{"size":6456,"mtime":1647457044707,"results":"45","hashOfConfig":"32"},{"size":2077,"mtime":1647457064895,"results":"46","hashOfConfig":"32"},{"size":1236,"mtime":1643565439585,"results":"47","hashOfConfig":"32"},{"size":5026,"mtime":1647457090258,"results":"48","hashOfConfig":"32"},{"size":5495,"mtime":1647457092395,"results":"49","hashOfConfig":"32"},{"size":9624,"mtime":1650643414526,"results":"50","hashOfConfig":"32"},{"size":136,"mtime":1643133085776,"results":"51","hashOfConfig":"32"},{"size":46579,"mtime":1650563840330,"results":"52","hashOfConfig":"32"},{"size":135,"mtime":1643901354878,"results":"53","hashOfConfig":"32"},{"size":498,"mtime":1648575114667,"results":"54","hashOfConfig":"32"},{"size":141,"mtime":1645959654919,"results":"55","hashOfConfig":"32"},{"size":3791,"mtime":1646597094714,"results":"56","hashOfConfig":"32"},{"size":806,"mtime":1646834516798,"results":"57","hashOfConfig":"32"},{"size":2666,"mtime":1650237290167,"results":"58","hashOfConfig":"32"},{"size":143,"mtime":1649247579439,"results":"59","hashOfConfig":"32"},{"size":770,"mtime":1649430710639,"results":"60","hashOfConfig":"32"},{"size":195,"mtime":1649423388981,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"yw0j30",{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"64"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"64"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"64"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"64"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"64"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"64"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"64"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"64"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"64"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"64"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/index.js",[],["134","135"],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/App.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Contexts/currentUserContext.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/auth.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Sign-In.jsx",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Account.jsx",["136"],"import React, {useState, useEffect, useContext} from 'react'\nimport { Link, useHistory } from 'react-router-dom'\nimport SearchIcon from '@mui/icons-material/Search';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport usersAPI from '../API/users'\nimport authAPI from \"../API/auth\"\nimport { CurrentUserContext } from '../Contexts/currentUserContext';\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport { MessageContext } from '../Contexts/messageContext';\nimport Shortcut from '../Components/Shortcut';\nimport MessageCard from '../Components/MessageCard';\n\nconst Account = ({setSearchPhrase}) => {\n    const [user, setUser] = useState();\n    const [loaded, setLoaded] = useState(false);\n    const [password, setPassword] = useState(\"\")\n    const [input, setInput] = useState(\"\");\n    const [changed, setChanged] = useState(false)\n    const [message, setMessage] = useState(\"\")\n    const {removeCurrentUser} = useContext(CurrentUserContext);\n    const {clearItems} = useContext(OpenItemsContext);\n    const {displayMessage, displayMessageInterval} = useContext(MessageContext);\n    const history = useHistory()\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const user = await usersAPI.get(\"/\");\n\n                setUser(user.data.data);\n                setLoaded(true);\n            } catch (err) {\n                setMessage(\"Error occurred\")\n                displayMessageInterval()\n            }\n        }\n        fetchData();\n    }, [])\n\n    const searchFunctionKey = (e) => {\n        if (e.key === \"Enter\" && input !== \"\") {\n            setSearchPhrase(input);\n            history.push(`/search-results/${input}`);\n        }\n    }\n\n    const searchFunctionButton = () => {\n        if (input !== \"\") {\n            setSearchPhrase(input);\n            history.push(`/search-results/${input}`);\n        }\n    }\n\n    const signout = async () => {\n        await authAPI.get(\"/signout\");\n\n        removeCurrentUser();\n        clearItems();\n\n        if (typeof window !== 'undefined') {\n            window.location = `/sign-in`\n        }\n    }\n\n    const updateAccount = async () => {\n        try {\n            if (password !== \"\") {\n                await usersAPI.put(\"/\", {password: password})\n\n                setMessage(\"Account Updated\")\n                displayMessageInterval()\n            } else {\n                setMessage(\"Password is blank\")\n                displayMessageInterval()\n            }\n        } catch (err) {\n            setMessage(\"Error occurred\")\n            displayMessageInterval()\n        }\n    }\n\n    const deleteAccount = async () => {\n        try {\n            await usersAPI.delete(\"/\")\n\n            signout()\n        } catch (err) {\n            setMessage(\"Error occurred\")\n            displayMessageInterval()\n        }\n    }\n\n    return (\n        <>\n            {loaded &&\n                <div className=\"main-body\">\n                    <div className=\"sidebar\">\n                        <div className=\"home-search\">\n                            <input className=\"home-search-input\" \n                                    placeholder=\"Search\"\n                                    value={input}\n                                    onChange={e => setInput(e.target.value)}\n                                    onKeyPress={searchFunctionKey} />\n                            <SearchIcon className=\"home-search-icon\" onClick={e => searchFunctionButton()} />\n                        </div>\n                        <div className=\"sidebar-divided\" />\n                        <Link className=\"home-options-link\" to=\"/public-workspaces\">\n                            <p>Public Workspaces</p>\n                            <ArrowForwardIosIcon className=\"home-options-icon\" />\n                        </Link>\n                        <Link className=\"home-options-link\" to=\"public-datasets\">\n                            <p>Public Datasets</p>\n                            <ArrowForwardIosIcon className=\"home-options-icon\" />\n                        </Link>\n                        <div className=\"sidebar-divided\" />\n                        <Shortcut type={\"workspaces\"} />\n                        <div className=\"sidebar-divided\" />\n                        <Shortcut type={\"datasets\"} />\n                        <div className=\"sidebar-divided\" />\n                        <Shortcut type={\"bookmarked\"} />\n                    </div>\n                    <div className=\"inner\">\n                        <div className=\"account-information\">\n                            <h1>Account Settings</h1>\n                            <label>Name</label>\n                            <p>{user.name}</p>\n                            <label>Email Address</label>\n                            <p>{user.email}</p>\n                            <label>Password</label>\n                            <input placeholder=\"Change Password\" \n                                    type=\"password\"\n                                    value={password} \n                                    onChange={e => {\n                                        setPassword(e.target.value)\n                                        setChanged(true)\n                                    }} />\n                            <button className={\"account-save blue-button\"}\n                                    disabled={password === \"\" || !changed}\n                                    onClick={() => {updateAccount()}}>Update Account</button>\n                            <div>\n                                <button className=\"text-button account-signout\" \n                                        onClick={() => {signout()}}>Sign Out</button>\n                                <button className=\"text-button account-delete\"\n                                        onClick={() => {deleteAccount()}}>Delete Account</button>\n                            </div>\n                        </div>\n                        {displayMessage && <MessageCard message={message} />}\n                    </div>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default Account\n","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Header.jsx",["137"],"import React from 'react'\nimport { Link } from 'react-router-dom'\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\nimport HeaderOpenItem from '../Components/Header-Open-Item'\n\nconst Header = ({openItems}) => {\n    return (\n        <div className=\"header\">\n            <Link to=\"/home\" className=\"header-home\">\n                <img src=\"http://localhost:3000/home-icon.png\" className=\"header-home-icon\" />\n            </Link>\n            <div className=\"header-open\">\n                {openItems.length !== 0 &&\n                    <>\n                        {openItems.map((item, i) => {\n                            return <HeaderOpenItem item={item} key={i} />\n                        })}\n                    </>\n                }\n            </div>\n            <span />\n            <Link to=\"/account\" className=\"header-account\">\n                <AccountCircleIcon className=\"header-account-icon\" />\n            </Link>\n        </div>\n    )\n}\n\nexport default Header","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/files.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/users.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/images.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Home.jsx",["138","139"],"import React, {useState, useEffect, useContext} from 'react'\nimport { Link, useHistory } from 'react-router-dom'\nimport { CardFormatContext } from '../Contexts/cardFormatContext';\nimport usersAPI from '../API/users'\nimport SearchIcon from '@mui/icons-material/Search';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ItemRowCard from '../Components/Item-Row-Card'\nimport ItemSquareCard from '../Components/Item-Square-Card'\nimport Shortcut from '../Components/Shortcut';\n\nconst Home = ({setSearchPhrase}) => {\n    const [recent, setRecent] = useState()\n    const [loaded, setLoaded] = useState(false)\n    const [input, setInput] = useState(\"\");\n    const {cardFormat, changeCardFormat} = useContext(CardFormatContext);\n    const history = useHistory();\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const recent = await usersAPI.get(\"/recent\");\n\n                setRecent(recent.data.data);\n                setLoaded(true);\n            } catch (err) {}\n        }\n        fetchData();\n    }, [])\n\n    const searchFunctionKey = (e) => {\n        if (e.key === \"Enter\" && input !== \"\") {\n            setSearchPhrase(input);\n            history.push(`/search-results/${input}`);\n        }\n    }\n\n    const searchFunctionButton = () => {\n        if (input !== \"\") {\n            setSearchPhrase(input);\n            history.push(`/search-results/${input}`);\n        }\n    }\n\n    return (\n        <>\n            {loaded &&\n                <div className=\"main-body\">\n                    <div className=\"sidebar\">\n                        <div className=\"home-search\">\n                            <input className=\"home-search-input\" \n                                    placeholder=\"Search\"\n                                    value={input}\n                                    onChange={e => setInput(e.target.value)}\n                                    onKeyPress={searchFunctionKey} />\n                            <SearchIcon className=\"home-search-icon\" onClick={e => searchFunctionButton()} />\n                        </div>\n                        <div className=\"sidebar-divided\" />\n                        <Link className=\"home-options-link\" to=\"/public-workspaces\">\n                            <p>Public Workspaces</p>\n                            <ArrowForwardIosIcon className=\"home-options-icon\" />\n                        </Link>\n                        <Link className=\"home-options-link\" to=\"public-datasets\">\n                            <p>Public Datasets</p>\n                            <ArrowForwardIosIcon className=\"home-options-icon\" />\n                        </Link>\n                        <div className=\"sidebar-divided\" />\n                        <Shortcut type={\"workspaces\"} />\n                        <div className=\"sidebar-divided\" />\n                        <Shortcut type={\"datasets\"} />\n                        <div className=\"sidebar-divided\" />\n                        <Shortcut type={\"bookmarked\"} />\n                    </div>\n                    <div className=\"inner\">\n                        <div className=\"home-inner\">\n                            <div className=\"view-items-top\">\n                                <h1>Your Recents</h1>\n                                <div className=\"toggle-card-type\">\n                                    <span />\n                                    <img src=\"http://localhost:3000/List.png\" className=\"toggle-card-type-row-icon\" onClick={() => {changeCardFormat()}} />\n                                    <img src=\"http://localhost:3000/Grid.png\" className=\"toggle-card-type-grid-icon\" onClick={() => {changeCardFormat()}} />\n                                </div>\n                            </div>\n                            <div className=\"view-items-list\">\n                                {recent.length > 0 &&\n                                    <>\n                                        {recent.map((item, i) => {\n                                            return cardFormat ? <ItemRowCard item={item} created={true} key={i} /> : <ItemSquareCard item={item} created={true} key={i} />\n                                        })}\n                                    </>\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default Home\n","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Not-Found.jsx",[],["140","141"],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Workspace.jsx",["142","143","144","145","146","147","148","149","150","151","152","153","154","155"],"import React, {useState, useEffect, useRef, useContext} from 'react'\nimport {useHistory, useParams, Link} from \"react-router-dom\"\nimport usersAPI from '../API/users'\nimport itemsAPI from '../API/items'\nimport globalAPI from '../API/global'\nimport imageAPI from '../API/images'\nimport filesAPI from '../API/files'\nimport trainAPI from '../API/train'\nimport predictAPI from '../API/predict'\nimport ModelNode from '../Components/Model-Node';\nimport Chart from '../Components/Chart'\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport { MessageContext } from '../Contexts/messageContext';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport MessageCard from '../Components/MessageCard'\n\nconst Workspace = ({currentUser, type}) => {\n    const [stage, setStage] = useState(\"model\");\n    const [title, setTitle] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [visibility, setVisibility] = useState(false);\n    const [bookmarked, setBookmarked] = useState()\n    const [upvoted, setUpvoted] = useState()\n    const [upvotes, setUpvotes] = useState()\n    const [updated, setUpdated] = useState()\n    const [picture, setPicture] = useState()\n    const [date, setDate] = useState(\"\")\n    const [start, setStart] = useState(0)\n    const [trainTime, setTrainTime] = useState(0)\n    const [end, setEnd] = useState(20)\n    const [page, setPage] = useState(1)\n    const [image, setImage] = useState();\n    const [datasetID, setDatasetID] = useState(\"\")\n    const [uploadedDataset, setUploadedDataset] = useState()\n    const [workspace, setWorkspace] = useState([]);\n    const [images, setImages] = useState([])\n    const [predictionFile, setPredictionFile] = useState()\n    const [prediction, setPrediction] = useState()\n    const [assignedLabels, setAssignedLabels] = useState([])\n    const [refreshData, setRefreshData] = useState()\n    const [refreshDiagram, setRefreshDiagram] = useState()\n    const [changedSettings, setChangedSettings] = useState(false)\n    const [model, setModel] = useState([{type: \"Input\"}])\n    const [evaluation, setEvaluation] = useState()\n    const [selectedNode, setSelectedNode] = useState(0)\n    const [configuration, setConfiguration] = useState({epochs: 1, training_split: 0.8, validation_split: 0.2, improvement: 0.1, early_stopping: false, decay_rate: 0.01,\n                                                        decay_steps: 1, patience: 1, batch: 32, lr_scheduler: false, initial_lr: 0.01, optimiser: \"\", loss: \"\"})\n    const [addNode, setAddNode] = useState(false)\n    const [loaded, setLoaded] = useState(false);\n    const [exist, setExist] = useState()\n    const [noData, setNoData] = useState()\n    const [disabledCreate, setDisabledCreate] = useState(false)\n    const [disabledTrain, setDisabledTrain] = useState(false)\n    const [message, setMessage] = useState(\"\")\n    const {addOpenItems, removeOpenItems} = useContext(OpenItemsContext);\n    const {displayMessage, displayMessageInterval} = useContext(MessageContext);\n    const modelRef = useRef(null)\n    const workspaceID = useParams().id;\n    const history = useHistory();\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                if (type === \"create\") {\n                    const workspace = await usersAPI.get(\"/created?type=workspace\");\n    \n                    workspace.data.data.map((workspace) => {\n                        setWorkspace(previous => [...previous, workspace.title]);\n                    })\n\n                    setExist(true)\n                    setLoaded(true)\n                } else {\n                    const workspace = await itemsAPI.get(`/${workspaceID}?type=workspace`);\n\n                    if (workspace.data.data.self) {\n                        addOpenItems(workspace.data.data._id, workspace.data.data.title, workspace.data.data.type)\n                    }\n\n                    setWorkspace(workspace.data.data);\n                    setUpdated(workspace.data.data.updated);\n                    setBookmarked(workspace.data.data.bookmarked)\n                    setUpvoted(workspace.data.data.upvoted)\n                    setPicture(workspace.data.data.picture)\n                    setUpvotes(workspace.data.data.upvotes)\n                    setDatasetID(workspace.data.data.dataset._id)\n                    setVisibility(workspace.data.data.visibility)\n                    setTitle(workspace.data.data.title)\n                    setDescription(workspace.data.data.description)\n                    setModel(workspace.data.data.model)\n                    setConfiguration(workspace.data.data.configuration)\n                    setUploadedDataset(workspace.data.data.dataset)\n                    setEvaluation({\n                        testAcc: workspace.data.data.evaluation.testAcc,\n                        testLoss: workspace.data.data.evaluation.testLoss,\n                        testPrecision: workspace.data.data.evaluation.testPrecision,\n                        testRecall: workspace.data.data.evaluation.testRecall,\n                        trainAcc: workspace.data.data.evaluation.trainAcc,\n                        trainLoss: workspace.data.data.evaluation.trainLoss,\n                        validationAcc: workspace.data.data.evaluation.validationAcc,\n                        validationLoss: workspace.data.data.evaluation.validationLoss,\n                        trainPrecision: workspace.data.data.evaluation.trainPrecision,\n                        trainRecall: workspace.data.data.evaluation.trainRecall,\n                        validationPrecision: workspace.data.data.evaluation.validationPrecision,\n                        validationRecall: workspace.data.data.evaluation.validationRecall,\n                        trainEpochs: Array.from(Array(workspace.data.data.evaluation.trainEpochs), (e, i) => (i + 1).toString())\n                    })\n                    setTrainTime(workspace.data.data.evaluation.trainTime)\n\n                    fetch(`http://127.0.0.1:5000/datasets/${workspace.data.data.dataset.imageDir}/labels.json`)\n                        .then(response => response.json())\n                        .then(images => {\n                            images.map(image => {\n                                setImages(state => [...state, image.filename])\n                                setAssignedLabels(state => [...state, image.label])\n                            })\n                            setExist(true)\n                            setNoData(false)\n                            setLoaded(true)\n                        }).catch(() => {\n                            setExist(true)\n                            setNoData(true)\n                            setLoaded(true)\n                        });\n                }\n            } catch (err) {\n                setExist(false)\n                setLoaded(true)\n            }\n        }\n        fetchData();\n    }, [])\n\n    useEffect(() => {\n        const timerID = stage === \"train\" && setInterval(() => {\n            setTrainTime(previous => previous + 1);\n        }, 1000);\n        return () => {\n            clearInterval(timerID)\n        }\n    }, [trainTime, stage])\n\n    useEffect(() => {\n        if (modelRef.current) {\n            modelRef.current.scrollIntoView({\n                behavior: 'smooth',\n                block: 'end',\n                inline: 'end'\n            })\n        }\n    }, [model.length, addNode])\n\n    useEffect(() => {\n        if (loaded && exist) {\n            const updatedDate = new Date(updated);\n            const currentDate = new Date();\n    \n            if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} years ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} days ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hours ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minutes ago`)\n            } else {\n                setDate(\"Updated just now\")\n            }\n        }\n    }, [loaded, updated])\n\n    const searchFunctionKey = (e) => {\n        if (e.key === \"Enter\" && datasetID !== \"\") {\n            existingDataset()\n        }\n    }\n\n    const updateUpvote = async () => {\n        try {\n            await globalAPI.put(`/upvote/${workspaceID}?state=${upvoted}`);\n\n            if (upvoted) {\n                setUpvotes(state => state-1)\n            } else {\n                setUpvotes(state => state+1)\n            }\n\n            setUpvoted(state => !state)\n        } catch (err) {\n            setMessage(\"Error occurred\")\n            displayMessageInterval()\n        }\n    }\n\n    const updateBookmark = async () => {\n        try {\n            await globalAPI.put(`/bookmark/${workspaceID}?state=${bookmarked}`);\n            \n            setBookmarked(state => !state)\n        } catch (err) {\n            setMessage(\"Error occurred\")\n            displayMessageInterval()\n        }\n    }\n\n    const updateVisibility = async () => {\n        try {\n            await globalAPI.put(`/visibility/${workspaceID}`);\n\n            setVisibility(state => !state)\n        } catch (err) {\n            setMessage(\"Error occurred\")\n            displayMessageInterval()\n        }\n    }\n\n    const previousPage = () => {\n        if (page > 1) {\n            setStart((page-2)*20)\n            setEnd((page-1)*20)\n            setPage(state => state-1)\n            setRefreshData(new Date().getTime())\n        }\n    }\n    \n    const nextPage = () => {\n        if (page*20 < images.length && images.length > 20) {\n            setPage(state => state+1)\n            setStart((page)*20)\n            setEnd((page+1)*20)\n            setRefreshData(new Date().getTime())\n        }\n    }\n\n    const existingDataset = async () => {\n        try {\n            const checkPublic = await itemsAPI.get(`/check-public-dataset?id=${datasetID}`)\n\n            if (checkPublic.data.success && (checkPublic.data.data.visibility || \n                    checkPublic.data.data.creator === currentUser.id)) {\n                fetch(`http://127.0.0.1:5000/datasets/${checkPublic.data.data.imageDir}/labels.json`)\n                        .then(response => response.json())\n                        .then(images => {\n                            images.map(image => {\n                                setImages(state => [...state, image.filename])\n                                setAssignedLabels(state => [...state, image.label])\n                            })\n                            setUploadedDataset(checkPublic.data.data)\n                            setRefreshData(new Date().getTime())\n                            setChangedSettings(true)\n                        })\n            } else if (checkPublic.data.success && !checkPublic.data.data.visibility && \n                            checkPublic.data.data.creator !== currentUser.id) {\n                setMessage(\"Dataset is private\")\n                displayMessageInterval()\n            } else {\n                setMessage(\"Dataset not found\")\n                displayMessageInterval()\n            }\n        } catch (err) {\n            setMessage(\"Error occurred\")\n            displayMessageInterval()\n        }\n    }\n\n    const uploadImage = async () => {\n        setDisabledCreate(true)\n        \n        if (uploadedDataset && evaluation && title !== \"\" && description !== \"\") {\n            if (image) {\n                const formImage = new FormData();\n                formImage.append('image', image);\n\n                try {\n                    const imageResponse = await imageAPI.post(\"/upload\", formImage);\n\n                    uploadData(imageResponse.data.data)\n                } catch (err) {\n                    setMessage(\"Error occurred\")\n                    displayMessageInterval()\n                }\n            } else {\n                uploadData(\"default.png\")\n            }\n        } else {\n            let error = \"\"\n\n            if (!uploadedDataset) {\n                error = \"Missing dataset\"\n            }\n\n            if (!evaluation) {\n                if (error === \"\") {\n                    error = error + \"Model not trained\"\n                } else {\n                    error = error + \" | Model not trained\"\n                }\n            }\n\n            if (title === \"\") {\n                if (error === \"\") {\n                    error = error + \"Title is blank\"\n                } else {\n                    error = error + \" | Title is blank\"\n                }\n            }\n\n            if (description === \"\") {\n                if (error === \"\") {\n                    error = error + \"Title is blank\"\n                } else {\n                    error = error + \" | Description is blank\"\n                }\n            }\n\n            setMessage(error)\n            displayMessageInterval()\n            setDisabledCreate(false)\n        }\n    }\n\n    const uploadData = async (imageName) => {\n        try {\n            const updatedEvaluation = {\n                testAcc: evaluation.testAcc,\n                testLoss: evaluation.testLoss,\n                testPrecision: evaluation.testPrecision,\n                testRecall: evaluation.testRecall,\n                trainAcc: evaluation.trainAcc,\n                trainLoss: evaluation.trainLoss,\n                validationAcc: evaluation.validationAcc,\n                validationLoss: evaluation.validationLoss,\n                trainPrecision: evaluation.trainPrecision,\n                trainRecall: evaluation.trainRecall,\n                validationPrecision: evaluation.validationPrecision,\n                validationRecall: evaluation.validationRecall,\n                trainEpochs: evaluation.trainEpochs[evaluation.trainEpochs.length-1],\n                trainTime: trainTime\n            }\n    \n            const workspaceResponse = await itemsAPI.post(\"/\", {\n                title: title,\n                dataset: uploadedDataset._id,\n                creator: currentUser.id,\n                description: description,\n                picture: imageName,\n                upvotes: [],\n                bookmarks: [],\n                model: model,\n                configuration: configuration,\n                updated: new Date().toISOString(),\n                visibility: visibility,\n                evaluation: updatedEvaluation,\n                type: \"workspace\"\n            });\n\n            setMessage(\"Workspace created\")\n            displayMessageInterval()\n            history.push(`/workspace/${workspaceResponse.data.data}`)\n        } catch (err) {\n            setMessage(\"Error occurred\")\n            displayMessageInterval()\n        }\n    }\n    \n    const train = async () => {\n        if (parseInt(configuration.epochs) >= 1 && parseInt(configuration.epochs) <= 50 &&\n            parseFloat(configuration.training_split) > 0 && parseFloat(configuration.training_split) < 1 &&\n            parseFloat(configuration.validation_split) > 0 && parseFloat(configuration.validation_split) < 1 &&\n            parseFloat(configuration.validation_split) + parseFloat(configuration.training_split) === 1 && \n            parseInt(configuration.batch) >= 1 && parseFloat(configuration.improvement) >= 0 && \n            parseInt(configuration.patience) >= 1 && parseFloat(configuration.decay_rate) >= 0 && \n            parseFloat(configuration.decay_rate) <= 1 && parseInt(configuration.decay_steps) >= 1 && \n            parseFloat(configuration.initial_lr) > 0 && parseFloat(configuration.initial_lr) < 1)\n\n            try {\n                setTrainTime(0)\n                setDisabledTrain(true)\n                setStage(\"train\")\n        \n                const formData = new FormData();\n            \n                formData.append('epochs', configuration.epochs)\n                formData.append('training_split', configuration.training_split)\n                formData.append('validation_split', configuration.validation_split)\n                formData.append('improvement', configuration.improvement)\n                formData.append('patience', configuration.patience)\n                formData.append('batch', configuration.batch)\n                formData.append('decay_rate', configuration.decay_rate)\n                formData.append('decay_steps', configuration.decay_steps)\n                formData.append('early_stopping', configuration.early_stopping ? \"true\" : \"false\")\n                formData.append('lr_scheduler', configuration.lr_scheduler ? \"true\" : \"false\")\n                formData.append('initial_lr', configuration.initial_lr)\n                formData.append('optimiser', configuration.optimiser)\n                formData.append('loss', configuration.loss)\n                formData.append('rgb', uploadedDataset.rgb)\n                formData.append('imageDir', uploadedDataset.imageDir)\n                formData.append('height', uploadedDataset.height)\n                formData.append('width', uploadedDataset.width)\n                formData.append('label', uploadedDataset.labels.length)\n                formData.append('id', workspaceID)\n\n                model.map(node => {\n                    formData.append('model[]', JSON.stringify(node))\n                })\n\n                const response = await trainAPI.post(\"\", formData);\n\n                setDisabledTrain(false)\n\n                if (response) {\n                    if (type === \"view\") {\n                        updateWorkspace()\n                    }\n\n                    setEvaluation({\n                        testLoss: response.data.test[0],\n                        testAcc: response.data.test[1],\n                        testPrecision: response.data.test[2],\n                        testRecall: response.data.test[3],\n                        trainAcc: response.data.training.accuracy,\n                        trainLoss: response.data.training.loss,\n                        validationAcc: response.data.training.val_accuracy,\n                        validationLoss: response.data.training.val_loss,\n                        trainPrecision: response.data.training.precision,\n                        trainRecall: response.data.training.recall,\n                        validationPrecision: response.data.training.val_precision,\n                        validationRecall: response.data.training.val_recall,\n                        trainEpochs: Array.from(Array(response.data.epochs), (e, i) => (i + 1).toString())\n                    })\n                    setStage(\"evaluation\")\n                    setChangedSettings(true)\n                }\n            } catch (err) {\n                setStage(\"model\")\n                setDisabledTrain(false)\n                setMessage(\"Error occurred\")\n                displayMessageInterval()\n            }\n        else {\n            let error = \"\"\n\n            if (!(parseInt(configuration.epochs) >= 1 && parseInt(configuration.epochs) <= 50)) {\n                error = \"Epochs must be 1-50\"\n            }\n\n            if (!(parseFloat(configuration.training_split) > 0 && parseFloat(configuration.training_split) < 1)) {\n                if (error === \"\") {\n                    error = error + \"Training split must be 0-1\"\n                } else {\n                    error = error + \" | Training split must be 0-1\"\n                }\n            }\n\n            if (!(parseFloat(configuration.validation_split) > 0 && parseFloat(configuration.validation_split) < 1)) {\n                if (error === \"\") {\n                    error = error + \"Validation split must be 0-1\"\n                } else {\n                    error = error + \" | Validation split must be 0-1\"\n                }\n            }\n\n            if (!(parseFloat(configuration.validation_split) + parseFloat(configuration.training_split) === 1)) {\n                if (error === \"\") {\n                    error = error + \"Training and validation split must sum to 1\"\n                } else {\n                    error = error + \" | Training and validation split must equal 1\"\n                }\n            }\n\n            if (!(parseInt(configuration.batch) >= 1)) {\n                if (error === \"\") {\n                    error = error + \"Batch size must be at least 1\"\n                } else {\n                    error = error + \" | Batch size must be at least 1\"\n                }\n            }\n\n            if (!(parseFloat(configuration.improvement) >= 0)) {\n                if (error === \"\") {\n                    error = error + \"Improvement must be at least 0\"\n                } else {\n                    error = error + \" | Improvement must be at least 0\"\n                }\n            }\n            \n            if (!(parseInt(configuration.patience) >= 1)) {\n                if (error === \"\") {\n                    error = error + \"Patience must be at least 1\"\n                } else {\n                    error = error + \" | Patience must be at least 1\"\n                }\n            }\n            \n            if (!(parseFloat(configuration.decay_rate) >= 0 && parseFloat(configuration.decay_rate) <= 1)) {\n                if (error === \"\") {\n                    error = error + \"Decay rate must be 0-1\"\n                } else {\n                    error = error + \" | Decay rate must be 0-1\"\n                }\n            }\n            \n            if (!(parseInt(configuration.decay_steps) >= 1)) {\n                if (error === \"\") {\n                    error = error + \"Decay steps must be at least 1\"\n                } else {\n                    error = error + \" | Decay steps must be at least 1\"\n                }\n            }\n\n            if (!(parseFloat(configuration.initial_lr) > 0 && parseFloat(configuration.initial_lr) < 1)) {\n                if (error === \"\") {\n                    error = error + \" | Initial learning rate must be 0-1\"\n                } else {\n                    error = error + \" | Initial learning rate must be 0-1\"\n                }\n            }\n\n            setMessage(error)\n            displayMessageInterval()\n            setDisabledCreate(false)\n        }\n    }\n\n    const predictModel = async () => {\n        try {\n            setPrediction(\"\")\n\n            const formData = new FormData();\n\n            formData.append('id', workspaceID)\n            formData.append('rgb', uploadedDataset.rgb)\n            formData.append('height', uploadedDataset.height)\n            formData.append('width', uploadedDataset.width)\n            formData.append('image', predictionFile)\n\n            uploadedDataset.labels.map(label => {\n                formData.append('labels[]', label)\n            })\n\n            const response = await predictAPI.post(\"\", formData);\n            \n            setPrediction(response.data)\n        } catch (err) {}\n    }\n\n    const updateWorkspace = async () => {\n        const updatedEvaluation = {\n            testAcc: evaluation.testAcc,\n            testLoss: evaluation.testLoss,\n            testPrecision: evaluation.testPrecision,\n            testRecall: evaluation.testRecall,\n            trainAcc: evaluation.trainAcc,\n            trainLoss: evaluation.trainLoss,\n            validationAcc: evaluation.validationAcc,\n            validationLoss: evaluation.validationLoss,\n            trainPrecision: evaluation.trainPrecision,\n            trainRecall: evaluation.trainRecall,\n            validationPrecision: evaluation.validationPrecision,\n            validationRecall: evaluation.validationRecall,\n            trainEpochs: evaluation.trainEpochs[evaluation.trainEpochs.length-1],\n            trainTime: trainTime\n        }\n\n        if (image) {\n            const formImage = new FormData();\n            formImage.append('image', image);\n            \n            try {\n                const tempPicture = picture\n                const imageResponse = await imageAPI.post(\"/upload\", formImage);\n\n                await itemsAPI.put(`/${workspaceID}?type=workspace`, {\n                    title: title,\n                    description: description,\n                    picture: imageResponse.data.data,\n                    dataset: uploadedDataset._id,\n                    model: model,\n                    evaluation: updatedEvaluation,\n                    configuration: configuration,\n                    updated: new Date().toISOString()\n                })\n\n                setImage(undefined)\n                setPicture(imageResponse.data.data)\n\n                if (tempPicture !== \"default.png\") {\n                    await imageAPI.put('/remove', {picture: tempPicture});\n                }\n            } catch (err) {\n                setMessage(\"Error occurred\")\n                displayMessageInterval()\n            }\n        } else {\n            try {\n                await itemsAPI.put(`/${workspaceID}?type=workspace`, {\n                    title: title,\n                    description: description,\n                    picture: picture,\n                    dataset: uploadedDataset._id,\n                    model: model,\n                    evaluation: updatedEvaluation,\n                    configuration: configuration,\n                    updated: new Date().toISOString()\n                })\n            } catch (err) {\n                setMessage(\"Error occurred\")\n                displayMessageInterval()\n            }\n        }\n\n        setUpdated(new Date().toISOString())\n        setChangedSettings(false)\n    }\n\n    const deleteWorkspace = async () => {\n        try {\n            const formData = new FormData();\n            formData.append('id', workspace._id);\n\n            await itemsAPI.delete(`/${workspaceID}`)\n            await filesAPI.post(`/remove-workspace`, formData)\n\n            removeOpenItems(workspaceID)\n            history.replace(\"/home\")\n        } catch (err) {\n            setMessage(\"Error occurred\")\n            displayMessageInterval()\n        }\n    }\n\n    return (\n        <>\n            {loaded && exist ?\n                <div className=\"main-body\">\n                    <div className=\"sidebar\">\n                        <div className=\"sidebar-header\">\n                            <img src=\"http://localhost:3000/workspace.png\"\n                                    className={!(type === \"view\" && !workspace.self) ? \"create-item-edit-image\" : undefined} />\n                            <input className={`create-item-title ${!(type === \"view\" && !workspace.self) && \"create-item-edit-input\"}`}\n                                    placeholder=\"Title\"\n                                    onChange={e => {\n                                        setTitle(e.target.value)\n                                        setChangedSettings(true)\n                                    }}\n                                    disabled={!(workspace.self || type === \"create\")}\n                                    value={title} />\n                        </div>\n                        <textarea className={`create-item-description ${!(type === \"view\" && !workspace.self) && \"create-item-edit-textarea\"}`}\n                                    placeholder=\"Description\"\n                                    onChange={e => {\n                                        setDescription(e.target.value)\n                                        setChangedSettings(true)\n                                    }}\n                                    disabled={!(workspace.self || type === \"create\")}\n                                    value={description} />\n                        {(workspace.self || type === \"create\") &&\n                            <>\n                                <div className=\"create-item-setup\">\n                                    <label className=\"create-item-setup-label\">Picture</label>\n                                    <input className=\"create-item-setup-input\"\n                                            type=\"file\" \n                                            name=\"image\" \n                                            onChange={e => {\n                                                setImage(e.target.files[0])\n                                                setChangedSettings(true)\n                                            }} />\n                                </div>\n                                {type === \"create\" &&\n                                    <div className=\"create-item-setup\">\n                                        <label className=\"create-item-setup-label\">Public?</label>\n                                        <input type=\"checkbox\" \n                                                onChange={() => {\n                                                    setVisibility(previous => !previous)\n                                                    setChangedSettings(true)\n                                                }}\n                                                checked={visibility} />\n                                    </div>\n                                }\n                            </>\n                        }\n                        {!workspace.self && type !== \"create\" && <p className=\"item-creator\">{workspace.creatorName.name}</p>}\n                        <div className=\"item-information\">\n                            {type !== \"create\" && <p className=\"item-date\">{date}</p>}\n                            <span />\n                            {type !== \"create\" &&\n                                <>\n                                    <ThumbUpIcon className={`item-icon ${upvoted ? \"blue2\" : \"white\"}`} onClick={() => {updateUpvote()}} />\n                                    <p className={upvoted ? \"blue2\" : \"white\"}>{upvotes}</p>\n                                </>\n                            }\n                            {!workspace.self && type !== \"create\" && <BookmarkIcon className={`item-icon ${bookmarked ? \"blue2\" : \"white\"}`} onClick={() => {updateBookmark()}} />}\n                            {workspace.self && type !== \"create\" && \n                                <>\n                                    {visibility ? \n                                        <VisibilityIcon className=\"item-visibility\" onClick={() => {updateVisibility()}} />\n                                    :\n                                        <VisibilityOffIcon className=\"item-visibility\" onClick={() => {updateVisibility()}} />\n                                    }\n                                </>\n                            }\n                        </div>\n                        <div className=\"sidebar-divided\" />\n                        <div className=\"create-workspace-uploaded-dataset\">\n                            {(type === \"create\" || workspace.self) &&\n                                <>\n                                    <input className={`create-workspace-import-existing ${!(type === \"view\" && !workspace.self) && \"create-item-edit-input\"}`}\n                                            placeholder=\"Dataset ID\"\n                                            onChange={e => {setDatasetID(e.target.value)}}\n                                            onKeyPress={searchFunctionKey}\n                                            value={datasetID} />\n                                    {type === \"view\" && \n                                        <Link className=\"create-item-view-dataset\" to={`/dataset/${datasetID}`}>\n                                            <OpenInNewIcon className=\"create-item-view-dataset-icon\" />\n                                        </Link>\n                                    }\n                                </>\n                            }\n                            {type === \"view\" &&\n                                <a href={`http://127.0.0.1:5000/models/${workspaceID}/${workspaceID}-model.zip`} download>\n                                    <DownloadIcon className=\"workspace-download-icon\" />\n                                </a>\n                            }\n                        </div>\n                        <div className=\"create-workspace-uploaded-dataset\">\n                            {!(type === \"create\" || workspace.self) &&\n                                <div>\n                                    <p className=\"create-workspace-uploaded-dataset-header\">Selected Dataset:</p>\n                                    <Link to={`/dataset/${datasetID}`} className=\"create-workspace-uploaded-dataset-link\">\n                                        <img src={`http://localhost:4000/images/${uploadedDataset.picture}`} />\n                                        <p>{uploadedDataset.title}</p>\n                                    </Link>\n                                </div>\n                            }\n                        </div>\n                        {type === \"view\" &&\n                            <>\n                                {workspace.self &&\n                                    <>\n                                        <div className=\"sidebar-divided\" />\n                                        <button className=\"blue-button item-save\"\n                                                disabled={!changedSettings}\n                                                onClick={() => {\n                                                    updateWorkspace()\n                                                    setMessage(\"Workspace saved\")\n                                                    displayMessageInterval()\n                                                }}>Save Workspace</button>\n                                        <button className=\"text-button item-delete\"\n                                                onClick={() => {deleteWorkspace()}}>Delete</button>\n                                    </>\n                                }\n                            </>\n                        }\n                    </div>\n                    <div className=\"inner\">\n                        <div className=\"workspace-body\">\n                            <div className=\"workspace-inner\">\n                                <div className=\"view-items-top\">\n                                    <h1>{type === \"create\" ? \"Create Workspace\" : \"Workspace\"}</h1>\n                                    <div>\n                                        <button className={`text-button ${stage === \"model\" ? \"item-header-button-selected\" : \"item-header-button-unselected\"}`}\n                                                onClick={() => {setStage(\"model\")}}>Model</button>\n                                        <button className={`text-button ${stage === \"evaluation\" ? \"item-header-button-selected\" : \"item-header-button-unselected\"}`}\n                                                onClick={() => {setStage(\"evaluation\")}}>Evaluation</button>\n                                        <button className={`text-button ${stage === \"prediction\" ? \"item-header-button-selected\" : \"item-header-button-unselected\"}`}\n                                                onClick={() => {setStage(\"prediction\")}}>Prediction</button>\n                                        <span />\n                                        {(workspace.self || type === \"create\") &&\n                                            <button className=\"blue-button\"\n                                                    disabled={disabledTrain || model[model.length-1].type !== \"Output\" || model.length === 0}\n                                                    onClick={() => {train()}}>Train</button>\n                                        }\n                                        {type === \"create\" &&\n                                            <button className=\"workspace-create blue-button\"\n                                                    disabled={disabledCreate}\n                                                    onClick={() => {uploadImage()}}>Create</button>\n                                        }\n                                    </div>\n                                </div>\n                                {stage === \"model\" ?\n                                    <>\n                                        {uploadedDataset ?\n                                            <div className=\"create-modelling-body\">\n                                                <div className=\"create-model\">\n                                                    <div className=\"create-model-diagram\" key={refreshDiagram}>\n                                                        {model.map((node, i) => {\n                                                            return (\n                                                                <div key={i}>\n                                                                    <div className={\"create-model-diagram-node\"}>\n                                                                        <div onClick={() => {setSelectedNode(i)}}>\n                                                                            <ModelNode setSelectedNode={setSelectedNode} type={node.type} value={node.value} selected={i === selectedNode} last={i === model.length-1} />\n                                                                        </div>\n                                                                        {node.type !== \"Input\" && (workspace.self || type === \"create\") &&\n                                                                            <div onClick={() => {{selectedNode === i ?\n                                                                                                    setSelectedNode(state => state-1)\n                                                                                                : selectedNode < i ?\n                                                                                                    setSelectedNode(state => state)\n                                                                                                : selectedNode > i &&\n                                                                                                    <>\n                                                                                                        {selectedNode-i === 1 ?\n                                                                                                            setSelectedNode(state => state-1)\n                                                                                                        :\n                                                                                                            setSelectedNode(i)\n                                                                                                        } \n                                                                                                    </>  \n                                                                                                }\n                                                                                                model.splice(i, 1)\n                                                                                                setChangedSettings(true)\n                                                                                                setRefreshDiagram(new Date().getTime())}}>\n                                                                                <ClearIcon className=\"create-model-diagram-remove\" />\n                                                                            </div>\n                                                                        }\n                                                                    </div>\n                                                                    {i === model.length-1 && model[selectedNode].type !== \"Output\" &&\n                                                                        <>\n                                                                            {addNode && (workspace.self || type === \"create\") ?\n                                                                                <div className=\"create-model-diagram-add\">\n                                                                                    <div onClick={() => {setAddNode(false)}}>\n                                                                                        <RemoveIcon className=\"create-model-diagram-add-icon\" />\n                                                                                    </div>\n                                                                                    <div className=\"create-model-diagram-add-options\">\n                                                                                        {(model[selectedNode].type === \"Input\" || model[selectedNode].type === \"Conv2D\" || model[selectedNode].type === \"MaxPooling2D\" ||\n                                                                                            model[selectedNode].type === \"AvgPooling2D\" || model[selectedNode].type === \"Dropout\" || model[selectedNode].type === \"BatchNormalisation\") &&\n                                                                                            <>\n                                                                                                <button onClick={() => {\n                                                                                                    setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy.splice(selectedNode+1, 0, {\n                                                                                                            type: \"Conv2D\",\n                                                                                                            filters: 0,\n                                                                                                            kernel: 3,\n                                                                                                            strides: 2,\n                                                                                                            padding: \"same\",\n                                                                                                            activation: \"\"\n                                                                                                        })\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n\n                                                                                                    setSelectedNode(state => state + 1)\n                                                                                                    setAddNode(false)\n                                                                                                    setChangedSettings(true)\n                                                                                                }}>Conv2D</button>\n                                                                                                <button onClick={() => {\n                                                                                                    setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy.splice(selectedNode+1, 0, {\n                                                                                                            type: \"MaxPooling2D\",\n                                                                                                            pool: 3,\n                                                                                                            strides: 2,\n                                                                                                            padding: \"same\"\n                                                                                                        })\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n                                                                                                    \n                                                                                                    setSelectedNode(state => state + 1)\n                                                                                                    setAddNode(false)\n                                                                                                    setChangedSettings(true)\n                                                                                                }}>MaxPooling2D</button>\n                                                                                                <button onClick={() => {\n                                                                                                    setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy.splice(selectedNode+1, 0, {\n                                                                                                            type: \"AvgPooling2D\",\n                                                                                                            pool: 3,\n                                                                                                            strides: 2,\n                                                                                                            padding: \"same\"\n                                                                                                        })\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n                                                                                                    \n                                                                                                    setSelectedNode(state => state + 1)\n                                                                                                    setAddNode(false)\n                                                                                                    setChangedSettings(true)\n                                                                                                }}>AvgPooling2D</button>\n                                                                                                <button onClick={() => {\n                                                                                                    setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy.splice(selectedNode+1, 0, {\n                                                                                                            type: \"BatchNormalisation\",\n                                                                                                            momentum: 0\n                                                                                                        })\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n\n                                                                                                    setSelectedNode(state => state + 1)\n                                                                                                    setAddNode(false)\n                                                                                                    setChangedSettings(true)\n                                                                                                }}>Batch Normalisation</button>\n                                                                                                <button onClick={() => {\n                                                                                                    setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy.splice(selectedNode+1, 0, {\n                                                                                                            type: \"Dropout\",\n                                                                                                            rate: 0\n                                                                                                        })\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n\n                                                                                                    setSelectedNode(state => state + 1)\n                                                                                                    setAddNode(false)\n                                                                                                    setChangedSettings(true)\n                                                                                                }}>Dropout</button>\n                                                                                                {selectedNode === model.length-1 &&\n                                                                                                    <button onClick={() => {setModel(state => [...state, {\n                                                                                                            type: \"Flatten\"\n                                                                                                        }])\n                                                                                                        setSelectedNode(state => state + 1)\n                                                                                                        setAddNode(false)\n                                                                                                        setChangedSettings(true)\n                                                                                                    }}>Flatten</button>\n                                                                                                }\n                                                                                            </>\n                                                                                        }\n                                                                                        {(model[selectedNode].type === \"Flatten\" || model[selectedNode].type === \"Dense\") &&\n                                                                                            <button onClick={() => {\n                                                                                                setModel(state => {\n                                                                                                    const stateCopy = [...state]\n                                                                                                \n                                                                                                    stateCopy.splice(selectedNode+1, 0, {\n                                                                                                        type: \"Dense\",\n                                                                                                        units: 0,\n                                                                                                        activation: \"\"\n                                                                                                    })\n                                                                                                \n                                                                                                    return stateCopy\n                                                                                                })\n                                                                                                \n                                                                                                setSelectedNode(state => state + 1)\n                                                                                                setAddNode(false)\n                                                                                                setChangedSettings(true)\n                                                                                            }}>Dense</button>\n                                                                                        }\n                                                                                        {model[selectedNode].type === \"Dense\" &&\n                                                                                            <>\n                                                                                                <button onClick={() => {\n                                                                                                    setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy.splice(selectedNode+1, 0, {\n                                                                                                            type: \"Dropout\",\n                                                                                                            rate: 0\n                                                                                                        })\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n\n                                                                                                    setSelectedNode(state => state + 1)\n                                                                                                    setAddNode(false)\n                                                                                                    setChangedSettings(true)\n                                                                                                }}>Dropout</button>\n                                                                                                {selectedNode === model.length-1 &&\n                                                                                                    <button onClick={() => {\n                                                                                                            {uploadedDataset.labels.length === 2 ?\n                                                                                                                setModel(state => [...state, {\n                                                                                                                    type: \"Output\",\n                                                                                                                    units: 1,\n                                                                                                                    activation: \"\"\n                                                                                                                }])\n                                                                                                            :\n                                                                                                                setModel(state => [...state, {\n                                                                                                                    type: \"Output\",\n                                                                                                                    units: uploadedDataset.labels.length,\n                                                                                                                    activation: \"\"\n                                                                                                                }])\n                                                                                                            }\n                                                                                                        setSelectedNode(state => state + 1)\n                                                                                                        setAddNode(false)\n                                                                                                        setChangedSettings(true)\n                                                                                                    }}>Output</button>\n                                                                                                }\n                                                                                            </>\n                                                                                        }\n                                                                                    </div>\n                                                                                </div>\n                                                                            :\n                                                                                <>  \n                                                                                    {(workspace.self || type === \"create\") &&\n                                                                                        <div onClick={() => {setAddNode(true)}}>\n                                                                                            <AddIcon className=\"create-model-diagram-add-icon\" />\n                                                                                        </div>\n                                                                                    }\n                                                                                </>\n                                                                            }\n                                                                        </>\n                                                                    }\n                                                                </div>\n                                                            )\n                                                        })}\n                                                        <div ref={modelRef} />\n                                                    </div>\n                                                </div>\n                                                <div>\n                                                    <div className=\"create-model-selected\">\n                                                        <p>{model[selectedNode].type}</p>\n                                                        <div className=\"create-model-selected-input\">\n                                                            {model[selectedNode].type !== \"Flatten\" &&\n                                                                <>\n                                                                    {model[selectedNode].type === \"Dense\" &&\n                                                                        <div>\n                                                                            <label>Units</label>\n                                                                            <input value={model[selectedNode].units} \n                                                                                    disabled={!(workspace.self || type === \"create\")}\n                                                                                    onChange={e => {setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy[selectedNode] = {\n                                                                                                            ...stateCopy[selectedNode],\n                                                                                                            units: Number(e.target.value)\n                                                                                                        }\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n                                                                                                    setChangedSettings(true)\n                                                                                                    setRefreshDiagram(new Date().getTime())}} />\n                                                                        </div>\n                                                                    }\n                                                                    {(model[selectedNode].type === \"Dense\" || model[selectedNode].type === \"Conv2D\" || model[selectedNode].type === \"Output\") &&\n                                                                        <div>\n                                                                            <label>Activation</label>\n                                                                            <select value={model[selectedNode].activation} \n                                                                                    disabled={!(workspace.self || type === \"create\")}\n                                                                                    onChange={e => {setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy[selectedNode] = {\n                                                                                                            ...stateCopy[selectedNode],\n                                                                                                            activation: e.target.value\n                                                                                                        }\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n                                                                                                    setChangedSettings(true)\n                                                                                                    setRefreshDiagram(new Date().getTime())}}>\n                                                                                    <option disabled defaultValue value=\"\"></option>\n                                                                                    <option value=\"sigmoid\">Sigmoid</option>\n                                                                                    <option value=\"softmax\">Softmax</option>\n                                                                                    <option value=\"softplus\">Softplus</option>\n                                                                                    <option value=\"softsign\">Softsign</option>\n                                                                                    <option value=\"swish\">Swish</option>\n                                                                                    <option value=\"selu\">Selu</option>\n                                                                                    <option value=\"tanh\">Tanh</option>\n                                                                                    <option value=\"elu\">Elu</option>\n                                                                                    <option value=\"exponential\">Exponential</option>\n                                                                                    <option value=\"gelu\">Gelu</option>\n                                                                                    <option value=\"hard_sigmoid\">Hard Sigmoid</option>\n                                                                                    <option value=\"linear\">Linear</option>\n                                                                                    <option value=\"relu\">Relu</option>\n                                                                            </select>\n                                                                        </div>\n                                                                    }\n                                                                    {(model[selectedNode].type === \"Conv2D\" || model[selectedNode].type === \"MaxPooling2D\" || model[selectedNode].type === \"AvgPooling2D\") &&\n                                                                        <>\n                                                                            <div>\n                                                                                <label>Padding</label>\n                                                                                <select value={model[selectedNode].padding} \n                                                                                    disabled={!(workspace.self || type === \"create\")}\n                                                                                    onChange={e => {setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy[selectedNode] = {\n                                                                                                            ...stateCopy[selectedNode],\n                                                                                                            padding: e.target.value\n                                                                                                        }\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n                                                                                                    setChangedSettings(true)\n                                                                                                    setRefreshDiagram(new Date().getTime())}}>\n                                                                                    <option disabled defaultValue value=\"\"></option>\n                                                                                    <option value=\"same\">Same</option>\n                                                                                    <option value=\"valid\">Valid</option>\n                                                                                </select>\n                                                                            </div>\n                                                                            <div>\n                                                                                <label>Strides</label>\n                                                                                <input value={model[selectedNode].strides} \n                                                                                    disabled={!(workspace.self || type === \"create\")}\n                                                                                    onChange={e => {setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy[selectedNode] = {\n                                                                                                            ...stateCopy[selectedNode],\n                                                                                                            strides: Number(e.target.value)\n                                                                                                        }\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n                                                                                                    setChangedSettings(true)\n                                                                                                    setRefreshDiagram(new Date().getTime())}} />\n                                                                            </div>\n                                                                        </>\n                                                                    }\n                                                                    {model[selectedNode].type === \"Conv2D\" &&\n                                                                        <>\n                                                                            <div>\n                                                                                <label>Filters</label>\n                                                                                <input value={model[selectedNode].filters} \n                                                                                    disabled={!(workspace.self || type === \"create\")}\n                                                                                    onChange={e => {setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy[selectedNode] = {\n                                                                                                            ...stateCopy[selectedNode],\n                                                                                                            filters: Number(e.target.value)\n                                                                                                        }\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n                                                                                                    setChangedSettings(true)\n                                                                                                    setRefreshDiagram(new Date().getTime())}} />\n                                                                            </div>\n                                                                            <div>\n                                                                                <label>Kernel Size</label>\n                                                                                <input value={model[selectedNode].kernel} \n                                                                                    disabled={!(workspace.self || type === \"create\")}\n                                                                                    onChange={e => {setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy[selectedNode] = {\n                                                                                                            ...stateCopy[selectedNode],\n                                                                                                            kernel: Number(e.target.value)\n                                                                                                        }\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n                                                                                                    setChangedSettings(true)\n                                                                                                    setRefreshDiagram(new Date().getTime())}} />\n                                                                            </div>\n                                                                        </>\n                                                                    }\n                                                                    {(model[selectedNode].type === \"MaxPooling2D\" || model[selectedNode].type === \"AvgPooling2D\") &&\n                                                                        <div>\n                                                                            <label>Pooling Size</label>\n                                                                            <input value={model[selectedNode].pool} \n                                                                                disabled={!(workspace.self || type === \"create\")}\n                                                                                onChange={e => {setModel(state => {\n                                                                                                    const stateCopy = [...state]\n                                                                                                \n                                                                                                    stateCopy[selectedNode] = {\n                                                                                                        ...stateCopy[selectedNode],\n                                                                                                        pool: Number(e.target.value)\n                                                                                                    }\n                                                                                                \n                                                                                                    return stateCopy\n                                                                                                })\n                                                                                                setChangedSettings(true)\n                                                                                                setRefreshDiagram(new Date().getTime())}} />\n                                                                        </div>\n                                                                    }\n                                                                    {model[selectedNode].type === \"Dropout\" &&\n                                                                        <div>\n                                                                            <label>Rate</label>\n                                                                            <input value={model[selectedNode].rate} \n                                                                                disabled={!(workspace.self || type === \"create\")}\n                                                                                onChange={e => {setModel(state => {\n                                                                                                    const stateCopy = [...state]\n                                                                                                \n                                                                                                    stateCopy[selectedNode] = {\n                                                                                                        ...stateCopy[selectedNode],\n                                                                                                        rate: Number(e.target.value)\n                                                                                                    }\n                                                                                                \n                                                                                                    return stateCopy\n                                                                                                })\n                                                                                                setChangedSettings(true)\n                                                                                                setRefreshDiagram(new Date().getTime())}} />\n                                                                        </div>\n                                                                    }\n                                                                    {model[selectedNode].type === \"BatchNormalisation\" &&\n                                                                        <div>\n                                                                            <label>Momentum</label>\n                                                                            <input value={model[selectedNode].momentum} \n                                                                                disabled={!(workspace.self || type === \"create\")}\n                                                                                onChange={e => {setModel(state => {\n                                                                                                    const stateCopy = [...state]\n                                                                                                \n                                                                                                    stateCopy[selectedNode] = {\n                                                                                                        ...stateCopy[selectedNode],\n                                                                                                        momentum: Number(e.target.value)\n                                                                                                    }\n                                                                                                \n                                                                                                    return stateCopy\n                                                                                                })\n                                                                                                setChangedSettings(true)\n                                                                                                setRefreshDiagram(new Date().getTime())}} />\n                                                                        </div>\n                                                                    }\n                                                                    {model[selectedNode].type === \"Input\" &&\n                                                                        <>\n                                                                            <div>\n                                                                                <label>Image Height</label>\n                                                                                <p>{uploadedDataset.height}</p>\n                                                                            </div>\n                                                                            <div>\n                                                                                <label>Image Width</label>\n                                                                                <p>{uploadedDataset.width}</p>\n                                                                            </div>\n                                                                        </>\n                                                                    }\n                                                                </>\n                                                            }\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"create-model-configuration\">\n                                                        <div className=\"create-model-configuration-option\">\n                                                            <div>\n                                                                <label>Epochs</label>\n                                                                <input value={configuration.epochs}\n                                                                        disabled={!(workspace.self || type === \"create\")} \n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                epochs: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Training Split</label>\n                                                                <input value={configuration.training_split} \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                training_split: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Validation Split</label>\n                                                                <input value={configuration.validation_split} \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                validation_split: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Batch Size</label>\n                                                                <input value={configuration.batch} \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                batch: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Initial Learning Rate</label>\n                                                                <input value={configuration.initial_lr} \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                initial_lr: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Learning Rate Scheduler</label>\n                                                                <input className=\"create-model-configuration-option-checkbox\"\n                                                                        type=\"checkbox\" \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={() => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                lr_scheduler: !configuration.lr_scheduler\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }}\n                                                                        checked={configuration.lr_scheduler} />\n                                                            </div>\n                                                            {configuration.lr_scheduler &&\n                                                                <>\n                                                                    <div>\n                                                                        <label>Decay Rate</label>\n                                                                        <input value={configuration.decay_rate} \n                                                                                disabled={!(workspace.self || type === \"create\")}\n                                                                                onChange={e => {\n                                                                                    setConfiguration(state => ({\n                                                                                        ...state,\n                                                                                        decay_rate: e.target.value\n                                                                                    }))\n                                                                                    setChangedSettings(true)\n                                                                                }} />\n                                                                    </div>\n                                                                    <div>\n                                                                        <label>Decay Steps</label>\n                                                                        <input value={configuration.decay_steps} \n                                                                                disabled={!(workspace.self || type === \"create\")}\n                                                                                onChange={e => {\n                                                                                    setConfiguration(state => ({\n                                                                                        ...state,\n                                                                                        decay_steps: e.target.value\n                                                                                    }))\n                                                                                    setChangedSettings(true)\n                                                                                }} />\n                                                                    </div>\n                                                                </>\n                                                            }\n                                                            <div>\n                                                                <label>Early Stopping</label>\n                                                                <input className=\"create-model-configuration-option-checkbox\"\n                                                                        type=\"checkbox\" \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={() => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                early_stopping: !configuration.early_stopping\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }}\n                                                                        checked={configuration.early_stopping} />\n                                                            </div>\n                                                            {configuration.early_stopping &&\n                                                                <>\n                                                                    <div>\n                                                                        <label>Minimum Improvement</label>\n                                                                        <input value={configuration.improvement} \n                                                                                disabled={!(workspace.self || type === \"create\")}\n                                                                                onChange={e => {\n                                                                                    setConfiguration(state => ({\n                                                                                        ...state,\n                                                                                        improvement: e.target.value\n                                                                                    }))\n                                                                                    setChangedSettings(true)\n                                                                                }} />\n                                                                    </div>\n                                                                    <div>\n                                                                        <label>Patience</label>\n                                                                        <input value={configuration.patience} \n                                                                                disabled={!(workspace.self || type === \"create\")}\n                                                                                onChange={e => {\n                                                                                    setConfiguration(state => ({\n                                                                                        ...state,\n                                                                                        patience: e.target.value\n                                                                                    }))\n                                                                                    setChangedSettings(true)\n                                                                                }} />\n                                                                    </div>\n                                                                </>\n                                                            }\n                                                            <div>\n                                                                <label>Optimiser</label>\n                                                                <select value={configuration.optimiser} \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                optimiser: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }}>\n                                                                    <option disabled defaultValue value=\"\"></option>\n                                                                    <option value=\"Adadelta\">Adadelta</option>\n                                                                    <option value=\"Adagrad\">Adagrad</option>\n                                                                    <option value=\"Adam\">Adam</option>\n                                                                    <option value=\"Adamax\">Adamax</option>\n                                                                    <option value=\"Ftrl\">Ftrl</option>\n                                                                    <option value=\"Nadam\">Nadam</option>\n                                                                    <option value=\"RMSprop\">RMSprop</option>\n                                                                    <option value=\"SGD\">SGD</option>\n                                                                </select>\n                                                            </div>\n                                                            <div>\n                                                                <label>Loss</label>\n                                                                <select value={configuration.loss} \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                loss: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }}>\n                                                                    <option disabled defaultValue value=\"\"></option>\n                                                                    {uploadedDataset.labels.length === 2 &&\n                                                                        <>\n                                                                            <option value=\"binary_crossentropy\">Binary Crossentropy</option>\n                                                                            <option value=\"hinge\">Hinge</option>\n                                                                            <option value=\"squared_hinge\">Squared Hinge</option>\n                                                                        </>\n                                                                    }\n                                                                    {uploadedDataset.labels.length > 2 &&\n                                                                        <>\n                                                                            <option value=\"categorical_crossentropy\">Categorical Crossentropy</option>\n                                                                            <option value=\"kl_divergence\">Kullback Leibler Divergence</option>\n                                                                        </>\n                                                                    }\n                                                                </select>\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        :\n                                            <p className=\"end-items\">Select a dataset...</p>\n                                        }\n                                    </>\n                                : (stage === \"evaluation\") ?\n                                    <div className='create-evaluation-body'>\n                                        {!evaluation ?\n                                            <p className='create-evaluation-header'>Model must be trained first...</p>\n                                        :\n                                            <>\n                                                <div className=\"create-evaluation-test\">\n                                                    <div>\n                                                        <p>Training Time:</p>\n                                                        <p>{trainTime} seconds</p>\n                                                    </div>\n                                                    <div>\n                                                        <p>Test Accuracy:</p>\n                                                        <p>{evaluation.testAcc.toFixed(3)}</p>\n                                                    </div>\n                                                    <div>\n                                                        <p>Test Loss:</p>\n                                                        <p>{evaluation.testLoss.toFixed(3)}</p>\n                                                    </div>\n                                                    <div>\n                                                        <p>Test Precision:</p>\n                                                        <p>{evaluation.testPrecision.toFixed(3)}</p>\n                                                    </div>\n                                                    <div>\n                                                        <p>Test Recall:</p>\n                                                        <p>{evaluation.testRecall.toFixed(3)}</p>\n                                                    </div>\n                                                </div>\n                                                <Chart x={evaluation.trainEpochs} y1={evaluation.trainAcc} y2={evaluation.validationAcc} type={\"Accuracy\"} />\n                                                <Chart x={evaluation.trainEpochs} y1={evaluation.trainLoss} y2={evaluation.validationLoss} type={\"Loss\"} />\n                                                <Chart x={evaluation.trainEpochs} y1={evaluation.trainPrecision} y2={evaluation.validationPrecision} type={\"Precision\"} />\n                                                <Chart x={evaluation.trainEpochs} y1={evaluation.trainRecall} y2={evaluation.validationRecall} type={\"Recall\"} />\n                                            </>\n                                        }\n                                    </div>\n                                : (stage === \"train\") ?\n                                    <div className='create-training-body'>\n                                        <p>Training Model...</p>\n                                        <p>Elapsed Time: {trainTime} seconds</p>\n                                    </div>\n                                :\n                                    <div className='create-prediction-body'>\n                                        {!evaluation ?\n                                            <p className='create-prediction-header'>Model must be trained first...</p>\n                                        :\n                                            <>\n                                                <div className=\"create-prediction-top\">\n                                                    <input type=\"file\" \n                                                            name=\"data\"\n                                                            accept=\"image/*\"\n                                                            onChange={e => {\n                                                                setPrediction(\"\")\n                                                                setPredictionFile(e.target.files[0])}} \n                                                            />\n                                                    <button className=\"white-button\"\n                                                            onClick={() => {predictModel()}}>Predict</button>\n                                                </div>\n                                                {predictionFile && \n                                                    <div className=\"create-prediction-card\">\n                                                        <img src={URL.createObjectURL(predictionFile)} />\n                                                        <p>{prediction ? \"Predicted label:\" : \"Predict label...\"}</p>\n                                                        <p className=\"create-prediction-card-prediction\">{prediction}</p>\n                                                    </div>\n                                                }\n                                            </>\n                                        }\n                                    </div>\n                                }\n                                {displayMessage && <MessageCard message={message} />}\n                            </div>\n                            {uploadedDataset && \n                                <>\n                                    {noData ?\n                                        <p className=\"end-items\">Cannot find dataset</p>\n                                    :\n                                        <div className=\"create-workspace-data\">\n                                            <p className=\"create-workspace-data-header\">Selected Dataset:</p>\n                                            <p className=\"create-workspace-data-header-dataset\">{uploadedDataset.title}</p>\n                                            <div className=\"sidebar-divided\" />\n                                            <div className=\"create-workspace-data-images-list\" key={refreshData}>\n                                                {images.map((image, i) => {\n                                                    if (i >= start && i < end && assignedLabels[i] !== \"No label\") {\n                                                        return (\n                                                            <div className=\"create-workspace-data-image\" key={i}>\n                                                                <img src={`http://127.0.0.1:5000/datasets/${uploadedDataset.imageDir}/images/${assignedLabels[i]}/${image}.jpg`}  />\n                                                                <p>{assignedLabels[i]}</p>\n                                                            </div>\n                                                        )\n                                                    }\n                                                })}\n                                            </div>\n                                            <div className=\"sidebar-divided\" />\n                                            <div className=\"create-workspace-pagination\">\n                                                <ArrowBackIosNewIcon className=\"create-workspace-pagination-icon\" onClick={() => {previousPage()}} />\n                                                <p>Page {page} / {Math.ceil(images.length/20)}</p>\n                                                <ArrowForwardIosIcon className=\"create-workspace-pagination-icon\" onClick={() => {nextPage()}} />\n                                            </div>\n                                        </div>\n                                    }   \n                                </>\n                            }\n                        </div>\n                    </div>\n                </div>\n            : loaded && !exist &&\n                <div className=\"inner\">  \n                    <p className=\"item-exist\">Cannot find workspace</p>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default Workspace","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Search.jsx",["156","157","158","159"],"import React, {useState, useEffect, useContext} from 'react'\nimport {Link, useHistory, useParams} from \"react-router-dom\"\nimport { CardFormatContext } from '../Contexts/cardFormatContext';\nimport ItemRowCard from '../Components/Item-Row-Card'\nimport ItemSquareCard from '../Components/Item-Square-Card'\nimport globalAPI from '../API/global'\nimport SearchIcon from '@mui/icons-material/Search';\nimport Shortcut from '../Components/Shortcut'\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\n\nconst Search = ({searchPhrase, setSearchPhrase, currentUser}) => {\n    const [items, setItems] = useState();\n    const [loaded, setLoaded] = useState(false);\n    const [input, setInput] = useState(\"\");\n    const [finishedItems, setFinishedItems] = useState(false);\n    const {cardFormat, changeCardFormat} = useContext(CardFormatContext);\n    const urlPhrase = useParams().id;\n    const history = useHistory();\n\n    useEffect(() => {\n        const fetchData = async () => {\n            if (searchPhrase === null) {\n                if (urlPhrase) {\n                    const items = await globalAPI.get(`/search?phrase=${urlPhrase}`);\n\n                    if (items.data.data.length < 21) {\n                        setFinishedItems(true)\n                    }\n\n                    setItems(items.data.data);\n                    setLoaded(true);\n                } else {\n                    history.push(\"/home\");\n                }\n            } else {\n                const items = await globalAPI.get(`/search?phrase=${searchPhrase}`);\n\n                if (items.data.data.length < 21) {\n                    setFinishedItems(true)\n                }\n\n                setItems(items.data.data);\n                setLoaded(true);\n            }\n        }\n        fetchData();\n    }, [])\n\n    const searchFunctionKey = (e) => {\n        if (e.key === \"Enter\" && input !== \"\") {\n            setSearchPhrase(input);\n            history.push(`/search-results/${input}`);\n        }\n    }\n\n    const searchFunctionButton = () => {\n        if (input !== \"\") {\n            setSearchPhrase(input);\n            history.push(`/search-results/${input}`);\n        }\n    }\n\n    const fetchDataItems = async (id) => {\n        if (!finishedItems) {\n            try {\n                const fetchedItems = await globalAPI.get(`/search?phrase=${urlPhrase}&id=${id}`);\n    \n                if (fetchedItems.data.data.length < 21) {\n                    setFinishedItems(true)\n                }\n\n                setItems(items => [...items, ...fetchedItems.data.data]);\n            } catch (err) {}\n        }\n    }\n\n    const loadMore = () => {\n        if (items.length !== 0) {\n            {fetchDataItems(items[items.length-1]._id)}\n        }\n    };\n\n    return (\n        <>\n            {loaded &&\n                <div className=\"main-body\">\n                    <div className=\"sidebar\">\n                        <div className=\"home-search\">\n                            <input className=\"home-search-input\" \n                                    placeholder=\"Search\"\n                                    value={input}\n                                    onChange={e => setInput(e.target.value)}\n                                    onKeyPress={searchFunctionKey} />\n                            <SearchIcon className=\"home-search-icon\" onClick={e => searchFunctionButton()} />\n                        </div>\n                        <div className=\"sidebar-divided\" />\n                        <Link className=\"home-options-link\" to=\"/public-workspaces\">\n                            <p>Public Workspaces</p>\n                            <ArrowForwardIosIcon className=\"home-options-icon\" />\n                        </Link>\n                        <Link className=\"home-options-link\" to=\"public-datasets\">\n                            <p>Public Datasets</p>\n                            <ArrowForwardIosIcon className=\"home-options-icon\" />\n                        </Link>\n                        <div className=\"sidebar-divided\" />\n                        <Shortcut type={\"workspaces\"} />\n                        <div className=\"sidebar-divided\" />\n                        <Shortcut type={\"datasets\"} />\n                        <div className=\"sidebar-divided\" />\n                        <Shortcut type={\"bookmarked\"} />\n                    </div>\n                    <div className=\"inner\">\n                        <div className=\"home-inner\">\n                            <div className=\"view-items-top\">\n                                <h1>Search Results: {urlPhrase}</h1>\n                                <div className=\"toggle-card-type\">\n                                    <span />\n                                    <img src=\"http://localhost:3000/List.png\" className=\"toggle-card-type-row-icon\" onClick={() => {changeCardFormat()}} />\n                                    <img src=\"http://localhost:3000/Grid.png\" className=\"toggle-card-type-grid-icon\" onClick={() => {changeCardFormat()}} />\n                                </div>\n                            </div>\n                            <p className=\"view-items-results\">{`${items.length} Results`}</p>\n                            <div className=\"view-items-list\">\n                                {items.length > 0 &&\n                                    <>\n                                        {items.map((item, i) => {\n                                            return cardFormat ? \n                                                <ItemRowCard item={item} creator={item.creatorName.name} currentUserID={currentUser.id} created={currentUser.id === item.creator} key={i} /> \n                                                : \n                                                <ItemSquareCard item={item} creator={item.creatorName.name} currentUserID={currentUser.id} created={currentUser.id === item.creator} key={i} />\n                                        })}\n                                    </>\n                                }\n                            </div>\n                            {items.length >= 0 && finishedItems ?\n                                <p className=\"end-items\">End reached</p>\n                                :\n                                <p className=\"load-items\" onClick={() => {loadMore()}}>Load more</p>\n                            }\n                        </div>\n                    </div>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default Search","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Header-Open-Item.jsx",["160","161","162","163"],"import React, {useState, useContext} from 'react'\nimport { useLocation, Link, useHistory } from 'react-router-dom'\nimport CloseIcon from '@mui/icons-material/Close';\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\n\nconst HeaderOpenItems = ({item}) => {\n    const [mouseOver, setMouseOver] = useState(false)\n    const history = useHistory();\n    const location = useLocation();\n    const {removeOpenItems} = useContext(OpenItemsContext);\n\n    const checkCurrent = () => {\n        if (location.pathname.substring(11) === item.id || location.pathname.substring(9) === item.id) return true\n\n        return false\n    }\n\n    const closeItem = () => {\n        removeOpenItems(item.id)\n        \n        if (checkCurrent()) {\n            history.replace(\"/home\")\n        }\n    }\n\n    return (\n        <div className={`item-header ${checkCurrent() && \"item-header-selected\"}`}\n                onMouseEnter={() => {setMouseOver(true)}}\n                onMouseLeave={() => {setMouseOver(false)}}>\n            {item.type === \"workspace\" ? \n                <>\n                    {(checkCurrent() || mouseOver) ? \n                        <img src=\"http://localhost:3000/workspace.png\" /> \n                    : \n                        <img src=\"http://localhost:3000/workspace-grey.png\" />\n                    } \n                </>\n            : \n                <>  \n                    {(checkCurrent() || mouseOver) ? \n                        <img src=\"http://localhost:3000/dataset.png\" /> \n                    :\n                        <img src=\"http://localhost:3000/dataset-grey.png\" />\n                    }\n                </>\n            }\n            <Link to={item.type === \"workspace\" ? `/workspace/${item.id}` : `/dataset/${item.id}`} className=\"item-header-link\">\n                <p className={`item-header-title ${(checkCurrent() || mouseOver) && \"item-header-title-selected\"}`}>{item.title}</p>\n            </Link>\n            <CloseIcon className=\"item-header-close\" onClick={() => {closeItem()}} />\n        </div>\n    )\n}\n\nexport default HeaderOpenItems","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Contexts/openItemsContext.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Item-Row-Card.jsx",["164","165","166","167"],"import React, {useState, useEffect, useContext} from 'react'\nimport { Link } from 'react-router-dom'\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport globalAPI from '../API/global'\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\n\nconst ItemRowCard = ({item, created, creator, currentUserID}) => {\n    const [bookmarked, setBookmarked] = useState(item.bookmarked)\n    const [upvoted, setUpvoted] = useState(item.upvoted)\n    const [upvotes, setUpvotes] = useState(item.upvotes)\n    const [visibility, setVisibility] = useState(item.visibility)\n    const {addOpenItems} = useContext(OpenItemsContext);\n    const [date, setDate] = useState(\"\");\n\n    useEffect(() => {\n        const updatedDate = new Date(item.updated);\n        const currentDate = new Date();\n\n        if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} years ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} days ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hours ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minutes ago`)\n        } else {\n            setDate(\"Updated just now\")\n        }\n    }, [])\n\n    const addHeader = () => {\n        if (item.creator === currentUserID) {\n            addOpenItems(item._id, item.title, item.type)\n        }\n    }\n\n    const updateUpvote = async () => {\n        try {\n            await globalAPI.put(`/upvote/${item._id}?state=${upvoted}`);\n\n            if (upvoted) {\n                setUpvotes(state => state-1)\n            } else {\n                setUpvotes(state => state+1)\n            }\n\n            setUpvoted(state => !state)\n        } catch (err) {}\n    }\n\n    const updateBookmark = async () => {\n        try {\n            await globalAPI.put(`/bookmark/${item._id}?state=${bookmarked}`);\n            \n            setBookmarked(state => !state)\n        } catch (err) {}\n    }\n\n    const updateVisibility = async () => {\n        try {\n            await globalAPI.put(`/visibility/${item._id}`);\n\n            setVisibility(state => !state)\n        } catch (err) {}\n    }\n\n    return (\n        <div className=\"item-row-card\" onClick={() => {addHeader()}}>\n            <Link to={item.type === \"workspace\" ? `/workspace/${item._id}` : `/dataset/${item._id}`}>\n                <img src={`http://localhost:4000/images/${item.picture}`} className=\"item-row-card-picture\" />\n            </Link>\n            <div className=\"item-row-card-information\">\n                <div className=\"item-row-card-heading\">\n                    {item.type === \"workspace\" ? <img src=\"http://localhost:3000/workspace.png\" /> : <img src=\"http://localhost:3000/dataset.png\" />}\n                    <Link to={item.type === \"workspace\" ? `/workspace/${item._id}` : `/dataset/${item._id}`} className=\"item-row-card-title\">{item.title}</Link>\n                </div>\n                <div>\n                    {!created && <p className=\"item-row-card-meta\">{creator}</p>}\n                    <p className=\"item-row-card-meta\">{date}</p>\n                </div>\n            </div>\n            <div>\n                <ThumbUpIcon className={`item-row-card-icon ${upvoted ? \"blue2\" : \"white\"}`} onClick={() => {updateUpvote()}} />\n                <p className={`item-row-card-upvotes ${upvoted ? \"blue2\" : \"white\"}`}>{upvotes}</p>\n                {!created && item.creator !== currentUserID && <BookmarkIcon className={`item-row-card-icon ${bookmarked ? \"blue2\" : \"white\"}`} onClick={() => {updateBookmark()}} />}\n                {created && \n                    <>\n                        {visibility ? \n                            <VisibilityIcon className=\"item-row-card-visibility\" onClick={() => {updateVisibility()}} />\n                        :\n                            <VisibilityOffIcon className=\"item-row-card-visibility\" onClick={() => {updateVisibility()}} />\n                        }\n                    </>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default ItemRowCard","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Item-Square-Card.jsx",["168","169","170","171"],"import React, {useState, useEffect, useContext} from 'react'\nimport { Link } from 'react-router-dom'\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport globalAPI from '../API/global'\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\n\nconst ItemSquareCard = ({item, created, creator, currentUserID}) => {\n    const [bookmarked, setBookmarked] = useState(item.bookmarked)\n    const [upvoted, setUpvoted] = useState(item.upvoted)\n    const [upvotes, setUpvotes] = useState(item.upvotes)\n    const [visibility, setVisibility] = useState(item.visibility)\n    const {addOpenItems} = useContext(OpenItemsContext);\n    const [date, setDate] = useState(\"\");\n\n    useEffect(() => {\n        const updatedDate = new Date(item.updated);\n        const currentDate = new Date();\n\n        if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} years ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} days ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hours ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minutes ago`)\n        } else {\n            setDate(\"Updated just now\")\n        }\n    }, [])\n\n    const addHeader = () => {\n        if (item.creator === currentUserID) {\n            addOpenItems(item._id, item.title, item.type)\n        }\n    }\n\n    const updateUpvote = async () => {\n        try {\n            await globalAPI.put(`/upvote/${item._id}?state=${upvoted}`);\n\n            if (upvoted) {\n                setUpvotes(state => state-1)\n            } else {\n                setUpvotes(state => state+1)\n            }\n\n            setUpvoted(state => !state)\n        } catch (err) {}\n    }\n\n    const updateBookmark = async () => {\n        try {\n            await globalAPI.put(`/bookmark/${item._id}?state=${bookmarked}`);\n            \n            setBookmarked(state => !state)\n        } catch (err) {}\n    }\n\n    const updateVisibility = async () => {\n        try {\n            await globalAPI.put(`/visibility/${item._id}`);\n\n            setVisibility(state => !state)\n        } catch (err) {}\n    }\n\n    return (\n        <div className=\"item-square-card\" onClick={() => {addHeader()}}>\n            <Link to={item.type === \"workspace\" ? `/workspace/${item._id}` : `/dataset/${item._id}`}>\n                <img src={`http://localhost:4000/images/${item.picture}`} className=\"item-square-card-picture\" />\n            </Link>\n            <div className=\"item-square-card-heading\">\n                {item.type === \"workspace\" ? <img src=\"http://localhost:3000/workspace.png\" /> : <img src=\"http://localhost:3000/dataset.png\" />}\n                <Link to={item.type === \"workspace\" ? `/workspace/${item._id}` : `/dataset/${item._id}`} className=\"item-square-card-title\">{item.title}</Link>\n            </div>\n            <div>\n                <p className=\"item-square-card-meta\">{created ? \"You\" : creator}</p>\n                <p className=\"item-square-card-meta\">{date}</p>\n            </div>\n            <div className=\"item-square-card-bottom\">\n                {!created ?\n                    <>\n                        <ThumbUpIcon className={`item-square-card-icon ${upvoted ? \"blue2\" : \"white\"}`} onClick={() => {updateUpvote()}} />\n                        <p className={`item-square-card-upvotes ${upvoted ? \"blue2\" : \"white\"}`}>{upvotes}</p>\n                        {item.creator !== currentUserID && <BookmarkIcon className={`item-square-card-icon ${bookmarked ? \"blue2\" : \"white\"}`} onClick={() => {updateBookmark()}} />}\n                    </>\n                    :\n                    <>\n                        <ThumbUpIcon className={`item-square-card-icon ${upvoted ? \"blue2\" : \"white\"}`} onClick={() => {updateUpvote()}} />\n                        <p className={`item-square-card-upvotes ${upvoted ? \"blue2\" : \"white\"}`}>{upvotes}</p>\n                        {created && \n                            <>\n                                {visibility ? \n                                    <VisibilityIcon className=\"item-square-card-visibility\" onClick={() => {updateVisibility()}} />\n                                :\n                                    <VisibilityOffIcon className=\"item-square-card-visibility\" onClick={() => {updateVisibility()}} />\n                                }\n                            </>\n                        }\n                    </>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default ItemSquareCard","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/View-Items.jsx",["172","173","174","175","176","177","178","179","180","181","182","183","184"],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/global.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Dataset.jsx",["185","186","187","188","189","190","191","192","193","194","195","196","197"],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/items.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Model-Node.jsx",["198"],"import React from 'react'\n\nconst ModelNode = ({type, selected, last}) => {\n    return (\n        <div className={`model-node ${type === \"Input\" && \"model-node-input\"}`}>\n            <div className={selected ? \"model-node-selected\" : \"model-node-unselected\"}>\n                <p>{type}</p>\n            </div>\n            {!last &&\n                <img src=\"http://localhost:3000/Node-Connector.png\" className=\"model-node-connector\" />\n            }\n        </div>\n    )\n};\n\nexport default ModelNode;\n","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/train.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Shortcut.jsx",["199","200"],"import React, {useState, useEffect, useContext} from 'react'\nimport { Link } from 'react-router-dom';\nimport usersAPI from '../API/users'\nimport itemsAPI from '../API/items'\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport AddIcon from '@mui/icons-material/Add';\n\nconst Shortcut = ({type, currentUserID, datasetID}) => {\n    const {addOpenItems} = useContext(OpenItemsContext);\n    const [items, setItems] = useState();\n    const [loaded, setLoaded] = useState(false);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                let items;\n\n                if (type === \"workspaces\") {\n                    items = await usersAPI.get(`/created-shortcut?type=workspace`);\n                } else if (type === \"datasets\") {\n                    items = await usersAPI.get(`/created-shortcut?type=dataset`);\n                } else if (type === \"bookmarked\") {\n                    items = await usersAPI.get(`/bookmarked-shortcut`);\n                } else {\n                    items = await itemsAPI.get(`/associated-workspaces?id=${datasetID}`);\n                }\n\n                setItems(items.data.data)\n                setLoaded(true);\n            } catch (err) {}\n        }\n        fetchData();\n    }, [])\n\n    const addHeader = (item) => {\n        if (item.creator === currentUserID) {\n            addOpenItems(item._id, item.title, item.type)\n        }\n    }\n\n    return (\n        <>\n            {loaded &&\n                <div className=\"shortcut\">\n                    <div className=\"shortcut-header\">\n                        {type === \"related\" ?\n                            <p className=\"shortcut-link\">Related Workspaces</p>\n                        :\n                            <Link className=\"shortcut-link\"\n                                    to={type === \"workspaces\" ? \"/created-workspaces\" : (type === \"datasets\") ? \"/created-datasets\" : \"/bookmarked\"}>\n                                {type === \"workspaces\" ? \"Your Workspaces\" : (type === \"datasets\") ? \"Your Datasets\" : \"Your Bookmarked\"}\n                            </Link>\n                        }\n                        <span />\n                        {type === \"workspaces\" && \n                            <Link to=\"/create-workspace\">\n                                <AddIcon className=\"shortcut-icon\" />\n                            </Link>\n                        }\n                        {type === \"datasets\" && \n                            <Link to=\"/create-dataset\">\n                                <AddIcon className=\"shortcut-icon\" />\n                            </Link>\n                        }\n                    </div>\n                    <div className=\"shortcut-body\">\n                        {items.length === 0 ?\n                            <p className=\"shortcut-none\">Empty</p>\n                        :\n                            <>\n                                {items.map((item, i) => {\n                                    return (\n                                        <Link to={item.type === \"workspace\" ? `/workspace/${item._id}` : `/dataset/${item._id}`}\n                                                className=\"shortcut-item\" \n                                                onClick={() => {addHeader(item)}}\n                                                key={i}>\n                                            <img src={`http://localhost:4000/images/${item.picture}`} />\n                                            <p>{item.title}</p>\n                                        </Link>\n                                    )\n                                })}\n                            </>\n                        }\n                    </div>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default Shortcut","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Contexts/cardFormatContext.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Chart.jsx",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/predict.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Contexts/messageContext.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/MessageCard.jsx",[],{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","severity":1,"message":"206","line":38,"column":8,"nodeType":"207","endLine":38,"endColumn":10,"suggestions":"208"},{"ruleId":"209","severity":1,"message":"210","line":10,"column":17,"nodeType":"211","endLine":10,"endColumn":95},{"ruleId":"209","severity":1,"message":"210","line":79,"column":37,"nodeType":"211","endLine":79,"endColumn":156},{"ruleId":"209","severity":1,"message":"210","line":80,"column":37,"nodeType":"211","endLine":80,"endColumn":157},{"ruleId":"201","replacedBy":"212"},{"ruleId":"203","replacedBy":"213"},{"ruleId":"214","severity":1,"message":"215","line":77,"column":57,"nodeType":"216","messageId":"217","endLine":77,"endColumn":59},{"ruleId":"214","severity":1,"message":"215","line":123,"column":46,"nodeType":"216","messageId":"217","endLine":123,"endColumn":48},{"ruleId":"205","severity":1,"message":"218","line":142,"column":8,"nodeType":"207","endLine":142,"endColumn":10,"suggestions":"219"},{"ruleId":"205","severity":1,"message":"220","line":182,"column":8,"nodeType":"207","endLine":182,"endColumn":25,"suggestions":"221"},{"ruleId":"214","severity":1,"message":"215","line":256,"column":46,"nodeType":"216","messageId":"217","endLine":256,"endColumn":48},{"ruleId":"214","severity":1,"message":"215","line":415,"column":32,"nodeType":"216","messageId":"217","endLine":415,"endColumn":34},{"ruleId":"214","severity":1,"message":"215","line":549,"column":46,"nodeType":"216","messageId":"217","endLine":549,"endColumn":48},{"ruleId":"209","severity":1,"message":"210","line":650,"column":29,"nodeType":"211","endLine":651,"endColumn":128},{"ruleId":"209","severity":1,"message":"210","line":742,"column":41,"nodeType":"211","endLine":742,"endColumn":112},{"ruleId":"222","severity":1,"message":"223","line":806,"column":98,"nodeType":"224","messageId":"225","endLine":818,"endColumn":98},{"ruleId":"222","severity":1,"message":"223","line":975,"column":109,"nodeType":"224","messageId":"225","endLine":987,"endColumn":110},{"ruleId":"209","severity":1,"message":"210","line":1488,"column":57,"nodeType":"211","endLine":1488,"endColumn":106},{"ruleId":"214","severity":1,"message":"226","line":1509,"column":72,"nodeType":"216","messageId":"227","endLine":1509,"endColumn":74},{"ruleId":"209","severity":1,"message":"210","line":1513,"column":65,"nodeType":"211","endLine":1513,"endColumn":181},{"ruleId":"205","severity":1,"message":"228","line":47,"column":8,"nodeType":"207","endLine":47,"endColumn":10,"suggestions":"229"},{"ruleId":"222","severity":1,"message":"223","line":79,"column":13,"nodeType":"224","messageId":"225","endLine":79,"endColumn":56},{"ruleId":"209","severity":1,"message":"210","line":118,"column":37,"nodeType":"211","endLine":118,"endColumn":156},{"ruleId":"209","severity":1,"message":"210","line":119,"column":37,"nodeType":"211","endLine":119,"endColumn":157},{"ruleId":"209","severity":1,"message":"210","line":33,"column":25,"nodeType":"211","endLine":33,"endColumn":74},{"ruleId":"209","severity":1,"message":"210","line":35,"column":25,"nodeType":"211","endLine":35,"endColumn":79},{"ruleId":"209","severity":1,"message":"210","line":41,"column":25,"nodeType":"211","endLine":41,"endColumn":72},{"ruleId":"209","severity":1,"message":"210","line":43,"column":25,"nodeType":"211","endLine":43,"endColumn":77},{"ruleId":"205","severity":1,"message":"230","line":35,"column":8,"nodeType":"207","endLine":35,"endColumn":10,"suggestions":"231"},{"ruleId":"209","severity":1,"message":"210","line":76,"column":17,"nodeType":"211","endLine":76,"endColumn":111},{"ruleId":"209","severity":1,"message":"210","line":80,"column":50,"nodeType":"211","endLine":80,"endColumn":99},{"ruleId":"209","severity":1,"message":"210","line":80,"column":102,"nodeType":"211","endLine":80,"endColumn":149},{"ruleId":"205","severity":1,"message":"230","line":35,"column":8,"nodeType":"207","endLine":35,"endColumn":10,"suggestions":"232"},{"ruleId":"209","severity":1,"message":"210","line":76,"column":17,"nodeType":"211","endLine":76,"endColumn":114},{"ruleId":"209","severity":1,"message":"210","line":79,"column":46,"nodeType":"211","endLine":79,"endColumn":95},{"ruleId":"209","severity":1,"message":"210","line":79,"column":98,"nodeType":"211","endLine":79,"endColumn":145},{"ruleId":"233","severity":1,"message":"234","line":25,"column":17,"nodeType":"235","messageId":"236","endLine":41,"endColumn":18},{"ruleId":"205","severity":1,"message":"237","line":52,"column":8,"nodeType":"207","endLine":52,"endColumn":10,"suggestions":"238"},{"ruleId":"233","severity":1,"message":"234","line":73,"column":17,"nodeType":"235","messageId":"236","endLine":89,"endColumn":18},{"ruleId":"239","severity":1,"message":"240","line":75,"column":25,"nodeType":"241","messageId":"242","endLine":75,"endColumn":30},{"ruleId":"239","severity":1,"message":"240","line":78,"column":25,"nodeType":"241","messageId":"242","endLine":78,"endColumn":30},{"ruleId":"239","severity":1,"message":"240","line":81,"column":25,"nodeType":"241","messageId":"242","endLine":81,"endColumn":30},{"ruleId":"239","severity":1,"message":"240","line":84,"column":25,"nodeType":"241","messageId":"242","endLine":84,"endColumn":30},{"ruleId":"239","severity":1,"message":"240","line":87,"column":25,"nodeType":"241","messageId":"242","endLine":87,"endColumn":30},{"ruleId":"222","severity":1,"message":"223","line":103,"column":17,"nodeType":"224","messageId":"225","endLine":103,"endColumn":66},{"ruleId":"222","severity":1,"message":"223","line":105,"column":17,"nodeType":"224","messageId":"225","endLine":105,"endColumn":66},{"ruleId":"233","severity":1,"message":"234","line":113,"column":9,"nodeType":"235","messageId":"236","endLine":129,"endColumn":10},{"ruleId":"209","severity":1,"message":"210","line":173,"column":37,"nodeType":"211","endLine":173,"endColumn":156},{"ruleId":"209","severity":1,"message":"210","line":174,"column":37,"nodeType":"211","endLine":174,"endColumn":157},{"ruleId":"214","severity":1,"message":"215","line":73,"column":53,"nodeType":"216","messageId":"217","endLine":73,"endColumn":55},{"ruleId":"214","severity":1,"message":"215","line":103,"column":46,"nodeType":"216","messageId":"217","endLine":103,"endColumn":48},{"ruleId":"205","severity":1,"message":"243","line":120,"column":8,"nodeType":"207","endLine":120,"endColumn":10,"suggestions":"244"},{"ruleId":"205","severity":1,"message":"220","line":141,"column":8,"nodeType":"207","endLine":141,"endColumn":25,"suggestions":"245"},{"ruleId":"205","severity":1,"message":"246","line":149,"column":8,"nodeType":"207","endLine":149,"endColumn":16,"suggestions":"247"},{"ruleId":"214","severity":1,"message":"215","line":181,"column":51,"nodeType":"216","messageId":"217","endLine":181,"endColumn":53},{"ruleId":"248","severity":1,"message":"249","line":579,"column":34,"nodeType":"241","messageId":"250","endLine":579,"endColumn":42},{"ruleId":"209","severity":1,"message":"210","line":599,"column":29,"nodeType":"211","endLine":600,"endColumn":126},{"ruleId":"209","severity":1,"message":"210","line":825,"column":65,"nodeType":"211","endLine":825,"endColumn":105},{"ruleId":"214","severity":1,"message":"226","line":862,"column":76,"nodeType":"216","messageId":"227","endLine":862,"endColumn":78},{"ruleId":"209","severity":1,"message":"210","line":866,"column":61,"nodeType":"211","endLine":875,"endColumn":63},{"ruleId":"214","severity":1,"message":"226","line":900,"column":76,"nodeType":"216","messageId":"227","endLine":900,"endColumn":78},{"ruleId":"209","severity":1,"message":"210","line":904,"column":61,"nodeType":"211","endLine":904,"endColumn":168},{"ruleId":"209","severity":1,"message":"210","line":10,"column":17,"nodeType":"211","endLine":10,"endColumn":104},{"ruleId":"205","severity":1,"message":"251","line":33,"column":8,"nodeType":"207","endLine":33,"endColumn":10,"suggestions":"252"},{"ruleId":"209","severity":1,"message":"210","line":77,"column":45,"nodeType":"211","endLine":77,"endColumn":105},"no-native-reassign",["253"],"no-negated-in-lhs",["254"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'displayMessageInterval'. Either include it or remove the dependency array.","ArrayExpression",["255"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["253"],["254"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'addOpenItems', 'type', and 'workspaceID'. Either include them or remove the dependency array.",["256"],"React Hook useEffect has a missing dependency: 'exist'. Either include it or remove the dependency array.",["257"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","React Hook useEffect has missing dependencies: 'history', 'searchPhrase', and 'urlPhrase'. Either include them or remove the dependency array.",["258"],"React Hook useEffect has a missing dependency: 'item.updated'. Either include it or remove the dependency array.",["259"],["260"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has a missing dependency: 'type'. Either include it or remove the dependency array.",["261"],"no-const-assign","'items' is constant.","Identifier","const","React Hook useEffect has missing dependencies: 'addOpenItems', 'datasetID', and 'type'. Either include them or remove the dependency array.",["262"],["263"],"React Hook useEffect has missing dependencies: 'loaded', 'type', and 'updateDataset'. Either include them or remove the dependency array.",["264"],"no-use-before-define","'formData' was used before it was defined.","usedBeforeDefined","React Hook useEffect has missing dependencies: 'datasetID' and 'type'. Either include them or remove the dependency array.",["265"],"no-global-assign","no-unsafe-negation",{"desc":"266","fix":"267"},{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},{"desc":"274","fix":"275"},{"desc":"274","fix":"276"},{"desc":"277","fix":"278"},{"desc":"279","fix":"280"},{"desc":"270","fix":"281"},{"desc":"282","fix":"283"},{"desc":"284","fix":"285"},"Update the dependencies array to be: [displayMessageInterval]",{"range":"286","text":"287"},"Update the dependencies array to be: [addOpenItems, type, workspaceID]",{"range":"288","text":"289"},"Update the dependencies array to be: [exist, loaded, updated]",{"range":"290","text":"291"},"Update the dependencies array to be: [history, searchPhrase, urlPhrase]",{"range":"292","text":"293"},"Update the dependencies array to be: [item.updated]",{"range":"294","text":"295"},{"range":"296","text":"295"},"Update the dependencies array to be: [type]",{"range":"297","text":"298"},"Update the dependencies array to be: [addOpenItems, datasetID, type]",{"range":"299","text":"300"},{"range":"301","text":"291"},"Update the dependencies array to be: [labels, loaded, type, updateDataset]",{"range":"302","text":"303"},"Update the dependencies array to be: [datasetID, type]",{"range":"304","text":"305"},[1532,1534],"[displayMessageInterval]",[7495,7497],"[addOpenItems, type, workspaceID]",[9451,9468],"[exist, loaded, updated]",[1790,1792],"[history, searchPhrase, urlPhrase]",[2202,2204],"[item.updated]",[2205,2207],[2236,2238],"[type]",[5698,5700],"[addOpenItems, datasetID, type]",[7147,7164],[7358,7366],"[labels, loaded, type, updateDataset]",[1262,1264],"[datasetID, type]"]