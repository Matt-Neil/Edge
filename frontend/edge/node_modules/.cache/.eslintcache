[{"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/index.js":"1","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/App.js":"2","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Contexts/currentUserContext.js":"3","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/auth.js":"4","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Sign-In.jsx":"5","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Account.jsx":"6","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Header.jsx":"7","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/files.js":"8","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/users.js":"9","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/View-Data.jsx":"10","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/images.js":"11","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Home.jsx":"12","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/New-Workspace.jsx":"13","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/New-Experiment.jsx":"14","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Experiment.jsx":"15","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Not-Found.jsx":"16","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/workspaces.js":"17","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Workspace.jsx":"18","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Shortcut.jsx":"19","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Search.jsx":"20","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Header-Open-Item.jsx":"21","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Contexts/openItemsContext.js":"22","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Item-Feed-Card.jsx":"23","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Item-Row-Card.jsx":"24","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Item-Square-Card.jsx":"25","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/View-Items.jsx":"26","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/datasets.js":"27","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/global.js":"28"},{"size":475,"mtime":1643123857789,"results":"29","hashOfConfig":"30"},{"size":4831,"mtime":1643131661453,"results":"31","hashOfConfig":"30"},{"size":1766,"mtime":1641237875936,"results":"32","hashOfConfig":"30"},{"size":134,"mtime":1639341716098,"results":"33","hashOfConfig":"30"},{"size":4419,"mtime":1642348558560,"results":"34","hashOfConfig":"30"},{"size":2294,"mtime":1643064844895,"results":"35","hashOfConfig":"30"},{"size":1361,"mtime":1643123639734,"results":"36","hashOfConfig":"30"},{"size":134,"mtime":1640810261516,"results":"37","hashOfConfig":"30"},{"size":135,"mtime":1641219148050,"results":"38","hashOfConfig":"30"},{"size":1427,"mtime":1643034160081,"results":"39","hashOfConfig":"30"},{"size":136,"mtime":1641050477587,"results":"40","hashOfConfig":"30"},{"size":3344,"mtime":1643131541832,"results":"41","hashOfConfig":"30"},{"size":10904,"mtime":1643032445474,"results":"42","hashOfConfig":"30"},{"size":150,"mtime":1642349107492,"results":"43","hashOfConfig":"30"},{"size":144,"mtime":1642348874732,"results":"44","hashOfConfig":"30"},{"size":157,"mtime":1643129761468,"results":"45","hashOfConfig":"30"},{"size":140,"mtime":1642348244514,"results":"46","hashOfConfig":"30"},{"size":19612,"mtime":1643034973918,"results":"47","hashOfConfig":"30"},{"size":3842,"mtime":1643124290919,"results":"48","hashOfConfig":"30"},{"size":5102,"mtime":1643126715881,"results":"49","hashOfConfig":"30"},{"size":1387,"mtime":1643124927760,"results":"50","hashOfConfig":"30"},{"size":1141,"mtime":1643124447433,"results":"51","hashOfConfig":"30"},{"size":3904,"mtime":1643127160229,"results":"52","hashOfConfig":"30"},{"size":5236,"mtime":1643127800127,"results":"53","hashOfConfig":"30"},{"size":5688,"mtime":1643127723687,"results":"54","hashOfConfig":"30"},{"size":7986,"mtime":1643129576235,"results":"55","hashOfConfig":"30"},{"size":138,"mtime":1643133092475,"results":"56","hashOfConfig":"30"},{"size":136,"mtime":1643133085776,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"yw0j30",{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"60"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"60"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"60"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"60"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"60"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"60"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"60"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/index.js",[],["126","127"],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/App.js",["128","129","130"],"import React, {useState, useContext} from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport \"./Styles/app.css\";\n\nimport { CurrentUserContext } from './Contexts/currentUserContext';\nimport { OpenItemsContext } from './Contexts/openItemsContext';\nimport ViewItems from \"./Pages/View-Items\"\nimport Home from \"./Pages/Home\"\nimport Account from \"./Pages/Account\"\nimport NewWorkspace from \"./Pages/New-Workspace\"\nimport Workspace from \"./Pages/Workspace\"\nimport Search from \"./Pages/Search\"\nimport SignIn from \"./Pages/Sign-In\"\nimport NewExperiment from \"./Pages/New-Experiment\"\nimport Experiment from \"./Pages/Experiment\"\nimport NotFound from \"./Pages/Not-Found\"\nimport Header from \"./Components/Header\"\n\nexport default function App() {\n    const [searchPhrase, setSearchPhrase] = useState(null);\n    const {currentUser} = useContext(CurrentUserContext);\n    const {openItems} = useContext(OpenItemsContext);\n\n    const redirectPage = () => {\n        if (currentUser.loaded) {\n            if (currentUser.empty) {\n                return <Redirect to={\"/sign-in\"} />\n            } else {\n                return <Redirect to={`/home`} />\n            }\n        }\n    }\n\n    const redirectSignin = () => {\n        if (currentUser.loaded) {\n            if (currentUser.empty) {\n                return <SignIn />\n            } else {\n                return <Redirect to={`/home`} />\n            }\n        }\n    }\n\n    return (\n        <Router>\n            <Switch>\n                <Route exact path=\"/\">\n                    {redirectPage()}\n                </Route>\n                <Route exact path=\"/sign-in\">\n                    {redirectSignin()}\n                </Route>\n                {currentUser.loaded &&\n                    <>\n                        {currentUser.empty ?\n                            <Redirect to={\"/sign-in\"} />\n                        :\n                            <>\n                                <div className=\"whole-body\">\n                                    <Header currentUser={currentUser} openItems={openItems} />\n                                    <Route exact path=\"/home\">\n                                        <Home setSearchPhrase={setSearchPhrase} />\n                                    </Route>\n                                    <Route exact path=\"/created-workspaces\">\n                                        <ViewItems type={\"created-workspaces\"} />\n                                    </Route>\n                                    <Route exact path=\"/created-datasets\">\n                                        <ViewItems type={\"created-datasets\"} />\n                                    </Route>\n                                    <Route exact path=\"/bookmarked-workspaces\">\n                                        <ViewItems type={\"bookmarked-workspaces\"} currentUser={currentUser} />\n                                    </Route>\n                                    <Route exact path=\"/bookmarked-datasets\">\n                                        <ViewItems type={\"bookmarked-datasets\"} currentUser={currentUser} />\n                                    </Route>\n                                    <Route exact path=\"/all-workspaces\">\n                                        <ViewItems type={\"all-workspaces\"} currentUser={currentUser} setSearchPhrase={setSearchPhrase} />\n                                    </Route>\n                                    <Route exact path=\"/all-datasets\">\n                                        <ViewItems type={\"all-datasets\"} currentUser={currentUser} setSearchPhrase={setSearchPhrase} />\n                                    </Route>\n                                    <Route path=\"/search-results/:id\" render={(props) => <Search currentUser={currentUser} searchPhrase={searchPhrase} setSearchPhrase={setSearchPhrase} key={props.location.key} />} />\n                                    <Route exact path=\"/workspace/:id\" render={(props) => <Workspace currentUser={currentUser} key={props.location.key} />} />\n                                    <Route exact path=\"/new-workspace\">\n                                        <NewWorkspace currentUser={currentUser} />\n                                    </Route>\n                                    <Route exact path=\"/account\">\n                                        <Account currentUser={currentUser} />\n                                    </Route>\n                                    {/* <Route exact path=\"/404\">\n                                        <NotFound />\n                                    </Route> */}\n                                </div>\n                            </>\n                        }\n                    </>\n                }\n                {/* <Redirect to=\"/404\" /> */}\n            </Switch>\n        </Router>\n    );\n}","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Contexts/currentUserContext.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/auth.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Sign-In.jsx",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Account.jsx",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Header.jsx",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/files.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/users.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/View-Data.jsx",["131"],"import React, {useState, useEffect} from 'react'\n\nconst ViewData = ({dataTable}) => {\n    const [header, setHeader] = useState([])\n    const [data, setData] = useState([])\n\n    useEffect(() => {\n        setHeader([])\n        setData([])\n        \n        const tempHeader = dataTable.slice(0, dataTable.indexOf('\\n')).split(',')\n        tempHeader.unshift(\"Row\")\n        const tempData = dataTable.slice(dataTable.indexOf('\\n')+1).split('\\n');\n        setHeader(tempHeader)\n\n        tempData.map((row, i) => {\n            row = `${i},${row}`\n            setData(previous => [...previous, row.split(',')])\n        })\n    }, [dataTable])\n\n    const displayHeader = () => {\n        return (\n            header.map((item, i) => {\n                return <th key={i}>{item}</th>\n            })\n        )\n    }\n    \n    const displayBody = () => {\n        return (\n            data.map((row, i) => {\n                return (\n                    <tr key={i}>\n                        {row.map((item, j) => {\n                            return <td key={j}>{item}</td>\n                        })}\n                    </tr>\n                )\n            })\n        )\n    }\n\n    return (\n        <table className=\"workspace-data-table\">\n            <tbody>\n                <tr>\n                    {displayHeader()}\n                </tr>\n                {displayBody()}\n            </tbody>\n        </table>\n    )\n}\n\nexport default ViewData\n","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/images.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Home.jsx",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/New-Workspace.jsx",["132","133"],"import React, {useState, useEffect} from 'react'\nimport {useHistory} from \"react-router-dom\"\nimport workspaceAPI from '../API/workspaces'\nimport userAPI from '../API/users'\nimport fileAPI from '../API/files'\nimport imageAPI from '../API/images'\nimport ViewData from '../Components/View-Data'\n\nconst NewWorkspace = ({currentUser}) => {\n    const [setupStage, setSetupStage] = useState(true);\n    const [title, setTitle] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [visibility, setVisibility] = useState(false);\n    const [data, setData] = useState();\n    const [displayData, setDisplayData] = useState();\n    const [importMethod, setImportMethod] = useState(\"\")\n    const [image, setImage] = useState();\n    const [dataID, setDataID] = useState(\"\")\n    const [workspaces, setWorkspaces] = useState([]);\n    const [loaded, setLoaded] = useState(false);\n    const [disableCreate, setDisabledCreate] = useState(false)\n    const history = useHistory();\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const workspaces = await workspaceAPI.get(\"/\");\n\n                workspaces.data.data.map((workspace) => {\n                    setWorkspaces(previous => [...previous, workspace.title]);\n                })\n                setLoaded(true);\n            } catch (err) {}\n        }\n        fetchData();\n    }, [])\n\n    useEffect(() => {\n        if (data !== undefined) {\n            setDataID(\"\")\n\n            const file = data;\n            const reader = new FileReader();\n\n            reader.onload = function(e) {\n                setDisplayData(e.target.result);\n            }\n\n            reader.readAsText(file)\n        }\n    }, [data])\n\n    const next = () => {\n        if ((title !== \"\" || description !== \"\") && !workspaces.includes(title)) {\n            setSetupStage(false)\n        }\n    }\n\n    const cancel = () => {\n        history.goBack();\n    }\n\n    const remove = () => {\n        setDataID(\"\")\n        setData()\n        setDisplayData()\n    }\n\n    const existingWorkspace = () => {\n        setData(undefined)\n\n        fetch(`http://127.0.0.1:5000/files/${dataID}.csv`)\n            .then(response => response.text())\n            .then(text => {setDisplayData(text)})\n    }\n\n    const uploadImage = async () => {\n        setDisabledCreate(true)\n\n        if (image) {\n            const formImage = new FormData();\n            formImage.append('image', image);\n\n            try {\n                const imageResponse = await imageAPI.post(\"/upload\", formImage);\n\n                uploadData(imageResponse.data.data)\n            } catch (err) {}\n        } else {\n            uploadData(\"default.png\")\n        }\n    }\n\n    const uploadData = async (imageName) => {\n        try {\n            const workspaceResponse = await workspaceAPI.post(\"/\", {\n                title: title,\n                data: \"none\",\n                creator: currentUser.id,\n                description: description,\n                experiments: [],\n                picture: imageName,\n                upvotes: 0,\n                visibility: visibility\n            });\n\n            uploadFile(workspaceResponse.data.data)\n        } catch (err) {}\n    }\n\n    const uploadFile = async (workspaceID) => {\n        if (importMethod === \"file\" && data !== undefined) {\n            const formData = new FormData();\n\n            formData.append('data', data);\n            formData.append('id', workspaceID)\n\n            try {\n                await fileAPI.post(\"/upload\", formData);\n            } catch (err) {}\n            \n            try {\n                await workspaceAPI.put(`/${workspaceID}`, {\n                    data: `${workspaceID}-data`\n                });\n\n                history.push(`/workspace/${workspaceID}`)\n            } catch (err) {}\n        } else if (importMethod === \"existing\" && dataID !== \"\") {\n            try {\n                await workspaceAPI.put(`/${workspaceID}`, {\n                    data: dataID\n                });\n\n                history.push(`/workspace/${workspaceID}`)\n            } catch (err) {}\n        }\n    }\n\n    return (\n        <>\n            {loaded &&\n                <div className=\"new-workspace\">\n                    <div className=\"sidebar\">\n                        <h1>New Workspace</h1> \n                        <div className=\"new-workspace-header\">\n                            <p className=\"new-workspace-title\">{title}</p> \n                        </div>\n                        <button className={`${\"sidebar-stage\"} ${setupStage ? \"sidebar-stage-selected\" : \"sidebar-stage-unselected\"}`}\n                                disabled={setupStage}\n                                onClick={() => {setSetupStage(true)}}>Setup</button>\n                        <button className={`${\"sidebar-stage\"} ${!setupStage ? \"sidebar-stage-selected\" : \"sidebar-stage-unselected\"}`}\n                                disabled>Data</button>\n                    </div>\n                    { setupStage &&\n                        <div className=\"new-workspace-setup\">\n                            <div className=\"new-workspace-setup-information\">\n                                <input className=\"new-workspace-title\"\n                                        placeholder=\"Title\"\n                                        onChange={e => {setTitle(e.target.value)}}\n                                        value={title} />\n                                <textarea className=\"new-workspace-description\"\n                                            placeholder=\"Description\"\n                                            onChange={e => {setDescription(e.target.value)}}\n                                            value={description} />\n                                <div className=\"new-workspace-setup-visibility\">\n                                    <label className=\"new-workspace-setup-visibility-label\">Public?</label>\n                                    <input type=\"checkbox\" \n                                            onClick={() => {setVisibility(previous => !previous)}}\n                                            checked={visibility} />\n                                </div>\n                                <div className=\"new-workspace-setup-visibility\">\n                                    <label className=\"new-workspace-setup-visibility-label\">Picture</label>\n                                    <input type=\"file\" \n                                            name=\"image\" \n                                            onChange={e => {setImage(e.target.files[0])}} />\n                                </div>\n                            </div>\n                            <div className=\"new-workspace-nav\">   \n                                <button className=\"new-workspace-cancel\"\n                                        onClick={() => {cancel()}}>Cancel</button>\n                                <button className=\"new-workspace-next\"\n                                        onClick={() => {next()}}>Next</button>\n                            </div>\n                        </div>\n                    }\n                    { !setupStage &&\n                        <>\n                            <div className=\"new-workspace-import\">\n                                <div className=\"new-workspace-import-options\">\n                                    <p>Import Data</p>\n                                    <button onClick={() => {setImportMethod(\"existing\")}}>Existing Data</button>\n                                    <button onClick={() => {setImportMethod(\"file\")}}>Upload File</button>\n                                </div>\n                                <div className=\"new-workspace-import-method\">\n                                {importMethod !== \"\" &&\n                                    <>\n                                        {importMethod === \"file\" ?\n                                            <input type=\"file\" \n                                                    name=\"data\"\n                                                    key={Date.now()}\n                                                    onChange={e => {setData(e.target.files[0])}} />\n                                        :\n                                            <>\n                                                <input className=\"new-workspace-import-workspaceid\"\n                                                        placeholder=\"Data ID\"\n                                                        onChange={e => {setDataID(e.target.value)}}\n                                                        value={dataID} />\n                                                <button className=\"new-workspace-next\"\n                                                        disabled={dataID === \"\"}\n                                                        onClick={() => {existingWorkspace()}}>Fetch</button>\n                                            </>\n                                        }\n                                    </>\n                                }\n                                </div>\n                                {(data !== undefined || dataID !== \"\") && displayData !== undefined &&\n                                    <div className=\"new-workspace-data\">\n                                        <div className=\"new-workspace-data-information\">\n                                            {data !== undefined ?\n                                                <p className=\"new-workspace-filename\">File: {data.name}</p> \n                                                :\n                                                <p className=\"new-workspace-filename\">Data: {dataID}</p> \n                                            }\n                                            <button className=\"new-workspace-cancel\"\n                                                    onClick={() => {remove()}}>Remove</button>\n                                        </div>\n                                        <div className=\"new-workspace-data-table\">\n                                            <ViewData displayData={displayData} />\n                                        </div>\n                                    </div>\n                                }\n                            </div>\n                            <div className=\"new-workspace-nav\">  \n                                <button className=\"new-workspace-cancel\"\n                                        onClick={() => {cancel()}}>Cancel</button>\n                                <button className=\"new-workspace-next\"\n                                        disabled={disableCreate}\n                                        onClick={() => {uploadImage()}}>Create</button>\n                            </div>\n                        </>\n                    }\n                </div>\n            }   \n        </>\n    )\n}\n\nexport default NewWorkspace\n","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/New-Experiment.jsx",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Experiment.jsx",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Not-Found.jsx",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/workspaces.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Workspace.jsx",["134","135","136","137","138","139","140"],"import React, {useState, useEffect, useRef} from 'react'\nimport {useHistory, Link, useParams} from \"react-router-dom\"\nimport workspacesAPI from '../API/workspaces'\nimport ViewData from '../Components/View-Data';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\n\nconst Workspace = ({currentUser}) => {\n    const [loaded, setLoaded] = useState(false)\n    const [workspace, setWorkspace] = useState()\n    const [displayData, setDisplayData] = useState(\"data\")\n    const [dataTable, setDataTable] = useState()\n    const [dataID, setDataID] = useState(\"\")\n    const [uploadData, setUploadData] = useState()\n    const [replaceData, setReplaceData] = useState(false)\n    const [editData, setEditData] = useState(false)\n    const [date, setDate] = useState(\"\");\n    const [copyData, setCopyData] = useState(true)\n    const [bookmarked, setBookmarked] = useState()\n    const [upvoted, setUpvoted] = useState()\n    const [upvotes, setUpvotes] = useState()\n    const [visibility, setVisibility] = useState()\n    const [comments, setComments] = useState()\n    const [comment, setComment] = useState(\"\")\n    const [section, setSection] = useState(\"data\")\n    const [title, setTitle] = useState(\"\")\n    const [description, setDescription] = useState(\"\")\n    const [image, setImage] = useState();\n    const copyInterval = useRef(0)\n    const workspaceID = useParams().id;\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const workspace = await workspacesAPI.get(`/${workspaceID}`);\n                const comments = await workspacesAPI.get(`/comment/${workspaceID}`);\n\n                setWorkspace(workspace.data.data);\n                setBookmarked(workspace.data.data.bookmarked)\n                setUpvoted(workspace.data.data.upvoted)\n                setUpvotes(workspace.data.data.upvotes)\n                setVisibility(workspace.data.data.visibility)\n                setTitle(workspace.data.data.title)\n                setDescription(workspace.data.data.description)\n                setComments(comments.data.data)\n\n                fetch(`http://127.0.0.1:5000/files/${workspace.data.data.data}.csv`)\n                    .then(response => response.text())\n                    .then(text => {\n                        setDataTable(text)\n                        setLoaded(true)\n                    })\n            } catch (err) {}\n        }\n        fetchData();\n    }, [])\n\n    useEffect(() => {\n        if (loaded) {\n            const updatedDate = new Date(workspace.updated);\n            const currentDate = new Date();\n    \n            if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} years ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} days ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hours ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minutes ago`)\n            } else {\n                setDate(\"Updated just now\")\n            }\n        }\n    }, [loaded])\n\n    useEffect(() => {\n        if (replaceData && uploadData !== undefined) {\n            setDataID(\"\")\n\n            const file = uploadData;\n            const reader = new FileReader();\n\n            reader.onload = function(e) {\n                setDataTable(e.target.result);\n            }\n\n            reader.readAsText(file)\n        }\n    }, [uploadData])\n\n    const existingWorkspace = () => {\n        setUploadData(undefined)\n\n        fetch(`http://127.0.0.1:5000/files/${dataID}.csv`)\n            .then(response => response.text())\n            .then(text => {setDataTable(text)})\n    }\n\n    const copiedInterval = () => {\n        clearInterval(copyInterval.current)\n        navigator.clipboard.writeText(workspace.data);\n        setCopyData(false);\n        copyInterval.current = setInterval(() => {\n            setCopyData(true);\n        }, 800)\n        return ()=> {clearInterval(copyInterval.current)};\n    }\n\n    const updateUpvote = async () => {\n        try {\n            await workspacesAPI.put(`/upvote/${workspaceID}?state=${upvoted}`);\n\n            if (upvoted) {\n                setUpvotes(state => state-1)\n            } else {\n                setUpvotes(state => state+1)\n            }\n\n            setUpvoted(state => !state)\n        } catch (err) {}\n    }\n\n    const updateBookmark = async () => {\n        try {\n            await workspacesAPI.put(`/bookmark/${workspaceID}?state=${bookmarked}`);\n            \n            setBookmarked(state => !state)\n        } catch (err) {}\n    }\n\n    const updateVisibility = async () => {\n        try {\n            await workspacesAPI.put(`/visibility/${workspace._id}`);\n\n            setVisibility(state => !state)\n        } catch (err) {}\n    }\n\n    const addComment = async (e) => {\n        e.preventDefault()\n\n        try {\n            await workspacesAPI.put(`/comment/${workspaceID}`, {\n                comment: comment\n            });\n\n            setComments([{\n                user: {name: currentUser.name},\n                comment: comment\n            }, ...comments])\n            setComment(\"\")\n        } catch (err) {}\n    }\n\n    const commentDate = (date) => {\n        const updatedDate = new Date(date);\n        const currentDate = new Date();\n\n        if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n            return `Posted ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} years ago`\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n            return `Posted ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n            return `Posted ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} days ago`\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n            return `Posted ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hours ago`\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n            return `Posted ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minutes ago`\n        } else {\n            return \"Posted just now\"\n        }\n    }\n\n    const updateWorkspaceSettings = () => {\n\n    }\n\n    const deleteWorkspace = () => {\n\n    }\n\n    return (\n        <>\n            {loaded &&\n                <>\n                    {workspace.self ?\n                        <div className=\"sidebar-body\"> \n                            <div className=\"self-workspace-sidebar\">\n                                <h1>{workspace.title}</h1>\n                                <button className={section === \"data\" ? \"blue-button\" : \"grey-button\"} onClick={() => {setSection(\"data\")}}>Data</button>\n                                <button className={section === \"experiments\" ? \"blue-button\" : \"grey-button\"} onClick={() => {setSection(\"experiments\")}}>Experiments</button>\n                                <button className={section === \"settings\" ? \"blue-button\" : \"grey-button\"} onClick={() => {setSection(\"settings\")}}>Settings</button>\n                                <button className={section === \"comments\" ? \"blue-button\" : \"grey-button\"} onClick={() => {setSection(\"comments\")}}>Comments</button>\n                            </div>\n                            <div className=\"inner-body\">\n                                {section === \"data\" ?\n                                    <div className=\"self-workspace-data\">\n                                        <div className=\"self-workspace-data-options\">\n                                            {replaceData && \n                                                <div>\n                                                    <input type=\"file\" \n                                                            name=\"data\"\n                                                            key={Date.now()}\n                                                            onChange={e => {setUploadData(e.target.files[0])}} />\n                                                    <input className=\"self-workspace-replace-data-id\"\n                                                            placeholder=\"Data ID\"\n                                                            onChange={e => {setDataID(e.target.value)}}\n                                                            value={dataID} />\n                                                    <button className=\"blue-button self-workspace-replace-data-fetch\"\n                                                            disabled={dataID === \"\"}\n                                                            onClick={() => {existingWorkspace()}}>Fetch</button>\n                                                </div>\n                                            }\n                                            <button className={`self-workspace-data-replace ${replaceData ? \"blue-button\" : \"grey-button\"}`} onClick={() => {setReplaceData(state => !state)}}>Replace Data</button>\n                                            <button className={`self-workspace-data-edit ${editData ? \"blue-button\" : \"grey-button\"}`} onClick={() => {setEditData(state => !state)}}>Edit</button>\n                                            <a href={`http://127.0.0.1:5000/files/${workspace.data}.csv`} download>Download</a>\n                                        </div>\n                                        <div className=\"self-workspace-data-table\">\n                                            <ViewData dataTable={dataTable} />\n                                        </div>\n                                    </div>\n                                : section === \"experiments\" ?\n                                    <div className=\"self-workspace-body\">\n                                    </div>\n                                : section === \"settings\" ?\n                                    <div className=\"self-workspace-settings\">\n                                        <form className=\"self-workspace-settings-form\" method=\"PUT\" onSubmit={updateWorkspaceSettings}>\n                                            <label>Title</label>\n                                            <input placeholder=\"Title\" value={title} onChange={e => {setTitle(e.target.value)}} />\n                                            <label>Description</label>\n                                            <textarea placeholder=\"Description\" value={description} onChange={e => {setDescription(e.target.value)}} />\n                                            <label>Picture</label>\n                                            <input type=\"file\" \n                                                    className=\"self-workspace-settings-picture\"\n                                                    name=\"image\" \n                                                    onChange={e => {setImage(e.target.files[0])}} />\n                                            <div className=\"self-workspace-settings-visibility\">\n                                                <label className=\"self-workspace-settings-visibility-label\">Public?</label>\n                                                <input type=\"checkbox\" \n                                                        className=\"self-workspace-settings-visibility-input\"\n                                                        onClick={() => {updateVisibility()}}\n                                                        checked={visibility} />\n                                            </div>\n                                            <div className=\"self-workspace-settings-buttons\">\n                                                <button className=\"blue-button\" disabled={title === \"\" || description === \"\"}>Save Changes</button>\n                                                <button className=\"white-button\" type=\"button\" onClick={() => {deleteWorkspace()}}>Delete</button>\n                                            </div>\n                                        </form>\n                                    </div>\n                                : \n                                    <div className=\"self-workspace-comments\">\n                                        {comments.length === 0 ?\n                                            <p className=\"self-workspace-comments-none\">No Comments</p>\n                                        :\n                                            <>\n                                                {comments.map((comment, i) => {\n                                                    return (\n                                                        <div className=\"comment-card\" key={i}>\n                                                            <div>\n                                                                <p className=\"comment-card-user\">{comment.user.name}</p>\n                                                                <p className=\"comment-card-date\">{commentDate(comment.createdAt)}</p>\n                                                            </div>\n                                                            <p className=\"comment-card-comment\">{comment.comment}</p>\n                                                        </div>\n                                                    )\n                                                })}\n                                            </>\n                                        }\n                                    </div>\n                                }\n                            </div>\n                        </div>\n                    :\n                        <div className=\"width-body\">  \n                            <div className=\"other-workspace-body\">\n                                <div className=\"other-workspace-top\">\n                                    <img src={`http://localhost:4000/images/${workspace.picture}`} />\n                                    <h1>{workspace.title}</h1>\n                                    <div>\n                                        <p className=\"other-workspace-meta\">{workspace.creatorName.name}</p>\n                                        <p className=\"other-workspace-meta\">{date}</p>\n                                        <BookmarkIcon className={`other-workspace-icon ${bookmarked ? \"blue\" : \"grey\"}`} onClick={() => {updateBookmark()}} />\n                                        <ThumbUpIcon className={`other-workspace-icon ${upvoted ? \"blue\" : \"grey\"}`} onClick={() => {updateUpvote()}} />\n                                        <p className={`other-workspace-upvotes ${upvoted ? \"blue\" : \"grey\"}`}>{upvotes}</p>\n                                    </div>\n                                    <p className=\"other-workspace-description\">{workspace.description}</p>\n                                    <select className=\"other-workspace-select\" onChange={e => {setDisplayData(e.target.value)}}>\n                                        <option value=\"data\">Data</option>\n                                        <option value=\"model\">Model</option>\n                                        <option value=\"comment\">Comments</option>\n                                    </select>\n                                </div>\n                                <div className=\"other-workspace-bottom\">\n                                    {displayData === \"data\" ? \n                                        <> \n                                            <div className=\"other-workspace-data\">\n                                                <div className=\"other-workspace-copy\">\n                                                    {copyData ? <p>Data ID</p> : <p>Copied</p>}\n                                                    <button disabled={!copyData} onClick={() => {copiedInterval()}}>\n                                                        <ContentCopyIcon className=\"other-workspace-copy-icon\" />\n                                                    </button>\n                                                </div>\n                                                <a href={`http://127.0.0.1:5000/files/${workspace.data}.csv`} download>Download</a>\n                                            </div>\n                                            <ViewData dataTable={dataTable} />\n                                        </>\n                                    : displayData === \"model\" ?\n                                        <p>model</p>\n                                    :\n                                        <>\n                                            <form className=\"other-workspace-comment-form\" method=\"PUT\" onSubmit={addComment}>\n                                                <p className=\"other-workspace-comment\">Leave a Comment</p>\n                                                <textarea className=\"other-workspace-comment-input\" value={comment} onChange={e => {setComment(e.target.value)}} />\n                                                <button className=\"blue-button\">Comment</button>\n                                            </form>\n                                            <div className=\"other-workspace-comments\">\n                                                {comments.map((comment, i) => {\n                                                    return (\n                                                        <div className=\"comment-card\" key={i}>\n                                                            <div>\n                                                                <p className=\"comment-card-user\">{comment.user.name}</p>\n                                                                <p className=\"comment-card-date\">{commentDate(comment.createdAt)}</p>\n                                                            </div>\n                                                            <p className=\"comment-card-comment\">{comment.comment}</p>\n                                                        </div>\n                                                    )\n                                                })}\n                                            </div>\n                                        </>\n                                    }\n                                </div>\n                            </div>\n                        </div>\n                    }\n                </>\n            }\n        </>\n    )\n}\n\nexport default Workspace\n","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Shortcut.jsx",["141","142"],"import React, {useState, useEffect, useContext} from 'react'\nimport { Link } from 'react-router-dom';\nimport usersAPI from '../API/users'\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport AddIcon from '@mui/icons-material/Add';\n\nconst Shortcut = ({type}) => {\n    const {addOpenItems} = useContext(OpenItemsContext);\n    const [items, setItems] = useState();\n    const [loaded, setLoaded] = useState(false);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                let items;\n\n                if (type === \"workspaces\") {\n                    items = await usersAPI.get(`/created-workspaces-shortcut`);\n                } else if (type === \"datasets\") {\n                    items = await usersAPI.get(`/created-datasets-shortcut`);\n                } else if (type === \"bookmark-workspaces\") {\n                    items = await usersAPI.get(`/bookmarked-workspaces-shortcut`);\n                } else {\n                    items = await usersAPI.get(`/bookmarked-datasets-shortcut`);\n                }\n\n                setItems(items.data.data)\n                setLoaded(true);\n            } catch (err) {}\n        }\n        fetchData();\n    }, [])\n\n    return (\n        <>\n            {loaded &&\n                <div className=\"shortcut-items-container\">\n                    <div className=\"shortcut-items-heading\">\n                        <p>{type === \"workspaces\" ? \"Created Workspaces\" : (type === \"datasets\") ? \"Created Datasets\" \n                            : (type === \"bookmarked-workspaces\") ? \"Bookmarked Workspaces\" : \"Bookmarked Datasets\"}</p>\n                        {type === \"workspaces\" && \n                            <Link to=\"/new-workspace\">\n                                <AddIcon className=\"shortcut-items-new-workspace-icon\" />\n                            </Link>\n                        }\n                        {type === \"datasets\" && \n                            <Link to=\"/new-dataset\">\n                                <AddIcon className=\"shortcut-items-new-workspace-icon\" />\n                            </Link>\n                        }\n                    </div>\n                    <div className=\"shortcut-items-list\">\n                        {items.length === 0 ?\n                            <p className=\"shortcut-items-list-none\">Nothing to See</p>\n                        :\n                            <>\n                                {items.map((item, i) => {\n                                    return (\n                                        <Link to={type === \"workspaces\" ? `/workspace/${item._id}` : (type === \"datasets\") ? `/dataset/${item._id}` \n                                            : (type === \"bookmarked-workspaces\") ? `/workspace/${item._id}` : `/dataset/${item._id}`}\n                                                className=\"shortcut-items-item\" \n                                                onClick={() => {addOpenItems(item._id, item.title, item.type)}}\n                                                key={i}>\n                                            <img src={`http://localhost:4000/images/${item.picture}`} />\n                                            <p>{item.title}</p>\n                                        </Link>\n                                    )\n                                })}\n                                <Link to={type === \"workspaces\" ? \"/created-workspaces\" : (type === \"datasets\") ? \"/created-datasets\" \n                                    : (type === \"bookmarked-workspaces\") ? \"/bookmarked-workspaces\" : \"/bookmarked-datasets\"}\n                                        className=\"shortcut-items-all\">See All</Link>\n                            </>\n                        }\n                    </div>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default Shortcut\n","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Search.jsx",["143","144","145","146","147"],"import React, {useState, useEffect} from 'react'\nimport {useHistory, Link, useParams} from \"react-router-dom\"\nimport ItemRowCard from '../Components/Item-Row-Card'\nimport ItemSquareCard from '../Components/Item-Square-Card'\nimport workspacesAPI from '../API/workspaces'\nimport SearchIcon from '@mui/icons-material/Search';\n\nconst AccountWorkspaces = ({searchPhrase, setSearchPhrase, currentUser}) => {\n    const [workspaces, setWorkspaces] = useState();\n    const [loaded, setLoaded] = useState(false);\n    const [rowFormat, setRowFormat] = useState(false)\n    const [input, setInput] = useState(\"\");\n    const [finishedWorkspaces, setFinishedWorkspaces] = useState(false);\n    const urlPhrase = useParams().id;\n    const history = useHistory();\n\n    useEffect(() => {\n        const fetchData = async () => {\n            if (searchPhrase === null) {\n                if (urlPhrase) {\n                    const workspaces = await workspacesAPI.get(`/search?phrase=${urlPhrase}`);\n\n                    if (workspaces.data.data.length < 21) {\n                        setFinishedWorkspaces(true)\n                    }\n\n                    setWorkspaces(workspaces.data.data);\n                    setLoaded(true);\n                } else {\n                    history.push(\"/\");\n                }\n            } else {\n                const workspaces = await workspacesAPI.get(`/search?phrase=${searchPhrase}`);\n\n                if (workspaces.data.data.length < 21) {\n                    setFinishedWorkspaces(true)\n                }\n\n                setWorkspaces(workspaces.data.data);\n                setLoaded(true);\n            }\n        }\n        fetchData();\n    }, [])\n\n    const searchFunctionKey = (e) => {\n        if (e.key === \"Enter\" && input !== \"\") {\n            setSearchPhrase(input);\n            history.push(`/search-results/${input}`);\n        }\n    }\n\n    const searchFunctionButton = () => {\n        if (input !== \"\") {\n            setSearchPhrase(input);\n            history.push(`/search-results/${input}`);\n        }\n    }\n\n    const fetchDataWorkspaces = async (id) => {\n        if (!finishedWorkspaces) {\n            try {\n                const fetchedWorkspaces = await workspacesAPI.get(`/search?phrase=${urlPhrase}&id=${id}`);\n    \n                if (fetchedWorkspaces.data.data.length < 21) {\n                    setFinishedWorkspaces(true)\n                }\n\n                setWorkspaces(workspaces => [...workspaces, ...fetchedWorkspaces.data.data]);\n            } catch (err) {}\n        }\n    }\n\n    const loadMore = () => {\n        if (workspaces.length !== 0) {\n            {fetchDataWorkspaces(workspaces[workspaces.length-1]._id)}\n        }\n    };\n\n    return (\n        <>\n            {loaded &&\n                <div className=\"width-body\">  \n                    <div className=\"view-workspaces-body\">\n                        <div className=\"view-workspaces-search\">\n                            <input className=\"view-workspaces-search-input\"\n                                    placeholder=\"Search\"\n                                    value={input}\n                                    onChange={e => setInput(e.target.value)}\n                                    onKeyPress={searchFunctionKey} />\n                            <SearchIcon className=\"view-workspaces-search-icon\" onClick={e => searchFunctionButton()} />\n                        </div>\n                        <div className=\"view-workspaces-top\">\n                            <h1>Search Results</h1>\n                        </div>\n                        <div className=\"view-workspaces-middle\">\n                            <p>{`${workspaces.length} Workspaces`}</p>\n                            <img src=\"http://localhost:3000/List.png\" className=\"view-workspaces-row-icon\" onClick={() => {setRowFormat(true)}} />\n                            <img src=\"http://localhost:3000/Grid.png\" className=\"view-workspaces-grid-icon\" onClick={() => {setRowFormat(false)}} />\n                        </div>\n                        <div className=\"view-workspaces-list\">\n                            {workspaces.length > 0 &&\n                                <>\n                                    {workspaces.map((workspace, i) => {\n                                        return rowFormat ? <ItemRowCard workspace={workspace} creator={workspace.creatorName.name} currentUserID={currentUser.id} created={false} key={i} /> : <ItemSquareCard workspace={workspace} creator={workspace.creatorName.name} currentUserID={currentUser.id} created={false} key={i} />\n                                    })}\n                                </>\n                            }\n                        </div>\n                        {workspaces.length >= 0 && finishedWorkspaces ?\n                            <p className=\"endWorkspaces\">No More Workspaces</p>\n                            :\n                            <p className=\"loadWorkspaces\" onClick={() => {loadMore()}}>Load More</p>\n                        }\n                    </div>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default AccountWorkspaces","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Header-Open-Item.jsx",["148","149","150","151"],"import React, {useState, useContext, useEffect} from 'react'\nimport { useLocation, Link, useHistory } from 'react-router-dom'\nimport CloseIcon from '@mui/icons-material/Close';\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\n\nconst HeaderOpenItems = ({item}) => {\n    const history = useHistory();\n    const location = useLocation();\n    const {removeOpenItems} = useContext(OpenItemsContext);\n\n    const checkCurrent = () => {\n        if (location.pathname.substring(11) === item.id || location.pathname.substring(9) === item.id) return true\n\n        return false\n    }\n\n    const closeItem = () => {\n        removeOpenItems(item.id)\n        \n        if (checkCurrent()) {\n            history.replace(\"/home\")\n        }\n    }\n\n    return (\n        <div className=\"item-header\">\n            {item.type === \"workspace\" ? <img src=\"http://localhost:3000/workspace.png\" /> : <img src=\"http://localhost:3000/dataset.png\" />}\n            <Link to={item.type === \"item\" ? `/item/${item.id}` : `/dataset/${item.id}`} className=\"item-header-link\">\n                <p className={checkCurrent() ? \"item-header-title-selected\" : \"item-header-title\"}>{item.title}</p>\n            </Link>\n            <CloseIcon className={`item-header-close ${checkCurrent() && \"blue\"}`}\n                        onClick={() => {closeItem()}} />\n        </div>\n    )\n}\n\nexport default HeaderOpenItems","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Contexts/openItemsContext.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Item-Feed-Card.jsx",["152","153","154","155","156"],"import React, {useState, useEffect} from 'react'\nimport { Link } from 'react-router-dom'\nimport workspacesAPI from '../API/workspaces'\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\n\nconst FeedWorkspaceCard = ({item, creator}) => {\n    const [bookmarked, setBookmarked] = useState(item.bookmarked)\n    const [upvoted, setUpvoted] = useState(item.upvoted)\n    const [upvotes, setUpvotes] = useState(item.upvotes)\n    const [date, setDate] = useState(\"\");\n\n    useEffect(() => {\n        const updatedDate = new Date(item.updatedAt);\n        const currentDate = new Date();\n\n        if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} year(s) ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} month(s) ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} day(s) ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hour(s) ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minute(s) ago`)\n        } else {\n            setDate(\"Updated just now\")\n        }\n    }, [])\n\n    const updateUpvote = async () => {\n        try {\n            await workspacesAPI.put(`/upvote/${item._id}?state=${upvoted}`);\n\n            if (upvoted) {\n                setUpvotes(state => state-1)\n            } else {\n                setUpvotes(state => state+1)\n            }\n\n            setUpvoted(state => !state)\n        } catch (err) {}\n    }\n\n    const updateBookmark = async () => {\n        try {\n            await workspacesAPI.put(`/bookmark/${item._id}?state=${bookmarked}`);\n            \n            setBookmarked(state => !state)\n        } catch (err) {}\n    }\n\n    return (\n        <div className=\"item-feed-card-card\">\n            <img src=\"http://localhost:3000/Feed-Bar.png\" className=\"item-feed-card-bar\" />\n            <div className=\"item-feed-card-body\">\n                <Link to={`/workspace/${item._id}`}>\n                    <img src={`http://localhost:4000/images/${item.picture}`} className=\"item-feed-card-picture\" />\n                </Link>\n                <div className=\"item-feed-card-heading\">\n                    {item.type === \"workspace\" ? <img src=\"http://localhost:3000/workspace.png\" /> : <img src=\"http://localhost:3000/dataset.png\" />}\n                    <Link to={`/workspace/${item._id}`} className=\"item-feed-card-title\">{item.title}</Link>\n                </div>\n                <div>\n                    <p className=\"item-feed-card-meta\">{creator}</p>\n                    <p className=\"item-feed-card-meta\">{date}</p>\n                    <BookmarkIcon className={`item-feed-card-icon ${bookmarked ? \"blue\" : \"grey\"}`} onClick={() => {updateBookmark()}} />\n                    <ThumbUpIcon className={`item-feed-card-icon ${upvoted ? \"blue\" : \"grey\"}`} onClick={() => {updateUpvote()}} />\n                    <p className={`item-feed-card-upvotes ${upvoted ? \"blue\" : \"grey\"}`}>{upvotes}</p>\n                </div>\n                <p className=\"item-feed-card-description\">{item.description}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default FeedWorkspaceCard","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Item-Row-Card.jsx",["157","158","159","160","161"],"import React, {useState, useEffect, useContext} from 'react'\nimport { Link } from 'react-router-dom'\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport workspacesAPI from '../API/workspaces'\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\n\nconst WorkspaceRowCard = ({item, created, creator, currentUserID}) => {\n    const [bookmarked, setBookmarked] = useState(item.bookmarked)\n    const [upvoted, setUpvoted] = useState(item.upvoted)\n    const [upvotes, setUpvotes] = useState(item.upvotes)\n    const [visibility, setVisibility] = useState(item.visibility)\n    const {addOpenItems} = useContext(OpenItemsContext);\n    const [date, setDate] = useState(\"\");\n\n    useEffect(() => {\n        const updatedDate = new Date(item.updated);\n        const currentDate = new Date();\n\n        if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} years ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} days ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hours ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minutes ago`)\n        } else {\n            setDate(\"Updated just now\")\n        }\n    }, [])\n\n    const addHeader = () => {\n        if (item.creator === currentUserID) {\n            addOpenItems(item._id, item.title, item.type)\n        }\n    }\n\n    const updateUpvote = async () => {\n        try {\n            await workspacesAPI.put(`/upvote/${item._id}?state=${upvoted}`);\n\n            if (upvoted) {\n                setUpvotes(state => state-1)\n            } else {\n                setUpvotes(state => state+1)\n            }\n\n            setUpvoted(state => !state)\n        } catch (err) {}\n    }\n\n    const updateBookmark = async () => {\n        try {\n            await workspacesAPI.put(`/bookmark/${item._id}?state=${bookmarked}`);\n            \n            setBookmarked(state => !state)\n        } catch (err) {}\n    }\n\n    const updateVisibility = async () => {\n        try {\n            await workspacesAPI.put(`/visibility/${item._id}?state=${visibility}`);\n\n            setVisibility(state => !state)\n        } catch (err) {}\n    }\n\n    return (\n        <div className=\"item-row-card\" onClick={() => {addHeader()}}>\n            {item.type === \"workspace\" ? \n                <Link to={`/workspace/${item._id}`}>\n                    <img src={`http://localhost:4000/images/${item.picture}`} className=\"item-row-card-picture\" />\n                </Link>\n            :\n                <Link to={`/dataset/${item._id}`}>\n                    <img src={`http://localhost:4000/images/${item.picture}`} className=\"item-row-card-picture\" />\n                </Link>\n            }\n            <div className=\"item-row-card-information\">\n                <div className=\"item-row-card-heading\">\n                    {item.type === \"workspace\" ? <img src=\"http://localhost:3000/workspace.png\" /> : <img src=\"http://localhost:3000/dataset.png\" />}\n                    <Link to={`/workspace/${item._id}`} className=\"item-row-card-title\">{item.title}</Link>\n                </div>\n                <div>\n                    {!created && <p className=\"item-row-card-meta\">{creator}</p>}\n                    <p className=\"item-row-card-meta\">{date}</p>\n                </div>\n            </div>\n            <div>\n                {!created && item.creator !== currentUserID && <BookmarkIcon className={`item-row-card-icon ${bookmarked ? \"blue\" : \"grey\"}`} onClick={() => {updateBookmark()}} />}\n                <ThumbUpIcon className={`item-row-card-icon ${upvoted ? \"blue\" : \"grey\"}`} onClick={() => {updateUpvote()}} />\n                <p className={`item-row-card-upvotes ${upvoted ? \"blue\" : \"grey\"}`}>{upvotes}</p>\n                {created && \n                    <>\n                        {visibility ? \n                            <VisibilityIcon className=\"item-row-card-visibility\" onClick={() => {updateVisibility()}} />\n                        :\n                            <VisibilityOffIcon className=\"item-row-card-visibility\" onClick={() => {updateVisibility()}} />\n                        }\n                    </>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default WorkspaceRowCard","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Item-Square-Card.jsx",["162","163","164","165","166"],"import React, {useState, useEffect, useContext} from 'react'\nimport { Link } from 'react-router-dom'\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport workspacesAPI from '../API/workspaces'\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\n\nconst WorkspaceSquareCard = ({item, created, creator, currentUserID}) => {\n    const [bookmarked, setBookmarked] = useState(item.bookmarked)\n    const [upvoted, setUpvoted] = useState(item.upvoted)\n    const [upvotes, setUpvotes] = useState(item.upvotes)\n    const [visibility, setVisibility] = useState(item.visibility)\n    const {addOpenItems} = useContext(OpenItemsContext);\n    const [date, setDate] = useState(\"\");\n\n    useEffect(() => {\n        const updatedDate = new Date(item.updated);\n        const currentDate = new Date();\n\n        if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} years ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} days ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hours ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minutes ago`)\n        } else {\n            setDate(\"Updated just now\")\n        }\n    }, [])\n\n    const addHeader = () => {\n        if (item.creator === currentUserID) {\n            addOpenItems(item._id, item.title, item.type)\n        }\n    }\n\n    const updateUpvote = async () => {\n        try {\n            await workspacesAPI.put(`/upvote/${item._id}?state=${upvoted}`);\n\n            if (upvoted) {\n                setUpvotes(state => state-1)\n            } else {\n                setUpvotes(state => state+1)\n            }\n\n            setUpvoted(state => !state)\n        } catch (err) {}\n    }\n\n    const updateBookmark = async () => {\n        try {\n            await workspacesAPI.put(`/bookmark/${item._id}?state=${bookmarked}`);\n            \n            setBookmarked(state => !state)\n        } catch (err) {}\n    }\n\n    const updateVisibility = async () => {\n        try {\n            await workspacesAPI.put(`/visibility/${item._id}`);\n\n            setVisibility(state => !state)\n        } catch (err) {}\n    }\n\n    return (\n        <div className=\"item-square-card\" onClick={() => {addHeader()}}>\n            {item.type === \"workspace\" ? \n                <Link to={`/workspace/${item._id}`}>\n                    <img src={`http://localhost:4000/images/${item.picture}`} className=\"item-square-card-picture\" />\n                </Link>\n            :\n                <Link to={`/dataset/${item._id}`}>\n                    <img src={`http://localhost:4000/images/${item.picture}`} className=\"item-square-card-picture\" />\n                </Link>\n            }\n            <div className=\"item-square-card-heading\">\n                {item.type === \"workspace\" ? <img src=\"http://localhost:3000/workspace.png\" /> : <img src=\"http://localhost:3000/dataset.png\" />}\n                <Link to={`/workspace/${item._id}`} className=\"item-square-card-title\">{item.title}</Link>\n            </div>\n            <div>\n                {!created && <p className=\"item-square-card-meta\">{creator}</p>}\n                <p className=\"item-square-card-meta\">{date}</p>\n                {created && \n                    <div className=\"item-square-card-bottom\">\n                        <ThumbUpIcon className={`item-square-card-icon ${upvoted ? \"blue\" : \"grey\"}`} onClick={() => {updateUpvote()}} />\n                        <p className={`item-square-card-upvotes ${upvoted ? \"blue\" : \"grey\"}`}>{upvotes}</p>\n                        {created && \n                            <>\n                                {visibility ? \n                                    <VisibilityIcon className=\"item-square-card-visibility\" onClick={() => {updateVisibility()}} />\n                                :\n                                    <VisibilityOffIcon className=\"item-square-card-visibility\" onClick={() => {updateVisibility()}} />\n                                }\n                            </>\n                        }\n                    </div>\n                }\n            </div>\n            {!created &&\n                <div className=\"item-square-card-other\">\n                    {item.creator !== currentUserID && <BookmarkIcon className={`item-square-card-icon ${bookmarked ? \"blue\" : \"grey\"}`} onClick={() => {updateBookmark()}} />}\n                    <ThumbUpIcon className={`item-square-card-icon ${upvoted ? \"blue\" : \"grey\"}`} onClick={() => {updateUpvote()}} />\n                    <p className={`item-square-card-upvotes ${upvoted ? \"blue\" : \"grey\"}`}>{upvotes}</p>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default WorkspaceSquareCard","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/View-Items.jsx",["167","168","169","170","171","172","173","174"],"import React, {useState, useEffect} from 'react'\nimport {useHistory, Link} from \"react-router-dom\"\nimport ItemRowCard from '../Components/Item-Row-Card'\nimport ItemSquareCard from '../Components/Item-Square-Card'\nimport usersAPI from '../API/users'\nimport workspacesAPI from '../API/workspaces'\nimport datasetsAPI from '../API/datasets'\nimport SearchIcon from '@mui/icons-material/Search';\n\nconst ViewItems = ({type, currentUser, setSearchPhrase}) => {\n    const [items, setItems] = useState();\n    const [loaded, setLoaded] = useState(false);\n    const [rowFormat, setRowFormat] = useState(false)\n    const [input, setInput] = useState(\"\");\n    const [finishedItems, setFinishedItems] = useState(false);\n    const history = useHistory();\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                let items;\n\n                switch (type) {\n                    case \"created-workspaces\":\n                        items = await usersAPI.get(`/created-workspaces?date=${new Date().toISOString()}`);\n                        break;\n                    case \"created-datasets\":\n                        items = await usersAPI.get(`/created-datasets?date=${new Date().toISOString()}`);\n                        break;\n                    case \"bookmarked-workspaces\":\n                        items = await usersAPI.get(`/bookmarked-workspaces?date=${new Date().toISOString()}`);\n                        break;\n                    case \"bookmarked-datasets\":\n                        items = await usersAPI.get(`/bookmarked-datasets?date=${new Date().toISOString()}`);\n                        break;\n                    case \"all-workspaces\":\n                        items = await workspacesAPI.get(`/all?date=${new Date().toISOString()}`);\n                        break;\n                    case \"all-datasets\":\n                        items = await datasetsAPI.get(`/all?date=${new Date().toISOString()}`);\n                        break;\n                }\n\n                if (items.data.data.length < 21) {\n                    setFinishedItems(true)\n                }\n\n                setItems(items.data.data);\n                setLoaded(true);\n            } catch (err) {}\n        }\n        fetchData();\n    }, [])\n\n    const searchFunctionKey = (e) => {\n        if (e.key === \"Enter\" && input !== \"\") {\n            setSearchPhrase(input);\n            history.push(`/search-results/${input}`);\n        }\n    }\n\n    const searchFunctionButton = () => {\n        if (input !== \"\") {\n            setSearchPhrase(input);\n            history.push(`/search-results/${input}`);\n        }\n    }\n    \n    const fetchDataItems = async (date) => {\n        if (!finishedItems) {\n            try {\n                let fetchedItems;\n\n                switch (type) {\n                    case \"created-workspaces\":\n                        fetchedItems = await usersAPI.get(`/created-workspaces?date=${date}`);\n                        break;\n                    case \"created-datasets\":\n                        fetchedItems = await usersAPI.get(`/created-datasets?date=${date}`);\n                        break;\n                    case \"bookmarked-workspaces\":\n                        fetchedItems = await usersAPI.get(`/bookmarked-workspaces?date=${date}`);\n                        break;\n                    case \"bookmarked-datasets\":\n                        fetchedItems = await usersAPI.get(`/bookmarked-datasets?date=${date}`);\n                        break;\n                    case \"all-workspaces\":\n                        fetchedItems = await workspacesAPI.get(`/all?date=${date}`);\n                        break;\n                    case \"all-datasets\":\n                        fetchedItems = await datasetsAPI.get(`/all?date=${date}`);\n                        break;    \n                }\n    \n                if (fetchedItems.data.data.length < 21) {\n                    setFinishedItems(true)\n                }\n\n                setItems(items => [...items, ...fetchedItems.data.data]);\n            } catch (err) {}\n        }\n    }\n\n    const loadMore = () => {\n        if (items.length !== 0) {\n            if (type === \"all-workspaces\" || type === \"all-datasets\") {\n                {fetchDataItems(items[items.length-1].createdAt)}\n            } else {\n                {fetchDataItems(items[items.length-1].updatedAt)}\n            }\n        }\n    };\n\n    const displayHeading = () => {\n        let heading;\n\n        switch (type) {\n            case \"created-workspaces\":\n                heading = \"Created Workspaces\"\n                break;\n            case \"created-datasets\":\n                heading = \"Created Datasets\"\n                break;\n            case \"bookmarked-workspaces\":\n                heading = \"Bookmarked Workspaces\"\n                break;\n            case \"bookmarked-datasets\":\n                heading = \"Bookmarked Datasets\"\n                break;\n            case \"all-workspaces\":\n                heading = \"All Workspaces\"\n                break;\n            case \"all-datasets\":\n                heading = \"All Datasets\"\n                break;\n        }\n\n        return <h1>{heading}</h1>\n    }\n    \n    return (\n        <>\n            {loaded &&\n                <div className=\"width-body\">  \n                    <div className=\"view-workspaces-body\">\n                        {type === \"all\" &&\n                            <div className=\"view-workspaces-search\">\n                                <input className=\"view-workspaces-search-input\"\n                                        placeholder=\"Search\"\n                                        value={input}\n                                        onChange={e => setInput(e.target.value)}\n                                        onKeyPress={searchFunctionKey} />\n                                <SearchIcon className=\"view-workspaces-search-icon\" onClick={e => searchFunctionButton()} />\n                            </div>\n                        }\n                        <div className=\"view-workspaces-top\">\n                            {displayHeading()}\n                            {type === \"created\" && <Link to=\"/new-workspace\" className=\"blue-button\">New Workspace</Link>}\n                        </div>\n                        <div className=\"view-workspaces-middle\">\n                            <p>{`${items.length} Workspaces`}</p>\n                            <img src=\"http://localhost:3000/List.png\" className=\"view-workspaces-row-icon\" onClick={() => {setRowFormat(true)}} />\n                            <img src=\"http://localhost:3000/Grid.png\" className=\"view-workspaces-grid-icon\" onClick={() => {setRowFormat(false)}} />\n                        </div>\n                        <div className=\"view-workspaces-list\">\n                            {items.length > 0 &&\n                                <>\n                                    {items.map((item, i) => {\n                                        if (type === \"created-workspaces\" || type === \"created-datasets\") return rowFormat ? <ItemRowCard item={item} created={true} key={i} /> : <ItemSquareCard item={item} created={true} key={i} />\n\n                                        return rowFormat ? <ItemRowCard item={item} creator={item.creatorName.name} currentUserID={currentUser.id} created={type === \"created\"} key={i} /> : <ItemSquareCard item={item} creator={item.creatorName.name} currentUserID={currentUser.id} created={type === \"created\"} key={i} />\n                                    })}\n                                </>\n                            }\n                        </div>\n                        {items.length >= 0 && finishedItems ?\n                            <p className=\"end-workspaces\">No More Workspaces</p>\n                            :\n                            <p className=\"load-workspaces\" onClick={() => {loadMore()}}>Load More</p>\n                        }\n                    </div>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default ViewItems","/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/datasets.js",[],"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/API/global.js",[],{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","severity":1,"message":"180","line":14,"column":8,"nodeType":"181","messageId":"182","endLine":14,"endColumn":21},{"ruleId":"179","severity":1,"message":"183","line":15,"column":8,"nodeType":"181","messageId":"182","endLine":15,"endColumn":18},{"ruleId":"179","severity":1,"message":"184","line":16,"column":8,"nodeType":"181","messageId":"182","endLine":16,"endColumn":16},{"ruleId":"185","severity":1,"message":"186","line":16,"column":31,"nodeType":"187","messageId":"188","endLine":16,"endColumn":33},{"ruleId":"179","severity":1,"message":"189","line":4,"column":8,"nodeType":"181","messageId":"182","endLine":4,"endColumn":15},{"ruleId":"185","severity":1,"message":"186","line":29,"column":54,"nodeType":"187","messageId":"188","endLine":29,"endColumn":56},{"ruleId":"179","severity":1,"message":"190","line":2,"column":9,"nodeType":"181","messageId":"182","endLine":2,"endColumn":19},{"ruleId":"179","severity":1,"message":"191","line":2,"column":21,"nodeType":"181","messageId":"182","endLine":2,"endColumn":25},{"ruleId":"179","severity":1,"message":"192","line":29,"column":12,"nodeType":"181","messageId":"182","endLine":29,"endColumn":17},{"ruleId":"193","severity":1,"message":"194","line":57,"column":8,"nodeType":"195","endLine":57,"endColumn":10,"suggestions":"196"},{"ruleId":"193","severity":1,"message":"197","line":78,"column":8,"nodeType":"195","endLine":78,"endColumn":16,"suggestions":"198"},{"ruleId":"193","severity":1,"message":"199","line":93,"column":8,"nodeType":"195","endLine":93,"endColumn":20,"suggestions":"200"},{"ruleId":"201","severity":1,"message":"202","line":281,"column":37,"nodeType":"203","endLine":281,"endColumn":102},{"ruleId":"193","severity":1,"message":"204","line":32,"column":8,"nodeType":"195","endLine":32,"endColumn":10,"suggestions":"205"},{"ruleId":"201","severity":1,"message":"202","line":64,"column":45,"nodeType":"203","endLine":64,"endColumn":105},{"ruleId":"179","severity":1,"message":"191","line":2,"column":21,"nodeType":"181","messageId":"182","endLine":2,"endColumn":25},{"ruleId":"193","severity":1,"message":"206","line":44,"column":8,"nodeType":"195","endLine":44,"endColumn":10,"suggestions":"207"},{"ruleId":"208","severity":1,"message":"209","line":76,"column":13,"nodeType":"210","messageId":"211","endLine":76,"endColumn":71},{"ruleId":"201","severity":1,"message":"202","line":98,"column":29,"nodeType":"203","endLine":98,"endColumn":147},{"ruleId":"201","severity":1,"message":"202","line":99,"column":29,"nodeType":"203","endLine":99,"endColumn":149},{"ruleId":"179","severity":1,"message":"212","line":1,"column":16,"nodeType":"181","messageId":"182","endLine":1,"endColumn":24},{"ruleId":"179","severity":1,"message":"213","line":1,"column":38,"nodeType":"181","messageId":"182","endLine":1,"endColumn":47},{"ruleId":"201","severity":1,"message":"202","line":27,"column":42,"nodeType":"203","endLine":27,"endColumn":91},{"ruleId":"201","severity":1,"message":"202","line":27,"column":94,"nodeType":"203","endLine":27,"endColumn":141},{"ruleId":"193","severity":1,"message":"214","line":30,"column":8,"nodeType":"195","endLine":30,"endColumn":10,"suggestions":"215"},{"ruleId":"201","severity":1,"message":"202","line":56,"column":13,"nodeType":"203","endLine":56,"endColumn":92},{"ruleId":"201","severity":1,"message":"202","line":59,"column":21,"nodeType":"203","endLine":59,"endColumn":116},{"ruleId":"201","severity":1,"message":"202","line":62,"column":50,"nodeType":"203","endLine":62,"endColumn":99},{"ruleId":"201","severity":1,"message":"202","line":62,"column":102,"nodeType":"203","endLine":62,"endColumn":149},{"ruleId":"193","severity":1,"message":"216","line":35,"column":8,"nodeType":"195","endLine":35,"endColumn":10,"suggestions":"217"},{"ruleId":"201","severity":1,"message":"202","line":77,"column":21,"nodeType":"203","endLine":77,"endColumn":115},{"ruleId":"201","severity":1,"message":"202","line":81,"column":21,"nodeType":"203","endLine":81,"endColumn":115},{"ruleId":"201","severity":1,"message":"202","line":86,"column":50,"nodeType":"203","endLine":86,"endColumn":99},{"ruleId":"201","severity":1,"message":"202","line":86,"column":102,"nodeType":"203","endLine":86,"endColumn":149},{"ruleId":"193","severity":1,"message":"216","line":35,"column":8,"nodeType":"195","endLine":35,"endColumn":10,"suggestions":"218"},{"ruleId":"201","severity":1,"message":"202","line":77,"column":21,"nodeType":"203","endLine":77,"endColumn":118},{"ruleId":"201","severity":1,"message":"202","line":81,"column":21,"nodeType":"203","endLine":81,"endColumn":118},{"ruleId":"201","severity":1,"message":"202","line":85,"column":46,"nodeType":"203","endLine":85,"endColumn":95},{"ruleId":"201","severity":1,"message":"202","line":85,"column":98,"nodeType":"203","endLine":85,"endColumn":145},{"ruleId":"219","severity":1,"message":"220","line":23,"column":17,"nodeType":"221","messageId":"222","endLine":42,"endColumn":18},{"ruleId":"193","severity":1,"message":"204","line":53,"column":8,"nodeType":"195","endLine":53,"endColumn":10,"suggestions":"223"},{"ruleId":"219","severity":1,"message":"220","line":74,"column":17,"nodeType":"221","messageId":"222","endLine":93,"endColumn":18},{"ruleId":"208","severity":1,"message":"209","line":107,"column":17,"nodeType":"210","messageId":"211","endLine":107,"endColumn":66},{"ruleId":"208","severity":1,"message":"209","line":109,"column":17,"nodeType":"210","messageId":"211","endLine":109,"endColumn":66},{"ruleId":"219","severity":1,"message":"220","line":117,"column":9,"nodeType":"221","messageId":"222","endLine":136,"endColumn":10},{"ruleId":"201","severity":1,"message":"202","line":162,"column":29,"nodeType":"203","endLine":162,"endColumn":147},{"ruleId":"201","severity":1,"message":"202","line":163,"column":29,"nodeType":"203","endLine":163,"endColumn":149},"no-native-reassign",["224"],"no-negated-in-lhs",["225"],"no-unused-vars","'NewExperiment' is defined but never used.","Identifier","unusedVar","'Experiment' is defined but never used.","'NotFound' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'userAPI' is defined but never used.","'useHistory' is defined but never used.","'Link' is defined but never used.","'image' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'workspaceID'. Either include it or remove the dependency array.","ArrayExpression",["226"],"React Hook useEffect has a missing dependency: 'workspace.updated'. Either include it or remove the dependency array.",["227"],"React Hook useEffect has a missing dependency: 'replaceData'. Either include it or remove the dependency array.",["228"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'type'. Either include it or remove the dependency array.",["229"],"React Hook useEffect has missing dependencies: 'history', 'searchPhrase', and 'urlPhrase'. Either include them or remove the dependency array.",["230"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'useState' is defined but never used.","'useEffect' is defined but never used.","React Hook useEffect has a missing dependency: 'item.updatedAt'. Either include it or remove the dependency array.",["231"],"React Hook useEffect has a missing dependency: 'item.updated'. Either include it or remove the dependency array.",["232"],["233"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["234"],"no-global-assign","no-unsafe-negation",{"desc":"235","fix":"236"},{"desc":"237","fix":"238"},{"desc":"239","fix":"240"},{"desc":"241","fix":"242"},{"desc":"243","fix":"244"},{"desc":"245","fix":"246"},{"desc":"247","fix":"248"},{"desc":"247","fix":"249"},{"desc":"241","fix":"250"},"Update the dependencies array to be: [workspaceID]",{"range":"251","text":"252"},"Update the dependencies array to be: [loaded, workspace.updated]",{"range":"253","text":"254"},"Update the dependencies array to be: [replaceData, uploadData]",{"range":"255","text":"256"},"Update the dependencies array to be: [type]",{"range":"257","text":"258"},"Update the dependencies array to be: [history, searchPhrase, urlPhrase]",{"range":"259","text":"260"},"Update the dependencies array to be: [item.updatedAt]",{"range":"261","text":"262"},"Update the dependencies array to be: [item.updated]",{"range":"263","text":"264"},{"range":"265","text":"264"},{"range":"266","text":"258"},[2529,2531],"[workspaceID]",[3979,3987],"[loaded, workspace.updated]",[4334,4346],"[replaceData, uploadData]",[1203,1205],"[type]",[1667,1669],"[history, searchPhrase, urlPhrase]",[1876,1878],"[item.updatedAt]",[2215,2217],"[item.updated]",[2218,2220],[2243,2245]]