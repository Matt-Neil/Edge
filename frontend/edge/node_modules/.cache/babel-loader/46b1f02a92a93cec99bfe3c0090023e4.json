{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Create-Experiment.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useHistory, useParams } from \"react-router-dom\";\nimport itemsAPI from '../API/items';\nimport ModelNode from '../Components/Model-Node';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CreateExperiment = _ref => {\n  _s();\n\n  let {\n    currentUser\n  } = _ref;\n  const [stage, setStage] = useState(\"setup\");\n  const [title, setTitle] = useState(\"\");\n  const [inputValue, setInputValue] = useState();\n  const [loaded, setLoaded] = useState(false);\n  const [noData, setNoData] = useState();\n  const [exist, setExist] = useState(false);\n  const [visibility, setVisibility] = useState(false);\n  const [model, setModel] = useState([{\n    type: \"Input\",\n    value: \"3\",\n    activation: \"\"\n  }]);\n  const [selectedNode, setSelectedNode] = useState(0);\n  const [configuration, setConfiguration] = useState({\n    epochs: \"\",\n    trainingSplit: \"\",\n    validationSplit: \"\",\n    testSplit: \"\",\n    maxError: \"\",\n    batch: \"\",\n    optimiser: \"Sigmoid\",\n    model: \"Regression\"\n  });\n  const [experiments, setExperiments] = useState([]);\n  const [addNode, setAddNode] = useState(false);\n  const [disableTrain, setDisabledTrain] = useState(true);\n  const [refreshDiagram, setRefreshDiagram] = useState();\n  const modelRef = useRef(null);\n  const history = useHistory();\n  const workspaceID = useParams().id;\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const experiments = await itemsAPI.get(`/created-experiments/${workspaceID}`);\n        const workspace = await itemsAPI.get(`/${workspaceID}?type=workspace`);\n\n        if (workspace.data.data.creator === currentUser.id) {\n          addOpenItems(workspace.data.data._id, workspace.data.data.title, workspace.data.data.type);\n        }\n\n        fetch(`http://127.0.0.1:5000/files/${workspace.data.data.dataset.datafile}.csv`).then(response => response.text()).then(text => {\n          setNoData(false);\n        }).catch(() => {\n          setNoData(true);\n        });\n        experiments.data.data.experiments.map(experiment => {\n          setExperiments(state => [...state, experiment.title]);\n        });\n        setExist(true);\n        setLoaded(true);\n      } catch (err) {\n        setExist(false);\n        setLoaded(true);\n      }\n    };\n\n    fetchData();\n  }, []);\n  useEffect(() => {\n    if (modelRef.current) {\n      modelRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'end',\n        inline: 'end'\n      });\n    }\n  }, [model, addNode]);\n\n  const next = () => {\n    if (stage === \"setup\" && title !== \"\" && !experiments.includes(title)) {\n      setStage(\"modelling\");\n    }\n\n    if (stage === \"modelling\" && model.length > 2 && model[model.length - 1].type === \"Output\" && configuration.epochs !== \"\" && configuration.trainingSplit !== \"\" && configuration.validationSplit !== \"\" && configuration.testSplit !== \"\" && configuration.maxError !== \"\" && configuration.batch !== \"\" && configuration.optimiser !== \"\" && configuration.model !== \"\") {\n      setStage(\"training\");\n    }\n\n    if (stage === \"training\" && !disableTrain) {\n      setStage(\"evaluation\");\n    }\n  };\n\n  const cancel = () => {\n    history.replace(`/${workspaceID}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loaded && exist ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: noData ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"end-items\",\n        children: \"Cannot find dataset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"create-sidebar\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Create Experiment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-item-header\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"create-item-title\",\n              children: title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `${\"create-sidebar-stage\"} ${stage === \"setup\" ? \"create-sidebar-stage-selected\" : \"create-sidebar-stage-unselected\"}`,\n            disabled: stage === \"setup\",\n            onClick: () => {\n              setStage(\"setup\");\n            },\n            children: \"Setup\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `${\"create-sidebar-stage\"} ${stage === \"modelling\" ? \"create-sidebar-stage-selected\" : \"create-sidebar-stage-unselected\"}`,\n            disabled: stage === \"setup\" || stage === \"modelling\",\n            onClick: () => {\n              setStage(\"modelling\");\n            },\n            children: \"Modelling\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `${\"create-sidebar-stage\"} ${stage === \"training\" ? \"create-sidebar-stage-selected\" : \"create-sidebar-stage-unselected\"}`,\n            disabled: stage === \"setup\" || stage === \"modelling\" || stage === \"training\",\n            onClick: () => {\n              setStage(\"training\");\n            },\n            children: \"Training\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `${\"create-sidebar-stage\"} ${stage === \"evaluation\" ? \"create-sidebar-stage-selected\" : \"create-sidebar-stage-unselected\"}`,\n            disabled: true,\n            children: \"Evaluation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inner-body\",\n          children: /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: stage === \"setup\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"create-item-setup-information\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-item-nav\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"create-item-filename\",\n                  children: \"Experiment Information\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"white-button create-item-cancel\",\n                  onClick: () => {\n                    cancel();\n                  },\n                  children: \"Cancel\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 121,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"blue-button\",\n                  onClick: () => {\n                    next();\n                  },\n                  children: \"Next\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 123,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"create-item-title\",\n                placeholder: \"Title\",\n                onChange: e => {\n                  setTitle(e.target.value);\n                },\n                value: title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-item-setup\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"create-item-setup-label\",\n                  children: \"Public?\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 131,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  onChange: () => {\n                    setVisibility(previous => !previous);\n                  },\n                  checked: visibility\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 132,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 41\n            }, this) : stage === \"modelling\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"create-item-modelling\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-item-modelling-top\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"white-button create-item-cancel\",\n                  onClick: () => {\n                    cancel();\n                  },\n                  children: \"Cancel\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 140,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"blue-button\",\n                  onClick: () => {\n                    next();\n                  },\n                  children: \"Train\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 142,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-item-modelling-body\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"create-item-model\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"create-item-model-diagram\",\n                    children: [model.map((node, i) => {\n                      return /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"create-item-model-diagram-node\",\n                          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                            onClick: () => {\n                              setSelectedNode(i);\n                            },\n                            children: /*#__PURE__*/_jsxDEV(ModelNode, {\n                              setSelectedNode: setSelectedNode,\n                              type: node.type,\n                              value: node.value,\n                              selected: i === selectedNode,\n                              last: i === model.length - 1\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 153,\n                              columnNumber: 77\n                            }, this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 152,\n                            columnNumber: 73\n                          }, this), node.type !== \"Input\" && /*#__PURE__*/_jsxDEV(\"div\", {\n                            onClick: () => {\n                              {\n                                selectedNode === i ? setSelectedNode(state => state - 1) : selectedNode < i ? setSelectedNode(state => state) : selectedNode > i && /*#__PURE__*/_jsxDEV(_Fragment, {\n                                  children: selectedNode - i === 1 ? setSelectedNode(state => state - 1) : setSelectedNode(i)\n                                }, void 0, false);\n                              }\n                              model.splice(i, 1);\n                              setRefreshDiagram(new Date().getTime());\n                            },\n                            children: /*#__PURE__*/_jsxDEV(ClearIcon, {\n                              className: \"create-item-model-diagram-remove\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 171,\n                              columnNumber: 81\n                            }, this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 156,\n                            columnNumber: 77\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 151,\n                          columnNumber: 69\n                        }, this), i === model.length - 1 && node.type !== \"Output\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                          children: addNode ? /*#__PURE__*/_jsxDEV(\"div\", {\n                            className: \"create-item-model-diagram-add\",\n                            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                              onClick: () => {\n                                setAddNode(false);\n                              },\n                              children: /*#__PURE__*/_jsxDEV(RemoveIcon, {\n                                className: \"create-item-model-diagram-add-icon\"\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 180,\n                                columnNumber: 89\n                              }, this)\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 179,\n                              columnNumber: 85\n                            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                              className: \"create-item-model-diagram-add-options\",\n                              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                                onClick: () => {\n                                  setModel(state => [...state, {\n                                    type: \"Dense\",\n                                    value: \"0\",\n                                    activation: \"\"\n                                  }]);\n                                  setAddNode(false);\n                                },\n                                children: \"Dense\"\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 183,\n                                columnNumber: 89\n                              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                                onClick: () => {\n                                  setModel(state => [...state, {\n                                    type: \"Output\",\n                                    value: \"0\",\n                                    activation: \"\"\n                                  }]);\n                                  setAddNode(false);\n                                },\n                                children: \"Output\"\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 190,\n                                columnNumber: 89\n                              }, this)]\n                            }, void 0, true, {\n                              fileName: _jsxFileName,\n                              lineNumber: 182,\n                              columnNumber: 85\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 178,\n                            columnNumber: 81\n                          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                            onClick: () => {\n                              setAddNode(true);\n                            },\n                            children: /*#__PURE__*/_jsxDEV(AddIcon, {\n                              className: \"create-item-model-diagram-add-icon\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 201,\n                              columnNumber: 85\n                            }, this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 200,\n                            columnNumber: 81\n                          }, this)\n                        }, void 0, false)]\n                      }, i, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 150,\n                        columnNumber: 65\n                      }, this);\n                    }), /*#__PURE__*/_jsxDEV(\"div\", {\n                      ref: modelRef\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 209,\n                      columnNumber: 57\n                    }, this)]\n                  }, refreshDiagram, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 147,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"create-item-model-selected\",\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      children: model[selectedNode].type\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 212,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Units\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 213,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: model[selectedNode].value,\n                      disabled: model[selectedNode].type !== \"Input\",\n                      onChange: e => {\n                        setModel(state => {\n                          const stateCopy = [...state];\n                          stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                            value: e.target.value\n                          };\n                          return stateCopy;\n                        });\n                        setRefreshDiagram(new Date().getTime());\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 214,\n                      columnNumber: 57\n                    }, this), model[selectedNode].type !== \"Output\" && model[selectedNode].type !== \"Input\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                        children: \"Activation\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 229,\n                        columnNumber: 65\n                      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                        value: model[selectedNode].activation,\n                        onChange: e => {\n                          setModel(state => {\n                            const stateCopy = [...state];\n                            stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                              activation: e.target.value\n                            };\n                            return stateCopy;\n                          });\n                          setRefreshDiagram(new Date().getTime());\n                        },\n                        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                          disabled: true,\n                          selected: true,\n                          value: \"\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 242,\n                          columnNumber: 73\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          value: \"Relu\",\n                          children: \"Relu\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 243,\n                          columnNumber: 73\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          value: \"Sigmoid\",\n                          children: \"Sigmoid\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 244,\n                          columnNumber: 73\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 230,\n                        columnNumber: 65\n                      }, this)]\n                    }, void 0, true)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 211,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 146,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"create-item-configuration\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"create-item-configuration-option\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                        children: \"Epochs\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 253,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                        value: configuration.epochs,\n                        onChange: e => {\n                          setConfiguration(state => ({ ...state,\n                            epochs: e.target.value\n                          }));\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 254,\n                        columnNumber: 61\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 252,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                        children: \"Training Split\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 260,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                        value: configuration.trainingSplit,\n                        onChange: e => {\n                          setConfiguration(state => ({ ...state,\n                            trainingSplit: e.target.value\n                          }));\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 261,\n                        columnNumber: 61\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 259,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                        children: \"Validation Split\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 267,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                        value: configuration.validationSplit,\n                        onChange: e => {\n                          setConfiguration(state => ({ ...state,\n                            validationSplit: e.target.value\n                          }));\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 268,\n                        columnNumber: 61\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 266,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                        children: \"Test Split\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 274,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                        value: configuration.testSplit,\n                        onChange: e => {\n                          setConfiguration(state => ({ ...state,\n                            testSplit: e.target.value\n                          }));\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 275,\n                        columnNumber: 61\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 273,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                        children: \"Maximum Error\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 281,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                        value: configuration.maxError,\n                        onChange: e => {\n                          setConfiguration(state => ({ ...state,\n                            maxError: e.target.value\n                          }));\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 282,\n                        columnNumber: 61\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 280,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                        children: \"Batch Size\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 288,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                        value: configuration.batch,\n                        onChange: e => {\n                          setConfiguration(state => ({ ...state,\n                            batch: e.target.value\n                          }));\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 289,\n                        columnNumber: 61\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 287,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                        children: \"Optimiser\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 295,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                        value: configuration.optimiser,\n                        onChange: e => {\n                          setConfiguration(state => ({ ...state,\n                            optimiser: e.target.value\n                          }));\n                        },\n                        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                          disabled: true,\n                          selected: true,\n                          value: \"\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 300,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          value: \"Sigmoid\",\n                          children: \"Sigmoid\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 301,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          value: \"Relu\",\n                          children: \"Relu\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 302,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 296,\n                        columnNumber: 61\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 294,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                        children: \"Model Type\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 306,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                        value: configuration.model,\n                        onChange: e => {\n                          setConfiguration(state => ({ ...state,\n                            model: e.target.value\n                          }));\n                        },\n                        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                          disabled: true,\n                          selected: true,\n                          value: \"\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 311,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          value: \"Regression\",\n                          children: \"Regression\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 312,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          value: \"Classification\",\n                          children: \"Classification\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 313,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 307,\n                        columnNumber: 61\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 305,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 251,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 250,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 41\n            }, this) : stage === \"training\" ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n          }, void 0, false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 25\n      }, this)\n    }, void 0, false) : loaded && !exist && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"width-body\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"item-exist\",\n        children: \"Cannot find workspace\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(CreateExperiment, \"JdTltVn3AonrknlVoXY497JtOY0=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = CreateExperiment;\nexport default CreateExperiment;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateExperiment\");","map":{"version":3,"sources":["/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Create-Experiment.jsx"],"names":["React","useState","useEffect","useRef","useHistory","useParams","itemsAPI","ModelNode","ClearIcon","AddIcon","RemoveIcon","CreateExperiment","currentUser","stage","setStage","title","setTitle","inputValue","setInputValue","loaded","setLoaded","noData","setNoData","exist","setExist","visibility","setVisibility","model","setModel","type","value","activation","selectedNode","setSelectedNode","configuration","setConfiguration","epochs","trainingSplit","validationSplit","testSplit","maxError","batch","optimiser","experiments","setExperiments","addNode","setAddNode","disableTrain","setDisabledTrain","refreshDiagram","setRefreshDiagram","modelRef","history","workspaceID","id","fetchData","get","workspace","data","creator","addOpenItems","_id","fetch","dataset","datafile","then","response","text","catch","map","experiment","state","err","current","scrollIntoView","behavior","block","inline","next","includes","length","cancel","replace","e","target","previous","node","i","splice","Date","getTime","stateCopy"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,MAApC,QAAiD,OAAjD;AACA,SAAQC,UAAR,EAAoBC,SAApB,QAAoC,kBAApC;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;;;;AAEA,MAAMC,gBAAgB,GAAG,QAAmB;AAAA;;AAAA,MAAlB;AAACC,IAAAA;AAAD,GAAkB;AACxC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,OAAD,CAAlC;AACA,QAAM,CAACc,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACgB,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,EAA5C;AACA,QAAM,CAACkB,MAAD,EAASC,SAAT,IAAsBnB,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACoB,MAAD,EAASC,SAAT,IAAsBrB,QAAQ,EAApC;AACA,QAAM,CAACsB,KAAD,EAAQC,QAAR,IAAoBvB,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACwB,UAAD,EAAaC,aAAb,IAA8BzB,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAAC0B,KAAD,EAAQC,QAAR,IAAoB3B,QAAQ,CAAC,CAAC;AAAC4B,IAAAA,IAAI,EAAE,OAAP;AAAgBC,IAAAA,KAAK,EAAE,GAAvB;AAA4BC,IAAAA,UAAU,EAAE;AAAxC,GAAD,CAAD,CAAlC;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkChC,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAM,CAACiC,aAAD,EAAgBC,gBAAhB,IAAoClC,QAAQ,CAAC;AAACmC,IAAAA,MAAM,EAAE,EAAT;AAAaC,IAAAA,aAAa,EAAE,EAA5B;AAAgCC,IAAAA,eAAe,EAAE,EAAjD;AAAqDC,IAAAA,SAAS,EAAE,EAAhE;AACCC,IAAAA,QAAQ,EAAE,EADX;AACeC,IAAAA,KAAK,EAAE,EADtB;AAC0BC,IAAAA,SAAS,EAAE,SADrC;AACgDf,IAAAA,KAAK,EAAE;AADvD,GAAD,CAAlD;AAEA,QAAM,CAACgB,WAAD,EAAcC,cAAd,IAAgC3C,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAAC4C,OAAD,EAAUC,UAAV,IAAwB7C,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAAC8C,YAAD,EAAeC,gBAAf,IAAmC/C,QAAQ,CAAC,IAAD,CAAjD;AACA,QAAM,CAACgD,cAAD,EAAiBC,iBAAjB,IAAsCjD,QAAQ,EAApD;AACA,QAAMkD,QAAQ,GAAGhD,MAAM,CAAC,IAAD,CAAvB;AACA,QAAMiD,OAAO,GAAGhD,UAAU,EAA1B;AACA,QAAMiD,WAAW,GAAGhD,SAAS,GAAGiD,EAAhC;AAEApD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMqD,SAAS,GAAG,YAAY;AAC1B,UAAI;AACA,cAAMZ,WAAW,GAAG,MAAMrC,QAAQ,CAACkD,GAAT,CAAc,wBAAuBH,WAAY,EAAjD,CAA1B;AACA,cAAMI,SAAS,GAAG,MAAMnD,QAAQ,CAACkD,GAAT,CAAc,IAAGH,WAAY,iBAA7B,CAAxB;;AAEA,YAAII,SAAS,CAACC,IAAV,CAAeA,IAAf,CAAoBC,OAApB,KAAgC/C,WAAW,CAAC0C,EAAhD,EAAoD;AAChDM,UAAAA,YAAY,CAACH,SAAS,CAACC,IAAV,CAAeA,IAAf,CAAoBG,GAArB,EAA0BJ,SAAS,CAACC,IAAV,CAAeA,IAAf,CAAoB3C,KAA9C,EAAqD0C,SAAS,CAACC,IAAV,CAAeA,IAAf,CAAoB7B,IAAzE,CAAZ;AACH;;AAEDiC,QAAAA,KAAK,CAAE,+BAA8BL,SAAS,CAACC,IAAV,CAAeA,IAAf,CAAoBK,OAApB,CAA4BC,QAAS,MAArE,CAAL,CACKC,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEUE,IAAI,IAAI;AACV7C,UAAAA,SAAS,CAAC,KAAD,CAAT;AACH,SAJL,EAIO8C,KAJP,CAIa,MAAM;AACX9C,UAAAA,SAAS,CAAC,IAAD,CAAT;AACH,SANL;AAQAqB,QAAAA,WAAW,CAACe,IAAZ,CAAiBA,IAAjB,CAAsBf,WAAtB,CAAkC0B,GAAlC,CAAuCC,UAAD,IAAgB;AAClD1B,UAAAA,cAAc,CAAC2B,KAAK,IAAI,CAAC,GAAGA,KAAJ,EAAWD,UAAU,CAACvD,KAAtB,CAAV,CAAd;AACH,SAFD;AAIAS,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACAJ,QAAAA,SAAS,CAAC,IAAD,CAAT;AACH,OAtBD,CAsBE,OAAOoD,GAAP,EAAY;AACVhD,QAAAA,QAAQ,CAAC,KAAD,CAAR;AACAJ,QAAAA,SAAS,CAAC,IAAD,CAAT;AACH;AACJ,KA3BD;;AA4BAmC,IAAAA,SAAS;AACZ,GA9BQ,EA8BN,EA9BM,CAAT;AAgCArD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIiD,QAAQ,CAACsB,OAAb,EAAsB;AAClBtB,MAAAA,QAAQ,CAACsB,OAAT,CAAiBC,cAAjB,CAAgC;AAC5BC,QAAAA,QAAQ,EAAE,QADkB;AAE5BC,QAAAA,KAAK,EAAE,KAFqB;AAG5BC,QAAAA,MAAM,EAAE;AAHoB,OAAhC;AAKH;AACJ,GARQ,EAQN,CAAClD,KAAD,EAAQkB,OAAR,CARM,CAAT;;AAUA,QAAMiC,IAAI,GAAG,MAAM;AACf,QAAIjE,KAAK,KAAK,OAAV,IAAqBE,KAAK,KAAK,EAA/B,IAAqC,CAAC4B,WAAW,CAACoC,QAAZ,CAAqBhE,KAArB,CAA1C,EAAuE;AACnED,MAAAA,QAAQ,CAAC,WAAD,CAAR;AACH;;AACD,QAAID,KAAK,KAAK,WAAV,IAAyBc,KAAK,CAACqD,MAAN,GAAe,CAAxC,IAA6CrD,KAAK,CAACA,KAAK,CAACqD,MAAN,GAAa,CAAd,CAAL,CAAsBnD,IAAtB,KAA+B,QAA5E,IAAwFK,aAAa,CAACE,MAAd,KAAyB,EAAjH,IACAF,aAAa,CAACG,aAAd,KAAgC,EADhC,IACsCH,aAAa,CAACI,eAAd,KAAkC,EADxE,IAC8EJ,aAAa,CAACK,SAAd,KAA4B,EAD1G,IAEAL,aAAa,CAACM,QAAd,KAA2B,EAF3B,IAEiCN,aAAa,CAACO,KAAd,KAAwB,EAFzD,IAE+DP,aAAa,CAACQ,SAAd,KAA4B,EAF3F,IAGAR,aAAa,CAACP,KAAd,KAAwB,EAH5B,EAGgC;AAC5Bb,MAAAA,QAAQ,CAAC,UAAD,CAAR;AACH;;AACD,QAAID,KAAK,KAAK,UAAV,IAAwB,CAACkC,YAA7B,EAA2C;AACvCjC,MAAAA,QAAQ,CAAC,YAAD,CAAR;AACH;AACJ,GAbD;;AAeA,QAAMmE,MAAM,GAAG,MAAM;AACjB7B,IAAAA,OAAO,CAAC8B,OAAR,CAAiB,IAAG7B,WAAY,EAAhC;AACH,GAFD;;AAIA,sBACI;AAAA,cACKlC,MAAM,IAAII,KAAV,gBACG;AAAA,gBACKF,MAAM,gBACH;AAAG,QAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADG,gBAGH;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,kCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAK,YAAA,SAAS,EAAC,oBAAf;AAAA,mCACI;AAAG,cAAA,SAAS,EAAC,mBAAb;AAAA,wBAAkCN;AAAlC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAKI;AAAQ,YAAA,SAAS,EAAG,GAAE,sBAAuB,IAAGF,KAAK,KAAK,OAAV,GAAoB,+BAApB,GAAsD,iCAAkC,EAAxI;AACQ,YAAA,QAAQ,EAAEA,KAAK,KAAK,OAD5B;AAEQ,YAAA,OAAO,EAAE,MAAM;AAACC,cAAAA,QAAQ,CAAC,OAAD,CAAR;AAAkB,aAF1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALJ,eAQI;AAAQ,YAAA,SAAS,EAAG,GAAE,sBAAuB,IAAGD,KAAK,KAAK,WAAV,GAAwB,+BAAxB,GAA0D,iCAAkC,EAA5I;AACQ,YAAA,QAAQ,EAAEA,KAAK,KAAK,OAAV,IAAqBA,KAAK,KAAK,WADjD;AAEQ,YAAA,OAAO,EAAE,MAAM;AAACC,cAAAA,QAAQ,CAAC,WAAD,CAAR;AAAsB,aAF9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBARJ,eAWI;AAAQ,YAAA,SAAS,EAAG,GAAE,sBAAuB,IAAGD,KAAK,KAAK,UAAV,GAAuB,+BAAvB,GAAyD,iCAAkC,EAA3I;AACQ,YAAA,QAAQ,EAAEA,KAAK,KAAK,OAAV,IAAqBA,KAAK,KAAK,WAA/B,IAA8CA,KAAK,KAAK,UAD1E;AAEQ,YAAA,OAAO,EAAE,MAAM;AAACC,cAAAA,QAAQ,CAAC,UAAD,CAAR;AAAqB,aAF7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAXJ,eAcI;AAAQ,YAAA,SAAS,EAAG,GAAE,sBAAuB,IAAGD,KAAK,KAAK,YAAV,GAAyB,+BAAzB,GAA2D,iCAAkC,EAA7I;AACQ,YAAA,QAAQ,MADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAdJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAkBI;AAAK,UAAA,SAAS,EAAC,YAAf;AAAA,iCACI;AAAA,sBACKA,KAAK,KAAK,OAAV,gBACG;AAAK,cAAA,SAAS,EAAC,+BAAf;AAAA,sCACI;AAAK,gBAAA,SAAS,EAAC,iBAAf;AAAA,wCACI;AAAG,kBAAA,SAAS,EAAC,sBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,eAEI;AAAQ,kBAAA,SAAS,EAAC,iCAAlB;AACQ,kBAAA,OAAO,EAAE,MAAM;AAACoE,oBAAAA,MAAM;AAAG,mBADjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFJ,eAII;AAAQ,kBAAA,SAAS,EAAC,aAAlB;AACQ,kBAAA,OAAO,EAAE,MAAM;AAACH,oBAAAA,IAAI;AAAG,mBAD/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAQI;AAAO,gBAAA,SAAS,EAAC,mBAAjB;AACQ,gBAAA,WAAW,EAAC,OADpB;AAEQ,gBAAA,QAAQ,EAAEK,CAAC,IAAI;AAACnE,kBAAAA,QAAQ,CAACmE,CAAC,CAACC,MAAF,CAAStD,KAAV,CAAR;AAAyB,iBAFjD;AAGQ,gBAAA,KAAK,EAAEf;AAHf;AAAA;AAAA;AAAA;AAAA,sBARJ,eAYI;AAAK,gBAAA,SAAS,EAAC,mBAAf;AAAA,wCACI;AAAO,kBAAA,SAAS,EAAC,yBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,eAEI;AAAO,kBAAA,IAAI,EAAC,UAAZ;AACQ,kBAAA,QAAQ,EAAE,MAAM;AAACW,oBAAAA,aAAa,CAAC2D,QAAQ,IAAI,CAACA,QAAd,CAAb;AAAqC,mBAD9D;AAEQ,kBAAA,OAAO,EAAE5D;AAFjB;AAAA;AAAA;AAAA;AAAA,wBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,sBAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBADH,GAoBEZ,KAAK,KAAK,WAAX,gBACE;AAAK,cAAA,SAAS,EAAC,uBAAf;AAAA,sCACI;AAAK,gBAAA,SAAS,EAAC,2BAAf;AAAA,wCACI;AAAQ,kBAAA,SAAS,EAAC,iCAAlB;AACQ,kBAAA,OAAO,EAAE,MAAM;AAACoE,oBAAAA,MAAM;AAAG,mBADjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,eAGI;AAAQ,kBAAA,SAAS,EAAC,aAAlB;AACQ,kBAAA,OAAO,EAAE,MAAM;AAACH,oBAAAA,IAAI;AAAG,mBAD/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAOI;AAAK,gBAAA,SAAS,EAAC,4BAAf;AAAA,wCACI;AAAK,kBAAA,SAAS,EAAC,mBAAf;AAAA,0CACI;AAAK,oBAAA,SAAS,EAAC,2BAAf;AAAA,+BACKnD,KAAK,CAAC0C,GAAN,CAAU,CAACiB,IAAD,EAAOC,CAAP,KAAa;AACpB,0CACI;AAAA,gDACI;AAAK,0BAAA,SAAS,EAAE,gCAAhB;AAAA,kDACI;AAAK,4BAAA,OAAO,EAAE,MAAM;AAACtD,8BAAAA,eAAe,CAACsD,CAAD,CAAf;AAAmB,6BAAxC;AAAA,mDACI,QAAC,SAAD;AAAW,8BAAA,eAAe,EAAEtD,eAA5B;AAA6C,8BAAA,IAAI,EAAEqD,IAAI,CAACzD,IAAxD;AAA8D,8BAAA,KAAK,EAAEyD,IAAI,CAACxD,KAA1E;AAAiF,8BAAA,QAAQ,EAAEyD,CAAC,KAAKvD,YAAjG;AAA+G,8BAAA,IAAI,EAAEuD,CAAC,KAAK5D,KAAK,CAACqD,MAAN,GAAa;AAAxI;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kCADJ,EAIKM,IAAI,CAACzD,IAAL,KAAc,OAAd,iBACG;AAAK,4BAAA,OAAO,EAAE,MAAM;AAAC;AAACG,gCAAAA,YAAY,KAAKuD,CAAjB,GACEtD,eAAe,CAACsC,KAAK,IAAIA,KAAK,GAAC,CAAhB,CADjB,GAEAvC,YAAY,GAAGuD,CAAf,GACEtD,eAAe,CAACsC,KAAK,IAAIA,KAAV,CADjB,GAEAvC,YAAY,GAAGuD,CAAf,iBACE;AAAA,4CACKvD,YAAY,GAACuD,CAAb,KAAmB,CAAnB,GACGtD,eAAe,CAACsC,KAAK,IAAIA,KAAK,GAAC,CAAhB,CADlB,GAGGtC,eAAe,CAACsD,CAAD;AAJvB,iDALF;AAYD;AACD5D,8BAAAA,KAAK,CAAC6D,MAAN,CAAaD,CAAb,EAAgB,CAAhB;AACArC,8BAAAA,iBAAiB,CAAC,IAAIuC,IAAJ,GAAWC,OAAX,EAAD,CAAjB;AAAwC,6BAd5D;AAAA,mDAeI,QAAC,SAAD;AAAW,8BAAA,SAAS,EAAC;AAArB;AAAA;AAAA;AAAA;AAAA;AAfJ;AAAA;AAAA;AAAA;AAAA,kCALR;AAAA;AAAA;AAAA;AAAA;AAAA,gCADJ,EAyBKH,CAAC,KAAK5D,KAAK,CAACqD,MAAN,GAAa,CAAnB,IAAwBM,IAAI,CAACzD,IAAL,KAAc,QAAtC,iBACG;AAAA,oCACKgB,OAAO,gBACJ;AAAK,4BAAA,SAAS,EAAC,+BAAf;AAAA,oDACI;AAAK,8BAAA,OAAO,EAAE,MAAM;AAACC,gCAAAA,UAAU,CAAC,KAAD,CAAV;AAAkB,+BAAvC;AAAA,qDACI,QAAC,UAAD;AAAY,gCAAA,SAAS,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oCADJ,eAII;AAAK,8BAAA,SAAS,EAAC,uCAAf;AAAA,sDACI;AAAQ,gCAAA,OAAO,EAAE,MAAM;AAAClB,kCAAAA,QAAQ,CAAC2C,KAAK,IAAI,CAAC,GAAGA,KAAJ,EAAW;AACjD1C,oCAAAA,IAAI,EAAE,OAD2C;AAEjDC,oCAAAA,KAAK,EAAE,GAF0C;AAGjDC,oCAAAA,UAAU,EAAE;AAHqC,mCAAX,CAAV,CAAR;AAKxBe,kCAAAA,UAAU,CAAC,KAAD,CAAV;AACC,iCAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCADJ,eAQI;AAAQ,gCAAA,OAAO,EAAE,MAAM;AAAClB,kCAAAA,QAAQ,CAAC2C,KAAK,IAAI,CAAC,GAAGA,KAAJ,EAAW;AACjD1C,oCAAAA,IAAI,EAAE,QAD2C;AAEjDC,oCAAAA,KAAK,EAAE,GAF0C;AAGjDC,oCAAAA,UAAU,EAAE;AAHqC,mCAAX,CAAV,CAAR;AAKxBe,kCAAAA,UAAU,CAAC,KAAD,CAAV;AACC,iCAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCARJ;AAAA;AAAA;AAAA;AAAA;AAAA,oCAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,kCADI,gBAuBJ;AAAK,4BAAA,OAAO,EAAE,MAAM;AAACA,8BAAAA,UAAU,CAAC,IAAD,CAAV;AAAiB,6BAAtC;AAAA,mDACI,QAAC,OAAD;AAAS,8BAAA,SAAS,EAAC;AAAnB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAxBR,yCA1BR;AAAA,yBAAUyC,CAAV;AAAA;AAAA;AAAA;AAAA,8BADJ;AA2DH,qBA5DA,CADL,eA8DI;AAAK,sBAAA,GAAG,EAAEpC;AAAV;AAAA;AAAA;AAAA;AAAA,4BA9DJ;AAAA,qBAAgDF,cAAhD;AAAA;AAAA;AAAA;AAAA,0BADJ,eAiEI;AAAK,oBAAA,SAAS,EAAC,4BAAf;AAAA,4CACI;AAAA,gCAAItB,KAAK,CAACK,YAAD,CAAL,CAAoBH;AAAxB;AAAA;AAAA;AAAA;AAAA,4BADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAFJ,eAGI;AAAO,sBAAA,KAAK,EAAEF,KAAK,CAACK,YAAD,CAAL,CAAoBF,KAAlC;AACQ,sBAAA,QAAQ,EAAEH,KAAK,CAACK,YAAD,CAAL,CAAoBH,IAApB,KAA6B,OAD/C;AAEQ,sBAAA,QAAQ,EAAEsD,CAAC,IAAI;AAACvD,wBAAAA,QAAQ,CAAC2C,KAAK,IAAI;AACd,gCAAMoB,SAAS,GAAG,CAAC,GAAGpB,KAAJ,CAAlB;AAEAoB,0BAAAA,SAAS,CAAC3D,YAAD,CAAT,GAA0B,EACtB,GAAG2D,SAAS,CAAC3D,YAAD,CADU;AAEtBF,4BAAAA,KAAK,EAAEqD,CAAC,CAACC,MAAF,CAAStD;AAFM,2BAA1B;AAKA,iCAAO6D,SAAP;AACH,yBATO,CAAR;AAUAzC,wBAAAA,iBAAiB,CAAC,IAAIuC,IAAJ,GAAWC,OAAX,EAAD,CAAjB;AAAwC;AAZhE;AAAA;AAAA;AAAA;AAAA,4BAHJ,EAgBK/D,KAAK,CAACK,YAAD,CAAL,CAAoBH,IAApB,KAA6B,QAA7B,IAAyCF,KAAK,CAACK,YAAD,CAAL,CAAoBH,IAApB,KAA6B,OAAtE,iBACG;AAAA,8CACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADJ,eAEI;AAAQ,wBAAA,KAAK,EAAEF,KAAK,CAACK,YAAD,CAAL,CAAoBD,UAAnC;AACQ,wBAAA,QAAQ,EAAEoD,CAAC,IAAI;AAACvD,0BAAAA,QAAQ,CAAC2C,KAAK,IAAI;AACd,kCAAMoB,SAAS,GAAG,CAAC,GAAGpB,KAAJ,CAAlB;AAEAoB,4BAAAA,SAAS,CAAC3D,YAAD,CAAT,GAA0B,EACtB,GAAG2D,SAAS,CAAC3D,YAAD,CADU;AAEtBD,8BAAAA,UAAU,EAAEoD,CAAC,CAACC,MAAF,CAAStD;AAFC,6BAA1B;AAKA,mCAAO6D,SAAP;AACH,2BATO,CAAR;AAUAzC,0BAAAA,iBAAiB,CAAC,IAAIuC,IAAJ,GAAWC,OAAX,EAAD,CAAjB;AAAwC,yBAXhE;AAAA,gDAYQ;AAAQ,0BAAA,QAAQ,MAAhB;AAAiB,0BAAA,QAAQ,MAAzB;AAA0B,0BAAA,KAAK,EAAC;AAAhC;AAAA;AAAA;AAAA;AAAA,gCAZR,eAaQ;AAAQ,0BAAA,KAAK,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAbR,eAcQ;AAAQ,0BAAA,KAAK,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAdR;AAAA;AAAA;AAAA;AAAA;AAAA,8BAFJ;AAAA,oCAjBR;AAAA;AAAA;AAAA;AAAA;AAAA,0BAjEJ;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,eAyGI;AAAK,kBAAA,SAAS,EAAC,2BAAf;AAAA,yCACI;AAAK,oBAAA,SAAS,EAAC,kCAAf;AAAA,4CACI;AAAA,8CACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADJ,eAEI;AAAO,wBAAA,KAAK,EAAExD,aAAa,CAACE,MAA5B;AAAoC,wBAAA,QAAQ,EAAE+C,CAAC,IAAI;AAAChD,0BAAAA,gBAAgB,CAACoC,KAAK,KAAK,EACvB,GAAGA,KADoB;AAEvBnC,4BAAAA,MAAM,EAAE+C,CAAC,CAACC,MAAF,CAAStD;AAFM,2BAAL,CAAN,CAAhB;AAGI;AAHxD;AAAA;AAAA;AAAA;AAAA,8BAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,4BADJ,eAQI;AAAA,8CACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADJ,eAEI;AAAO,wBAAA,KAAK,EAAEI,aAAa,CAACG,aAA5B;AAA2C,wBAAA,QAAQ,EAAE8C,CAAC,IAAI;AAAChD,0BAAAA,gBAAgB,CAACoC,KAAK,KAAK,EAC9B,GAAGA,KAD2B;AAE9BlC,4BAAAA,aAAa,EAAE8C,CAAC,CAACC,MAAF,CAAStD;AAFM,2BAAL,CAAN,CAAhB;AAGH;AAHxD;AAAA;AAAA;AAAA;AAAA,8BAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,4BARJ,eAeI;AAAA,8CACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADJ,eAEI;AAAO,wBAAA,KAAK,EAAEI,aAAa,CAACI,eAA5B;AAA6C,wBAAA,QAAQ,EAAE6C,CAAC,IAAI;AAAChD,0BAAAA,gBAAgB,CAACoC,KAAK,KAAK,EAChC,GAAGA,KAD6B;AAEhCjC,4BAAAA,eAAe,EAAE6C,CAAC,CAACC,MAAF,CAAStD;AAFM,2BAAL,CAAN,CAAhB;AAGL;AAHxD;AAAA;AAAA;AAAA;AAAA,8BAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,4BAfJ,eAsBI;AAAA,8CACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADJ,eAEI;AAAO,wBAAA,KAAK,EAAEI,aAAa,CAACK,SAA5B;AAAuC,wBAAA,QAAQ,EAAE4C,CAAC,IAAI;AAAChD,0BAAAA,gBAAgB,CAACoC,KAAK,KAAK,EAC1B,GAAGA,KADuB;AAE1BhC,4BAAAA,SAAS,EAAE4C,CAAC,CAACC,MAAF,CAAStD;AAFM,2BAAL,CAAN,CAAhB;AAGC;AAHxD;AAAA;AAAA;AAAA;AAAA,8BAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,4BAtBJ,eA6BI;AAAA,8CACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADJ,eAEI;AAAO,wBAAA,KAAK,EAAEI,aAAa,CAACM,QAA5B;AAAsC,wBAAA,QAAQ,EAAE2C,CAAC,IAAI;AAAChD,0BAAAA,gBAAgB,CAACoC,KAAK,KAAK,EACzB,GAAGA,KADsB;AAEzB/B,4BAAAA,QAAQ,EAAE2C,CAAC,CAACC,MAAF,CAAStD;AAFM,2BAAL,CAAN,CAAhB;AAGE;AAHxD;AAAA;AAAA;AAAA;AAAA,8BAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,4BA7BJ,eAoCI;AAAA,8CACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADJ,eAEI;AAAO,wBAAA,KAAK,EAAEI,aAAa,CAACO,KAA5B;AAAmC,wBAAA,QAAQ,EAAE0C,CAAC,IAAI;AAAChD,0BAAAA,gBAAgB,CAACoC,KAAK,KAAK,EACtB,GAAGA,KADmB;AAEtB9B,4BAAAA,KAAK,EAAE0C,CAAC,CAACC,MAAF,CAAStD;AAFM,2BAAL,CAAN,CAAhB;AAGK;AAHxD;AAAA;AAAA;AAAA;AAAA,8BAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,4BApCJ,eA2CI;AAAA,8CACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADJ,eAEI;AAAQ,wBAAA,KAAK,EAAEI,aAAa,CAACQ,SAA7B;AAAwC,wBAAA,QAAQ,EAAEyC,CAAC,IAAI;AAAChD,0BAAAA,gBAAgB,CAACoC,KAAK,KAAK,EAC3B,GAAGA,KADwB;AAE3B7B,4BAAAA,SAAS,EAAEyC,CAAC,CAACC,MAAF,CAAStD;AAFO,2BAAL,CAAN,CAAhB;AAGA,yBAHxD;AAAA,gDAII;AAAQ,0BAAA,QAAQ,MAAhB;AAAiB,0BAAA,QAAQ,MAAzB;AAA0B,0BAAA,KAAK,EAAC;AAAhC;AAAA;AAAA;AAAA;AAAA,gCAJJ,eAKI;AAAQ,0BAAA,KAAK,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCALJ,eAMI;AAAQ,0BAAA,KAAK,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCANJ;AAAA;AAAA;AAAA;AAAA;AAAA,8BAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,4BA3CJ,eAsDI;AAAA,8CACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADJ,eAEI;AAAQ,wBAAA,KAAK,EAAEI,aAAa,CAACP,KAA7B;AAAoC,wBAAA,QAAQ,EAAEwD,CAAC,IAAI;AAAChD,0BAAAA,gBAAgB,CAACoC,KAAK,KAAK,EACvB,GAAGA,KADoB;AAEvB5C,4BAAAA,KAAK,EAAEwD,CAAC,CAACC,MAAF,CAAStD;AAFO,2BAAL,CAAN,CAAhB;AAGI,yBAHxD;AAAA,gDAII;AAAQ,0BAAA,QAAQ,MAAhB;AAAiB,0BAAA,QAAQ,MAAzB;AAA0B,0BAAA,KAAK,EAAC;AAAhC;AAAA;AAAA;AAAA;AAAA,gCAJJ,eAKI;AAAQ,0BAAA,KAAK,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCALJ,eAMI;AAAQ,0BAAA,KAAK,EAAC,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCANJ;AAAA;AAAA;AAAA;AAAA;AAAA,8BAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,4BAtDJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,wBAzGJ;AAAA;AAAA;AAAA;AAAA;AAAA,sBAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,GAuLCjB,KAAK,KAAK,UAAX,gBACE,qCADF,gBAIE;AAhNR;AADJ;AAAA;AAAA;AAAA;AAAA,gBAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAJR,qBADH,GAgPCM,MAAM,IAAI,CAACI,KAAX,iBACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,6BACI;AAAG,QAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAlPR,mBADJ;AAyPH,CA1UD;;GAAMZ,gB;UAiBcP,U,EACIC,S;;;KAlBlBM,gB;AA4UN,eAAeA,gBAAf","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\nimport {useHistory, useParams} from \"react-router-dom\"\nimport itemsAPI from '../API/items'\nimport ModelNode from '../Components/Model-Node';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\n\nconst CreateExperiment = ({currentUser}) => {\n    const [stage, setStage] = useState(\"setup\");\n    const [title, setTitle] = useState(\"\");\n    const [inputValue, setInputValue] = useState()\n    const [loaded, setLoaded] = useState(false)\n    const [noData, setNoData] = useState()\n    const [exist, setExist] = useState(false)\n    const [visibility, setVisibility] = useState(false);\n    const [model, setModel] = useState([{type: \"Input\", value: \"3\", activation: \"\"}])\n    const [selectedNode, setSelectedNode] = useState(0)\n    const [configuration, setConfiguration] = useState({epochs: \"\", trainingSplit: \"\", validationSplit: \"\", testSplit: \"\", \n                                                        maxError: \"\", batch: \"\", optimiser: \"Sigmoid\", model: \"Regression\"})\n    const [experiments, setExperiments] = useState([]);\n    const [addNode, setAddNode] = useState(false)\n    const [disableTrain, setDisabledTrain] = useState(true)\n    const [refreshDiagram, setRefreshDiagram] = useState()\n    const modelRef = useRef(null)\n    const history = useHistory();\n    const workspaceID = useParams().id;\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const experiments = await itemsAPI.get(`/created-experiments/${workspaceID}`);\n                const workspace = await itemsAPI.get(`/${workspaceID}?type=workspace`);\n\n                if (workspace.data.data.creator === currentUser.id) {\n                    addOpenItems(workspace.data.data._id, workspace.data.data.title, workspace.data.data.type)\n                }\n\n                fetch(`http://127.0.0.1:5000/files/${workspace.data.data.dataset.datafile}.csv`)\n                    .then(response => response.text())\n                    .then(text => {\n                        setNoData(false)\n                    }).catch(() => {\n                        setNoData(true)\n                    });\n\n                experiments.data.data.experiments.map((experiment) => {\n                    setExperiments(state => [...state, experiment.title]);\n                })\n\n                setExist(true)\n                setLoaded(true);\n            } catch (err) {\n                setExist(false)\n                setLoaded(true)\n            }\n        }\n        fetchData();\n    }, [])\n\n    useEffect(() => {\n        if (modelRef.current) {\n            modelRef.current.scrollIntoView({\n                behavior: 'smooth',\n                block: 'end',\n                inline: 'end'\n            })\n        }\n    }, [model, addNode])\n\n    const next = () => {\n        if (stage === \"setup\" && title !== \"\" && !experiments.includes(title)) {\n            setStage(\"modelling\")\n        }\n        if (stage === \"modelling\" && model.length > 2 && model[model.length-1].type === \"Output\" && configuration.epochs !== \"\" && \n            configuration.trainingSplit !== \"\" && configuration.validationSplit !== \"\" && configuration.testSplit !== \"\" && \n            configuration.maxError !== \"\" && configuration.batch !== \"\" && configuration.optimiser !== \"\" && \n            configuration.model !== \"\") {\n            setStage(\"training\")\n        }\n        if (stage === \"training\" && !disableTrain) {\n            setStage(\"evaluation\")\n        }\n    }\n\n    const cancel = () => {\n        history.replace(`/${workspaceID}`);\n    }\n\n    return (\n        <>\n            {loaded && exist ?\n                <>\n                    {noData ?\n                        <p className=\"end-items\">Cannot find dataset</p>\n                    :   \n                        <div className=\"sidebar-body\">\n                            <div className=\"create-sidebar\">\n                                <h1>Create Experiment</h1> \n                                <div className=\"create-item-header\">\n                                    <p className=\"create-item-title\">{title}</p> \n                                </div>\n                                <button className={`${\"create-sidebar-stage\"} ${stage === \"setup\" ? \"create-sidebar-stage-selected\" : \"create-sidebar-stage-unselected\"}`}\n                                        disabled={stage === \"setup\"}\n                                        onClick={() => {setStage(\"setup\")}}>Setup</button>\n                                <button className={`${\"create-sidebar-stage\"} ${stage === \"modelling\" ? \"create-sidebar-stage-selected\" : \"create-sidebar-stage-unselected\"}`}\n                                        disabled={stage === \"setup\" || stage === \"modelling\"}\n                                        onClick={() => {setStage(\"modelling\")}}>Modelling</button>\n                                <button className={`${\"create-sidebar-stage\"} ${stage === \"training\" ? \"create-sidebar-stage-selected\" : \"create-sidebar-stage-unselected\"}`}\n                                        disabled={stage === \"setup\" || stage === \"modelling\" || stage === \"training\"}\n                                        onClick={() => {setStage(\"training\")}}>Training</button>\n                                <button className={`${\"create-sidebar-stage\"} ${stage === \"evaluation\" ? \"create-sidebar-stage-selected\" : \"create-sidebar-stage-unselected\"}`}\n                                        disabled>Evaluation</button>\n                            </div>\n                            <div className=\"inner-body\">\n                                <>\n                                    {stage === \"setup\" ?\n                                        <div className=\"create-item-setup-information\">\n                                            <div className=\"create-item-nav\">   \n                                                <p className=\"create-item-filename\">Experiment Information</p>\n                                                <button className=\"white-button create-item-cancel\"\n                                                        onClick={() => {cancel()}}>Cancel</button>\n                                                <button className=\"blue-button\"\n                                                        onClick={() => {next()}}>Next</button>\n                                            </div>\n                                            <input className=\"create-item-title\"\n                                                    placeholder=\"Title\"\n                                                    onChange={e => {setTitle(e.target.value)}}\n                                                    value={title} />\n                                            <div className=\"create-item-setup\">\n                                                <label className=\"create-item-setup-label\">Public?</label>\n                                                <input type=\"checkbox\" \n                                                        onChange={() => {setVisibility(previous => !previous)}}\n                                                        checked={visibility} />\n                                            </div>\n                                        </div>\n                                    : (stage === \"modelling\") ?\n                                        <div className=\"create-item-modelling\">\n                                            <div className=\"create-item-modelling-top\">   \n                                                <button className=\"white-button create-item-cancel\"\n                                                        onClick={() => {cancel()}}>Cancel</button>\n                                                <button className=\"blue-button\"\n                                                        onClick={() => {next()}}>Train</button>\n                                            </div>\n                                            <div className=\"create-item-modelling-body\">\n                                                <div className=\"create-item-model\">\n                                                    <div className=\"create-item-model-diagram\" key={refreshDiagram}>\n                                                        {model.map((node, i) => {\n                                                            return (\n                                                                <div key={i}>\n                                                                    <div className={\"create-item-model-diagram-node\"}>\n                                                                        <div onClick={() => {setSelectedNode(i)}}>\n                                                                            <ModelNode setSelectedNode={setSelectedNode} type={node.type} value={node.value} selected={i === selectedNode} last={i === model.length-1} />\n                                                                        </div>\n                                                                        {node.type !== \"Input\" &&\n                                                                            <div onClick={() => {{selectedNode === i ?\n                                                                                                    setSelectedNode(state => state-1)\n                                                                                                : selectedNode < i ?\n                                                                                                    setSelectedNode(state => state)\n                                                                                                : selectedNode > i &&\n                                                                                                    <>\n                                                                                                        {selectedNode-i === 1 ?\n                                                                                                            setSelectedNode(state => state-1)\n                                                                                                        :\n                                                                                                            setSelectedNode(i)\n                                                                                                        } \n                                                                                                    </>  \n                                                                                                }\n                                                                                                model.splice(i, 1)\n                                                                                                setRefreshDiagram(new Date().getTime())}}>\n                                                                                <ClearIcon className=\"create-item-model-diagram-remove\" />\n                                                                            </div>\n                                                                        }\n                                                                    </div>\n                                                                    {i === model.length-1 && node.type !== \"Output\" &&\n                                                                        <>\n                                                                            {addNode ?\n                                                                                <div className=\"create-item-model-diagram-add\">\n                                                                                    <div onClick={() => {setAddNode(false)}}>\n                                                                                        <RemoveIcon className=\"create-item-model-diagram-add-icon\" />\n                                                                                    </div>\n                                                                                    <div className=\"create-item-model-diagram-add-options\">\n                                                                                        <button onClick={() => {setModel(state => [...state, {\n                                                                                            type: \"Dense\",\n                                                                                            value: \"0\",\n                                                                                            activation: \"\"\n                                                                                        }])\n                                                                                        setAddNode(false)\n                                                                                        }}>Dense</button>\n                                                                                        <button onClick={() => {setModel(state => [...state, {\n                                                                                            type: \"Output\",\n                                                                                            value: \"0\",\n                                                                                            activation: \"\"\n                                                                                        }])\n                                                                                        setAddNode(false)\n                                                                                        }}>Output</button>\n                                                                                    </div>\n                                                                                </div>\n                                                                            :\n                                                                                <div onClick={() => {setAddNode(true)}}>\n                                                                                    <AddIcon className=\"create-item-model-diagram-add-icon\" />\n                                                                                </div>\n                                                                            }\n                                                                        </>\n                                                                    }\n                                                                </div>\n                                                            )\n                                                        })}\n                                                        <div ref={modelRef} />\n                                                    </div>\n                                                    <div className=\"create-item-model-selected\">\n                                                        <p>{model[selectedNode].type}</p>\n                                                        <label>Units</label>\n                                                        <input value={model[selectedNode].value} \n                                                                disabled={model[selectedNode].type !== \"Input\"}\n                                                                onChange={e => {setModel(state => {\n                                                                                    const stateCopy = [...state]\n                                                                                \n                                                                                    stateCopy[selectedNode] = {\n                                                                                        ...stateCopy[selectedNode],\n                                                                                        value: e.target.value\n                                                                                    }\n                                                                                \n                                                                                    return stateCopy\n                                                                                })\n                                                                                setRefreshDiagram(new Date().getTime())}} />\n                                                        {model[selectedNode].type !== \"Output\" && model[selectedNode].type !== \"Input\" &&\n                                                            <>\n                                                                <label>Activation</label>\n                                                                <select value={model[selectedNode].activation} \n                                                                        onChange={e => {setModel(state => {\n                                                                                            const stateCopy = [...state]\n                                                                                        \n                                                                                            stateCopy[selectedNode] = {\n                                                                                                ...stateCopy[selectedNode],\n                                                                                                activation: e.target.value\n                                                                                            }\n                                                                                        \n                                                                                            return stateCopy\n                                                                                        })\n                                                                                        setRefreshDiagram(new Date().getTime())}}>\n                                                                        <option disabled selected value=\"\"></option>\n                                                                        <option value=\"Relu\">Relu</option>\n                                                                        <option value=\"Sigmoid\">Sigmoid</option>\n                                                                </select>\n                                                            </>\n                                                        }  \n                                                    </div>\n                                                </div>\n                                                <div className=\"create-item-configuration\">\n                                                    <div className=\"create-item-configuration-option\">\n                                                        <div>\n                                                            <label>Epochs</label>\n                                                            <input value={configuration.epochs} onChange={e => {setConfiguration(state => ({\n                                                                                                                    ...state,\n                                                                                                                    epochs: e.target.value\n                                                                                                                }))}} />\n                                                        </div>\n                                                        <div>\n                                                            <label>Training Split</label>\n                                                            <input value={configuration.trainingSplit} onChange={e => {setConfiguration(state => ({\n                                                                                                                    ...state,\n                                                                                                                    trainingSplit: e.target.value\n                                                                                                                }))}} />\n                                                        </div>\n                                                        <div>\n                                                            <label>Validation Split</label>\n                                                            <input value={configuration.validationSplit} onChange={e => {setConfiguration(state => ({\n                                                                                                                    ...state,\n                                                                                                                    validationSplit: e.target.value\n                                                                                                                }))}} />\n                                                        </div>\n                                                        <div>\n                                                            <label>Test Split</label>\n                                                            <input value={configuration.testSplit} onChange={e => {setConfiguration(state => ({\n                                                                                                                    ...state,\n                                                                                                                    testSplit: e.target.value\n                                                                                                                }))}} />\n                                                        </div>\n                                                        <div>\n                                                            <label>Maximum Error</label>\n                                                            <input value={configuration.maxError} onChange={e => {setConfiguration(state => ({\n                                                                                                                    ...state,\n                                                                                                                    maxError: e.target.value\n                                                                                                                }))}} />\n                                                        </div>\n                                                        <div>\n                                                            <label>Batch Size</label>\n                                                            <input value={configuration.batch} onChange={e => {setConfiguration(state => ({\n                                                                                                                    ...state,\n                                                                                                                    batch: e.target.value\n                                                                                                                }))}} />\n                                                        </div>\n                                                        <div>\n                                                            <label>Optimiser</label>\n                                                            <select value={configuration.optimiser} onChange={e => {setConfiguration(state => ({\n                                                                                                                    ...state,\n                                                                                                                    optimiser: e.target.value\n                                                                                                                }))}}>\n                                                                <option disabled selected value=\"\"></option>\n                                                                <option value=\"Sigmoid\">Sigmoid</option>\n                                                                <option value=\"Relu\">Relu</option>\n                                                            </select>\n                                                        </div>\n                                                        <div>\n                                                            <label>Model Type</label>\n                                                            <select value={configuration.model} onChange={e => {setConfiguration(state => ({\n                                                                                                                    ...state,\n                                                                                                                    model: e.target.value\n                                                                                                                }))}}>\n                                                                <option disabled selected value=\"\"></option>\n                                                                <option value=\"Regression\">Regression</option>\n                                                                <option value=\"Classification\">Classification</option>\n                                                            </select>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    : (stage === \"training\") ?\n                                        <>\n                                        </>\n                                    :\n                                        <>\n                                        </>\n                                    }\n                                </>\n                            </div>\n                        </div>\n                    }\n                </>\n            : loaded && !exist &&\n                <div className=\"width-body\">  \n                    <p className=\"item-exist\">Cannot find workspace</p>\n                </div>\n            }    \n        </>\n    )\n}\n\nexport default CreateExperiment\n"]},"metadata":{},"sourceType":"module"}