{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Dataset.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useContext } from 'react';\nimport { useHistory, useParams } from \"react-router-dom\";\nimport usersAPI from '../API/users';\nimport itemsAPI from '../API/items';\nimport globalAPI from '../API/global';\nimport imageAPI from '../API/images';\nimport fileAPI from '../API/files';\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport CloseIcon from '@mui/icons-material/Close';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport Shortcut from '../Components/Shortcut';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Dataset = _ref => {\n  _s();\n\n  let {\n    currentUser,\n    type\n  } = _ref;\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [visibility, setVisibility] = useState(false);\n  const [rgb, setRgb] = useState(false);\n  const [bookmarked, setBookmarked] = useState();\n  const [upvoted, setUpvoted] = useState();\n  const [upvotes, setUpvotes] = useState();\n  const [updated, setUpdated] = useState();\n  const [picture, setPicture] = useState();\n  const [date, setDate] = useState(\"\");\n  const [start, setStart] = useState(0);\n  const [end, setEnd] = useState(30);\n  const [page, setPage] = useState(1);\n  const [image, setImage] = useState();\n  const [dataset, setDataset] = useState([]);\n  const [labels, setLabels] = useState([]);\n  const [appendedLabels, setAppendedLabels] = useState([]);\n  const [copyData, setCopyData] = useState(true);\n  const [changedSettings, setChangedSettings] = useState(false);\n  const [changedData, setChangedData] = useState(false);\n  const [uploadedImages, setUploadedImages] = useState([]);\n  const [appendedImages, setAppendedImages] = useState([]);\n  const [imageFiles, setImageFiles] = useState([]);\n  const [assignedLabels, setAssignedLabels] = useState([]);\n  const [refreshData, setRefreshData] = useState();\n  const [refreshLabels, setRefreshLabels] = useState();\n  const [loaded, setLoaded] = useState(false);\n  const [exist, setExist] = useState();\n  const [addLabel, setAddLabel] = useState(\"\");\n  const [disableCreate, setDisabledCreate] = useState(false);\n  const {\n    addOpenItems,\n    removeOpenItems\n  } = useContext(OpenItemsContext);\n  const colours = [\"label-blue1\", \"label-red\", \"label-green1\", \"label-orange1\", \"label-pink\", \"label-orange2\", \"label-blue2\", \"label-yellow1\", \"label-green2\", \"label-yellow2\"];\n  const datasetID = useParams().id;\n  const copyInterval = useRef(0);\n  const history = useHistory();\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (type === \"create\") {\n          const dataset = await usersAPI.get(\"/created?type=dataset\");\n          dataset.data.data.map(dataset => {\n            setDataset(previous => [...previous, dataset.title]);\n          });\n          setExist(true);\n          setLoaded(true);\n        } else {\n          const dataset = await itemsAPI.get(`/${datasetID}?type=dataset`);\n\n          if (dataset.data.data.self) {\n            addOpenItems(dataset.data.data._id, dataset.data.data.title, dataset.data.data.type);\n          }\n\n          setDataset(dataset.data.data);\n          setUpdated(dataset.data.data.updated);\n          setBookmarked(dataset.data.data.bookmarked);\n          setUpvoted(dataset.data.data.upvoted);\n          setPicture(dataset.data.data.picture);\n          setUpvotes(dataset.data.data.upvotes);\n          setVisibility(dataset.data.data.visibility);\n          setTitle(dataset.data.data.title);\n          setDescription(dataset.data.data.description);\n          setLabels(dataset.data.data.labels);\n          setRgb(dataset.data.data.rgb);\n          fetch(`http://127.0.0.1:5000/files/${dataset.data.data.imageFile}/labels.json`).then(response => response.json()).then(images => {\n            images.map(image => {\n              setUploadedImages(state => [...state, image.filename]);\n              setAssignedLabels(state => [...state, image.label]);\n            });\n            setExist(true);\n            setLoaded(true);\n          }).catch(() => {\n            setExist(true);\n            setLoaded(true);\n          });\n        }\n      } catch (err) {\n        setExist(false);\n        setLoaded(true);\n      }\n    };\n\n    fetchData();\n  }, []);\n  useEffect(() => {\n    if (loaded && exist) {\n      const updatedDate = new Date(updated);\n      const currentDate = new Date();\n\n      if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365).toString()} years ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n        setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24)).toString()} days ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600)).toString()} hours ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60)).toString()} minutes ago`);\n      } else {\n        setDate(\"Updated just now\");\n      }\n    }\n  }, [loaded, updated]);\n\n  const copiedInterval = () => {\n    clearInterval(copyInterval.current);\n    navigator.clipboard.writeText(dataset.datafile);\n    setCopyData(false);\n    copyInterval.current = setInterval(() => {\n      setCopyData(true);\n    }, 800);\n    return () => {\n      clearInterval(copyInterval.current);\n    };\n  };\n\n  const addFunctionKey = async e => {\n    if (e.key === \"Enter\" && addLabel !== \"\" && !labels.includes(addLabel)) {\n      setLabels(state => [...state, addLabel]);\n      setChangedSettings(true);\n      setAddLabel(\"\");\n      newLabel();\n    }\n  };\n\n  const newLabel = async () => {\n    try {\n      const formData = new FormData();\n      formData.append('id', dataset.imageFile);\n      formData.append('label', addLabel);\n      await fileAPI.post(\"/add-label\", formData).then(() => {\n        console.log(labels);\n        updateDataset();\n      });\n    } catch (err) {}\n  };\n\n  const deleteLabel = async index => {\n    try {\n      assignedLabels.map((assignedLabel, j) => {\n        if (assignedLabel === labels[index]) {\n          setAssignedLabels(state => {\n            const stateCopy = [...state];\n            stateCopy[j] = \"No label\";\n            return stateCopy;\n          });\n        }\n      });\n      const formData = new FormData();\n      formData.append('id', dataset.imageFile);\n      formData.append('label', addLabel);\n      await fileAPI.post(\"/delete-label\", formData);\n      labels.splice(index, 1);\n      setRefreshLabels(new Date().getTime());\n    } catch (err) {}\n  };\n\n  const updateUpvote = async () => {\n    try {\n      await globalAPI.put(`/upvote/${datasetID}?state=${upvoted}`);\n\n      if (upvoted) {\n        setUpvotes(state => state - 1);\n      } else {\n        setUpvotes(state => state + 1);\n      }\n\n      setUpvoted(state => !state);\n    } catch (err) {}\n  };\n\n  const updateBookmark = async () => {\n    try {\n      await globalAPI.put(`/bookmark/${datasetID}?state=${bookmarked}`);\n      setBookmarked(state => !state);\n    } catch (err) {}\n  };\n\n  const updateVisibility = async () => {\n    try {\n      await globalAPI.put(`/visibility/${datasetID}`);\n      setVisibility(state => !state);\n    } catch (err) {}\n  };\n\n  const previousPage = () => {\n    if (page > 1) {\n      setStart((page - 2) * 30);\n      setEnd((page - 1) * 30);\n      setPage(state => state - 1);\n      setRefreshData(new Date().getTime());\n    }\n  };\n\n  const nextPage = () => {\n    if (page * 30 < uploadedImages.length && uploadedImages.length > 30) {\n      setPage(state => state + 1);\n      setStart(page * 30);\n      setEnd((page + 1) * 30);\n      setRefreshData(new Date().getTime());\n    }\n  };\n\n  const deleteImage = async (filename, index, label) => {\n    uploadedImages.splice(index, 1);\n    assignedLabels.splice(index, 1);\n\n    if (type === \"view\") {\n      const formData = new FormData();\n      formData.append('id', dataset.imageFile);\n      formData.append('index', index);\n      formData.append('label', label);\n      formData.append('filename', filename);\n      updateDataset();\n\n      try {\n        await fileAPI.post(\"/delete-image\", formData);\n      } catch (err) {}\n    }\n\n    setRefreshData(new Date().getTime());\n  };\n\n  const addImages = async () => {\n    for (let i = 0; i < imageFiles.length; i++) {\n      setUploadedImages(state => [...state, imageFiles[i]]);\n    }\n\n    setAssignedLabels(Array(imageFiles).fill(\"No label\"));\n    setPage(1);\n    setRefreshData(new Date().getTime());\n    setImageFiles([]);\n  };\n\n  const replaceImages = async () => {\n    if (type === \"create\") {\n      for (let i = 0; i < imageFiles.length; i++) {\n        setUploadedImages(state => [...state, imageFiles[i]]);\n      }\n    } else {\n      const formData = new FormData();\n      formData.append('id', dataset.imageFile);\n\n      for (let i = 0; i < imageFiles.length; i++) {\n        formData.append('data[]', imageFiles[i]);\n        formData.append('labels[]', assignedLabels[i]);\n      }\n\n      updateDataset();\n\n      try {\n        await fileAPI.post(\"/replace-image\", formData);\n\n        for (let i = 0; i < imageFiles.length; i++) {\n          setUploadedImages(state => [...state, i]);\n        }\n      } catch (err) {}\n    }\n\n    setAssignedLabels(Array(imageFiles).fill(\"No label\"));\n    setPage(1);\n    setRefreshData(new Date().getTime());\n    setImageFiles([]);\n  };\n\n  const appendImages = () => {\n    for (let i = 0; i < imageFiles.length; i++) {\n      setAppendedImages(state => [...state, imageFiles[i]]);\n    }\n\n    setAppendedLabels(Array(imageFiles).fill(\"No label\"));\n    setImageFiles([]);\n  };\n\n  const deleteAppended = index => {\n    appendedImages.splice(index, 1);\n    appendedLabels.splice(index, 1);\n  };\n\n  const uploadAppended = async () => {\n    if (type === \"create\") {\n      for (let i = 0; i < appendedImages.length; i++) {\n        setUploadedImages(state => [...state, appendedImages[i]]);\n      }\n\n      setAssignedLabels(state => [...state, ...appendedLabels]);\n    } else {\n      let filenames = [];\n      const formData = new FormData();\n      formData.append('id', dataset.imageFile);\n      formData.append('last', uploadedImages.length - 1);\n\n      for (let i = 0; i < appendedImages.length; i++) {\n        formData.append('data[]', appendedImages[i]);\n        formData.append('labels[]', appendedLabels[i]);\n        formData.append('filenames[]', parseInt(uploadedImages[uploadedImages.length - 1]) + i + 1);\n        filenames.push((parseInt(uploadedImages[uploadedImages.length - 1]) + i + 1).toString());\n      }\n\n      setUploadedImages(state => [...state, ...filenames]);\n      setAssignedLabels(state => [...state, ...appendedLabels]);\n      updateDataset();\n\n      try {\n        await fileAPI.post(\"/append-image\", formData);\n      } catch (err) {}\n    }\n\n    setAppendedImages([]);\n    setAppendedLabels([]);\n    setRefreshData(new Date().getTime());\n  };\n\n  const uploadImage = async () => {\n    setDisabledCreate(true);\n\n    if (uploadedImages.length !== 0 && !assignedLabels.includes(\"No label\") && title !== \"\" && description !== \"\") {\n      const formData = new FormData();\n      const id = new Date().toISOString();\n      formData.append('id', id);\n\n      for (let i = 0; i < uploadedImages.length; i++) {\n        formData.append('data[]', uploadedImages[i]);\n        formData.append('labels[]', assignedLabels[i]);\n      }\n\n      try {\n        await fileAPI.post(\"/upload\", formData);\n      } catch (err) {}\n\n      if (image) {\n        const formImage = new FormData();\n        formImage.append('image', image);\n\n        try {\n          const imageResponse = await imageAPI.post(\"/upload-image\", formImage);\n          uploadDataset(imageResponse.data.data, id);\n        } catch (err) {}\n      } else {\n        uploadDataset(\"default.png\", id);\n      }\n    } else {\n      setDisabledCreate(false);\n    }\n  };\n\n  const uploadDataset = async (imageName, id) => {\n    try {\n      const datasetResponse = await itemsAPI.post(\"/\", {\n        title: title,\n        imageFile: id,\n        creator: currentUser.id,\n        description: description,\n        picture: imageName,\n        upvotes: [],\n        bookmarks: [],\n        labels: labels,\n        rgb: rgb,\n        updated: new Date().toISOString(),\n        visibility: visibility,\n        type: \"dataset\"\n      });\n      history.push(`/dataset/${datasetResponse.data.data}`);\n    } catch (err) {}\n  };\n\n  const updateDataset = async () => {\n    if (image) {\n      try {\n        const formImage = new FormData();\n        formImage.append('image', image);\n        const tempPicture = picture;\n        const imageResponse = await imageAPI.post(\"/upload\", formImage);\n        await itemsAPI.put(`/${datasetID}?type=dataset`, {\n          title: title,\n          description: description,\n          picture: imageResponse.data.data,\n          labels: labels,\n          rgb: rgb,\n          updated: new Date().toISOString()\n        });\n        setImage(undefined);\n        setPicture(imageResponse.data.data);\n\n        if (tempPicture !== \"default.png\") {\n          await imageAPI.put('/remove', {\n            picture: tempPicture\n          });\n        }\n      } catch (err) {}\n    } else {\n      try {\n        await itemsAPI.put(`/${datasetID}?type=dataset`, {\n          title: title,\n          description: description,\n          picture: picture,\n          labels: labels,\n          rgb: rgb,\n          updated: new Date().toISOString()\n        });\n      } catch (err) {}\n    }\n\n    setUpdated(new Date().toISOString());\n    setChangedData(false);\n    setChangedSettings(false);\n  };\n\n  const deleteDataset = async () => {\n    try {\n      const formData = new formData();\n      formData.append('id', dataset.imageFile);\n      await itemsAPI.delete(`/${datasetID}`);\n      await fileAPI.post(\"/remove-dataset\", formData);\n      removeOpenItems(datasetID);\n      history.replace(\"/home\");\n    } catch (err) {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loaded && exist ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sidebar-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"http://localhost:3000/dataset.png\",\n            className: !(type === \"view\" && !dataset.self) ? \"create-item-edit-image\" : undefined\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: `create-item-title ${!(type === \"view\" && !dataset.self) && \"create-item-edit-input\"}`,\n            placeholder: \"Title\",\n            onChange: e => {\n              setTitle(e.target.value);\n              setChangedSettings(true);\n            },\n            disabled: !(dataset.self || type === \"create\"),\n            value: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: `create-item-description ${!(type === \"view\" && !dataset.self) && \"create-item-edit-textarea\"}`,\n          placeholder: \"Description\",\n          onChange: e => {\n            setDescription(e.target.value);\n            setChangedSettings(true);\n          },\n          disabled: !(dataset.self || type === \"create\"),\n          value: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 25\n        }, this), (dataset.self || type === \"create\") && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-item-setup\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"create-item-setup-label\",\n              children: \"Picture\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 495,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"create-item-setup-input\",\n              type: \"file\",\n              name: \"image\",\n              onChange: e => {\n                setImage(e.target.files[0]);\n                setChangedSettings(true);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 496,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 494,\n            columnNumber: 33\n          }, this), type === \"create\" && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-item-setup\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"create-item-setup-label\",\n              children: \"Public?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 506,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              onChange: () => {\n                setVisibility(previous => !previous);\n                setChangedSettings(true);\n              },\n              checked: visibility\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 507,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 505,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-item-setup\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"create-item-setup-label\",\n              children: \"RGB Images?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 516,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              onChange: () => {\n                setRgb(previous => !previous);\n                setChangedSettings(true);\n              },\n              checked: rgb\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 517,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 515,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true), !dataset.self && type !== \"create\" && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"item-creator\",\n          children: dataset.creatorName.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 64\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-information\",\n          children: [type !== \"create\" && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"item-date\",\n            children: date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 51\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 29\n          }, this), type !== \"create\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(ThumbUpIcon, {\n              className: `item-icon ${upvoted ? \"blue2\" : \"white\"}`,\n              onClick: () => {\n                updateUpvote();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 532,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: upvoted ? \"blue2\" : \"white\",\n              children: upvotes\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 533,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true), !dataset.self && type !== \"create\" && /*#__PURE__*/_jsxDEV(BookmarkIcon, {\n            className: `item-icon ${bookmarked ? \"blue2\" : \"white\"}`,\n            onClick: () => {\n              updateBookmark();\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 536,\n            columnNumber: 68\n          }, this), dataset.self && type !== \"create\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: visibility ? /*#__PURE__*/_jsxDEV(VisibilityIcon, {\n              className: \"item-visibility\",\n              onClick: () => {\n                updateVisibility();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 540,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(VisibilityOffIcon, {\n              className: \"item-visibility\",\n              onClick: () => {\n                updateVisibility();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 542,\n              columnNumber: 41\n            }, this)\n          }, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 25\n        }, this), type === \"view\" && !dataset.self && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sidebar-divided\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 549,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sidebar-dataset-copy\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [copyData ? /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Data ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 552,\n                columnNumber: 53\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Copied\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 552,\n                columnNumber: 70\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                disabled: !copyData,\n                onClick: () => {\n                  copiedInterval();\n                },\n                children: /*#__PURE__*/_jsxDEV(ContentCopyIcon, {\n                  className: \"dataset-copy-icon\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 554,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 553,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 551,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n              href: `http://127.0.0.1:5000/files/${dataset.imageFile}`,\n              download: true,\n              children: /*#__PURE__*/_jsxDEV(DownloadIcon, {\n                className: \"dataset-download-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 558,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 557,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 550,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true), type === \"view\" && !dataset.self && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sidebar-divided\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 565,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Shortcut, {\n            type: \"related\",\n            datasetID: datasetID\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 566,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true), type === \"view\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: dataset.self && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sidebar-divided\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 573,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"blue-button item-save\",\n              disabled: !changedSettings && !changedData,\n              onClick: () => {\n                updateDataset();\n              },\n              children: \"Save Changes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 574,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"text-button item-delete\",\n              onClick: () => {\n                deleteDataset();\n              },\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 577,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true)\n        }, void 0, false)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"workspace-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"workspace-inner\",\n            children: type === \"create\" || dataset.self ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"view-items-top\",\n                children: type === \"create\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                    children: \"Create Dataset\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 592,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"blue-button\",\n                    disabled: disableCreate,\n                    onClick: () => {\n                      uploadImage();\n                    },\n                    children: \"Create\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 593,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Dataset\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 598,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 589,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-dataset-upload\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"file\",\n                  name: \"data\",\n                  accept: \"image/*\",\n                  multiple: true,\n                  onChange: e => {\n                    setImageFiles(e.target.files);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 602,\n                  columnNumber: 45\n                }, this), type === \"create\" && uploadedImages.length === 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"white-button\",\n                  disabled: imageFiles.length === 0,\n                  onClick: () => {\n                    addImages();\n                    setChangedData(true);\n                  },\n                  children: \"Add\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 608,\n                  columnNumber: 49\n                }, this), (dataset.self || type === \"create\") && uploadedImages.length !== 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"white-button\",\n                    disabled: imageFiles.length === 0,\n                    onClick: () => {\n                      setUploadedImages([]);\n                      replaceImages();\n                      setChangedData(true);\n                    },\n                    children: \"Replace\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 617,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"white-button\",\n                    disabled: imageFiles.length === 0,\n                    onClick: () => {\n                      if (appendedImages.length !== 0) {\n                        setAppendedImages([]);\n                        setAppendedLabels([]);\n                      }\n\n                      appendImages();\n                      setChangedData(true);\n                    },\n                    children: \"Add\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 624,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true), uploadedImages.length !== 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"create-dataset-pagination\",\n                  children: [/*#__PURE__*/_jsxDEV(ArrowBackIosNewIcon, {\n                    className: \"create-dataset-pagination-icon\",\n                    onClick: () => {\n                      previousPage();\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 638,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"Page \", page, \" / \", Math.ceil(uploadedImages.length / 30)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 639,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(ArrowForwardIosIcon, {\n                    className: \"create-dataset-pagination-icon\",\n                    onClick: () => {\n                      nextPage();\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 640,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 637,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 601,\n                columnNumber: 41\n              }, this), (type === \"create\" || dataset.self) && appendedImages.length !== 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-dataset-appended\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"create-dataset-appended-header\",\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    children: \"Uploaded Images\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 647,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"text-button\",\n                    onClick: () => {\n                      setAppendedImages([]);\n                      setAppendedLabels([]);\n                    },\n                    children: \"Discard\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 648,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 646,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"create-dataset-appended-list\",\n                  children: appendedImages.map((image, i) => {\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"create-dataset-image\",\n                      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                        src: URL.createObjectURL(image)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 658,\n                        columnNumber: 65\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                          value: appendedLabels[i],\n                          onChange: e => {\n                            setAppendedLabels(state => {\n                              const stateCopy = [...state];\n                              stateCopy[i] = e.target.value;\n                              return stateCopy;\n                            });\n                          },\n                          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"No label\",\n                            children: \"No label\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 668,\n                            columnNumber: 73\n                          }, this), labels.map((label, j) => /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: label,\n                            children: label\n                          }, j, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 670,\n                            columnNumber: 77\n                          }, this))]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 660,\n                          columnNumber: 69\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          onClick: () => {\n                            deleteAppended(i);\n                          },\n                          children: /*#__PURE__*/_jsxDEV(DeleteIcon, {\n                            className: \"create-dataset-image-delete\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 674,\n                            columnNumber: 73\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 673,\n                          columnNumber: 69\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 659,\n                        columnNumber: 65\n                      }, this)]\n                    }, i, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 657,\n                      columnNumber: 61\n                    }, this);\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 654,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"create-dataset-appended-footer\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"blue-button\",\n                    disabled: appendedLabels.includes(\"No label\"),\n                    onClick: () => {\n                      uploadAppended();\n                    },\n                    children: \"Upload\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 682,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 681,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 645,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-dataset-images-list\",\n                children: uploadedImages.map((image, i) => {\n                  if (i >= start && i < end) {\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"create-dataset-image\",\n                      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                        src: type === \"create\" ? URL.createObjectURL(image) : `http://127.0.0.1:5000/files/${dataset.imageFile}/images/${assignedLabels[i]}/${image}.jpg`\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 693,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                          value: assignedLabels[i],\n                          onChange: e => {\n                            setAssignedLabels(state => {\n                              const stateCopy = [...state];\n                              stateCopy[i] = e.target.value;\n                              return stateCopy;\n                            });\n                            setChangedData(true);\n                            setRefreshLabels(new Date().getTime());\n                          },\n                          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"No label\",\n                            children: \"No label\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 709,\n                            columnNumber: 69\n                          }, this), labels.map((label, j) => /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: label,\n                            children: label\n                          }, j, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 711,\n                            columnNumber: 73\n                          }, this))]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 699,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          onClick: () => {\n                            deleteImage(image, i, assignedLabels[i]);\n                          },\n                          children: /*#__PURE__*/_jsxDEV(DeleteIcon, {\n                            className: \"create-dataset-image-delete\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 715,\n                            columnNumber: 69\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 714,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 698,\n                        columnNumber: 61\n                      }, this)]\n                    }, i, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 692,\n                      columnNumber: 57\n                    }, this);\n                  }\n                })\n              }, refreshData, false, {\n                fileName: _jsxFileName,\n                lineNumber: 688,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"view-items-top\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Dataset\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 727,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 726,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-dataset-images-list\",\n                children: uploadedImages.map((image, i) => {\n                  if (i >= start && i < end) {\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"create-dataset-image\",\n                      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                        src: `http://127.0.0.1:5000/files/${dataset.imageFile}/${image}.jpg`\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 734,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: /*#__PURE__*/_jsxDEV(\"p\", {\n                          children: assignedLabels[i]\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 736,\n                          columnNumber: 65\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 735,\n                        columnNumber: 61\n                      }, this)]\n                    }, i, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 733,\n                      columnNumber: 57\n                    }, this);\n                  }\n                })\n              }, refreshData, false, {\n                fileName: _jsxFileName,\n                lineNumber: 729,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 586,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-workspace-data\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"create-workspace-data-header\",\n              children: \"Labels:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 747,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sidebar-divided\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 748,\n              columnNumber: 33\n            }, this), (type === \"create\" || dataset.self) && /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"create-dataset-label-input\",\n              placeholder: \"Add Label\",\n              onChange: e => {\n                setAddLabel(e.target.value);\n              },\n              onKeyPress: addFunctionKey,\n              value: addLabel\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 750,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"create-dataset-labels-list\",\n              children: labels.map((label, i) => {\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `create-dataset-label ${colours[i % colours.length]}`,\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    children: label\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 760,\n                    columnNumber: 49\n                  }, this), (type === \"create\" || dataset.self) && /*#__PURE__*/_jsxDEV(\"div\", {\n                    onClick: () => {\n                      deleteLabel(i);\n                    },\n                    children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n                      className: \"create-dataset-label-icon\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 763,\n                      columnNumber: 57\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 762,\n                    columnNumber: 53\n                  }, this)]\n                }, i, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 759,\n                  columnNumber: 45\n                }, this);\n              })\n            }, refreshLabels, false, {\n              fileName: _jsxFileName,\n              lineNumber: 756,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 746,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 584,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 17\n    }, this) : loaded && !exist && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inner-body\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"item-exist\",\n        children: \"Cannot find dataset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 776,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 775,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(Dataset, \"IrZB+lJhAAUbiYq44ndDfx71Abc=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = Dataset;\nexport default Dataset;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dataset\");","map":{"version":3,"sources":["/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Dataset.jsx"],"names":["React","useState","useEffect","useRef","useContext","useHistory","useParams","usersAPI","itemsAPI","globalAPI","imageAPI","fileAPI","OpenItemsContext","BookmarkIcon","ThumbUpIcon","VisibilityOffIcon","VisibilityIcon","CloseIcon","DeleteIcon","ArrowForwardIosIcon","ArrowBackIosNewIcon","ContentCopyIcon","DownloadIcon","Shortcut","Dataset","currentUser","type","title","setTitle","description","setDescription","visibility","setVisibility","rgb","setRgb","bookmarked","setBookmarked","upvoted","setUpvoted","upvotes","setUpvotes","updated","setUpdated","picture","setPicture","date","setDate","start","setStart","end","setEnd","page","setPage","image","setImage","dataset","setDataset","labels","setLabels","appendedLabels","setAppendedLabels","copyData","setCopyData","changedSettings","setChangedSettings","changedData","setChangedData","uploadedImages","setUploadedImages","appendedImages","setAppendedImages","imageFiles","setImageFiles","assignedLabels","setAssignedLabels","refreshData","setRefreshData","refreshLabels","setRefreshLabels","loaded","setLoaded","exist","setExist","addLabel","setAddLabel","disableCreate","setDisabledCreate","addOpenItems","removeOpenItems","colours","datasetID","id","copyInterval","history","fetchData","get","data","map","previous","self","_id","fetch","imageFile","then","response","json","images","state","filename","label","catch","err","updatedDate","Date","currentDate","getTime","Math","floor","toString","copiedInterval","clearInterval","current","navigator","clipboard","writeText","datafile","setInterval","addFunctionKey","e","key","includes","newLabel","formData","FormData","append","post","console","log","updateDataset","deleteLabel","index","assignedLabel","j","stateCopy","splice","updateUpvote","put","updateBookmark","updateVisibility","previousPage","nextPage","length","deleteImage","addImages","i","Array","fill","replaceImages","appendImages","deleteAppended","uploadAppended","filenames","parseInt","push","uploadImage","toISOString","formImage","imageResponse","uploadDataset","imageName","datasetResponse","creator","bookmarks","tempPicture","undefined","deleteDataset","delete","replace","target","value","files","creatorName","name","ceil","URL","createObjectURL"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef, useContext} from 'react'\nimport {useHistory, useParams} from \"react-router-dom\"\nimport usersAPI from '../API/users'\nimport itemsAPI from '../API/items'\nimport globalAPI from '../API/global'\nimport imageAPI from '../API/images'\nimport fileAPI from '../API/files'\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport CloseIcon from '@mui/icons-material/Close';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport Shortcut from '../Components/Shortcut'\n\nconst Dataset = ({currentUser, type}) => {\n    const [title, setTitle] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [visibility, setVisibility] = useState(false);\n    const [rgb, setRgb] = useState(false)\n    const [bookmarked, setBookmarked] = useState()\n    const [upvoted, setUpvoted] = useState()\n    const [upvotes, setUpvotes] = useState()\n    const [updated, setUpdated] = useState()\n    const [picture, setPicture] = useState()\n    const [date, setDate] = useState(\"\")\n    const [start, setStart] = useState(0)\n    const [end, setEnd] = useState(30)\n    const [page, setPage] = useState(1)\n    const [image, setImage] = useState();\n    const [dataset, setDataset] = useState([]);\n    const [labels, setLabels] = useState([])\n    const [appendedLabels, setAppendedLabels] = useState([])\n    const [copyData, setCopyData] = useState(true)\n    const [changedSettings, setChangedSettings] = useState(false)\n    const [changedData, setChangedData] = useState(false)\n    const [uploadedImages, setUploadedImages] = useState([])\n    const [appendedImages, setAppendedImages] = useState([])\n    const [imageFiles, setImageFiles] = useState([])\n    const [assignedLabels, setAssignedLabels] = useState([])\n    const [refreshData, setRefreshData] = useState()\n    const [refreshLabels, setRefreshLabels] = useState()\n    const [loaded, setLoaded] = useState(false);\n    const [exist, setExist] = useState()\n    const [addLabel, setAddLabel] = useState(\"\")\n    const [disableCreate, setDisabledCreate] = useState(false)\n    const {addOpenItems, removeOpenItems} = useContext(OpenItemsContext);\n    const colours = [\"label-blue1\", \"label-red\", \"label-green1\", \"label-orange1\", \"label-pink\", \n        \"label-orange2\", \"label-blue2\", \"label-yellow1\", \"label-green2\", \"label-yellow2\"]\n    const datasetID = useParams().id;\n    const copyInterval = useRef(0)\n    const history = useHistory();\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                if (type === \"create\") {\n                    const dataset = await usersAPI.get(\"/created?type=dataset\");\n    \n                    dataset.data.data.map((dataset) => {\n                        setDataset(previous => [...previous, dataset.title]);\n                    })\n\n                    setExist(true)\n                    setLoaded(true)\n                } else {\n                    const dataset = await itemsAPI.get(`/${datasetID}?type=dataset`);\n\n                    if (dataset.data.data.self) {\n                        addOpenItems(dataset.data.data._id, dataset.data.data.title, dataset.data.data.type)\n                    }\n\n                    setDataset(dataset.data.data);\n                    setUpdated(dataset.data.data.updated);\n                    setBookmarked(dataset.data.data.bookmarked)\n                    setUpvoted(dataset.data.data.upvoted)\n                    setPicture(dataset.data.data.picture)\n                    setUpvotes(dataset.data.data.upvotes)\n                    setVisibility(dataset.data.data.visibility)\n                    setTitle(dataset.data.data.title)\n                    setDescription(dataset.data.data.description)\n                    setLabels(dataset.data.data.labels)\n                    setRgb(dataset.data.data.rgb)\n\n                    fetch(`http://127.0.0.1:5000/files/${dataset.data.data.imageFile}/labels.json`)\n                        .then(response => response.json())\n                        .then(images => {\n                            images.map(image => {\n                                setUploadedImages(state => [...state, image.filename])\n                                setAssignedLabels(state => [...state, image.label])\n                            })\n                            setExist(true)\n                            setLoaded(true)\n                        }).catch(() => {\n                            setExist(true)\n                            setLoaded(true)\n                        });\n                }\n            } catch (err) {\n              setExist(false)\n              setLoaded(true)\n            }\n        }\n        fetchData();\n    }, [])\n\n    useEffect(() => {\n        if (loaded && exist) {\n            const updatedDate = new Date(updated);\n            const currentDate = new Date();\n    \n            if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} years ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} days ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hours ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minutes ago`)\n            } else {\n                setDate(\"Updated just now\")\n            }\n        }\n    }, [loaded, updated])\n\n    const copiedInterval = () => {\n        clearInterval(copyInterval.current)\n        navigator.clipboard.writeText(dataset.datafile);\n        setCopyData(false);\n        copyInterval.current = setInterval(() => {\n            setCopyData(true);\n        }, 800)\n        return ()=> {clearInterval(copyInterval.current)};\n    }\n\n    const addFunctionKey = async (e) => {\n        if (e.key === \"Enter\" && addLabel !== \"\" && !labels.includes(addLabel)) {\n            setLabels(state => [...state, addLabel])\n            setChangedSettings(true)\n            setAddLabel(\"\")\n            newLabel()\n        }\n    }\n\n    const newLabel = async () => {\n        try {\n            const formData = new FormData();\n\n            formData.append('id', dataset.imageFile)\n            formData.append('label', addLabel)\n\n            await fileAPI.post(\"/add-label\", formData).then(() => {\n                console.log(labels)\n                updateDataset()\n            })\n        } catch (err) {}\n    }\n\n    const deleteLabel = async (index) => {\n        try {\n            assignedLabels.map((assignedLabel, j) => {\n                if (assignedLabel === labels[index]) {\n                    setAssignedLabels(state => {\n                        const stateCopy = [...state]\n                    \n                        stateCopy[j] = \"No label\"\n                    \n                        return stateCopy\n                    })\n                }\n            })\n\n            const formData = new FormData();\n\n            formData.append('id', dataset.imageFile)\n            formData.append('label', addLabel)\n\n            await fileAPI.post(\"/delete-label\", formData);\n\n            labels.splice(index, 1)\n            setRefreshLabels(new Date().getTime())\n        } catch (err) {}\n    }\n\n    const updateUpvote = async () => {\n        try {\n            await globalAPI.put(`/upvote/${datasetID}?state=${upvoted}`);\n\n            if (upvoted) {\n                setUpvotes(state => state-1)\n            } else {\n                setUpvotes(state => state+1)\n            }\n\n            setUpvoted(state => !state)\n        } catch (err) {}\n    }\n\n    const updateBookmark = async () => {\n        try {\n            await globalAPI.put(`/bookmark/${datasetID}?state=${bookmarked}`);\n            \n            setBookmarked(state => !state)\n        } catch (err) {}\n    }\n\n    const updateVisibility = async () => {\n        try {\n            await globalAPI.put(`/visibility/${datasetID}`);\n\n            setVisibility(state => !state)\n        } catch (err) {}\n    }\n\n    const previousPage = () => {\n        if (page > 1) {\n            setStart((page-2)*30)\n            setEnd((page-1)*30)\n            setPage(state => state-1)\n            setRefreshData(new Date().getTime())\n        }\n    }\n    \n    const nextPage = () => {\n        if (page*30 < uploadedImages.length && uploadedImages.length > 30) {\n            setPage(state => state+1)\n            setStart((page)*30)\n            setEnd((page+1)*30)\n            setRefreshData(new Date().getTime())\n        }\n    }\n\n    const deleteImage = async (filename, index, label) => {\n        uploadedImages.splice(index, 1)\n        assignedLabels.splice(index, 1)\n\n        if (type === \"view\") {\n            const formData = new FormData();\n\n            formData.append('id', dataset.imageFile)\n            formData.append('index', index)\n            formData.append('label', label)\n            formData.append('filename', filename)\n\n            updateDataset()\n\n            try {\n                await fileAPI.post(\"/delete-image\", formData);\n            } catch (err) {}\n        }\n\n        setRefreshData(new Date().getTime())\n    }\n\n    const addImages = async () => {\n        for (let i = 0; i < imageFiles.length; i++) {\n            setUploadedImages(state => [...state, imageFiles[i]])\n        }\n\n        setAssignedLabels(Array(imageFiles).fill(\"No label\"))\n        setPage(1)\n        setRefreshData(new Date().getTime())\n        setImageFiles([])\n    }\n\n    const replaceImages = async () => {\n        if (type === \"create\") {\n            for (let i = 0; i < imageFiles.length; i++) {\n                setUploadedImages(state => [...state, imageFiles[i]])\n            }\n        } else {\n            const formData = new FormData();\n\n            formData.append('id', dataset.imageFile)\n\n            for (let i = 0; i < imageFiles.length; i++) {\n                formData.append('data[]', imageFiles[i]);\n                formData.append('labels[]', assignedLabels[i]);\n            }\n\n            updateDataset()\n\n            try {\n                await fileAPI.post(\"/replace-image\", formData);\n\n                for (let i = 0; i < imageFiles.length; i++) {\n                    setUploadedImages(state => [...state, i])\n                }\n            } catch (err) {}\n        }\n        setAssignedLabels(Array(imageFiles).fill(\"No label\"))\n        setPage(1)\n        setRefreshData(new Date().getTime())\n        setImageFiles([])\n    }\n    \n    const appendImages = () => {\n        for (let i = 0; i < imageFiles.length; i++) {\n            setAppendedImages(state => [...state, imageFiles[i]])\n        }\n\n        setAppendedLabels(Array(imageFiles).fill(\"No label\"))\n        setImageFiles([])\n    }\n\n    const deleteAppended = (index) => {\n        appendedImages.splice(index, 1)\n        appendedLabels.splice(index, 1)\n    }\n\n    const uploadAppended = async () => {\n        if (type === \"create\") {\n            for (let i = 0; i < appendedImages.length; i++) {\n                setUploadedImages(state => [...state, appendedImages[i]])\n            }\n\n            setAssignedLabels(state => [...state, ...appendedLabels])\n        } else {\n            let filenames = []\n\n            const formData = new FormData();\n\n            formData.append('id', dataset.imageFile)\n            formData.append('last', uploadedImages.length-1)\n\n            for (let i = 0; i < appendedImages.length; i++) {\n                formData.append('data[]', appendedImages[i]);\n                formData.append('labels[]', appendedLabels[i]);\n                formData.append('filenames[]', parseInt(uploadedImages[uploadedImages.length-1])+i+1);\n                filenames.push((parseInt(uploadedImages[uploadedImages.length-1])+i+1).toString())\n            }\n\n            setUploadedImages(state => [...state, ...filenames])\n            setAssignedLabels(state => [...state, ...appendedLabels])\n            updateDataset()\n\n            try {\n                await fileAPI.post(\"/append-image\", formData)\n            } catch (err) {}\n        }\n\n        setAppendedImages([])\n        setAppendedLabels([])\n        setRefreshData(new Date().getTime())\n    }\n\n    const uploadImage = async () => {\n        setDisabledCreate(true)\n\n        if (uploadedImages.length !== 0 && !assignedLabels.includes(\"No label\") && title !== \"\" && description !== \"\") {\n            const formData = new FormData();\n            const id = new Date().toISOString();\n\n            formData.append('id', id)\n\n            for (let i = 0; i < uploadedImages.length; i++) {\n                formData.append('data[]', uploadedImages[i]);\n                formData.append('labels[]', assignedLabels[i]);\n            }\n\n            try {\n                await fileAPI.post(\"/upload\", formData);\n            } catch (err) {}\n\n            if (image) {\n                const formImage = new FormData();\n                formImage.append('image', image);\n                \n                try {\n                    const imageResponse = await imageAPI.post(\"/upload-image\", formImage);\n    \n                    uploadDataset(imageResponse.data.data, id)\n                } catch (err) {}\n            } else {\n                uploadDataset(\"default.png\", id)\n            }\n        } else {\n            setDisabledCreate(false)\n        }\n    }\n\n    const uploadDataset = async (imageName, id) => {\n        try {\n            const datasetResponse = await itemsAPI.post(\"/\", {\n                title: title,\n                imageFile: id,\n                creator: currentUser.id,\n                description: description,\n                picture: imageName,\n                upvotes: [],\n                bookmarks: [],\n                labels: labels,\n                rgb: rgb,\n                updated: new Date().toISOString(),\n                visibility: visibility,\n                type: \"dataset\"\n            });\n\n            history.push(`/dataset/${datasetResponse.data.data}`)\n        } catch (err) {}\n    }\n\n    const updateDataset = async () => {\n        if (image) {\n            try {\n                const formImage = new FormData();\n                formImage.append('image', image);\n    \n                const tempPicture = picture\n                const imageResponse = await imageAPI.post(\"/upload\", formImage);\n\n                await itemsAPI.put(`/${datasetID}?type=dataset`, {\n                    title: title,\n                    description: description,\n                    picture: imageResponse.data.data,\n                    labels: labels,\n                    rgb: rgb,\n                    updated: new Date().toISOString()\n                })\n\n                setImage(undefined)\n                setPicture(imageResponse.data.data)\n    \n                if (tempPicture !== \"default.png\") {\n                    await imageAPI.put('/remove', {picture: tempPicture});\n                }\n            } catch (err) {}\n        } else {\n            try {\n                await itemsAPI.put(`/${datasetID}?type=dataset`, {\n                    title: title,\n                    description: description,\n                    picture: picture,\n                    labels: labels,\n                    rgb: rgb,\n                    updated: new Date().toISOString()\n                })\n            } catch (err) {}\n        }\n\n        setUpdated(new Date().toISOString())\n        setChangedData(false)\n        setChangedSettings(false)\n    }\n\n    const deleteDataset = async () => {\n        try {\n            const formData = new formData()\n\n            formData.append('id', dataset.imageFile)\n\n            await itemsAPI.delete(`/${datasetID}`)\n            await fileAPI.post(\"/remove-dataset\", formData);\n\n            removeOpenItems(datasetID)\n            history.replace(\"/home\")\n        } catch (err) {}\n    }\n\n    return (\n        <>\n            {loaded && exist ?\n                <div className=\"main-body\">\n                    <div className=\"sidebar\">\n                        <div className=\"sidebar-header\">\n                            <img src=\"http://localhost:3000/dataset.png\"\n                                    className={!(type === \"view\" && !dataset.self) ? \"create-item-edit-image\" : undefined} />\n                            <input className={`create-item-title ${!(type === \"view\" && !dataset.self) && \"create-item-edit-input\"}`}\n                                    placeholder=\"Title\"\n                                    onChange={e => {\n                                        setTitle(e.target.value)\n                                        setChangedSettings(true)\n                                    }}\n                                    disabled={!(dataset.self || type === \"create\")}\n                                    value={title} />\n                        </div>\n                        <textarea className={`create-item-description ${!(type === \"view\" && !dataset.self) && \"create-item-edit-textarea\"}`}\n                                    placeholder=\"Description\"\n                                    onChange={e => {\n                                        setDescription(e.target.value)\n                                        setChangedSettings(true)\n                                    }}\n                                    disabled={!(dataset.self || type === \"create\")}\n                                    value={description} />\n                        {(dataset.self || type === \"create\") &&\n                            <>\n                                <div className=\"create-item-setup\">\n                                    <label className=\"create-item-setup-label\">Picture</label>\n                                    <input className=\"create-item-setup-input\"\n                                            type=\"file\" \n                                            name=\"image\" \n                                            onChange={e => {\n                                                setImage(e.target.files[0])\n                                                setChangedSettings(true)\n                                            }} />\n                                </div>\n                                {type === \"create\" &&\n                                    <div className=\"create-item-setup\">\n                                        <label className=\"create-item-setup-label\">Public?</label>\n                                        <input type=\"checkbox\" \n                                                onChange={() => {\n                                                    setVisibility(previous => !previous)\n                                                    setChangedSettings(true)\n                                                }}\n                                                checked={visibility} />\n                                    </div>\n                                }\n                                <div className=\"create-item-setup\">\n                                    <label className=\"create-item-setup-label\">RGB Images?</label>\n                                    <input type=\"checkbox\" \n                                            onChange={() => {\n                                                setRgb(previous => !previous)\n                                                setChangedSettings(true)\n                                            }}\n                                            checked={rgb} />\n                                </div>\n                            </>\n                        }\n                        {!dataset.self && type !== \"create\" && <p className=\"item-creator\">{dataset.creatorName.name}</p>}\n                        <div className=\"item-information\">\n                            {type !== \"create\" && <p className=\"item-date\">{date}</p>}\n                            <span />\n                            {type !== \"create\" &&\n                                <>\n                                    <ThumbUpIcon className={`item-icon ${upvoted ? \"blue2\" : \"white\"}`} onClick={() => {updateUpvote()}} />\n                                    <p className={upvoted ? \"blue2\" : \"white\"}>{upvotes}</p>\n                                </>\n                            }\n                            {!dataset.self && type !== \"create\" && <BookmarkIcon className={`item-icon ${bookmarked ? \"blue2\" : \"white\"}`} onClick={() => {updateBookmark()}} />}\n                            {dataset.self && type !== \"create\" && \n                                <>\n                                    {visibility ? \n                                        <VisibilityIcon className=\"item-visibility\" onClick={() => {updateVisibility()}} />\n                                    :\n                                        <VisibilityOffIcon className=\"item-visibility\" onClick={() => {updateVisibility()}} />\n                                    }\n                                </>\n                            }\n                        </div>\n                        {type === \"view\" && !dataset.self &&\n                            <>\n                                <div className=\"sidebar-divided\" />\n                                <div className=\"sidebar-dataset-copy\">\n                                    <div>\n                                        {copyData ? <p>Data ID</p> : <p>Copied</p>}\n                                        <button disabled={!copyData} onClick={() => {copiedInterval()}}>\n                                            <ContentCopyIcon className=\"dataset-copy-icon\" />\n                                        </button>\n                                    </div>\n                                    <a href={`http://127.0.0.1:5000/files/${dataset.imageFile}`} download>\n                                        <DownloadIcon className=\"dataset-download-icon\" />\n                                    </a>\n                                </div>\n                            </>\n                        }\n                        {type === \"view\" && !dataset.self &&\n                            <>\n                                <div className=\"sidebar-divided\" />\n                                <Shortcut type={\"related\"} datasetID={datasetID} />\n                            </>\n                        }\n                        {type === \"view\" &&\n                            <>\n                                {dataset.self &&\n                                    <>\n                                        <div className=\"sidebar-divided\" />\n                                        <button className=\"blue-button item-save\"\n                                                disabled={!changedSettings && !changedData}\n                                                onClick={() => {updateDataset()}}>Save Changes</button>\n                                        <button className=\"text-button item-delete\"\n                                                onClick={() => {deleteDataset()}}>Delete</button>\n                                    </>\n                                }\n                            </>\n                        }\n                    </div>\n                    <div className=\"inner\">\n                        <div className=\"workspace-body\">\n                            <div className=\"workspace-inner\">\n                                {(type === \"create\" || dataset.self) ?\n                                    <>\n                                        <div className=\"view-items-top\">\n                                            {type === \"create\" ?\n                                                <>\n                                                    <h1>Create Dataset</h1>\n                                                    <button className=\"blue-button\"\n                                                            disabled={disableCreate}\n                                                            onClick={() => {uploadImage()}}>Create</button>\n                                                </>\n                                            :\n                                                <p>Dataset</p>\n                                            }\n                                        </div>\n                                        <div className=\"create-dataset-upload\">\n                                            <input type=\"file\" \n                                                    name=\"data\"\n                                                    accept=\"image/*\"\n                                                    multiple\n                                                    onChange={e => {setImageFiles(e.target.files)}} />\n                                            {type === \"create\" && uploadedImages.length === 0 && \n                                                <button className=\"white-button\"\n                                                        disabled={imageFiles.length === 0}\n                                                        onClick={() => {\n                                                            addImages()\n                                                            setChangedData(true)\n                                                        }}>Add</button>\n                                            }\n                                            {(dataset.self || type === \"create\") && uploadedImages.length !== 0 && \n                                                <>\n                                                    <button className=\"white-button\"\n                                                            disabled={imageFiles.length === 0}\n                                                            onClick={() => {\n                                                                setUploadedImages([])\n                                                                replaceImages()\n                                                                setChangedData(true)\n                                                            }}>Replace</button>\n                                                    <button className=\"white-button\"\n                                                            disabled={imageFiles.length === 0}\n                                                            onClick={() => {\n                                                                if (appendedImages.length !== 0) {\n                                                                    setAppendedImages([])\n                                                                    setAppendedLabels([])\n                                                                }\n                                                                appendImages()\n                                                                setChangedData(true)\n                                                            }}>Add</button>\n                                                </>\n                                            }\n                                            {uploadedImages.length !== 0 &&\n                                                <div className=\"create-dataset-pagination\">\n                                                    <ArrowBackIosNewIcon className=\"create-dataset-pagination-icon\" onClick={() => {previousPage()}} />\n                                                    <p>Page {page} / {Math.ceil(uploadedImages.length/30)}</p>\n                                                    <ArrowForwardIosIcon className=\"create-dataset-pagination-icon\" onClick={() => {nextPage()}} />\n                                                </div>\n                                            }\n                                        </div>\n                                        {(type === \"create\" || dataset.self) && appendedImages.length !== 0 && \n                                            <div className=\"create-dataset-appended\">\n                                                <div className=\"create-dataset-appended-header\">\n                                                    <p>Uploaded Images</p>\n                                                    <button className=\"text-button\"\n                                                            onClick={() => {\n                                                        setAppendedImages([])\n                                                        setAppendedLabels([])\n                                                    }}>Discard</button>\n                                                </div>\n                                                <div className=\"create-dataset-appended-list\">\n                                                    {appendedImages.map((image, i) => {\n                                                        return (\n                                                            <div className=\"create-dataset-image\" key={i}>\n                                                                <img src={URL.createObjectURL(image)} />\n                                                                <div>\n                                                                    <select value={appendedLabels[i]}\n                                                                            onChange={e => {setAppendedLabels(state => {\n                                                                                        const stateCopy = [...state]\n                                                                                    \n                                                                                        stateCopy[i] = e.target.value\n                                                                                    \n                                                                                        return stateCopy\n                                                                                    })}}>\n                                                                        <option value=\"No label\">No label</option>\n                                                                        {labels.map((label, j) => \n                                                                            <option value={label} key={j}>{label}</option>\n                                                                        )}\n                                                                    </select>\n                                                                    <div onClick={() => {deleteAppended(i)}}>\n                                                                        <DeleteIcon className=\"create-dataset-image-delete\" />\n                                                                    </div>\n                                                                </div>\n                                                            </div>\n                                                        )\n                                                    })}\n                                                </div>\n                                                <div className=\"create-dataset-appended-footer\">\n                                                    <button className=\"blue-button\" \n                                                            disabled={appendedLabels.includes(\"No label\")}\n                                                            onClick={() => {uploadAppended()}}>Upload</button>\n                                                </div>\n                                            </div>\n                                        }\n                                        <div className=\"create-dataset-images-list\" key={refreshData}>\n                                            {uploadedImages.map((image, i) => {\n                                                if (i >= start && i < end) {\n                                                    return (\n                                                        <div className=\"create-dataset-image\" key={i}>\n                                                            <img src={type === \"create\" ? \n                                                                            URL.createObjectURL(image) \n                                                                        : \n                                                                            `http://127.0.0.1:5000/files/${dataset.imageFile}/images/${assignedLabels[i]}/${image}.jpg`} \n                                                            />\n                                                            <div>\n                                                                <select value={assignedLabels[i]}\n                                                                        onChange={e => {setAssignedLabels(state => {\n                                                                                    const stateCopy = [...state]\n                                                                                \n                                                                                    stateCopy[i] = e.target.value\n                                                                                \n                                                                                    return stateCopy\n                                                                                })\n                                                                                setChangedData(true)\n                                                                                setRefreshLabels(new Date().getTime())}}>\n                                                                    <option value=\"No label\">No label</option>\n                                                                    {labels.map((label, j) => \n                                                                        <option value={label} key={j}>{label}</option>\n                                                                    )}\n                                                                </select>\n                                                                <div onClick={() => {deleteImage(image, i, assignedLabels[i])}}>\n                                                                    <DeleteIcon className=\"create-dataset-image-delete\" />\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                    )\n                                                }\n                                            })}\n                                        </div>\n                                    </>\n                                :   \n                                    <>\n                                        <div className=\"view-items-top\">\n                                            <p>Dataset</p>\n                                        </div>\n                                        <div className=\"create-dataset-images-list\" key={refreshData}>\n                                            {uploadedImages.map((image, i) => {\n                                                if (i >= start && i < end) {\n                                                    return (\n                                                        <div className=\"create-dataset-image\" key={i}>\n                                                            <img src={`http://127.0.0.1:5000/files/${dataset.imageFile}/${image}.jpg`} />\n                                                            <div>\n                                                                <p>{assignedLabels[i]}</p>\n                                                            </div>\n                                                        </div>\n                                                    )\n                                                }\n                                            })}\n                                        </div>\n                                    </>\n                                }\n                            </div>\n                            <div className=\"create-workspace-data\">\n                                <p className=\"create-workspace-data-header\">Labels:</p>\n                                <div className=\"sidebar-divided\" />\n                                {(type === \"create\" || dataset.self) &&\n                                    <input className=\"create-dataset-label-input\"\n                                            placeholder=\"Add Label\"\n                                            onChange={e => {setAddLabel(e.target.value)}}\n                                            onKeyPress={addFunctionKey}\n                                            value={addLabel} />\n                                }\n                                <div className=\"create-dataset-labels-list\" key={refreshLabels}>\n                                    {labels.map((label, i) => {\n                                        return (\n                                            <div className={`create-dataset-label ${colours[i % colours.length]}`} key={i}>\n                                                <p>{label}</p>\n                                                {(type === \"create\" || dataset.self) &&\n                                                    <div onClick={() => {deleteLabel(i)}}>\n                                                        <CloseIcon className=\"create-dataset-label-icon\" /> \n                                                    </div>\n                                                }\n                                            </div>\n                                        )\n                                    })}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            : loaded && !exist &&\n                <div className=\"inner-body\">  \n                    <p className=\"item-exist\">Cannot find dataset</p>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default Dataset"]},"metadata":{},"sourceType":"module"}