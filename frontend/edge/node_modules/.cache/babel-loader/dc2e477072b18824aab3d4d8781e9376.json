{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Experiment-Card.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ExperimentCard = _ref => {\n  _s();\n\n  let {\n    experiment,\n    created\n  } = _ref;\n  const [date, setDate] = useState(\"\");\n  const [visibility, setVisibility] = useState(experiment.visibility);\n  useEffect(() => {\n    const updatedDate = new Date(experiment.updatedAt);\n    const currentDate = new Date();\n\n    if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n      setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365).toString()} year(s) ago`);\n    } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n      setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} month(s) ago`);\n    } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n      setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24)).toString()} day(s) ago`);\n    } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n      setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600)).toString()} hour(s) ago`);\n    } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n      setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60)).toString()} minute(s) ago`);\n    } else {\n      setDate(\"Updated just now\");\n    }\n  }, []);\n\n  const updateVisibility = async () => {\n    try {\n      //await globalAPI.put(`/visibility/${item._id}?state=${visibility}`);\n      setVisibility(state => !state);\n    } catch (err) {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"experiment-card\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"experiment-card-title\",\n      children: experiment.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"experiment-card-date\",\n      children: date\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), created && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [visibility ? /*#__PURE__*/_jsxDEV(VisibilityIcon, {\n        className: \"experiment-card-icon\",\n        onClick: () => {\n          updateVisibility();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(VisibilityOffIcon, {\n        className: \"experiment-card-icon\",\n        onClick: () => {\n          updateVisibility();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(DeleteIcon, {\n        className: \"experiment-card-icon\",\n        n: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ExperimentCard, \"r8h2fVB02+ypmoVkeV3Yzs5ov0g=\");\n\n_c = ExperimentCard;\nexport default ExperimentCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExperimentCard\");","map":{"version":3,"sources":["/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Components/Experiment-Card.jsx"],"names":["React","useState","useEffect","VisibilityOffIcon","VisibilityIcon","DeleteIcon","ExperimentCard","experiment","created","date","setDate","visibility","setVisibility","updatedDate","Date","updatedAt","currentDate","getTime","Math","floor","toString","updateVisibility","state","err","title"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nconst ExperimentCard = ({experiment, created}) => {\n    const [date, setDate] = useState(\"\");\n    const [visibility, setVisibility] = useState(experiment.visibility)\n\n    useEffect(() => {\n        const updatedDate = new Date(experiment.updatedAt);\n        const currentDate = new Date();\n\n        if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} year(s) ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} month(s) ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} day(s) ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hour(s) ago`)\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n            setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minute(s) ago`)\n        } else {\n            setDate(\"Updated just now\")\n        }\n    }, [])\n\n    const updateVisibility = async () => {\n        try {\n            //await globalAPI.put(`/visibility/${item._id}?state=${visibility}`);\n\n            setVisibility(state => !state)\n        } catch (err) {}\n    }\n\n    return (\n        <div className=\"experiment-card\">\n            <p className=\"experiment-card-title\">{experiment.title}</p>\n            <p className=\"experiment-card-date\">{date}</p>\n            {created &&\n                <>\n                    {visibility ? \n                        <VisibilityIcon className=\"experiment-card-icon\" onClick={() => {updateVisibility()}} />\n                    :\n                        <VisibilityOffIcon className=\"experiment-card-icon\" onClick={() => {updateVisibility()}} />\n                    }\n                    <DeleteIcon className=\"experiment-card-icon\"n />\n                </>\n            }\n        </div>\n    )\n};\n\nexport default ExperimentCard;\n"]},"metadata":{},"sourceType":"module"}