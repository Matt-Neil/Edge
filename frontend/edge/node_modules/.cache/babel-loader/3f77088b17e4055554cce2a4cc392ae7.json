{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Workspace.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useHistory, useParams } from \"react-router-dom\";\nimport usersAPI from '../API/users';\nimport itemsAPI from '../API/items';\nimport imageAPI from '../API/images';\nimport trainAPI from '../API/train';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport ModelNode from '../Components/Model-Node';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Workspace = _ref => {\n  _s();\n\n  let {\n    currentUser,\n    type\n  } = _ref;\n  const [stage, setStage] = useState(\"model\");\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [visibility, setVisibility] = useState(false);\n  const [start, setStart] = useState(0);\n  const [end, setEnd] = useState(20);\n  const [page, setPage] = useState(1);\n  const [image, setImage] = useState();\n  const [datasetID, setDatasetID] = useState(\"\");\n  const [uploadedDataset, setUploadedDataset] = useState();\n  const [workspaces, setWorkspaces] = useState([]);\n  const [images, setImages] = useState([]);\n  const [assignedLabels, setAssignedLabels] = useState([]);\n  const [viewDataset, setViewDataset] = useState(false);\n  const [refreshData, setRefreshData] = useState();\n  const [refreshDiagram, setRefreshDiagram] = useState();\n  const [model, setModel] = useState([]);\n  const [selectedNode, setSelectedNode] = useState(0);\n  const [configuration, setConfiguration] = useState({\n    epochs: \"\",\n    training_split: \"\",\n    validation_split: \"\",\n    test_split: \"\",\n    improvement: \"\",\n    patience: \"\",\n    batch: \"\",\n    lr_scheduler: false,\n    optimiser: \"\",\n    loss: \"\"\n  });\n  const [addNode, setAddNode] = useState(false);\n  const [results, setResults] = useState();\n  const [loaded, setLoaded] = useState(false);\n  const [disableCreate, setDisabledCreate] = useState(false);\n  const [disableTrain, setDisabledTrain] = useState(true);\n  const [displayPublic, setDisplayPublic] = useState(false);\n  const [displayExist, setDisplayExist] = useState(false);\n  const modelRef = useRef(null);\n  const workspaceID = useParams().id;\n  const publicInterval = useRef(0);\n  const existInterval = useRef(0);\n  const history = useHistory();\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (type === \"create\") {\n          const workspaces = await usersAPI.get(\"/created?type=workspace\");\n          workspaces.data.data.map(workspace => {\n            setWorkspaces(previous => [...previous, workspace.title]);\n          });\n        } else {\n          const workspace = await itemsAPI.get(`/${workspaceID}?type=workspace`);\n        }\n\n        setLoaded(true);\n      } catch (err) {}\n    };\n\n    fetchData();\n  }, []);\n  useEffect(() => {\n    if (modelRef.current) {\n      modelRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'end',\n        inline: 'end'\n      });\n    }\n  }, [model, addNode]);\n\n  const searchFunctionKey = e => {\n    if (e.key === \"Enter\" && datasetID !== \"\") {\n      existingDataset();\n    }\n  };\n\n  const displayPublicInterval = () => {\n    clearInterval(publicInterval.current);\n    setDisplayPublic(true);\n    publicInterval.current = setInterval(() => {\n      setDisplayPublic(false);\n    }, 1200);\n    return () => {\n      clearInterval(publicInterval.current);\n    };\n  };\n\n  const displayExistInterval = () => {\n    clearInterval(existInterval.current);\n    setDisplayExist(true);\n    existInterval.current = setInterval(() => {\n      setDisplayExist(false);\n    }, 1200);\n    return () => {\n      clearInterval(existInterval.current);\n    };\n  };\n\n  const previousPage = () => {\n    if (page > 1) {\n      setStart((page - 2) * 20);\n      setEnd((page - 1) * 20);\n      setPage(state => state - 1);\n      setRefreshData(new Date().getTime());\n    }\n  };\n\n  const nextPage = () => {\n    if (page * 20 < images.length && images.length > 20) {\n      setPage(state => state + 1);\n      setStart(page * 20);\n      setEnd((page + 1) * 20);\n      setRefreshData(new Date().getTime());\n    }\n  };\n\n  const existingDataset = async () => {\n    try {\n      const checkPublic = await itemsAPI.get(`/check-public-dataset?id=${datasetID}`);\n\n      if (checkPublic.data.success && checkPublic.data.data.visibility) {\n        fetch(`http://127.0.0.1:5000/files/${checkPublic.data.data.imageFile}/labels.json`).then(response => response.json()).then(images => {\n          images.map(image => {\n            setImages(state => [...state, image.filename]);\n            setAssignedLabels(state => [...state, image.label]);\n          });\n          setUploadedDataset(checkPublic.data.data);\n          setRefreshData(new Date().getTime());\n          {\n            model.length === 0 && setModel([{\n              type: \"Input\",\n              value: 1,\n              activation: \"\"\n            }]);\n          }\n        });\n      } else if (checkPublic.data.success && !checkPublic.data.data.visibility) {\n        displayPublicInterval();\n      } else {\n        displayExistInterval();\n      }\n    } catch (err) {}\n  };\n\n  const uploadImage = async () => {\n    setDisabledCreate(true);\n\n    if (image) {\n      const formImage = new FormData();\n      formImage.append('image', image);\n\n      try {\n        const imageResponse = await imageAPI.post(\"/upload\", formImage);\n        uploadData(imageResponse.data.data);\n      } catch (err) {}\n    } else {\n      uploadData(\"default.png\");\n    }\n  };\n\n  const uploadData = async imageName => {\n    try {\n      const workspaceResponse = await itemsAPI.post(\"/\", {\n        title: title,\n        dataset: uploadedDataset._id,\n        creator: currentUser.id,\n        description: description,\n        picture: imageName,\n        upvotes: [],\n        bookmarks: [],\n        updated: new Date().toISOString(),\n        visibility: visibility,\n        type: \"workspace\"\n      });\n      history.push(`/workspace/${workspaceResponse.data.data}`);\n    } catch (err) {}\n  };\n\n  const train = async () => {\n    try {\n      // setDisabledTrain(true)\n      setStage(\"train\");\n      const formData = new FormData();\n      formData.append('epochs', configuration.epochs);\n      formData.append('training_split', configuration.training_split);\n      formData.append('validation_split', configuration.validation_split);\n      formData.append('test_split', configuration.test_split);\n      formData.append('improvement', configuration.improvement);\n      formData.append('patience', configuration.patience);\n      formData.append('batch', configuration.batch);\n      formData.append('lr_scheduler', configuration.lr_scheduler);\n      formData.append('optimiser', configuration.optimiser);\n      formData.append('loss', configuration.loss);\n      formData.append('imageFile', uploadedDataset.imageFile);\n      uploadedDataset.labels.map(label => {\n        formData.append('labels[]', label);\n      });\n      model.map(node => {\n        formData.append('activations[]', node.activation);\n        formData.append('units[]', node.value);\n      });\n      const response = await trainAPI.post(\"\", formData);\n\n      if (response) {\n        setResults(response);\n        setStage(\"evaluation\");\n      } else {\n        setDisabledTrain(false);\n      }\n    } catch (err) {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loaded && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"create-item-title\",\n          placeholder: \"Title\",\n          onChange: e => {\n            setTitle(e.target.value);\n          },\n          value: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"create-item-description\",\n          placeholder: \"Description\",\n          onChange: e => {\n            setDescription(e.target.value);\n          },\n          value: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"create-item-setup\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"create-item-setup-label\",\n            children: \"Picture\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"create-item-setup-input\",\n            type: \"file\",\n            name: \"image\",\n            onChange: e => {\n              setImage(e.target.files[0]);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"create-item-setup\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"create-item-setup-label\",\n            children: \"Public?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            onChange: () => {\n              setVisibility(previous => !previous);\n            },\n            checked: visibility\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sidebar-divided\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"create-workspace-import-existing\",\n          placeholder: \"Dataset ID\",\n          onChange: e => {\n            setDatasetID(e.target.value);\n          },\n          onKeyPress: searchFunctionKey,\n          value: datasetID\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"create-item-view-dataset\",\n          onClick: () => {\n            setViewDataset(state => !state);\n          },\n          children: viewDataset ? \"Hide Dataset\" : \"Show Dataset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 25\n        }, this), displayPublic && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"create-item-data-notification\",\n          children: \"Dataset not public\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 43\n        }, this), displayExist && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"create-item-data-notification\",\n          children: \"Dataset does not exist\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 42\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner\",\n        children: type === \"create\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"view-items-top\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Create Workspace\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"blue-button\",\n              disabled: disableTrain,\n              onClick: () => {\n                uploadImage();\n              },\n              children: \"Train\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 33\n          }, this), model.length !== 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-modelling-body\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"create-model\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-model-diagram\",\n                children: [model.map((node, i) => {\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"create-model-diagram-node\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        onClick: () => {\n                          setSelectedNode(i);\n                        },\n                        children: /*#__PURE__*/_jsxDEV(ModelNode, {\n                          setSelectedNode: setSelectedNode,\n                          type: node.type,\n                          value: node.value,\n                          selected: i === selectedNode,\n                          last: i === model.length - 1\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 274,\n                          columnNumber: 69\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 273,\n                        columnNumber: 65\n                      }, this), node.type !== \"Input\" && /*#__PURE__*/_jsxDEV(\"div\", {\n                        onClick: () => {\n                          {\n                            selectedNode === i ? setSelectedNode(state => state - 1) : selectedNode < i ? setSelectedNode(state => state) : selectedNode > i && /*#__PURE__*/_jsxDEV(_Fragment, {\n                              children: selectedNode - i === 1 ? setSelectedNode(state => state - 1) : setSelectedNode(i)\n                            }, void 0, false);\n                          }\n                          model.splice(i, 1);\n                          setRefreshDiagram(new Date().getTime());\n                        },\n                        children: /*#__PURE__*/_jsxDEV(ClearIcon, {\n                          className: \"create-model-diagram-remove\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 292,\n                          columnNumber: 73\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 277,\n                        columnNumber: 69\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 272,\n                      columnNumber: 61\n                    }, this), i === model.length - 1 && node.type !== \"Output\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                      children: addNode ? /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"create-model-diagram-add\",\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          onClick: () => {\n                            setAddNode(false);\n                          },\n                          children: /*#__PURE__*/_jsxDEV(RemoveIcon, {\n                            className: \"create-model-diagram-add-icon\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 301,\n                            columnNumber: 81\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 300,\n                          columnNumber: 77\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"create-model-diagram-add-options\",\n                          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                            onClick: () => {\n                              setModel(state => [...state, {\n                                type: \"Dense\",\n                                value: 0,\n                                activation: \"\"\n                              }]);\n                              setSelectedNode(model.length);\n                              setAddNode(false);\n                            },\n                            children: \"Dense\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 304,\n                            columnNumber: 81\n                          }, this), model.length > 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n                            onClick: () => {\n                              {\n                                uploadedDataset.labels.length === 2 ? setModel(state => [...state, {\n                                  type: \"Output\",\n                                  value: 1,\n                                  activation: \"\"\n                                }]) : setModel(state => [...state, {\n                                  type: \"Output\",\n                                  value: uploadedDataset.labels.length,\n                                  activation: \"\"\n                                }]);\n                              }\n                              setSelectedNode(model.length);\n                              setAddNode(false);\n                            },\n                            children: \"Output\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 313,\n                            columnNumber: 85\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 303,\n                          columnNumber: 77\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 299,\n                        columnNumber: 73\n                      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                        onClick: () => {\n                          setAddNode(true);\n                        },\n                        children: /*#__PURE__*/_jsxDEV(AddIcon, {\n                          className: \"create-model-diagram-add-icon\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 335,\n                          columnNumber: 77\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 334,\n                        columnNumber: 73\n                      }, this)\n                    }, void 0, false)]\n                  }, i, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 271,\n                    columnNumber: 57\n                  }, this);\n                }), /*#__PURE__*/_jsxDEV(\"div\", {\n                  ref: modelRef\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 343,\n                  columnNumber: 49\n                }, this)]\n              }, refreshDiagram, true, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-model-selected\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: model[selectedNode].type\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 348,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Units\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 349,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  value: model[selectedNode].value,\n                  disabled: model[selectedNode].type === \"Input\" || model[selectedNode].type === \"Output\",\n                  onChange: e => {\n                    setModel(state => {\n                      const stateCopy = [...state];\n                      stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                        value: Number(e.target.value)\n                      };\n                      return stateCopy;\n                    });\n                    setRefreshDiagram(new Date().getTime());\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 350,\n                  columnNumber: 49\n                }, this), model[selectedNode].type !== \"Input\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Activation\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 365,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                    value: model[selectedNode].activation,\n                    onChange: e => {\n                      setModel(state => {\n                        const stateCopy = [...state];\n                        stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                          activation: e.target.value\n                        };\n                        return stateCopy;\n                      });\n                      setRefreshDiagram(new Date().getTime());\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      disabled: true,\n                      defaultValue: true,\n                      value: \"\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 378,\n                      columnNumber: 65\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"sigmoid\",\n                      children: \"Sigmoid\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 379,\n                      columnNumber: 65\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"softmax\",\n                      children: \"Softmax\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 380,\n                      columnNumber: 65\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"softplus\",\n                      children: \"Softplus\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 381,\n                      columnNumber: 65\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"softsign\",\n                      children: \"Softsign\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 382,\n                      columnNumber: 65\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"swish\",\n                      children: \"Swish\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 383,\n                      columnNumber: 65\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"selu\",\n                      children: \"Selu\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 384,\n                      columnNumber: 65\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"tanh\",\n                      children: \"Tanh\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 385,\n                      columnNumber: 65\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"elu\",\n                      children: \"Elu\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 386,\n                      columnNumber: 65\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"exponential\",\n                      children: \"Exponential\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 387,\n                      columnNumber: 65\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"gelu\",\n                      children: \"Gelu\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 388,\n                      columnNumber: 65\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"hard_sigmoid\",\n                      children: \"Hard Sigmoid\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 389,\n                      columnNumber: 65\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"linear\",\n                      children: \"Linear\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 390,\n                      columnNumber: 65\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"relu\",\n                      children: \"Relu\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 391,\n                      columnNumber: 65\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 366,\n                    columnNumber: 57\n                  }, this)]\n                }, void 0, true)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 347,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-model-configuration\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"create-model-configuration-option\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Epochs\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 399,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: configuration.epochs,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          epochs: e.target.value\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 400,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 398,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Training Split\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 406,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: configuration.training_split,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          training_split: e.target.value\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 407,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 405,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Validation Split\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 413,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: configuration.validation_split,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          validation_split: e.target.value\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 414,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 412,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Test Split\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 420,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: configuration.test_split,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          test_split: e.target.value\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 421,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 419,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Minimum Improvement\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 427,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: configuration.improvement,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          improvement: e.target.value\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 428,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 426,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Patience\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 434,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: configuration.patience,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          patience: e.target.value\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 435,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 433,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Batch Size\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 441,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: configuration.batch,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          batch: e.target.value\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 442,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 440,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Learning Rate Scheduler\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 448,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      className: \"create-model-configuration-option-checkbox\",\n                      type: \"checkbox\",\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          lr_scheduler: !configuration.lr_scheduler\n                        }));\n                      },\n                      checked: configuration.lr_scheduler\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 449,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 447,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Optimiser\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 458,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      value: configuration.optimiser,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          optimiser: e.target.value\n                        }));\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        disabled: true,\n                        defaultValue: true,\n                        value: \"\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 463,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"Adadelta\",\n                        children: \"Adadelta\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 464,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"Adagrad\",\n                        children: \"Adagrad\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 465,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"Adam\",\n                        children: \"Adam\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 466,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"Adamax\",\n                        children: \"Adamax\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 467,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"Ftrl\",\n                        children: \"Ftrl\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 468,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"Nadam\",\n                        children: \"Nadam\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 469,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"RMSprop\",\n                        children: \"RMSprop\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 470,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"SGD\",\n                        children: \"SGD\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 471,\n                        columnNumber: 61\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 459,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 457,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Loss\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 475,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      value: configuration.loss,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          loss: e.target.value\n                        }));\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        disabled: true,\n                        defaultValue: true,\n                        value: \"\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 480,\n                        columnNumber: 61\n                      }, this), uploadedDataset.labels.length === 2 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                          value: \"binary_crossentropy\",\n                          children: \"Binary Crossentropy\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 483,\n                          columnNumber: 69\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          value: \"hinge\",\n                          children: \"Hinge\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 484,\n                          columnNumber: 69\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          value: \"squared_hinge\",\n                          children: \"Squared Hinge\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 485,\n                          columnNumber: 69\n                        }, this)]\n                      }, void 0, true), uploadedDataset.labels.length > 2 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                          value: \"categorical_crossentropy\",\n                          children: \"Categorical Crossentropy\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 490,\n                          columnNumber: 69\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          value: \"sparse_categorical_crossentropy\",\n                          children: \"Sparse Categorical Crossentropy\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 491,\n                          columnNumber: 69\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          value: \"kl_divergence\",\n                          children: \"Kullback Leibler Divergence\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 492,\n                          columnNumber: 69\n                        }, this)]\n                      }, void 0, true)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 476,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 474,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 397,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 396,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 41\n            }, this), viewDataset && uploadedDataset && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"create-model-data\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"create-item-data-header\",\n                children: \"Selected Dataset:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 502,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"create-item-data-header-dataset\",\n                children: uploadedDataset._id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 503,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-model-data-images-list\",\n                children: images.map((image, i) => {\n                  if (i >= start && i < end) {\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"create-model-data-image\",\n                      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                        src: `http://127.0.0.1:5000/files/${uploadedDataset.imageFile}/${image}.jpg`\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 509,\n                        columnNumber: 69\n                      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                        children: assignedLabels[i]\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 510,\n                        columnNumber: 69\n                      }, this)]\n                    }, i, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 508,\n                      columnNumber: 65\n                    }, this);\n                  }\n                })\n              }, refreshData, false, {\n                fileName: _jsxFileName,\n                lineNumber: 504,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-model-data-pagination\",\n                children: [/*#__PURE__*/_jsxDEV(ArrowBackIosNewIcon, {\n                  className: \"create-model-data-pagination-icon\",\n                  onClick: () => {\n                    previousPage();\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 517,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Page \", page, \" / \", Math.ceil(images.length / 20)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 518,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(ArrowForwardIosIcon, {\n                  className: \"create-model-data-pagination-icon\",\n                  onClick: () => {\n                    nextPage();\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 519,\n                  columnNumber: 53\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 516,\n                columnNumber: 49\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 501,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 37\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"end-items\",\n            children: \"Select a dataset...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 525,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(Workspace, \"IScP1X7HVaCXK6MhoRxQtn2qLVw=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = Workspace;\nexport default Workspace;\n\nvar _c;\n\n$RefreshReg$(_c, \"Workspace\");","map":{"version":3,"sources":["/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Workspace.jsx"],"names":["React","useState","useEffect","useRef","useHistory","useParams","usersAPI","itemsAPI","imageAPI","trainAPI","ArrowForwardIosIcon","ArrowBackIosNewIcon","ModelNode","ClearIcon","AddIcon","RemoveIcon","Workspace","currentUser","type","stage","setStage","title","setTitle","description","setDescription","visibility","setVisibility","start","setStart","end","setEnd","page","setPage","image","setImage","datasetID","setDatasetID","uploadedDataset","setUploadedDataset","workspaces","setWorkspaces","images","setImages","assignedLabels","setAssignedLabels","viewDataset","setViewDataset","refreshData","setRefreshData","refreshDiagram","setRefreshDiagram","model","setModel","selectedNode","setSelectedNode","configuration","setConfiguration","epochs","training_split","validation_split","test_split","improvement","patience","batch","lr_scheduler","optimiser","loss","addNode","setAddNode","results","setResults","loaded","setLoaded","disableCreate","setDisabledCreate","disableTrain","setDisabledTrain","displayPublic","setDisplayPublic","displayExist","setDisplayExist","modelRef","workspaceID","id","publicInterval","existInterval","history","fetchData","get","data","map","workspace","previous","err","current","scrollIntoView","behavior","block","inline","searchFunctionKey","e","key","existingDataset","displayPublicInterval","clearInterval","setInterval","displayExistInterval","previousPage","state","Date","getTime","nextPage","length","checkPublic","success","fetch","imageFile","then","response","json","filename","label","value","activation","uploadImage","formImage","FormData","append","imageResponse","post","uploadData","imageName","workspaceResponse","dataset","_id","creator","picture","upvotes","bookmarks","updated","toISOString","push","train","formData","labels","node","target","files","i","splice","stateCopy","Number","Math","ceil"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\nimport {useHistory, useParams} from \"react-router-dom\"\nimport usersAPI from '../API/users'\nimport itemsAPI from '../API/items'\nimport imageAPI from '../API/images'\nimport trainAPI from '../API/train'\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport ModelNode from '../Components/Model-Node';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\n\nconst Workspace = ({currentUser, type}) => {\n    const [stage, setStage] = useState(\"model\");\n    const [title, setTitle] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [visibility, setVisibility] = useState(false);\n    const [start, setStart] = useState(0)\n    const [end, setEnd] = useState(20)\n    const [page, setPage] = useState(1)\n    const [image, setImage] = useState();\n    const [datasetID, setDatasetID] = useState(\"\")\n    const [uploadedDataset, setUploadedDataset] = useState()\n    const [workspaces, setWorkspaces] = useState([]);\n    const [images, setImages] = useState([])\n    const [assignedLabels, setAssignedLabels] = useState([])\n    const [viewDataset, setViewDataset] = useState(false)\n    const [refreshData, setRefreshData] = useState()\n    const [refreshDiagram, setRefreshDiagram] = useState()\n    const [model, setModel] = useState([])\n    const [selectedNode, setSelectedNode] = useState(0)\n    const [configuration, setConfiguration] = useState({epochs: \"\", training_split: \"\", validation_split: \"\", test_split: \"\", improvement: \"\",\n                                                        patience: \"\", batch: \"\", lr_scheduler: false, optimiser: \"\", loss: \"\"})\n    const [addNode, setAddNode] = useState(false)\n    const [results, setResults] = useState()\n    const [loaded, setLoaded] = useState(false);\n    const [disableCreate, setDisabledCreate] = useState(false)\n    const [disableTrain, setDisabledTrain] = useState(true)\n    const [displayPublic, setDisplayPublic] = useState(false)\n    const [displayExist, setDisplayExist] = useState(false)\n    const modelRef = useRef(null)\n    const workspaceID = useParams().id;\n    const publicInterval = useRef(0)\n    const existInterval = useRef(0)\n    const history = useHistory();\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                if (type === \"create\") {\n                    const workspaces = await usersAPI.get(\"/created?type=workspace\");\n    \n                    workspaces.data.data.map((workspace) => {\n                        setWorkspaces(previous => [...previous, workspace.title]);\n                    })\n                } else {\n                    const workspace = await itemsAPI.get(`/${workspaceID}?type=workspace`);\n                }\n                setLoaded(true);\n            } catch (err) {}\n        }\n        fetchData();\n    }, [])\n\n    useEffect(() => {\n        if (modelRef.current) {\n            modelRef.current.scrollIntoView({\n                behavior: 'smooth',\n                block: 'end',\n                inline: 'end'\n            })\n        }\n    }, [model, addNode])\n\n    const searchFunctionKey = (e) => {\n        if (e.key === \"Enter\" && datasetID !== \"\") {\n            existingDataset()\n        }\n    }\n\n    const displayPublicInterval = () => {\n        clearInterval(publicInterval.current)\n        setDisplayPublic(true);\n        publicInterval.current = setInterval(() => {\n            setDisplayPublic(false);\n        }, 1200)\n        return ()=> {clearInterval(publicInterval.current)};\n    }\n\n    const displayExistInterval = () => {\n        clearInterval(existInterval.current)\n        setDisplayExist(true);\n        existInterval.current = setInterval(() => {\n            setDisplayExist(false);\n        }, 1200)\n        return ()=> {clearInterval(existInterval.current)};\n    }\n\n    const previousPage = () => {\n        if (page > 1) {\n            setStart((page-2)*20)\n            setEnd((page-1)*20)\n            setPage(state => state-1)\n            setRefreshData(new Date().getTime())\n        }\n    }\n    \n    const nextPage = () => {\n        if (page*20 < images.length && images.length > 20) {\n            setPage(state => state+1)\n            setStart((page)*20)\n            setEnd((page+1)*20)\n            setRefreshData(new Date().getTime())\n        }\n    }\n\n    const existingDataset = async () => {\n        try {\n            const checkPublic = await itemsAPI.get(`/check-public-dataset?id=${datasetID}`)\n    \n            if (checkPublic.data.success && checkPublic.data.data.visibility) {\n                fetch(`http://127.0.0.1:5000/files/${checkPublic.data.data.imageFile}/labels.json`)\n                        .then(response => response.json())\n                        .then(images => {\n                            images.map(image => {\n                                setImages(state => [...state, image.filename])\n                                setAssignedLabels(state => [...state, image.label])\n                            })\n                            setUploadedDataset(checkPublic.data.data)\n                            setRefreshData(new Date().getTime())\n                            {model.length === 0 &&\n                                setModel([{type: \"Input\", value: 1, activation: \"\"}])\n                            }\n                        })\n            } else if (checkPublic.data.success && !checkPublic.data.data.visibility) {\n                displayPublicInterval()\n            } else {\n                displayExistInterval()\n            }\n        } catch (err) {}\n    }\n\n    const uploadImage = async () => {\n        setDisabledCreate(true)\n\n        if (image) {\n            const formImage = new FormData();\n            formImage.append('image', image);\n\n            try {\n                const imageResponse = await imageAPI.post(\"/upload\", formImage);\n\n                uploadData(imageResponse.data.data)\n            } catch (err) {}\n        } else {\n            uploadData(\"default.png\")\n        }\n    }\n\n    const uploadData = async (imageName) => {\n        try {\n            const workspaceResponse = await itemsAPI.post(\"/\", {\n                title: title,\n                dataset: uploadedDataset._id,\n                creator: currentUser.id,\n                description: description,\n                picture: imageName,\n                upvotes: [],\n                bookmarks: [],\n                updated: new Date().toISOString(),\n                visibility: visibility,\n                type: \"workspace\"\n            });\n\n            history.push(`/workspace/${workspaceResponse.data.data}`)\n        } catch (err) {}\n    }\n\n    const train = async () => {\n        try {\n            // setDisabledTrain(true)\n            setStage(\"train\")\n    \n            const formData = new FormData();\n        \n            formData.append('epochs', configuration.epochs)\n            formData.append('training_split', configuration.training_split)\n            formData.append('validation_split', configuration.validation_split)\n            formData.append('test_split', configuration.test_split)\n            formData.append('improvement', configuration.improvement)\n            formData.append('patience', configuration.patience)\n            formData.append('batch', configuration.batch)\n            formData.append('lr_scheduler', configuration.lr_scheduler)\n            formData.append('optimiser', configuration.optimiser)\n            formData.append('loss', configuration.loss)\n            formData.append('imageFile', uploadedDataset.imageFile)\n\n            uploadedDataset.labels.map(label => {\n                formData.append('labels[]', label)\n            })\n            model.map(node => {\n                formData.append('activations[]', node.activation)\n                formData.append('units[]', node.value)\n            })\n\n            const response = await trainAPI.post(\"\", formData);\n\n            if (response) {\n                setResults(response)\n                setStage(\"evaluation\")\n            } else {\n                setDisabledTrain(false)\n            }\n        } catch (err) {}\n    }\n\n    return (\n        <>\n            {loaded &&\n                <div className=\"main-body\">\n                    <div className=\"sidebar\">\n                        <input className=\"create-item-title\"\n                                placeholder=\"Title\"\n                                onChange={e => {setTitle(e.target.value)}}\n                                value={title} />\n                        <textarea className=\"create-item-description\"\n                                    placeholder=\"Description\"\n                                    onChange={e => {setDescription(e.target.value)}}\n                                    value={description} />\n                        <div className=\"create-item-setup\">\n                            <label className=\"create-item-setup-label\">Picture</label>\n                            <input className=\"create-item-setup-input\"\n                                    type=\"file\" \n                                    name=\"image\" \n                                    onChange={e => {setImage(e.target.files[0])}} />\n                        </div>\n                        <div className=\"create-item-setup\">\n                            <label className=\"create-item-setup-label\">Public?</label>\n                            <input type=\"checkbox\" \n                                    onChange={() => {setVisibility(previous => !previous)}}\n                                    checked={visibility} />\n                        </div>\n                        <div className=\"sidebar-divided\" />\n                        <input className=\"create-workspace-import-existing\"\n                                placeholder=\"Dataset ID\"\n                                onChange={e => {setDatasetID(e.target.value)}}\n                                onKeyPress={searchFunctionKey}\n                                value={datasetID} />\n                        <button className=\"create-item-view-dataset\"\n                                onClick={() => {setViewDataset(state => !state)}}>{viewDataset ? \"Hide Dataset\" : \"Show Dataset\"}</button>\n                        {displayPublic && <p className=\"create-item-data-notification\">Dataset not public</p>}\n                        {displayExist && <p className=\"create-item-data-notification\">Dataset does not exist</p>}\n                    </div>\n                    <div className=\"inner\">\n                        {type === \"create\" &&\n                            <>\n                                <div className=\"view-items-top\">\n                                    <h1>Create Workspace</h1>\n                                    <span />\n                                    <button className=\"blue-button\"\n                                            disabled={disableTrain}\n                                            onClick={() => {uploadImage()}}>Train</button>\n                                </div>\n                                {model.length !== 0 ?\n                                    <div className=\"create-modelling-body\">\n                                        <div className=\"create-model\">\n                                            <div className=\"create-model-diagram\" key={refreshDiagram}>\n                                                {model.map((node, i) => {\n                                                    return (\n                                                        <div key={i}>\n                                                            <div className={\"create-model-diagram-node\"}>\n                                                                <div onClick={() => {setSelectedNode(i)}}>\n                                                                    <ModelNode setSelectedNode={setSelectedNode} type={node.type} value={node.value} selected={i === selectedNode} last={i === model.length-1} />\n                                                                </div>\n                                                                {node.type !== \"Input\" &&\n                                                                    <div onClick={() => {{selectedNode === i ?\n                                                                                            setSelectedNode(state => state-1)\n                                                                                        : selectedNode < i ?\n                                                                                            setSelectedNode(state => state)\n                                                                                        : selectedNode > i &&\n                                                                                            <>\n                                                                                                {selectedNode-i === 1 ?\n                                                                                                    setSelectedNode(state => state-1)\n                                                                                                :\n                                                                                                    setSelectedNode(i)\n                                                                                                } \n                                                                                            </>  \n                                                                                        }\n                                                                                        model.splice(i, 1)\n                                                                                        setRefreshDiagram(new Date().getTime())}}>\n                                                                        <ClearIcon className=\"create-model-diagram-remove\" />\n                                                                    </div>\n                                                                }\n                                                            </div>\n                                                            {i === model.length-1 && node.type !== \"Output\" &&\n                                                                <>\n                                                                    {addNode ?\n                                                                        <div className=\"create-model-diagram-add\">\n                                                                            <div onClick={() => {setAddNode(false)}}>\n                                                                                <RemoveIcon className=\"create-model-diagram-add-icon\" />\n                                                                            </div>\n                                                                            <div className=\"create-model-diagram-add-options\">\n                                                                                <button onClick={() => {setModel(state => [...state, {\n                                                                                    type: \"Dense\",\n                                                                                    value: 0,\n                                                                                    activation: \"\"\n                                                                                }])\n                                                                                setSelectedNode(model.length)\n                                                                                setAddNode(false)\n                                                                                }}>Dense</button>\n                                                                                {model.length > 1 &&\n                                                                                    <button onClick={() => {\n                                                                                        {uploadedDataset.labels.length === 2 ?\n                                                                                            setModel(state => [...state, {\n                                                                                                type: \"Output\",\n                                                                                                value: 1,\n                                                                                                activation: \"\"\n                                                                                            }])\n                                                                                        :\n                                                                                            setModel(state => [...state, {\n                                                                                                type: \"Output\",\n                                                                                                value: uploadedDataset.labels.length,\n                                                                                                activation: \"\"\n                                                                                            }])\n                                                                                        }\n                                                                                    setSelectedNode(model.length)\n                                                                                    setAddNode(false)\n                                                                                    }}>Output</button>\n                                                                                }\n                                                                            </div>\n                                                                        </div>\n                                                                    :\n                                                                        <div onClick={() => {setAddNode(true)}}>\n                                                                            <AddIcon className=\"create-model-diagram-add-icon\" />\n                                                                        </div>\n                                                                    }\n                                                                </>\n                                                            }\n                                                        </div>\n                                                    )\n                                                })}\n                                                <div ref={modelRef} />\n                                            </div>\n                                        </div>\n                                        <div>\n                                            <div className=\"create-model-selected\">\n                                                <p>{model[selectedNode].type}</p>\n                                                <label>Units</label>\n                                                <input value={model[selectedNode].value} \n                                                        disabled={model[selectedNode].type === \"Input\" || model[selectedNode].type === \"Output\"}\n                                                        onChange={e => {setModel(state => {\n                                                                            const stateCopy = [...state]\n                                                                        \n                                                                            stateCopy[selectedNode] = {\n                                                                                ...stateCopy[selectedNode],\n                                                                                value: Number(e.target.value)\n                                                                            }\n                                                                        \n                                                                            return stateCopy\n                                                                        })\n                                                                        setRefreshDiagram(new Date().getTime())}} />\n                                                {model[selectedNode].type !== \"Input\" &&\n                                                    <>\n                                                        <label>Activation</label>\n                                                        <select value={model[selectedNode].activation} \n                                                                onChange={e => {setModel(state => {\n                                                                                    const stateCopy = [...state]\n                                                                                \n                                                                                    stateCopy[selectedNode] = {\n                                                                                        ...stateCopy[selectedNode],\n                                                                                        activation: e.target.value\n                                                                                    }\n                                                                                \n                                                                                    return stateCopy\n                                                                                })\n                                                                                setRefreshDiagram(new Date().getTime())}}>\n                                                                <option disabled defaultValue value=\"\"></option>\n                                                                <option value=\"sigmoid\">Sigmoid</option>\n                                                                <option value=\"softmax\">Softmax</option>\n                                                                <option value=\"softplus\">Softplus</option>\n                                                                <option value=\"softsign\">Softsign</option>\n                                                                <option value=\"swish\">Swish</option>\n                                                                <option value=\"selu\">Selu</option>\n                                                                <option value=\"tanh\">Tanh</option>\n                                                                <option value=\"elu\">Elu</option>\n                                                                <option value=\"exponential\">Exponential</option>\n                                                                <option value=\"gelu\">Gelu</option>\n                                                                <option value=\"hard_sigmoid\">Hard Sigmoid</option>\n                                                                <option value=\"linear\">Linear</option>\n                                                                <option value=\"relu\">Relu</option>\n                                                        </select>\n                                                    </>\n                                                }  \n                                            </div>\n                                            <div className=\"create-model-configuration\">\n                                                <div className=\"create-model-configuration-option\">\n                                                    <div>\n                                                        <label>Epochs</label>\n                                                        <input value={configuration.epochs} onChange={e => {setConfiguration(state => ({\n                                                                                                                ...state,\n                                                                                                                epochs: e.target.value\n                                                                                                            }))}} />\n                                                    </div>\n                                                    <div>\n                                                        <label>Training Split</label>\n                                                        <input value={configuration.training_split} onChange={e => {setConfiguration(state => ({\n                                                                                                                ...state,\n                                                                                                                training_split: e.target.value\n                                                                                                            }))}} />\n                                                    </div>\n                                                    <div>\n                                                        <label>Validation Split</label>\n                                                        <input value={configuration.validation_split} onChange={e => {setConfiguration(state => ({\n                                                                                                                ...state,\n                                                                                                                validation_split: e.target.value\n                                                                                                            }))}} />\n                                                    </div>\n                                                    <div>\n                                                        <label>Test Split</label>\n                                                        <input value={configuration.test_split} onChange={e => {setConfiguration(state => ({\n                                                                                                                ...state,\n                                                                                                                test_split: e.target.value\n                                                                                                            }))}} />\n                                                    </div>\n                                                    <div>\n                                                        <label>Minimum Improvement</label>\n                                                        <input value={configuration.improvement} onChange={e => {setConfiguration(state => ({\n                                                                                                                ...state,\n                                                                                                                improvement: e.target.value\n                                                                                                            }))}} />\n                                                    </div>\n                                                    <div>\n                                                        <label>Patience</label>\n                                                        <input value={configuration.patience} onChange={e => {setConfiguration(state => ({\n                                                                                                                ...state,\n                                                                                                                patience: e.target.value\n                                                                                                            }))}} />\n                                                    </div>\n                                                    <div>\n                                                        <label>Batch Size</label>\n                                                        <input value={configuration.batch} onChange={e => {setConfiguration(state => ({\n                                                                                                                ...state,\n                                                                                                                batch: e.target.value\n                                                                                                            }))}} />\n                                                    </div>\n                                                    <div>\n                                                        <label>Learning Rate Scheduler</label>\n                                                        <input className=\"create-model-configuration-option-checkbox\"\n                                                                type=\"checkbox\" \n                                                                onChange={e => {setConfiguration(state => ({\n                                                                    ...state,\n                                                                    lr_scheduler: !configuration.lr_scheduler\n                                                                }))}}\n                                                                checked={configuration.lr_scheduler} />\n                                                    </div>\n                                                    <div>\n                                                        <label>Optimiser</label>\n                                                        <select value={configuration.optimiser} onChange={e => {setConfiguration(state => ({\n                                                                                                                ...state,\n                                                                                                                optimiser: e.target.value\n                                                                                                            }))}}>\n                                                            <option disabled defaultValue value=\"\"></option>\n                                                            <option value=\"Adadelta\">Adadelta</option>\n                                                            <option value=\"Adagrad\">Adagrad</option>\n                                                            <option value=\"Adam\">Adam</option>\n                                                            <option value=\"Adamax\">Adamax</option>\n                                                            <option value=\"Ftrl\">Ftrl</option>\n                                                            <option value=\"Nadam\">Nadam</option>\n                                                            <option value=\"RMSprop\">RMSprop</option>\n                                                            <option value=\"SGD\">SGD</option>\n                                                        </select>\n                                                    </div>\n                                                    <div>\n                                                        <label>Loss</label>\n                                                        <select value={configuration.loss} onChange={e => {setConfiguration(state => ({\n                                                                                                                ...state,\n                                                                                                                loss: e.target.value\n                                                                                                            }))}}>\n                                                            <option disabled defaultValue value=\"\"></option>\n                                                            {uploadedDataset.labels.length === 2 &&\n                                                                <>\n                                                                    <option value=\"binary_crossentropy\">Binary Crossentropy</option>\n                                                                    <option value=\"hinge\">Hinge</option>\n                                                                    <option value=\"squared_hinge\">Squared Hinge</option>\n                                                                </>\n                                                            }\n                                                            {uploadedDataset.labels.length > 2 &&\n                                                                <>\n                                                                    <option value=\"categorical_crossentropy\">Categorical Crossentropy</option>\n                                                                    <option value=\"sparse_categorical_crossentropy\">Sparse Categorical Crossentropy</option>\n                                                                    <option value=\"kl_divergence\">Kullback Leibler Divergence</option>\n                                                                </>\n                                                            }\n                                                        </select>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                        {viewDataset && uploadedDataset &&\n                                            <div className=\"create-model-data\">\n                                                <p className=\"create-item-data-header\">Selected Dataset:</p>\n                                                <p className=\"create-item-data-header-dataset\">{uploadedDataset._id}</p>\n                                                <div className=\"create-model-data-images-list\" key={refreshData}>\n                                                    {images.map((image, i) => {\n                                                        if (i >= start && i < end) {\n                                                            return (\n                                                                <div className=\"create-model-data-image\" key={i}>\n                                                                    <img src={`http://127.0.0.1:5000/files/${uploadedDataset.imageFile}/${image}.jpg`} />\n                                                                    <p>{assignedLabels[i]}</p>\n                                                                </div>\n                                                            )\n                                                        }\n                                                    })}\n                                                </div>\n                                                <div className=\"create-model-data-pagination\">\n                                                    <ArrowBackIosNewIcon className=\"create-model-data-pagination-icon\" onClick={() => {previousPage()}} />\n                                                    <p>Page {page} / {Math.ceil(images.length/20)}</p>\n                                                    <ArrowForwardIosIcon className=\"create-model-data-pagination-icon\" onClick={() => {nextPage()}} />\n                                                </div>\n                                            </div>\n                                        }\n                                    </div>\n                                :\n                                    <p className=\"end-items\">Select a dataset...</p>\n                                }\n                            </>\n                        }\n                    </div>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default Workspace"]},"metadata":{},"sourceType":"module"}