{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Dataset.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useContext } from 'react';\nimport { useParams, useHistory } from \"react-router-dom\";\nimport itemsAPI from '../API/items';\nimport globalAPI from '../API/global';\nimport imageAPI from '../API/images';\nimport fileAPI from '../API/files';\nimport DataTable from '../Components/Data-Table';\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport ItemRowCard from '../Components/Item-Row-Card';\nimport ItemSquareCard from '../Components/Item-Square-Card';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Dataset = _ref => {\n  _s();\n\n  let {\n    currentUser\n  } = _ref;\n  const [loaded, setLoaded] = useState(false);\n  const [exist, setExist] = useState();\n  const [dataset, setDataset] = useState();\n  const [workspaces, setWorkspaces] = useState();\n  const [finishedWorkspaces, setFinishedWorkspaces] = useState(false);\n  const [section, setSection] = useState(\"data\");\n  const [dataTable, setDataTable] = useState();\n  const [updated, setUpdated] = useState();\n  const [start, setStart] = useState(0);\n  const [end, setEnd] = useState(30);\n  const [dataFile, setDataFile] = useState();\n  const [row, setRow] = useState();\n  const [maxRows, setMaxRows] = useState();\n  const [page, setPage] = useState(1);\n  const [rowFormat, setRowFormat] = useState(false);\n  const [changedData, setChangedData] = useState(false);\n  const [changedSettings, setChangedSettings] = useState(false);\n  const [date, setDate] = useState(\"\");\n  const [picture, setPicture] = useState();\n  const [copyData, setCopyData] = useState(true);\n  const [bookmarked, setBookmarked] = useState();\n  const [upvoted, setUpvoted] = useState();\n  const [images, setImages] = useState([]);\n  const [assignedLabels, setAssignedLabels] = useState([]);\n  const [labels, setLabels] = useState();\n  const [addLabel, setAddLabel] = useState(\"\");\n  const [upvotes, setUpvotes] = useState();\n  const [visibility, setVisibility] = useState();\n  const [targetAttribute, setTargetAttribute] = useState();\n  const [comments, setComments] = useState();\n  const [comment, setComment] = useState(\"\");\n  const [data, setData] = useState();\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [image, setImage] = useState();\n  const [refreshLabels, setRefreshLabels] = useState();\n  const [refreshData, setRefreshData] = useState();\n  const {\n    addOpenItems,\n    removeOpenItems\n  } = useContext(OpenItemsContext);\n  const copyInterval = useRef(0);\n  const datasetID = useParams().id;\n  const history = useHistory();\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const dataset = await itemsAPI.get(`/${datasetID}?type=dataset`);\n        const comments = await globalAPI.get(`/comment/${datasetID}`);\n        const workspaces = await itemsAPI.get(`/associated-workspaces?id=${datasetID}&date=${new Date().toISOString()}`);\n\n        if (workspaces.data.data.length < 21) {\n          setFinishedWorkspaces(true);\n        }\n\n        if (dataset.data.data.self) {\n          addOpenItems(dataset.data.data._id, dataset.data.data.title, dataset.data.data.type);\n        }\n\n        setDataset(dataset.data.data);\n        setUpdated(dataset.data.data.updated);\n        setBookmarked(dataset.data.data.bookmarked);\n        setUpvoted(dataset.data.data.upvoted);\n        setData(dataset.data.data.datafile);\n        setUpvotes(dataset.data.data.upvotes);\n        setVisibility(dataset.data.data.visibility);\n        setTitle(dataset.data.data.title);\n        setPicture(dataset.data.data.picture);\n        setDescription(dataset.data.data.description);\n        setWorkspaces(workspaces.data.data);\n        setComments(comments.data.data);\n\n        if (dataset.data.data.dataType === \"value\") {\n          setTargetAttribute(dataset.data.data.target);\n          fetch(`http://127.0.0.1:5000/files/${dataset.data.data.datafile}.csv`).then(response => response.text()).then(text => {\n            setDataTable(text);\n            setMaxRows(text.slice(text.indexOf('\\n') + 1).split('\\n').length);\n            setExist(true);\n            setLoaded(true);\n          }).catch(() => {\n            setExist(true);\n            setLoaded(true);\n          });\n        } else {\n          setLabels(dataset.data.data.labels);\n          fetch(`http://127.0.0.1:5000/files/${dataset.data.data.datafile}/labels.json`).then(response => response.json()).then(images => {\n            images.map(image => {\n              setImages(state => [...state, image.filename]);\n              setAssignedLabels(state => [...state, image.label]);\n            });\n            setExist(true);\n            setLoaded(true);\n          }).catch(() => {\n            setExist(true);\n            setLoaded(true);\n          });\n        }\n      } catch (err) {\n        setExist(false);\n        setLoaded(true);\n      }\n    };\n\n    fetchData();\n  }, []);\n  useEffect(() => {\n    if (loaded && exist) {\n      const updatedDate = new Date(updated);\n      const currentDate = new Date();\n\n      if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365).toString()} years ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n        setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24)).toString()} days ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600)).toString()} hours ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60)).toString()} minutes ago`);\n      } else {\n        setDate(\"Updated just now\");\n      }\n    }\n  }, [loaded, updated]);\n\n  const fetchDataWorkspaces = async date => {\n    if (!finishedWorkspaces) {\n      try {\n        const fetchedWorkspaces = await itemsAPI.get(`/associated-workspaces?id=${datasetID}&date=${date}`);\n        ;\n\n        if (fetchedWorkspaces.data.data.length < 21) {\n          setFinishedWorkspaces(true);\n        }\n\n        setWorkspaces(items => [...items, ...fetchedWorkspaces.data.data]);\n      } catch (err) {}\n    }\n  };\n\n  const loadMore = () => {\n    if (workspaces.length !== 0) {\n      {\n        fetchDataWorkspaces(workspaces[workspaces.length - 1].createdAt);\n      }\n    }\n  };\n\n  const copiedInterval = () => {\n    clearInterval(copyInterval.current);\n    navigator.clipboard.writeText(dataset.data);\n    setCopyData(false);\n    copyInterval.current = setInterval(() => {\n      setCopyData(true);\n    }, 800);\n    return () => {\n      clearInterval(copyInterval.current);\n    };\n  };\n\n  const updateUpvote = async () => {\n    try {\n      await globalAPI.put(`/upvote/${dataset._id}?state=${upvoted}`);\n\n      if (upvoted) {\n        setUpvotes(state => state - 1);\n      } else {\n        setUpvotes(state => state + 1);\n      }\n\n      setUpvoted(state => !state);\n    } catch (err) {}\n  };\n\n  const updateBookmark = async () => {\n    try {\n      await globalAPI.put(`/bookmark/${dataset._id}?state=${bookmarked}`);\n      setBookmarked(state => !state);\n    } catch (err) {}\n  };\n\n  const updateVisibility = async () => {\n    try {\n      await globalAPI.put(`/visibility/${dataset._id}`);\n      setVisibility(state => !state);\n    } catch (err) {}\n  };\n\n  const addComment = async e => {\n    e.preventDefault();\n\n    try {\n      await globalAPI.put(`/comment/${datasetID}`, {\n        comment: comment\n      });\n      setComments([{\n        user: {\n          name: currentUser.name\n        },\n        comment: comment\n      }, ...comments]);\n      setComment(\"\");\n    } catch (err) {}\n  };\n\n  const fetchRow = () => {\n    if (!isNaN(row) && row !== \"\") {\n      setStart(row - 1);\n      setEnd(row);\n      setRefreshData(new Date().getTime());\n    } else {\n      if (start === (page - 1) * 30 && end === page * 30) {\n        setRow(\"\");\n      } else {\n        setStart((page - 1) * 30);\n        setEnd(page * 30);\n        setRefreshData(new Date().getTime());\n      }\n    }\n  };\n\n  const cancelRow = () => {\n    if (!(start === (page - 1) * 30 && end === page * 30)) {\n      setStart((page - 1) * 30);\n      setEnd(page * 30);\n      setRefreshData(new Date().getTime());\n    }\n\n    setRow(\"\");\n  };\n\n  const previousPage = () => {\n    if (page > 1) {\n      setStart((page - 2) * 30);\n      setEnd((page - 1) * 30);\n      setPage(state => state - 1);\n      setRefreshData(new Date().getTime());\n    }\n  };\n\n  const nextPage = () => {\n    if (dataset.dataType === \"value\" && page * 30 < maxRows && maxRows > 30 || dataset.dataType === \"image\" && page * 30 < maxRows && maxRows > 30) {\n      setPage(state => state + 1);\n      setStart(page * 30);\n      setEnd((page + 1) * 30);\n      setRefreshData(new Date().getTime());\n    }\n  };\n\n  const commentDate = date => {\n    const updatedDate = new Date(date);\n    const currentDate = new Date();\n\n    if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n      return `Posted ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365).toString()} years ago`;\n    } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n      return `Posted ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`;\n    } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n      return `Posted ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24)).toString()} days ago`;\n    } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n      return `Posted ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600)).toString()} hours ago`;\n    } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n      return `Posted ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60)).toString()} minutes ago`;\n    } else {\n      return \"Posted just now\";\n    }\n  };\n\n  const updateDataset = async () => {\n    if (image) {\n      const formImage = new FormData();\n      formImage.append('image', image);\n\n      try {\n        const tempPicture = picture;\n        const imageResponse = await imageAPI.post(\"/upload\", formImage);\n        await itemsAPI.put(`/${datasetID}?type=dataset`, {\n          title: title,\n          description: description,\n          picture: imageResponse.data.data,\n          datafile: data,\n          updated: new Date().toISOString()\n        });\n        setImage(undefined);\n        setPicture(imageResponse.data.data);\n\n        if (tempPicture !== \"default.png\") {\n          await imageAPI.put('/remove', {\n            picture: tempPicture\n          });\n        }\n      } catch (err) {}\n    } else {\n      try {\n        await itemsAPI.put(`/${datasetID}?type=dataset`, {\n          title: title,\n          description: description,\n          picture: picture,\n          datafile: data,\n          updated: new Date().toISOString()\n        });\n      } catch (err) {}\n    }\n\n    setUpdated(new Date().toISOString());\n    setChangedSettings(false);\n  };\n\n  const replaceData = async () => {\n    if (dataFile !== undefined && (dataset.dataType === \"image\" && !assignedLabels.includes(\"No label\") || dataset.dataType === \"value\" && targetAttribute !== \"\")) {\n      const formData = new FormData();\n      const file = dataFile;\n      const reader = new FileReader();\n      const removeData = new FormData();\n      const id = new Date().toISOString();\n\n      reader.onload = function (e) {\n        setDataTable(e.target.result);\n        setMaxRows(e.target.result.slice(e.target.result.indexOf('\\n') + 1).split('\\n').length);\n        setRefreshData(new Date().getTime());\n      };\n\n      reader.readAsText(file);\n      formData.append('data', dataFile);\n      formData.append('id', id);\n      removeData.append('id', dataset.datafile);\n\n      try {\n        await itemsAPI.put(`/${datasetID}?type=dataset`, {\n          title: title,\n          description: description,\n          picture: picture,\n          datafile: id,\n          updated: new Date().toISOString()\n        });\n        await fileAPI.post(\"/upload\", formData);\n        await fileAPI.post(\"/remove\", formData);\n        setData(id);\n        setUpdated(new Date().toISOString());\n        setDataFile(undefined);\n        setChangedData(false);\n      } catch (err) {}\n    }\n  };\n\n  const deleteDataset = async () => {\n    try {\n      await itemsAPI.delete(`/${datasetID}`);\n      removeOpenItems(datasetID);\n      history.replace(\"/home\");\n    } catch (err) {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loaded && exist ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"width-body\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-top\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"item-picture\",\n            src: `http://localhost:4000/images/${picture}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 29\n          }, this), dataset.self && /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"item-image-input\",\n            type: \"file\",\n            name: \"image\",\n            onChange: e => {\n              setImage(e.target.files[0]);\n              {\n                !changedSettings && setChangedSettings(true);\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"item-heading\",\n            children: dataset.self ? /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"item-title-input\",\n              placeholder: \"Title\",\n              value: title,\n              onChange: e => {\n                setTitle(e.target.value);\n                {\n                  !changedSettings && setChangedSettings(true);\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 399,\n              columnNumber: 37\n            }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: \"http://localhost:3000/dataset.png\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 408,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n                children: dataset.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 409,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [!dataset.self && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"item-meta\",\n              children: dataset.creatorName.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 51\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"item-meta\",\n              children: date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 415,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 33\n            }, this), !dataset.self && /*#__PURE__*/_jsxDEV(BookmarkIcon, {\n              className: `item-icon ${bookmarked ? \"blue\" : \"grey\"}`,\n              onClick: () => {\n                updateBookmark();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 51\n            }, this), dataset.self && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: visibility ? /*#__PURE__*/_jsxDEV(VisibilityIcon, {\n                className: \"item-visibility\",\n                onClick: () => {\n                  updateVisibility();\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 421,\n                columnNumber: 45\n              }, this) : /*#__PURE__*/_jsxDEV(VisibilityOffIcon, {\n                className: \"item-visibility\",\n                onClick: () => {\n                  updateVisibility();\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 423,\n                columnNumber: 45\n              }, this)\n            }, void 0, false), /*#__PURE__*/_jsxDEV(ThumbUpIcon, {\n              className: `item-icon ${upvoted ? \"blue\" : \"grey\"}`,\n              onClick: () => {\n                updateUpvote();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: `item-upvotes ${upvoted ? \"blue\" : \"grey\"}`,\n              children: upvotes\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 29\n          }, this), dataset.self ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n              className: \"item-description-input\",\n              placeholder: \"Description\",\n              value: description,\n              onChange: e => {\n                setDescription(e.target.value);\n                {\n                  !changedSettings && setChangedSettings(true);\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"item-middle\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"dark-grey-button item-delete\",\n                onClick: () => {\n                  deleteDataset();\n                },\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 440,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `item-save ${!changedSettings ? \"grey-button\" : \"blue-button\"}`,\n                disabled: !changedSettings,\n                onClick: () => {\n                  updateDataset();\n                },\n                children: \"Save Changes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 442,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 439,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"item-description\",\n            children: dataset.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"item-select\",\n            onChange: e => {\n              setSection(e.target.value);\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"data\",\n              children: \"Data\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 451,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"workspaces\",\n              children: \"Workspaces\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"comments\",\n              children: \"Comments\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-bottom\",\n          children: section === \"data\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"item-options\",\n              children: [dataset.self && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Change Data\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 462,\n                  columnNumber: 49\n                }, this), dataset.dataType === \"value\" ? /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"file\",\n                  name: \"data\",\n                  accept: \".txt, .csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\",\n                  onChange: e => {\n                    setDataFile(e.target.files[0]);\n                    setPage(1);\n                    setChangedData(true);\n                    setRefreshData(new Date().getTime());\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 464,\n                  columnNumber: 53\n                }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"file\",\n                  name: \"data\",\n                  accept: \"image/*\",\n                  multiple: true,\n                  onChange: e => {\n                    setDataFile(e.target.files);\n                    setAssignedLabels(Array(e.target.files.length).fill(\"No label\"));\n                    setPage(1);\n                    setChangedData(true);\n                    setRefreshData(new Date().getTime());\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 474,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"blue-button item-replace-button\",\n                  disabled: !changedData,\n                  onClick: () => {\n                    replaceData();\n                  },\n                  children: \"Upload\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 486,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"white-button item-replace-button\",\n                  onClick: () => {\n                    setDataFile(undefined);\n                    setChangedData(false);\n                  },\n                  disabled: !changedData,\n                  children: \"Clear\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 489,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"dataset-copy\",\n                children: [copyData ? /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Data ID\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 498,\n                  columnNumber: 57\n                }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Copied\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 498,\n                  columnNumber: 74\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  disabled: !copyData,\n                  onClick: () => {\n                    copiedInterval();\n                  },\n                  children: /*#__PURE__*/_jsxDEV(ContentCopyIcon, {\n                    className: \"dataset-copy-icon\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 500,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 499,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 497,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n                href: `http://127.0.0.1:5000/files/${dataset.datafile}.csv`,\n                download: true,\n                children: \"Download\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 503,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 459,\n              columnNumber: 37\n            }, this), dataset.dataType === \"image\" && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"item-labels-row\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"item-label-input\",\n                placeholder: \"Label name\",\n                onChange: e => {\n                  setAddLabel(e.target.value);\n                },\n                value: addLabel\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 507,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"blue-button\",\n                onClick: () => {\n                  addLabel !== \"\" && !labels.includes(addLabel) && setLabels(state => [...state, addLabel]);\n                  setAddLabel(\"\");\n                },\n                children: \"Add\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 511,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"item-labels-list\",\n                children: labels.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"No labels created\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 518,\n                  columnNumber: 53\n                }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: labels.map((label, i) => {\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"item-created-label\",\n                      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                        children: label\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 524,\n                        columnNumber: 69\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        onClick: () => {\n                          assignedLabels.map((assignedLabel, j) => {\n                            if (assignedLabel === labels[i]) {\n                              setAssignedLabels(state => {\n                                const stateCopy = [...state];\n                                stateCopy[j] = \"No label\";\n                                return stateCopy;\n                              });\n                            }\n                          });\n                          labels.splice(i, 1);\n                          setRefreshLabels(new Date().getTime());\n                        },\n                        children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n                          className: \"item-created-label-close\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 540,\n                          columnNumber: 73\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 525,\n                        columnNumber: 69\n                      }, this)]\n                    }, i, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 523,\n                      columnNumber: 65\n                    }, this);\n                  })\n                }, void 0, false)\n              }, refreshLabels, false, {\n                fileName: _jsxFileName,\n                lineNumber: 516,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 506,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"item-data-table-pagination\",\n              children: [dataset.dataType === \"value\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  placeholder: \"Row number\",\n                  value: row,\n                  onChange: e => {\n                    setRow(e.target.value);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 553,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => {\n                    cancelRow();\n                  },\n                  className: \"white-button item-data-cancel-find\",\n                  children: \"Cancel\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 554,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => {\n                    fetchRow();\n                  },\n                  className: \"blue-button item-data-find\",\n                  children: \"Find\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 555,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 556,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true), /*#__PURE__*/_jsxDEV(ArrowBackIosNewIcon, {\n                className: \"item-data-table-pagination-icon\",\n                onClick: () => {\n                  previousPage();\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 559,\n                columnNumber: 41\n              }, this), dataset.dataType === \"value\" ? /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Page \", page, \" / \", Math.ceil(maxRows / 30)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 561,\n                columnNumber: 45\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Page \", page, \" / \", Math.ceil(images.length / 30)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 563,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(ArrowForwardIosIcon, {\n                className: \"item-data-table-pagination-icon\",\n                onClick: () => {\n                  nextPage();\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 565,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 550,\n              columnNumber: 37\n            }, this), dataset.dataType === \"value\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"item-data-table\",\n              children: /*#__PURE__*/_jsxDEV(DataTable, {\n                dataTable: dataTable,\n                start: start,\n                end: end\n              }, refreshData, false, {\n                fileName: _jsxFileName,\n                lineNumber: 569,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 568,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"item-data-images\",\n              children: images.map((image, i) => {\n                if (i >= start && i < end) {\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"item-data-images-list\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                        src: `http://127.0.0.1:5000/files/${dataset.datafile}/${image}.jpg`\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 578,\n                        columnNumber: 65\n                      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                        value: assignedLabels[i],\n                        onChange: e => {\n                          setAssignedLabels(state => {\n                            const stateCopy = [...state];\n                            stateCopy[i] = e.target.value;\n                            return stateCopy;\n                          });\n                          setRefreshLabels(new Date().getTime());\n                        },\n                        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                          value: \"No label\",\n                          children: \"No label\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 588,\n                          columnNumber: 69\n                        }, this), labels.map((label, j) => /*#__PURE__*/_jsxDEV(\"option\", {\n                          value: label,\n                          children: label\n                        }, j, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 590,\n                          columnNumber: 73\n                        }, this))]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 579,\n                        columnNumber: 65\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 577,\n                      columnNumber: 61\n                    }, this)\n                  }, i, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 576,\n                    columnNumber: 57\n                  }, this);\n                }\n              })\n            }, refreshData, false, {\n              fileName: _jsxFileName,\n              lineNumber: 572,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true) : section === \"workspaces\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"item-workspaces\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: `${workspaces.length} Workspaces use this dataset`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 604,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: \"http://localhost:3000/List.png\",\n                className: \"item-workspaces-row-icon\",\n                onClick: () => {\n                  setRowFormat(true);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 605,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: \"http://localhost:3000/Grid.png\",\n                className: \"item-workspaces-grid-icon\",\n                onClick: () => {\n                  setRowFormat(false);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 606,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 603,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"item-workspaces-list\",\n              children: workspaces.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: workspaces.map((workspace, i) => {\n                  return rowFormat ? /*#__PURE__*/_jsxDEV(ItemRowCard, {\n                    item: workspace,\n                    creator: workspace.creatorName.name,\n                    currentUserID: currentUser.id,\n                    created: workspace.creator === currentUser.id\n                  }, i, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 612,\n                    columnNumber: 72\n                  }, this) : /*#__PURE__*/_jsxDEV(ItemSquareCard, {\n                    item: workspace,\n                    creator: workspace.creatorName.name,\n                    currentUserID: currentUser.id,\n                    created: workspace.creator === currentUser.id\n                  }, i, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 612,\n                    columnNumber: 230\n                  }, this);\n                })\n              }, void 0, false)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 608,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"item-workspaces-end\",\n              children: workspaces.length >= 0 && finishedWorkspaces ? /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"end-items\",\n                children: \"No more workspaces\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 619,\n                columnNumber: 45\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"load-items\",\n                onClick: () => {\n                  loadMore();\n                },\n                children: \"Load more\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 621,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 617,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"form\", {\n              className: \"item-comment-form\",\n              method: \"PUT\",\n              onSubmit: addComment,\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"item-comment\",\n                children: \"Leave a Comment\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 628,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                className: \"item-comment-input\",\n                placeholder: \"Write here\",\n                value: comment,\n                onChange: e => {\n                  setComment(e.target.value);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 629,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"blue-button\",\n                children: \"Comment\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 630,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 627,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"item-comments\",\n              children: comments.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"end-items\",\n                children: \"No comments\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 634,\n                columnNumber: 45\n              }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: comments.map((comment, i) => {\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"comment-card\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                        className: \"comment-card-user\",\n                        children: comment.user\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 641,\n                        columnNumber: 65\n                      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                        className: \"comment-card-date\",\n                        children: commentDate(comment.createdAt)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 642,\n                        columnNumber: 65\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 640,\n                      columnNumber: 61\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"comment-card-comment\",\n                      children: comment.comment\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 644,\n                      columnNumber: 61\n                    }, this)]\n                  }, i, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 639,\n                    columnNumber: 57\n                  }, this);\n                })\n              }, void 0, false)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 632,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 17\n    }, this) : loaded && !exist && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"width-body\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"item-exist\",\n        children: \"Cannot find dataset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 658,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 657,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(Dataset, \"0I32B8xnPS1VFN8gVxJgUTRaZ6k=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = Dataset;\nexport default Dataset;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dataset\");","map":{"version":3,"sources":["/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Dataset.jsx"],"names":["React","useState","useEffect","useRef","useContext","useParams","useHistory","itemsAPI","globalAPI","imageAPI","fileAPI","DataTable","OpenItemsContext","ItemRowCard","ItemSquareCard","BookmarkIcon","ThumbUpIcon","ContentCopyIcon","ArrowForwardIosIcon","ArrowBackIosNewIcon","VisibilityOffIcon","VisibilityIcon","CloseIcon","Dataset","currentUser","loaded","setLoaded","exist","setExist","dataset","setDataset","workspaces","setWorkspaces","finishedWorkspaces","setFinishedWorkspaces","section","setSection","dataTable","setDataTable","updated","setUpdated","start","setStart","end","setEnd","dataFile","setDataFile","row","setRow","maxRows","setMaxRows","page","setPage","rowFormat","setRowFormat","changedData","setChangedData","changedSettings","setChangedSettings","date","setDate","picture","setPicture","copyData","setCopyData","bookmarked","setBookmarked","upvoted","setUpvoted","images","setImages","assignedLabels","setAssignedLabels","labels","setLabels","addLabel","setAddLabel","upvotes","setUpvotes","visibility","setVisibility","targetAttribute","setTargetAttribute","comments","setComments","comment","setComment","data","setData","title","setTitle","description","setDescription","image","setImage","refreshLabels","setRefreshLabels","refreshData","setRefreshData","addOpenItems","removeOpenItems","copyInterval","datasetID","id","history","fetchData","get","Date","toISOString","length","self","_id","type","datafile","dataType","target","fetch","then","response","text","slice","indexOf","split","catch","json","map","state","filename","label","err","updatedDate","currentDate","getTime","Math","floor","toString","fetchDataWorkspaces","fetchedWorkspaces","items","loadMore","createdAt","copiedInterval","clearInterval","current","navigator","clipboard","writeText","setInterval","updateUpvote","put","updateBookmark","updateVisibility","addComment","e","preventDefault","user","name","fetchRow","isNaN","cancelRow","previousPage","nextPage","commentDate","updateDataset","formImage","FormData","append","tempPicture","imageResponse","post","undefined","replaceData","includes","formData","file","reader","FileReader","removeData","onload","result","readAsText","deleteDataset","delete","replace","files","value","creatorName","Array","fill","i","assignedLabel","j","stateCopy","splice","ceil","workspace","creator"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,MAApC,EAA4CC,UAA5C,QAA6D,OAA7D;AACA,SAAQC,SAAR,EAAmBC,UAAnB,QAAoC,kBAApC;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,cAAP,MAA2B,gCAA3B;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,eAAP,MAA4B,iCAA5B;AACA,OAAOC,mBAAP,MAAgC,qCAAhC;AACA,OAAOC,mBAAP,MAAgC,qCAAhC;AACA,OAAOC,iBAAP,MAA8B,mCAA9B;AACA,OAAOC,cAAP,MAA2B,gCAA3B;AACA,OAAOC,SAAP,MAAsB,2BAAtB;;;;AAEA,MAAMC,OAAO,GAAG,QAAmB;AAAA;;AAAA,MAAlB;AAACC,IAAAA;AAAD,GAAkB;AAC/B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBzB,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAAC0B,KAAD,EAAQC,QAAR,IAAoB3B,QAAQ,EAAlC;AACA,QAAM,CAAC4B,OAAD,EAAUC,UAAV,IAAwB7B,QAAQ,EAAtC;AACA,QAAM,CAAC8B,UAAD,EAAaC,aAAb,IAA8B/B,QAAQ,EAA5C;AACA,QAAM,CAACgC,kBAAD,EAAqBC,qBAArB,IAA8CjC,QAAQ,CAAC,KAAD,CAA5D;AACA,QAAM,CAACkC,OAAD,EAAUC,UAAV,IAAwBnC,QAAQ,CAAC,MAAD,CAAtC;AACA,QAAM,CAACoC,SAAD,EAAYC,YAAZ,IAA4BrC,QAAQ,EAA1C;AACA,QAAM,CAACsC,OAAD,EAAUC,UAAV,IAAwBvC,QAAQ,EAAtC;AACA,QAAM,CAACwC,KAAD,EAAQC,QAAR,IAAoBzC,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAAC0C,GAAD,EAAMC,MAAN,IAAgB3C,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM,CAAC4C,QAAD,EAAWC,WAAX,IAA0B7C,QAAQ,EAAxC;AACA,QAAM,CAAC8C,GAAD,EAAMC,MAAN,IAAgB/C,QAAQ,EAA9B;AACA,QAAM,CAACgD,OAAD,EAAUC,UAAV,IAAwBjD,QAAQ,EAAtC;AACA,QAAM,CAACkD,IAAD,EAAOC,OAAP,IAAkBnD,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACoD,SAAD,EAAYC,YAAZ,IAA4BrD,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACsD,WAAD,EAAcC,cAAd,IAAgCvD,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACwD,eAAD,EAAkBC,kBAAlB,IAAwCzD,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAAC0D,IAAD,EAAOC,OAAP,IAAkB3D,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAAC4D,OAAD,EAAUC,UAAV,IAAwB7D,QAAQ,EAAtC;AACA,QAAM,CAAC8D,QAAD,EAAWC,WAAX,IAA0B/D,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACgE,UAAD,EAAaC,aAAb,IAA8BjE,QAAQ,EAA5C;AACA,QAAM,CAACkE,OAAD,EAAUC,UAAV,IAAwBnE,QAAQ,EAAtC;AACA,QAAM,CAACoE,MAAD,EAASC,SAAT,IAAsBrE,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACsE,cAAD,EAAiBC,iBAAjB,IAAsCvE,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACwE,MAAD,EAASC,SAAT,IAAsBzE,QAAQ,EAApC;AACA,QAAM,CAAC0E,QAAD,EAAWC,WAAX,IAA0B3E,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAAC4E,OAAD,EAAUC,UAAV,IAAwB7E,QAAQ,EAAtC;AACA,QAAM,CAAC8E,UAAD,EAAaC,aAAb,IAA8B/E,QAAQ,EAA5C;AACA,QAAM,CAACgF,eAAD,EAAkBC,kBAAlB,IAAwCjF,QAAQ,EAAtD;AACA,QAAM,CAACkF,QAAD,EAAWC,WAAX,IAA0BnF,QAAQ,EAAxC;AACA,QAAM,CAACoF,OAAD,EAAUC,UAAV,IAAwBrF,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACsF,IAAD,EAAOC,OAAP,IAAkBvF,QAAQ,EAAhC;AACA,QAAM,CAACwF,KAAD,EAAQC,QAAR,IAAoBzF,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAAC0F,WAAD,EAAcC,cAAd,IAAgC3F,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAAC4F,KAAD,EAAQC,QAAR,IAAoB7F,QAAQ,EAAlC;AACA,QAAM,CAAC8F,aAAD,EAAgBC,gBAAhB,IAAoC/F,QAAQ,EAAlD;AACA,QAAM,CAACgG,WAAD,EAAcC,cAAd,IAAgCjG,QAAQ,EAA9C;AACA,QAAM;AAACkG,IAAAA,YAAD;AAAeC,IAAAA;AAAf,MAAkChG,UAAU,CAACQ,gBAAD,CAAlD;AACA,QAAMyF,YAAY,GAAGlG,MAAM,CAAC,CAAD,CAA3B;AACA,QAAMmG,SAAS,GAAGjG,SAAS,GAAGkG,EAA9B;AACA,QAAMC,OAAO,GAAGlG,UAAU,EAA1B;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMuG,SAAS,GAAG,YAAY;AAC1B,UAAI;AACA,cAAM5E,OAAO,GAAG,MAAMtB,QAAQ,CAACmG,GAAT,CAAc,IAAGJ,SAAU,eAA3B,CAAtB;AACA,cAAMnB,QAAQ,GAAG,MAAM3E,SAAS,CAACkG,GAAV,CAAe,YAAWJ,SAAU,EAApC,CAAvB;AACA,cAAMvE,UAAU,GAAG,MAAMxB,QAAQ,CAACmG,GAAT,CAAc,6BAA4BJ,SAAU,SAAQ,IAAIK,IAAJ,GAAWC,WAAX,EAAyB,EAArF,CAAzB;;AAEA,YAAI7E,UAAU,CAACwD,IAAX,CAAgBA,IAAhB,CAAqBsB,MAArB,GAA8B,EAAlC,EAAsC;AAClC3E,UAAAA,qBAAqB,CAAC,IAAD,CAArB;AACH;;AAED,YAAIL,OAAO,CAAC0D,IAAR,CAAaA,IAAb,CAAkBuB,IAAtB,EAA4B;AACxBX,UAAAA,YAAY,CAACtE,OAAO,CAAC0D,IAAR,CAAaA,IAAb,CAAkBwB,GAAnB,EAAwBlF,OAAO,CAAC0D,IAAR,CAAaA,IAAb,CAAkBE,KAA1C,EAAiD5D,OAAO,CAAC0D,IAAR,CAAaA,IAAb,CAAkByB,IAAnE,CAAZ;AACH;;AAEDlF,QAAAA,UAAU,CAACD,OAAO,CAAC0D,IAAR,CAAaA,IAAd,CAAV;AACA/C,QAAAA,UAAU,CAACX,OAAO,CAAC0D,IAAR,CAAaA,IAAb,CAAkBhD,OAAnB,CAAV;AACA2B,QAAAA,aAAa,CAACrC,OAAO,CAAC0D,IAAR,CAAaA,IAAb,CAAkBtB,UAAnB,CAAb;AACAG,QAAAA,UAAU,CAACvC,OAAO,CAAC0D,IAAR,CAAaA,IAAb,CAAkBpB,OAAnB,CAAV;AACAqB,QAAAA,OAAO,CAAC3D,OAAO,CAAC0D,IAAR,CAAaA,IAAb,CAAkB0B,QAAnB,CAAP;AACAnC,QAAAA,UAAU,CAACjD,OAAO,CAAC0D,IAAR,CAAaA,IAAb,CAAkBV,OAAnB,CAAV;AACAG,QAAAA,aAAa,CAACnD,OAAO,CAAC0D,IAAR,CAAaA,IAAb,CAAkBR,UAAnB,CAAb;AACAW,QAAAA,QAAQ,CAAC7D,OAAO,CAAC0D,IAAR,CAAaA,IAAb,CAAkBE,KAAnB,CAAR;AACA3B,QAAAA,UAAU,CAACjC,OAAO,CAAC0D,IAAR,CAAaA,IAAb,CAAkB1B,OAAnB,CAAV;AACA+B,QAAAA,cAAc,CAAC/D,OAAO,CAAC0D,IAAR,CAAaA,IAAb,CAAkBI,WAAnB,CAAd;AACA3D,QAAAA,aAAa,CAACD,UAAU,CAACwD,IAAX,CAAgBA,IAAjB,CAAb;AACAH,QAAAA,WAAW,CAACD,QAAQ,CAACI,IAAT,CAAcA,IAAf,CAAX;;AAEA,YAAI1D,OAAO,CAAC0D,IAAR,CAAaA,IAAb,CAAkB2B,QAAlB,KAA+B,OAAnC,EAA4C;AACxChC,UAAAA,kBAAkB,CAACrD,OAAO,CAAC0D,IAAR,CAAaA,IAAb,CAAkB4B,MAAnB,CAAlB;AAEAC,UAAAA,KAAK,CAAE,+BAA8BvF,OAAO,CAAC0D,IAAR,CAAaA,IAAb,CAAkB0B,QAAS,MAA3D,CAAL,CACKI,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEUE,IAAI,IAAI;AACVjF,YAAAA,YAAY,CAACiF,IAAD,CAAZ;AACArE,YAAAA,UAAU,CAACqE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,OAAL,CAAa,IAAb,IAAmB,CAA9B,EAAiCC,KAAjC,CAAuC,IAAvC,EAA6Cb,MAA9C,CAAV;AACAjF,YAAAA,QAAQ,CAAC,IAAD,CAAR;AACAF,YAAAA,SAAS,CAAC,IAAD,CAAT;AACH,WAPL,EAOOiG,KAPP,CAOa,MAAM;AACX/F,YAAAA,QAAQ,CAAC,IAAD,CAAR;AACAF,YAAAA,SAAS,CAAC,IAAD,CAAT;AACH,WAVL;AAWH,SAdD,MAcO;AACHgD,UAAAA,SAAS,CAAC7C,OAAO,CAAC0D,IAAR,CAAaA,IAAb,CAAkBd,MAAnB,CAAT;AAEA2C,UAAAA,KAAK,CAAE,+BAA8BvF,OAAO,CAAC0D,IAAR,CAAaA,IAAb,CAAkB0B,QAAS,cAA3D,CAAL,CACKI,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACM,IAAT,EADtB,EAEKP,IAFL,CAEUhD,MAAM,IAAI;AACZA,YAAAA,MAAM,CAACwD,GAAP,CAAWhC,KAAK,IAAI;AAChBvB,cAAAA,SAAS,CAACwD,KAAK,IAAI,CAAC,GAAGA,KAAJ,EAAWjC,KAAK,CAACkC,QAAjB,CAAV,CAAT;AACAvD,cAAAA,iBAAiB,CAACsD,KAAK,IAAI,CAAC,GAAGA,KAAJ,EAAWjC,KAAK,CAACmC,KAAjB,CAAV,CAAjB;AACH,aAHD;AAIApG,YAAAA,QAAQ,CAAC,IAAD,CAAR;AACAF,YAAAA,SAAS,CAAC,IAAD,CAAT;AACH,WATL,EASOiG,KATP,CASa,MAAM;AACX/F,YAAAA,QAAQ,CAAC,IAAD,CAAR;AACAF,YAAAA,SAAS,CAAC,IAAD,CAAT;AACH,WAZL;AAaH;AACJ,OAzDD,CAyDE,OAAOuG,GAAP,EAAY;AACVrG,QAAAA,QAAQ,CAAC,KAAD,CAAR;AACAF,QAAAA,SAAS,CAAC,IAAD,CAAT;AACH;AACJ,KA9DD;;AA+DA+E,IAAAA,SAAS;AACZ,GAjEQ,EAiEN,EAjEM,CAAT;AAmEAvG,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIuB,MAAM,IAAIE,KAAd,EAAqB;AACjB,YAAMuG,WAAW,GAAG,IAAIvB,IAAJ,CAASpE,OAAT,CAApB;AACA,YAAM4F,WAAW,GAAG,IAAIxB,IAAJ,EAApB;;AAEA,UAAI,CAACwB,WAAW,CAACC,OAAZ,KAAwBF,WAAW,CAACE,OAAZ,EAAzB,KAAmD,OAAO,IAAP,GAAc,EAAjE,KAAwE,GAA5E,EAAiF;AAC7ExE,QAAAA,OAAO,CAAE,WAAUyE,IAAI,CAACC,KAAL,CAAY,CAACH,WAAW,CAACC,OAAZ,KAAwBF,WAAW,CAACE,OAAZ,EAAzB,KAAmD,OAAO,IAAP,GAAc,EAAjE,IAAuE,GAAnF,EAAyFG,QAAzF,EAAoG,YAAhH,CAAP;AACH,OAFD,MAEO,IAAI,CAACJ,WAAW,CAACC,OAAZ,KAAwBF,WAAW,CAACE,OAAZ,EAAzB,KAAmD,OAAO,IAAP,GAAc,EAAjE,KAAwE,EAA5E,EAAgF;AACnFxE,QAAAA,OAAO,CAAE,WAAUyE,IAAI,CAACC,KAAL,CAAW,CAAC,CAACH,WAAW,CAACC,OAAZ,KAAwBF,WAAW,CAACE,OAAZ,EAAzB,KAAmD,OAAO,IAAP,GAAc,EAAjE,IAAuE,EAAxE,EAA4EG,QAA5E,EAAX,CAAmG,aAA/G,CAAP;AACH,OAFM,MAEA,IAAI,CAACJ,WAAW,CAACC,OAAZ,KAAwBF,WAAW,CAACE,OAAZ,EAAzB,KAAmD,OAAO,IAAP,GAAc,EAAjE,KAAwE,CAA5E,EAA+E;AAClFxE,QAAAA,OAAO,CAAE,WAAUyE,IAAI,CAACC,KAAL,CAAY,CAACH,WAAW,CAACC,OAAZ,KAAwBF,WAAW,CAACE,OAAZ,EAAzB,KAAmD,OAAO,IAAP,GAAc,EAAjE,CAAZ,EAAmFG,QAAnF,EAA8F,WAA1G,CAAP;AACH,OAFM,MAEA,IAAI,CAACJ,WAAW,CAACC,OAAZ,KAAwBF,WAAW,CAACE,OAAZ,EAAzB,KAAmD,OAAO,IAA1D,KAAmE,CAAvE,EAA0E;AAC7ExE,QAAAA,OAAO,CAAE,WAAUyE,IAAI,CAACC,KAAL,CAAY,CAACH,WAAW,CAACC,OAAZ,KAAwBF,WAAW,CAACE,OAAZ,EAAzB,KAAmD,OAAO,IAA1D,CAAZ,EAA8EG,QAA9E,EAAyF,YAArG,CAAP;AACH,OAFM,MAEA,IAAI,CAACJ,WAAW,CAACC,OAAZ,KAAwBF,WAAW,CAACE,OAAZ,EAAzB,KAAmD,OAAO,EAA1D,KAAiE,CAArE,EAAwE;AAC3ExE,QAAAA,OAAO,CAAE,WAAUyE,IAAI,CAACC,KAAL,CAAY,CAACH,WAAW,CAACC,OAAZ,KAAwBF,WAAW,CAACE,OAAZ,EAAzB,KAAmD,OAAO,EAA1D,CAAZ,EAA4EG,QAA5E,EAAuF,cAAnG,CAAP;AACH,OAFM,MAEA;AACH3E,QAAAA,OAAO,CAAC,kBAAD,CAAP;AACH;AACJ;AACJ,GAnBQ,EAmBN,CAACnC,MAAD,EAASc,OAAT,CAnBM,CAAT;;AAqBA,QAAMiG,mBAAmB,GAAG,MAAO7E,IAAP,IAAgB;AACxC,QAAI,CAAC1B,kBAAL,EAAyB;AACrB,UAAI;AACA,cAAMwG,iBAAiB,GAAG,MAAMlI,QAAQ,CAACmG,GAAT,CAAc,6BAA4BJ,SAAU,SAAQ3C,IAAK,EAAjE,CAAhC;AAAoG;;AAEpG,YAAI8E,iBAAiB,CAAClD,IAAlB,CAAuBA,IAAvB,CAA4BsB,MAA5B,GAAqC,EAAzC,EAA6C;AACzC3E,UAAAA,qBAAqB,CAAC,IAAD,CAArB;AACH;;AAEDF,QAAAA,aAAa,CAAC0G,KAAK,IAAI,CAAC,GAAGA,KAAJ,EAAW,GAAGD,iBAAiB,CAAClD,IAAlB,CAAuBA,IAArC,CAAV,CAAb;AACH,OARD,CAQE,OAAO0C,GAAP,EAAY,CAAE;AACnB;AACJ,GAZD;;AAcA,QAAMU,QAAQ,GAAG,MAAM;AACnB,QAAI5G,UAAU,CAAC8E,MAAX,KAAsB,CAA1B,EAA6B;AACzB;AAAC2B,QAAAA,mBAAmB,CAACzG,UAAU,CAACA,UAAU,CAAC8E,MAAX,GAAkB,CAAnB,CAAV,CAAgC+B,SAAjC,CAAnB;AAA+D;AACnE;AACJ,GAJD;;AAMA,QAAMC,cAAc,GAAG,MAAM;AACzBC,IAAAA,aAAa,CAACzC,YAAY,CAAC0C,OAAd,CAAb;AACAC,IAAAA,SAAS,CAACC,SAAV,CAAoBC,SAApB,CAA8BrH,OAAO,CAAC0D,IAAtC;AACAvB,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAqC,IAAAA,YAAY,CAAC0C,OAAb,GAAuBI,WAAW,CAAC,MAAM;AACrCnF,MAAAA,WAAW,CAAC,IAAD,CAAX;AACH,KAFiC,EAE/B,GAF+B,CAAlC;AAGA,WAAO,MAAK;AAAC8E,MAAAA,aAAa,CAACzC,YAAY,CAAC0C,OAAd,CAAb;AAAoC,KAAjD;AACH,GARD;;AAUA,QAAMK,YAAY,GAAG,YAAY;AAC7B,QAAI;AACA,YAAM5I,SAAS,CAAC6I,GAAV,CAAe,WAAUxH,OAAO,CAACkF,GAAI,UAAS5C,OAAQ,EAAtD,CAAN;;AAEA,UAAIA,OAAJ,EAAa;AACTW,QAAAA,UAAU,CAACgD,KAAK,IAAIA,KAAK,GAAC,CAAhB,CAAV;AACH,OAFD,MAEO;AACHhD,QAAAA,UAAU,CAACgD,KAAK,IAAIA,KAAK,GAAC,CAAhB,CAAV;AACH;;AAED1D,MAAAA,UAAU,CAAC0D,KAAK,IAAI,CAACA,KAAX,CAAV;AACH,KAVD,CAUE,OAAOG,GAAP,EAAY,CAAE;AACnB,GAZD;;AAcA,QAAMqB,cAAc,GAAG,YAAY;AAC/B,QAAI;AACA,YAAM9I,SAAS,CAAC6I,GAAV,CAAe,aAAYxH,OAAO,CAACkF,GAAI,UAAS9C,UAAW,EAA3D,CAAN;AAEAC,MAAAA,aAAa,CAAC4D,KAAK,IAAI,CAACA,KAAX,CAAb;AACH,KAJD,CAIE,OAAOG,GAAP,EAAY,CAAE;AACnB,GAND;;AAQA,QAAMsB,gBAAgB,GAAG,YAAY;AACjC,QAAI;AACA,YAAM/I,SAAS,CAAC6I,GAAV,CAAe,eAAcxH,OAAO,CAACkF,GAAI,EAAzC,CAAN;AAEA/B,MAAAA,aAAa,CAAC8C,KAAK,IAAI,CAACA,KAAX,CAAb;AACH,KAJD,CAIE,OAAOG,GAAP,EAAY,CAAE;AACnB,GAND;;AAQA,QAAMuB,UAAU,GAAG,MAAOC,CAAP,IAAa;AAC5BA,IAAAA,CAAC,CAACC,cAAF;;AAEA,QAAI;AACA,YAAMlJ,SAAS,CAAC6I,GAAV,CAAe,YAAW/C,SAAU,EAApC,EAAuC;AACzCjB,QAAAA,OAAO,EAAEA;AADgC,OAAvC,CAAN;AAIAD,MAAAA,WAAW,CAAC,CAAC;AACTuE,QAAAA,IAAI,EAAE;AAACC,UAAAA,IAAI,EAAEpI,WAAW,CAACoI;AAAnB,SADG;AAETvE,QAAAA,OAAO,EAAEA;AAFA,OAAD,EAGT,GAAGF,QAHM,CAAD,CAAX;AAIAG,MAAAA,UAAU,CAAC,EAAD,CAAV;AACH,KAVD,CAUE,OAAO2C,GAAP,EAAY,CAAE;AACnB,GAdD;;AAgBA,QAAM4B,QAAQ,GAAG,MAAM;AACnB,QAAI,CAACC,KAAK,CAAC/G,GAAD,CAAN,IAAeA,GAAG,KAAK,EAA3B,EAA+B;AAC3BL,MAAAA,QAAQ,CAACK,GAAG,GAAC,CAAL,CAAR;AACAH,MAAAA,MAAM,CAACG,GAAD,CAAN;AACAmD,MAAAA,cAAc,CAAC,IAAIS,IAAJ,GAAWyB,OAAX,EAAD,CAAd;AACH,KAJD,MAIO;AACH,UAAI3F,KAAK,KAAK,CAACU,IAAI,GAAC,CAAN,IAAS,EAAnB,IAAyBR,GAAG,KAAKQ,IAAI,GAAC,EAA1C,EAA8C;AAC1CH,QAAAA,MAAM,CAAC,EAAD,CAAN;AACH,OAFD,MAEO;AACHN,QAAAA,QAAQ,CAAC,CAACS,IAAI,GAAC,CAAN,IAAS,EAAV,CAAR;AACAP,QAAAA,MAAM,CAACO,IAAI,GAAC,EAAN,CAAN;AACA+C,QAAAA,cAAc,CAAC,IAAIS,IAAJ,GAAWyB,OAAX,EAAD,CAAd;AACH;AACJ;AACJ,GAdD;;AAgBA,QAAM2B,SAAS,GAAG,MAAM;AACpB,QAAI,EAAEtH,KAAK,KAAK,CAACU,IAAI,GAAC,CAAN,IAAS,EAAnB,IAAyBR,GAAG,KAAKQ,IAAI,GAAC,EAAxC,CAAJ,EAAiD;AAC7CT,MAAAA,QAAQ,CAAC,CAACS,IAAI,GAAC,CAAN,IAAS,EAAV,CAAR;AACAP,MAAAA,MAAM,CAACO,IAAI,GAAC,EAAN,CAAN;AACA+C,MAAAA,cAAc,CAAC,IAAIS,IAAJ,GAAWyB,OAAX,EAAD,CAAd;AACH;;AACDpF,IAAAA,MAAM,CAAC,EAAD,CAAN;AACH,GAPD;;AASA,QAAMgH,YAAY,GAAG,MAAM;AACvB,QAAI7G,IAAI,GAAG,CAAX,EAAc;AACVT,MAAAA,QAAQ,CAAC,CAACS,IAAI,GAAC,CAAN,IAAS,EAAV,CAAR;AACAP,MAAAA,MAAM,CAAC,CAACO,IAAI,GAAC,CAAN,IAAS,EAAV,CAAN;AACAC,MAAAA,OAAO,CAAC0E,KAAK,IAAIA,KAAK,GAAC,CAAhB,CAAP;AACA5B,MAAAA,cAAc,CAAC,IAAIS,IAAJ,GAAWyB,OAAX,EAAD,CAAd;AACH;AACJ,GAPD;;AASA,QAAM6B,QAAQ,GAAG,MAAM;AACnB,QAAKpI,OAAO,CAACqF,QAAR,KAAqB,OAArB,IAAgC/D,IAAI,GAAC,EAAL,GAAUF,OAA1C,IAAqDA,OAAO,GAAG,EAAhE,IACCpB,OAAO,CAACqF,QAAR,KAAqB,OAArB,IAAgC/D,IAAI,GAAC,EAAL,GAAUF,OAA1C,IAAqDA,OAAO,GAAG,EADpE,EACyE;AACrEG,MAAAA,OAAO,CAAC0E,KAAK,IAAIA,KAAK,GAAC,CAAhB,CAAP;AACApF,MAAAA,QAAQ,CAAES,IAAD,GAAO,EAAR,CAAR;AACAP,MAAAA,MAAM,CAAC,CAACO,IAAI,GAAC,CAAN,IAAS,EAAV,CAAN;AACA+C,MAAAA,cAAc,CAAC,IAAIS,IAAJ,GAAWyB,OAAX,EAAD,CAAd;AACH;AACJ,GARD;;AAUA,QAAM8B,WAAW,GAAIvG,IAAD,IAAU;AAC1B,UAAMuE,WAAW,GAAG,IAAIvB,IAAJ,CAAShD,IAAT,CAApB;AACA,UAAMwE,WAAW,GAAG,IAAIxB,IAAJ,EAApB;;AAEA,QAAI,CAACwB,WAAW,CAACC,OAAZ,KAAwBF,WAAW,CAACE,OAAZ,EAAzB,KAAmD,OAAO,IAAP,GAAc,EAAjE,KAAwE,GAA5E,EAAiF;AAC7E,aAAQ,UAASC,IAAI,CAACC,KAAL,CAAY,CAACH,WAAW,CAACC,OAAZ,KAAwBF,WAAW,CAACE,OAAZ,EAAzB,KAAmD,OAAO,IAAP,GAAc,EAAjE,IAAuE,GAAnF,EAAyFG,QAAzF,EAAoG,YAArH;AACH,KAFD,MAEO,IAAI,CAACJ,WAAW,CAACC,OAAZ,KAAwBF,WAAW,CAACE,OAAZ,EAAzB,KAAmD,OAAO,IAAP,GAAc,EAAjE,KAAwE,EAA5E,EAAgF;AACnF,aAAQ,UAASC,IAAI,CAACC,KAAL,CAAW,CAAC,CAACH,WAAW,CAACC,OAAZ,KAAwBF,WAAW,CAACE,OAAZ,EAAzB,KAAmD,OAAO,IAAP,GAAc,EAAjE,IAAuE,EAAxE,EAA4EG,QAA5E,EAAX,CAAmG,aAApH;AACH,KAFM,MAEA,IAAI,CAACJ,WAAW,CAACC,OAAZ,KAAwBF,WAAW,CAACE,OAAZ,EAAzB,KAAmD,OAAO,IAAP,GAAc,EAAjE,KAAwE,CAA5E,EAA+E;AAClF,aAAQ,UAASC,IAAI,CAACC,KAAL,CAAY,CAACH,WAAW,CAACC,OAAZ,KAAwBF,WAAW,CAACE,OAAZ,EAAzB,KAAmD,OAAO,IAAP,GAAc,EAAjE,CAAZ,EAAmFG,QAAnF,EAA8F,WAA/G;AACH,KAFM,MAEA,IAAI,CAACJ,WAAW,CAACC,OAAZ,KAAwBF,WAAW,CAACE,OAAZ,EAAzB,KAAmD,OAAO,IAA1D,KAAmE,CAAvE,EAA0E;AAC7E,aAAQ,UAASC,IAAI,CAACC,KAAL,CAAY,CAACH,WAAW,CAACC,OAAZ,KAAwBF,WAAW,CAACE,OAAZ,EAAzB,KAAmD,OAAO,IAA1D,CAAZ,EAA8EG,QAA9E,EAAyF,YAA1G;AACH,KAFM,MAEA,IAAI,CAACJ,WAAW,CAACC,OAAZ,KAAwBF,WAAW,CAACE,OAAZ,EAAzB,KAAmD,OAAO,EAA1D,KAAiE,CAArE,EAAwE;AAC3E,aAAQ,UAASC,IAAI,CAACC,KAAL,CAAY,CAACH,WAAW,CAACC,OAAZ,KAAwBF,WAAW,CAACE,OAAZ,EAAzB,KAAmD,OAAO,EAA1D,CAAZ,EAA4EG,QAA5E,EAAuF,cAAxG;AACH,KAFM,MAEA;AACH,aAAO,iBAAP;AACH;AACJ,GAjBD;;AAmBA,QAAM4B,aAAa,GAAG,YAAY;AAC9B,QAAItE,KAAJ,EAAW;AACP,YAAMuE,SAAS,GAAG,IAAIC,QAAJ,EAAlB;AACAD,MAAAA,SAAS,CAACE,MAAV,CAAiB,OAAjB,EAA0BzE,KAA1B;;AAEA,UAAI;AACA,cAAM0E,WAAW,GAAG1G,OAApB;AACA,cAAM2G,aAAa,GAAG,MAAM/J,QAAQ,CAACgK,IAAT,CAAc,SAAd,EAAyBL,SAAzB,CAA5B;AAEA,cAAM7J,QAAQ,CAAC8I,GAAT,CAAc,IAAG/C,SAAU,eAA3B,EAA2C;AAC7Cb,UAAAA,KAAK,EAAEA,KADsC;AAE7CE,UAAAA,WAAW,EAAEA,WAFgC;AAG7C9B,UAAAA,OAAO,EAAE2G,aAAa,CAACjF,IAAd,CAAmBA,IAHiB;AAI7C0B,UAAAA,QAAQ,EAAE1B,IAJmC;AAK7ChD,UAAAA,OAAO,EAAE,IAAIoE,IAAJ,GAAWC,WAAX;AALoC,SAA3C,CAAN;AAQAd,QAAAA,QAAQ,CAAC4E,SAAD,CAAR;AACA5G,QAAAA,UAAU,CAAC0G,aAAa,CAACjF,IAAd,CAAmBA,IAApB,CAAV;;AAEA,YAAIgF,WAAW,KAAK,aAApB,EAAmC;AAC/B,gBAAM9J,QAAQ,CAAC4I,GAAT,CAAa,SAAb,EAAwB;AAACxF,YAAAA,OAAO,EAAE0G;AAAV,WAAxB,CAAN;AACH;AACJ,OAlBD,CAkBE,OAAOtC,GAAP,EAAY,CAAE;AACnB,KAvBD,MAuBO;AACH,UAAI;AACA,cAAM1H,QAAQ,CAAC8I,GAAT,CAAc,IAAG/C,SAAU,eAA3B,EAA2C;AAC7Cb,UAAAA,KAAK,EAAEA,KADsC;AAE7CE,UAAAA,WAAW,EAAEA,WAFgC;AAG7C9B,UAAAA,OAAO,EAAEA,OAHoC;AAI7CoD,UAAAA,QAAQ,EAAE1B,IAJmC;AAK7ChD,UAAAA,OAAO,EAAE,IAAIoE,IAAJ,GAAWC,WAAX;AALoC,SAA3C,CAAN;AAOH,OARD,CAQE,OAAOqB,GAAP,EAAY,CAAE;AACnB;;AAEDzF,IAAAA,UAAU,CAAC,IAAImE,IAAJ,GAAWC,WAAX,EAAD,CAAV;AACAlD,IAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACH,GAtCD;;AAwCA,QAAMiH,WAAW,GAAG,YAAY;AAC5B,QAAI9H,QAAQ,KAAK6H,SAAb,KAA4B7I,OAAO,CAACqF,QAAR,KAAqB,OAArB,IAAgC,CAAC3C,cAAc,CAACqG,QAAf,CAAwB,UAAxB,CAAlC,IACvB/I,OAAO,CAACqF,QAAR,KAAqB,OAArB,IAAgCjC,eAAe,KAAK,EADxD,CAAJ,EACkE;AAE9D,YAAM4F,QAAQ,GAAG,IAAIR,QAAJ,EAAjB;AACA,YAAMS,IAAI,GAAGjI,QAAb;AACA,YAAMkI,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACA,YAAMC,UAAU,GAAG,IAAIZ,QAAJ,EAAnB;AACA,YAAM9D,EAAE,GAAG,IAAII,IAAJ,GAAWC,WAAX,EAAX;;AAEAmE,MAAAA,MAAM,CAACG,MAAP,GAAgB,UAASzB,CAAT,EAAY;AACxBnH,QAAAA,YAAY,CAACmH,CAAC,CAACtC,MAAF,CAASgE,MAAV,CAAZ;AACAjI,QAAAA,UAAU,CAACuG,CAAC,CAACtC,MAAF,CAASgE,MAAT,CAAgB3D,KAAhB,CAAsBiC,CAAC,CAACtC,MAAF,CAASgE,MAAT,CAAgB1D,OAAhB,CAAwB,IAAxB,IAA8B,CAApD,EAAuDC,KAAvD,CAA6D,IAA7D,EAAmEb,MAApE,CAAV;AACAX,QAAAA,cAAc,CAAC,IAAIS,IAAJ,GAAWyB,OAAX,EAAD,CAAd;AACH,OAJD;;AAMA2C,MAAAA,MAAM,CAACK,UAAP,CAAkBN,IAAlB;AAEAD,MAAAA,QAAQ,CAACP,MAAT,CAAgB,MAAhB,EAAwBzH,QAAxB;AACAgI,MAAAA,QAAQ,CAACP,MAAT,CAAgB,IAAhB,EAAsB/D,EAAtB;AACA0E,MAAAA,UAAU,CAACX,MAAX,CAAkB,IAAlB,EAAwBzI,OAAO,CAACoF,QAAhC;;AAEA,UAAI;AACA,cAAM1G,QAAQ,CAAC8I,GAAT,CAAc,IAAG/C,SAAU,eAA3B,EAA2C;AAC7Cb,UAAAA,KAAK,EAAEA,KADsC;AAE7CE,UAAAA,WAAW,EAAEA,WAFgC;AAG7C9B,UAAAA,OAAO,EAAEA,OAHoC;AAI7CoD,UAAAA,QAAQ,EAAEV,EAJmC;AAK7ChE,UAAAA,OAAO,EAAE,IAAIoE,IAAJ,GAAWC,WAAX;AALoC,SAA3C,CAAN;AAQA,cAAMlG,OAAO,CAAC+J,IAAR,CAAa,SAAb,EAAwBI,QAAxB,CAAN;AACA,cAAMnK,OAAO,CAAC+J,IAAR,CAAa,SAAb,EAAwBI,QAAxB,CAAN;AAEArF,QAAAA,OAAO,CAACe,EAAD,CAAP;AACA/D,QAAAA,UAAU,CAAC,IAAImE,IAAJ,GAAWC,WAAX,EAAD,CAAV;AACA9D,QAAAA,WAAW,CAAC4H,SAAD,CAAX;AACAlH,QAAAA,cAAc,CAAC,KAAD,CAAd;AACH,OAhBD,CAgBE,OAAOyE,GAAP,EAAY,CAAE;AACnB;AACJ,GAxCD;;AA0CA,QAAMoD,aAAa,GAAG,YAAY;AAC9B,QAAI;AACA,YAAM9K,QAAQ,CAAC+K,MAAT,CAAiB,IAAGhF,SAAU,EAA9B,CAAN;AAEAF,MAAAA,eAAe,CAACE,SAAD,CAAf;AACAE,MAAAA,OAAO,CAAC+E,OAAR,CAAgB,OAAhB;AACH,KALD,CAKE,OAAOtD,GAAP,EAAY,CAAE;AACnB,GAPD;;AASA,sBACI;AAAA,cACKxG,MAAM,IAAIE,KAAV,gBACG;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA,kCACI;AAAK,YAAA,SAAS,EAAC,cAAf;AAA8B,YAAA,GAAG,EAAG,gCAA+BkC,OAAQ;AAA3E;AAAA;AAAA;AAAA;AAAA,kBADJ,EAEKhC,OAAO,CAACiF,IAAR,iBACG;AAAO,YAAA,SAAS,EAAC,kBAAjB;AACQ,YAAA,IAAI,EAAC,MADb;AAEQ,YAAA,IAAI,EAAC,OAFb;AAGQ,YAAA,QAAQ,EAAE2C,CAAC,IAAI;AACX3D,cAAAA,QAAQ,CAAC2D,CAAC,CAACtC,MAAF,CAASqE,KAAT,CAAe,CAAf,CAAD,CAAR;AACA;AAAC,iBAAC/H,eAAD,IAAoBC,kBAAkB,CAAC,IAAD,CAAtC;AAA6C;AACjD;AANT;AAAA;AAAA;AAAA;AAAA,kBAHR,eAWI;AAAK,YAAA,SAAS,EAAC,cAAf;AAAA,sBACK7B,OAAO,CAACiF,IAAR,gBACG;AAAO,cAAA,SAAS,EAAC,kBAAjB;AACQ,cAAA,WAAW,EAAC,OADpB;AAEQ,cAAA,KAAK,EAAErB,KAFf;AAGQ,cAAA,QAAQ,EAAEgE,CAAC,IAAI;AACX/D,gBAAAA,QAAQ,CAAC+D,CAAC,CAACtC,MAAF,CAASsE,KAAV,CAAR;AACA;AAAC,mBAAChI,eAAD,IAAoBC,kBAAkB,CAAC,IAAD,CAAtC;AAA6C;AACjD;AANT;AAAA;AAAA;AAAA;AAAA,oBADH,gBASG;AAAA,sCACI;AAAK,gBAAA,GAAG,EAAC;AAAT;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI;AAAA,0BAAK7B,OAAO,CAAC4D;AAAb;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA;AAVR;AAAA;AAAA;AAAA;AAAA,kBAXJ,eA2BI;AAAA,uBACK,CAAC5D,OAAO,CAACiF,IAAT,iBAAiB;AAAG,cAAA,SAAS,EAAC,WAAb;AAAA,wBAA0BjF,OAAO,CAAC6J,WAAR,CAAoB9B;AAA9C;AAAA;AAAA;AAAA;AAAA,oBADtB,eAEI;AAAG,cAAA,SAAS,EAAC,WAAb;AAAA,wBAA0BjG;AAA1B;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA,oBAHJ,EAIK,CAAC9B,OAAO,CAACiF,IAAT,iBAAiB,QAAC,YAAD;AAAc,cAAA,SAAS,EAAG,aAAY7C,UAAU,GAAG,MAAH,GAAY,MAAO,EAAnE;AAAsE,cAAA,OAAO,EAAE,MAAM;AAACqF,gBAAAA,cAAc;AAAG;AAAvG;AAAA;AAAA;AAAA;AAAA,oBAJtB,EAKKzH,OAAO,CAACiF,IAAR,iBACG;AAAA,wBACK/B,UAAU,gBACP,QAAC,cAAD;AAAgB,gBAAA,SAAS,EAAC,iBAA1B;AAA4C,gBAAA,OAAO,EAAE,MAAM;AAACwE,kBAAAA,gBAAgB;AAAG;AAA/E;AAAA;AAAA;AAAA;AAAA,sBADO,gBAGP,QAAC,iBAAD;AAAmB,gBAAA,SAAS,EAAC,iBAA7B;AAA+C,gBAAA,OAAO,EAAE,MAAM;AAACA,kBAAAA,gBAAgB;AAAG;AAAlF;AAAA;AAAA;AAAA;AAAA;AAJR,6BANR,eAcI,QAAC,WAAD;AAAa,cAAA,SAAS,EAAG,aAAYpF,OAAO,GAAG,MAAH,GAAY,MAAO,EAA/D;AAAkE,cAAA,OAAO,EAAE,MAAM;AAACiF,gBAAAA,YAAY;AAAG;AAAjG;AAAA;AAAA;AAAA;AAAA,oBAdJ,eAeI;AAAG,cAAA,SAAS,EAAG,gBAAejF,OAAO,GAAG,MAAH,GAAY,MAAO,EAAxD;AAAA,wBAA4DU;AAA5D;AAAA;AAAA;AAAA;AAAA,oBAfJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBA3BJ,EA4CKhD,OAAO,CAACiF,IAAR,gBACG;AAAA,oCACI;AAAU,cAAA,SAAS,EAAC,wBAApB;AACY,cAAA,WAAW,EAAC,aADxB;AAEY,cAAA,KAAK,EAAEnB,WAFnB;AAGY,cAAA,QAAQ,EAAE8D,CAAC,IAAI;AACX7D,gBAAAA,cAAc,CAAC6D,CAAC,CAACtC,MAAF,CAASsE,KAAV,CAAd;AACA;AAAC,mBAAChI,eAAD,IAAoBC,kBAAkB,CAAC,IAAD,CAAtC;AAA6C;AACjD;AANb;AAAA;AAAA;AAAA;AAAA,oBADJ,eAQI;AAAK,cAAA,SAAS,EAAC,aAAf;AAAA,sCACI;AAAQ,gBAAA,SAAS,EAAC,8BAAlB;AACQ,gBAAA,OAAO,EAAE,MAAM;AAAC2H,kBAAAA,aAAa;AAAG,iBADxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAGI;AAAQ,gBAAA,SAAS,EAAG,aAAY,CAAC5H,eAAD,GAAmB,aAAnB,GAAmC,aAAc,EAAjF;AACQ,gBAAA,QAAQ,EAAE,CAACA,eADnB;AAEQ,gBAAA,OAAO,EAAE,MAAM;AAAC0G,kBAAAA,aAAa;AAAG,iBAFxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBARJ;AAAA,0BADH,gBAkBG;AAAG,YAAA,SAAS,EAAC,kBAAb;AAAA,sBAAiCtI,OAAO,CAAC8D;AAAzC;AAAA;AAAA;AAAA;AAAA,kBA9DR,eAgEI;AAAQ,YAAA,SAAS,EAAC,aAAlB;AAAgC,YAAA,QAAQ,EAAE8D,CAAC,IAAI;AAACrH,cAAAA,UAAU,CAACqH,CAAC,CAACtC,MAAF,CAASsE,KAAV,CAAV;AAA2B,aAA3E;AAAA,oCACI;AAAQ,cAAA,KAAK,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAQ,cAAA,KAAK,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAGI;AAAQ,cAAA,KAAK,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAhEJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAuEI;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA,oBACKtJ,OAAO,KAAK,MAAZ,gBACG;AAAA,oCACI;AAAK,cAAA,SAAS,EAAC,cAAf;AAAA,yBACKN,OAAO,CAACiF,IAAR,iBACG;AAAA,wCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,EAEKjF,OAAO,CAACqF,QAAR,KAAqB,OAArB,gBACG;AAAO,kBAAA,IAAI,EAAC,MAAZ;AACQ,kBAAA,IAAI,EAAC,MADb;AAEQ,kBAAA,MAAM,EAAC,yGAFf;AAGQ,kBAAA,QAAQ,EAAEuC,CAAC,IAAI;AACX3G,oBAAAA,WAAW,CAAC2G,CAAC,CAACtC,MAAF,CAASqE,KAAT,CAAe,CAAf,CAAD,CAAX;AACApI,oBAAAA,OAAO,CAAC,CAAD,CAAP;AACAI,oBAAAA,cAAc,CAAC,IAAD,CAAd;AACA0C,oBAAAA,cAAc,CAAC,IAAIS,IAAJ,GAAWyB,OAAX,EAAD,CAAd;AACH;AART;AAAA;AAAA;AAAA;AAAA,wBADH,gBAWG;AAAO,kBAAA,IAAI,EAAC,MAAZ;AACQ,kBAAA,IAAI,EAAC,MADb;AAEQ,kBAAA,MAAM,EAAC,SAFf;AAGQ,kBAAA,QAAQ,MAHhB;AAIQ,kBAAA,QAAQ,EAAEqB,CAAC,IAAI;AACX3G,oBAAAA,WAAW,CAAC2G,CAAC,CAACtC,MAAF,CAASqE,KAAV,CAAX;AACAhH,oBAAAA,iBAAiB,CAACmH,KAAK,CAAClC,CAAC,CAACtC,MAAF,CAASqE,KAAT,CAAe3E,MAAhB,CAAL,CAA6B+E,IAA7B,CAAkC,UAAlC,CAAD,CAAjB;AACAxI,oBAAAA,OAAO,CAAC,CAAD,CAAP;AACAI,oBAAAA,cAAc,CAAC,IAAD,CAAd;AACA0C,oBAAAA,cAAc,CAAC,IAAIS,IAAJ,GAAWyB,OAAX,EAAD,CAAd;AACH;AAVT;AAAA;AAAA;AAAA;AAAA,wBAbR,eAyBI;AAAQ,kBAAA,SAAS,EAAC,iCAAlB;AACQ,kBAAA,QAAQ,EAAE,CAAC7E,WADnB;AAEQ,kBAAA,OAAO,EAAE,MAAM;AAACoH,oBAAAA,WAAW;AAAG,mBAFtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAzBJ,eA4BI;AAAQ,kBAAA,SAAS,EAAC,kCAAlB;AACQ,kBAAA,OAAO,EAAE,MAAM;AACX7H,oBAAAA,WAAW,CAAC4H,SAAD,CAAX;AACAlH,oBAAAA,cAAc,CAAC,KAAD,CAAd;AACH,mBAJT;AAKQ,kBAAA,QAAQ,EAAE,CAACD,WALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBA5BJ;AAAA,8BAFR,eAsCI;AAAK,gBAAA,SAAS,EAAC,cAAf;AAAA,2BACKQ,QAAQ,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAH,gBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADjC,eAEI;AAAQ,kBAAA,QAAQ,EAAE,CAACA,QAAnB;AAA6B,kBAAA,OAAO,EAAE,MAAM;AAAC8E,oBAAAA,cAAc;AAAG,mBAA9D;AAAA,yCACI,QAAC,eAAD;AAAiB,oBAAA,SAAS,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,wBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,sBAtCJ,eA4CI;AAAG,gBAAA,IAAI,EAAG,+BAA8BhH,OAAO,CAACoF,QAAS,MAAzD;AAAgE,gBAAA,QAAQ,MAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBA5CJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EA+CKpF,OAAO,CAACqF,QAAR,KAAqB,OAArB,iBACG;AAAK,cAAA,SAAS,EAAC,iBAAf;AAAA,sCACI;AAAO,gBAAA,SAAS,EAAC,kBAAjB;AACQ,gBAAA,WAAW,EAAC,YADpB;AAEQ,gBAAA,QAAQ,EAAEuC,CAAC,IAAI;AAAC7E,kBAAAA,WAAW,CAAC6E,CAAC,CAACtC,MAAF,CAASsE,KAAV,CAAX;AAA4B,iBAFpD;AAGQ,gBAAA,KAAK,EAAE9G;AAHf;AAAA;AAAA;AAAA;AAAA,sBADJ,eAKI;AAAQ,gBAAA,SAAS,EAAC,aAAlB;AACQ,gBAAA,OAAO,EAAE,MAAM;AACXA,kBAAAA,QAAQ,KAAK,EAAb,IAAmB,CAACF,MAAM,CAACmG,QAAP,CAAgBjG,QAAhB,CAApB,IAAiDD,SAAS,CAACoD,KAAK,IAAI,CAAC,GAAGA,KAAJ,EAAWnD,QAAX,CAAV,CAA1D;AACAC,kBAAAA,WAAW,CAAC,EAAD,CAAX;AACH,iBAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBALJ,eAUI;AAAK,gBAAA,SAAS,EAAC,kBAAf;AAAA,0BACKH,MAAM,CAACoC,MAAP,KAAkB,CAAlB,gBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADH,gBAGG;AAAA,4BACKpC,MAAM,CAACoD,GAAP,CAAW,CAACG,KAAD,EAAQ6D,CAAR,KAAc;AACtB,wCACI;AAAK,sBAAA,SAAS,EAAC,oBAAf;AAAA,8CACI;AAAA,kCAAI7D;AAAJ;AAAA;AAAA;AAAA;AAAA,8BADJ,eAEI;AAAK,wBAAA,OAAO,EAAE,MAAM;AAChBzD,0BAAAA,cAAc,CAACsD,GAAf,CAAmB,CAACiE,aAAD,EAAgBC,CAAhB,KAAsB;AACrC,gCAAID,aAAa,KAAKrH,MAAM,CAACoH,CAAD,CAA5B,EAAiC;AAC7BrH,8BAAAA,iBAAiB,CAACsD,KAAK,IAAI;AACvB,sCAAMkE,SAAS,GAAG,CAAC,GAAGlE,KAAJ,CAAlB;AAEAkE,gCAAAA,SAAS,CAACD,CAAD,CAAT,GAAe,UAAf;AAEA,uCAAOC,SAAP;AACH,+BANgB,CAAjB;AAOH;AACJ,2BAVD;AAWAvH,0BAAAA,MAAM,CAACwH,MAAP,CAAcJ,CAAd,EAAiB,CAAjB;AACA7F,0BAAAA,gBAAgB,CAAC,IAAIW,IAAJ,GAAWyB,OAAX,EAAD,CAAhB;AACH,yBAdD;AAAA,+CAeI,QAAC,SAAD;AAAW,0BAAA,SAAS,EAAC;AAArB;AAAA;AAAA;AAAA;AAAA;AAfJ;AAAA;AAAA;AAAA;AAAA,8BAFJ;AAAA,uBAAyCyD,CAAzC;AAAA;AAAA;AAAA;AAAA,4BADJ;AAsBH,mBAvBA;AADL;AAJR,iBAAuC9F,aAAvC;AAAA;AAAA;AAAA;AAAA,sBAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBAhDR,eA4FI;AAAK,cAAA,SAAS,EAAC,4BAAf;AAAA,yBACKlE,OAAO,CAACqF,QAAR,KAAoB,OAApB,iBACG;AAAA,wCACI;AAAO,kBAAA,WAAW,EAAC,YAAnB;AAAgC,kBAAA,KAAK,EAAEnE,GAAvC;AAA4C,kBAAA,QAAQ,EAAE0G,CAAC,IAAI;AAACzG,oBAAAA,MAAM,CAACyG,CAAC,CAACtC,MAAF,CAASsE,KAAV,CAAN;AAAuB;AAAnF;AAAA;AAAA;AAAA;AAAA,wBADJ,eAEI;AAAQ,kBAAA,OAAO,EAAE,MAAM;AAAC1B,oBAAAA,SAAS;AAAG,mBAApC;AAAsC,kBAAA,SAAS,EAAC,oCAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFJ,eAGI;AAAQ,kBAAA,OAAO,EAAE,MAAM;AAACF,oBAAAA,QAAQ;AAAG,mBAAnC;AAAqC,kBAAA,SAAS,EAAC,4BAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAHJ,eAII;AAAA;AAAA;AAAA;AAAA,wBAJJ;AAAA,8BAFR,eASI,QAAC,mBAAD;AAAqB,gBAAA,SAAS,EAAC,iCAA/B;AAAiE,gBAAA,OAAO,EAAE,MAAM;AAACG,kBAAAA,YAAY;AAAG;AAAhG;AAAA;AAAA;AAAA;AAAA,sBATJ,EAUKnI,OAAO,CAACqF,QAAR,KAAoB,OAApB,gBACG;AAAA,oCAAS/D,IAAT,SAAkBkF,IAAI,CAAC6D,IAAL,CAAUjJ,OAAO,GAAC,EAAlB,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,sBADH,gBAGG;AAAA,oCAASE,IAAT,SAAkBkF,IAAI,CAAC6D,IAAL,CAAU7H,MAAM,CAACwC,MAAP,GAAc,EAAxB,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,sBAbR,eAeI,QAAC,mBAAD;AAAqB,gBAAA,SAAS,EAAC,iCAA/B;AAAiE,gBAAA,OAAO,EAAE,MAAM;AAACoD,kBAAAA,QAAQ;AAAG;AAA5F;AAAA;AAAA;AAAA;AAAA,sBAfJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBA5FJ,EA6GKpI,OAAO,CAACqF,QAAR,KAAoB,OAApB,gBACG;AAAK,cAAA,SAAS,EAAC,iBAAf;AAAA,qCACI,QAAC,SAAD;AAAW,gBAAA,SAAS,EAAE7E,SAAtB;AAAiC,gBAAA,KAAK,EAAEI,KAAxC;AAA+C,gBAAA,GAAG,EAAEE;AAApD,iBAA8DsD,WAA9D;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBADH,gBAKG;AAAK,cAAA,SAAS,EAAC,kBAAf;AAAA,wBACK5B,MAAM,CAACwD,GAAP,CAAW,CAAChC,KAAD,EAAQgG,CAAR,KAAc;AACtB,oBAAIA,CAAC,IAAIpJ,KAAL,IAAcoJ,CAAC,GAAGlJ,GAAtB,EAA2B;AACvB,sCACI;AAAK,oBAAA,SAAS,EAAC,uBAAf;AAAA,2CACI;AAAA,8CACI;AAAK,wBAAA,GAAG,EAAG,+BAA8Bd,OAAO,CAACoF,QAAS,IAAGpB,KAAM;AAAnE;AAAA;AAAA;AAAA;AAAA,8BADJ,eAEI;AAAQ,wBAAA,KAAK,EAAEtB,cAAc,CAACsH,CAAD,CAA7B;AACQ,wBAAA,QAAQ,EAAEpC,CAAC,IAAI;AAACjF,0BAAAA,iBAAiB,CAACsD,KAAK,IAAI;AAC/B,kCAAMkE,SAAS,GAAG,CAAC,GAAGlE,KAAJ,CAAlB;AAEAkE,4BAAAA,SAAS,CAACH,CAAD,CAAT,GAAepC,CAAC,CAACtC,MAAF,CAASsE,KAAxB;AAEA,mCAAOO,SAAP;AACH,2BANwB,CAAjB;AAORhG,0BAAAA,gBAAgB,CAAC,IAAIW,IAAJ,GAAWyB,OAAX,EAAD,CAAhB;AAAuC,yBARvD;AAAA,gDASI;AAAQ,0BAAA,KAAK,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCATJ,EAUK3D,MAAM,CAACoD,GAAP,CAAW,CAACG,KAAD,EAAQ+D,CAAR,kBACR;AAAQ,0BAAA,KAAK,EAAE/D,KAAf;AAAA,oCAA+BA;AAA/B,2BAA2B+D,CAA3B;AAAA;AAAA;AAAA;AAAA,gCADH,CAVL;AAAA;AAAA;AAAA;AAAA;AAAA,8BAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,qBAA4CF,CAA5C;AAAA;AAAA;AAAA;AAAA,0BADJ;AAqBH;AACJ,eAxBA;AADL,eAAuC5F,WAAvC;AAAA;AAAA;AAAA;AAAA,oBAlHR;AAAA,0BADH,GAgJC9D,OAAO,KAAK,YAAZ,gBACE;AAAA,oCACI;AAAK,cAAA,SAAS,EAAC,iBAAf;AAAA,sCACI;AAAA,0BAAK,GAAEJ,UAAU,CAAC8E,MAAO;AAAzB;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI;AAAK,gBAAA,GAAG,EAAC,gCAAT;AAA0C,gBAAA,SAAS,EAAC,0BAApD;AAA+E,gBAAA,OAAO,EAAE,MAAM;AAACvD,kBAAAA,YAAY,CAAC,IAAD,CAAZ;AAAmB;AAAlH;AAAA;AAAA;AAAA;AAAA,sBAFJ,eAGI;AAAK,gBAAA,GAAG,EAAC,gCAAT;AAA0C,gBAAA,SAAS,EAAC,2BAApD;AAAgF,gBAAA,OAAO,EAAE,MAAM;AAACA,kBAAAA,YAAY,CAAC,KAAD,CAAZ;AAAoB;AAApH;AAAA;AAAA;AAAA;AAAA,sBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAMI;AAAK,cAAA,SAAS,EAAC,sBAAf;AAAA,wBACKvB,UAAU,CAAC8E,MAAX,GAAoB,CAApB,iBACG;AAAA,0BACK9E,UAAU,CAAC8F,GAAX,CAAe,CAACsE,SAAD,EAAYN,CAAZ,KAAkB;AAC9B,yBAAOxI,SAAS,gBAAG,QAAC,WAAD;AAAa,oBAAA,IAAI,EAAE8I,SAAnB;AAA8B,oBAAA,OAAO,EAAEA,SAAS,CAACT,WAAV,CAAsB9B,IAA7D;AAAmE,oBAAA,aAAa,EAAEpI,WAAW,CAAC+E,EAA9F;AAAkG,oBAAA,OAAO,EAAE4F,SAAS,CAACC,OAAV,KAAsB5K,WAAW,CAAC+E;AAA7I,qBAAsJsF,CAAtJ;AAAA;AAAA;AAAA;AAAA,0BAAH,gBAAiK,QAAC,cAAD;AAAgB,oBAAA,IAAI,EAAEM,SAAtB;AAAiC,oBAAA,OAAO,EAAEA,SAAS,CAACT,WAAV,CAAsB9B,IAAhE;AAAsE,oBAAA,aAAa,EAAEpI,WAAW,CAAC+E,EAAjG;AAAqG,oBAAA,OAAO,EAAE4F,SAAS,CAACC,OAAV,KAAsB5K,WAAW,CAAC+E;AAAhJ,qBAAyJsF,CAAzJ;AAAA;AAAA;AAAA;AAAA,0BAAjL;AACH,iBAFA;AADL;AAFR;AAAA;AAAA;AAAA;AAAA,oBANJ,eAeI;AAAK,cAAA,SAAS,EAAC,qBAAf;AAAA,wBACK9J,UAAU,CAAC8E,MAAX,IAAqB,CAArB,IAA0B5E,kBAA1B,gBACG;AAAG,gBAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADH,gBAGG;AAAG,gBAAA,SAAS,EAAC,YAAb;AAA0B,gBAAA,OAAO,EAAE,MAAM;AAAC0G,kBAAAA,QAAQ;AAAG,iBAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJR;AAAA;AAAA;AAAA;AAAA,oBAfJ;AAAA,0BADF,gBAyBE;AAAA,oCACI;AAAM,cAAA,SAAS,EAAC,mBAAhB;AAAoC,cAAA,MAAM,EAAC,KAA3C;AAAiD,cAAA,QAAQ,EAAEa,UAA3D;AAAA,sCACI;AAAG,gBAAA,SAAS,EAAC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI;AAAU,gBAAA,SAAS,EAAC,oBAApB;AAAyC,gBAAA,WAAW,EAAC,YAArD;AAAkE,gBAAA,KAAK,EAAEnE,OAAzE;AAAkF,gBAAA,QAAQ,EAAEoE,CAAC,IAAI;AAACnE,kBAAAA,UAAU,CAACmE,CAAC,CAACtC,MAAF,CAASsE,KAAV,CAAV;AAA2B;AAA7H;AAAA;AAAA;AAAA;AAAA,sBAFJ,eAGI;AAAQ,gBAAA,SAAS,EAAC,aAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAMI;AAAK,cAAA,SAAS,EAAC,eAAf;AAAA,wBACKtG,QAAQ,CAAC0B,MAAT,KAAoB,CAApB,gBACG;AAAG,gBAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADH,gBAGG;AAAA,0BACK1B,QAAQ,CAAC0C,GAAT,CAAa,CAACxC,OAAD,EAAUwG,CAAV,KAAgB;AAC1B,sCACI;AAAK,oBAAA,SAAS,EAAC,cAAf;AAAA,4CACI;AAAA,8CACI;AAAG,wBAAA,SAAS,EAAC,mBAAb;AAAA,kCAAkCxG,OAAO,CAACsE;AAA1C;AAAA;AAAA;AAAA;AAAA,8BADJ,eAEI;AAAG,wBAAA,SAAS,EAAC,mBAAb;AAAA,kCAAkCO,WAAW,CAAC7E,OAAO,CAACuD,SAAT;AAA7C;AAAA;AAAA;AAAA;AAAA,8BAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,4BADJ,eAKI;AAAG,sBAAA,SAAS,EAAC,sBAAb;AAAA,gCAAqCvD,OAAO,CAACA;AAA7C;AAAA;AAAA;AAAA;AAAA,4BALJ;AAAA,qBAAmCwG,CAAnC;AAAA;AAAA;AAAA;AAAA,0BADJ;AASH,iBAVA;AADL;AAJR;AAAA;AAAA;AAAA;AAAA,oBANJ;AAAA;AA1KR;AAAA;AAAA;AAAA;AAAA,gBAvEJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADH,GAiRGpK,MAAM,IAAI,CAACE,KAAX,iBACA;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,6BACI;AAAG,QAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAnRR,mBADJ;AA0RH,CAnoBD;;GAAMJ,O;UAwCgBlB,S,EACFC,U;;;KAzCdiB,O;AAqoBN,eAAeA,OAAf","sourcesContent":["import React, {useState, useEffect, useRef, useContext} from 'react'\nimport {useParams, useHistory} from \"react-router-dom\"\nimport itemsAPI from '../API/items'\nimport globalAPI from '../API/global'\nimport imageAPI from '../API/images'\nimport fileAPI from '../API/files'\nimport DataTable from '../Components/Data-Table';\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport ItemRowCard from '../Components/Item-Row-Card'\nimport ItemSquareCard from '../Components/Item-Square-Card'\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport CloseIcon from '@mui/icons-material/Close';\n\nconst Dataset = ({currentUser}) => {\n    const [loaded, setLoaded] = useState(false)\n    const [exist, setExist] = useState()\n    const [dataset, setDataset] = useState()\n    const [workspaces, setWorkspaces] = useState()\n    const [finishedWorkspaces, setFinishedWorkspaces] = useState(false)\n    const [section, setSection] = useState(\"data\")\n    const [dataTable, setDataTable] = useState()\n    const [updated, setUpdated] = useState()\n    const [start, setStart] = useState(0)\n    const [end, setEnd] = useState(30)\n    const [dataFile, setDataFile] = useState()\n    const [row, setRow] = useState()\n    const [maxRows, setMaxRows] = useState()\n    const [page, setPage] = useState(1)\n    const [rowFormat, setRowFormat] = useState(false)\n    const [changedData, setChangedData] = useState(false)\n    const [changedSettings, setChangedSettings] = useState(false)\n    const [date, setDate] = useState(\"\");\n    const [picture, setPicture] = useState()\n    const [copyData, setCopyData] = useState(true)\n    const [bookmarked, setBookmarked] = useState()\n    const [upvoted, setUpvoted] = useState()\n    const [images, setImages] = useState([])\n    const [assignedLabels, setAssignedLabels] = useState([])\n    const [labels, setLabels] = useState()\n    const [addLabel, setAddLabel] = useState(\"\")\n    const [upvotes, setUpvotes] = useState()\n    const [visibility, setVisibility] = useState()\n    const [targetAttribute, setTargetAttribute] = useState()\n    const [comments, setComments] = useState()\n    const [comment, setComment] = useState(\"\")\n    const [data, setData] = useState()\n    const [title, setTitle] = useState(\"\")\n    const [description, setDescription] = useState(\"\")\n    const [image, setImage] = useState();\n    const [refreshLabels, setRefreshLabels] = useState()\n    const [refreshData, setRefreshData] = useState()\n    const {addOpenItems, removeOpenItems} = useContext(OpenItemsContext);\n    const copyInterval = useRef(0)\n    const datasetID = useParams().id;\n    const history = useHistory()\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const dataset = await itemsAPI.get(`/${datasetID}?type=dataset`);\n                const comments = await globalAPI.get(`/comment/${datasetID}`);\n                const workspaces = await itemsAPI.get(`/associated-workspaces?id=${datasetID}&date=${new Date().toISOString()}`);\n\n                if (workspaces.data.data.length < 21) {\n                    setFinishedWorkspaces(true)\n                }\n\n                if (dataset.data.data.self) {\n                    addOpenItems(dataset.data.data._id, dataset.data.data.title, dataset.data.data.type)\n                }\n\n                setDataset(dataset.data.data);\n                setUpdated(dataset.data.data.updated);\n                setBookmarked(dataset.data.data.bookmarked)\n                setUpvoted(dataset.data.data.upvoted)\n                setData(dataset.data.data.datafile)\n                setUpvotes(dataset.data.data.upvotes)\n                setVisibility(dataset.data.data.visibility)\n                setTitle(dataset.data.data.title)\n                setPicture(dataset.data.data.picture)\n                setDescription(dataset.data.data.description)\n                setWorkspaces(workspaces.data.data)\n                setComments(comments.data.data)\n\n                if (dataset.data.data.dataType === \"value\") {\n                    setTargetAttribute(dataset.data.data.target)\n\n                    fetch(`http://127.0.0.1:5000/files/${dataset.data.data.datafile}.csv`)\n                        .then(response => response.text())\n                        .then(text => {\n                            setDataTable(text)\n                            setMaxRows(text.slice(text.indexOf('\\n')+1).split('\\n').length)\n                            setExist(true)\n                            setLoaded(true)\n                        }).catch(() => {\n                            setExist(true)\n                            setLoaded(true)\n                        });\n                } else {\n                    setLabels(dataset.data.data.labels)\n\n                    fetch(`http://127.0.0.1:5000/files/${dataset.data.data.datafile}/labels.json`)\n                        .then(response => response.json())\n                        .then(images => {\n                            images.map(image => {\n                                setImages(state => [...state, image.filename])\n                                setAssignedLabels(state => [...state, image.label])\n                            })\n                            setExist(true)\n                            setLoaded(true)\n                        }).catch(() => {\n                            setExist(true)\n                            setLoaded(true)\n                        });\n                }\n            } catch (err) {\n                setExist(false)\n                setLoaded(true)\n            }\n        }\n        fetchData();\n    }, [])\n\n    useEffect(() => {\n        if (loaded && exist) {\n            const updatedDate = new Date(updated);\n            const currentDate = new Date();\n    \n            if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} years ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} days ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hours ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minutes ago`)\n            } else {\n                setDate(\"Updated just now\")\n            }\n        }\n    }, [loaded, updated])\n\n    const fetchDataWorkspaces = async (date) => {\n        if (!finishedWorkspaces) {\n            try {\n                const fetchedWorkspaces = await itemsAPI.get(`/associated-workspaces?id=${datasetID}&date=${date}`);;\n    \n                if (fetchedWorkspaces.data.data.length < 21) {\n                    setFinishedWorkspaces(true)\n                }\n\n                setWorkspaces(items => [...items, ...fetchedWorkspaces.data.data]);\n            } catch (err) {}\n        }\n    }\n\n    const loadMore = () => {\n        if (workspaces.length !== 0) {\n            {fetchDataWorkspaces(workspaces[workspaces.length-1].createdAt)}\n        }\n    };\n\n    const copiedInterval = () => {\n        clearInterval(copyInterval.current)\n        navigator.clipboard.writeText(dataset.data);\n        setCopyData(false);\n        copyInterval.current = setInterval(() => {\n            setCopyData(true);\n        }, 800)\n        return ()=> {clearInterval(copyInterval.current)};\n    }\n\n    const updateUpvote = async () => {\n        try {\n            await globalAPI.put(`/upvote/${dataset._id}?state=${upvoted}`);\n\n            if (upvoted) {\n                setUpvotes(state => state-1)\n            } else {\n                setUpvotes(state => state+1)\n            }\n\n            setUpvoted(state => !state)\n        } catch (err) {}\n    }\n\n    const updateBookmark = async () => {\n        try {\n            await globalAPI.put(`/bookmark/${dataset._id}?state=${bookmarked}`);\n            \n            setBookmarked(state => !state)\n        } catch (err) {}\n    }\n\n    const updateVisibility = async () => {\n        try {\n            await globalAPI.put(`/visibility/${dataset._id}`);\n\n            setVisibility(state => !state)\n        } catch (err) {}\n    }\n\n    const addComment = async (e) => {\n        e.preventDefault()\n\n        try {\n            await globalAPI.put(`/comment/${datasetID}`, {\n                comment: comment\n            });\n\n            setComments([{\n                user: {name: currentUser.name},\n                comment: comment\n            }, ...comments])\n            setComment(\"\")\n        } catch (err) {}\n    }\n\n    const fetchRow = () => {\n        if (!isNaN(row) && row !== \"\") {\n            setStart(row-1)\n            setEnd(row)\n            setRefreshData(new Date().getTime())\n        } else {\n            if (start === (page-1)*30 && end === page*30) {\n                setRow(\"\")\n            } else {\n                setStart((page-1)*30)\n                setEnd(page*30)\n                setRefreshData(new Date().getTime())\n            }\n        }\n    }\n\n    const cancelRow = () => {\n        if (!(start === (page-1)*30 && end === page*30)) {\n            setStart((page-1)*30)\n            setEnd(page*30)\n            setRefreshData(new Date().getTime())\n        }\n        setRow(\"\")\n    }\n\n    const previousPage = () => {\n        if (page > 1) {\n            setStart((page-2)*30)\n            setEnd((page-1)*30)\n            setPage(state => state-1)\n            setRefreshData(new Date().getTime())\n        }\n    }\n    \n    const nextPage = () => {\n        if ((dataset.dataType === \"value\" && page*30 < maxRows && maxRows > 30) ||\n            (dataset.dataType === \"image\" && page*30 < maxRows && maxRows > 30)) {\n            setPage(state => state+1)\n            setStart((page)*30)\n            setEnd((page+1)*30)\n            setRefreshData(new Date().getTime())\n        }\n    }\n\n    const commentDate = (date) => {\n        const updatedDate = new Date(date);\n        const currentDate = new Date();\n\n        if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n            return `Posted ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} years ago`\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n            return `Posted ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n            return `Posted ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} days ago`\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n            return `Posted ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hours ago`\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n            return `Posted ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minutes ago`\n        } else {\n            return \"Posted just now\"\n        }\n    }\n\n    const updateDataset = async () => {\n        if (image) {\n            const formImage = new FormData();\n            formImage.append('image', image);\n            \n            try {\n                const tempPicture = picture\n                const imageResponse = await imageAPI.post(\"/upload\", formImage);\n\n                await itemsAPI.put(`/${datasetID}?type=dataset`, {\n                    title: title,\n                    description: description,\n                    picture: imageResponse.data.data,\n                    datafile: data,\n                    updated: new Date().toISOString()\n                })\n\n                setImage(undefined)\n                setPicture(imageResponse.data.data)\n\n                if (tempPicture !== \"default.png\") {\n                    await imageAPI.put('/remove', {picture: tempPicture});\n                }\n            } catch (err) {}\n        } else {\n            try {\n                await itemsAPI.put(`/${datasetID}?type=dataset`, {\n                    title: title,\n                    description: description,\n                    picture: picture,\n                    datafile: data,\n                    updated: new Date().toISOString()\n                })\n            } catch (err) {}\n        }\n\n        setUpdated(new Date().toISOString())\n        setChangedSettings(false)\n    }\n\n    const replaceData = async () => {\n        if (dataFile !== undefined && ((dataset.dataType === \"image\" && !assignedLabels.includes(\"No label\")) \n            || (dataset.dataType === \"value\" && targetAttribute !== \"\"))) {\n\n            const formData = new FormData();\n            const file = dataFile;\n            const reader = new FileReader();\n            const removeData = new FormData();\n            const id = new Date().toISOString();\n\n            reader.onload = function(e) {\n                setDataTable(e.target.result);\n                setMaxRows(e.target.result.slice(e.target.result.indexOf('\\n')+1).split('\\n').length)\n                setRefreshData(new Date().getTime())\n            }\n\n            reader.readAsText(file)\n            \n            formData.append('data', dataFile);\n            formData.append('id', id)\n            removeData.append('id', dataset.datafile)\n\n            try {\n                await itemsAPI.put(`/${datasetID}?type=dataset`, {\n                    title: title,\n                    description: description,\n                    picture: picture,\n                    datafile: id,\n                    updated: new Date().toISOString()\n                })\n\n                await fileAPI.post(\"/upload\", formData);\n                await fileAPI.post(\"/remove\", formData);\n\n                setData(id)\n                setUpdated(new Date().toISOString())\n                setDataFile(undefined)\n                setChangedData(false)\n            } catch (err) {}\n        }\n    }\n\n    const deleteDataset = async () => {\n        try {\n            await itemsAPI.delete(`/${datasetID}`)\n\n            removeOpenItems(datasetID)\n            history.replace(\"/home\")\n        } catch (err) {}\n    }\n\n    return (\n        <>\n            {loaded && exist ?\n                <div className=\"width-body\">  \n                    <div className=\"item-body\">\n                        <div className=\"item-top\">\n                            <img className=\"item-picture\" src={`http://localhost:4000/images/${picture}`} />\n                            {dataset.self && \n                                <input className=\"item-image-input\"\n                                        type=\"file\" \n                                        name=\"image\" \n                                        onChange={e => {\n                                            setImage(e.target.files[0])\n                                            {!changedSettings && setChangedSettings(true)}\n                                        }} />\n                            }\n                            <div className=\"item-heading\">\n                                {dataset.self ? \n                                    <input className=\"item-title-input\"\n                                            placeholder=\"Title\" \n                                            value={title}\n                                            onChange={e => {\n                                                setTitle(e.target.value)\n                                                {!changedSettings && setChangedSettings(true)}\n                                            }} /> \n                                : \n                                    <>\n                                        <img src=\"http://localhost:3000/dataset.png\" />\n                                        <h1>{dataset.title}</h1>\n                                    </>\n                                }\n                            </div>\n                            <div>\n                                {!dataset.self && <p className=\"item-meta\">{dataset.creatorName.name}</p>}\n                                <p className=\"item-meta\">{date}</p>\n                                <span />\n                                {!dataset.self && <BookmarkIcon className={`item-icon ${bookmarked ? \"blue\" : \"grey\"}`} onClick={() => {updateBookmark()}} />}\n                                {dataset.self && \n                                    <>\n                                        {visibility ? \n                                            <VisibilityIcon className=\"item-visibility\" onClick={() => {updateVisibility()}} />\n                                        :\n                                            <VisibilityOffIcon className=\"item-visibility\" onClick={() => {updateVisibility()}} />\n                                        }\n                                    </>\n                                }\n                                <ThumbUpIcon className={`item-icon ${upvoted ? \"blue\" : \"grey\"}`} onClick={() => {updateUpvote()}} />\n                                <p className={`item-upvotes ${upvoted ? \"blue\" : \"grey\"}`}>{upvotes}</p>\n                            </div>\n                            {dataset.self ? \n                                <>\n                                    <textarea className=\"item-description-input\"\n                                                placeholder=\"Description\" \n                                                value={description}\n                                                onChange={e => {\n                                                    setDescription(e.target.value)\n                                                    {!changedSettings && setChangedSettings(true)}\n                                                }} /> \n                                    <div className=\"item-middle\">\n                                        <button className=\"dark-grey-button item-delete\"\n                                                onClick={() => {deleteDataset()}}>Delete</button>\n                                        <button className={`item-save ${!changedSettings ? \"grey-button\" : \"blue-button\"}`}\n                                                disabled={!changedSettings}\n                                                onClick={() => {updateDataset()}}>Save Changes</button>\n                                    </div>\n                                </>\n                            : \n                                <p className=\"item-description\">{dataset.description}</p>\n                            }\n                            <select className=\"item-select\" onChange={e => {setSection(e.target.value)}}>\n                                <option value=\"data\">Data</option>\n                                <option value=\"workspaces\">Workspaces</option>\n                                <option value=\"comments\">Comments</option>\n                            </select>\n                        </div>\n                        <div className=\"item-bottom\">\n                            {section === \"data\" ? \n                                <> \n                                    <div className=\"item-options\">\n                                        {dataset.self && \n                                            <>\n                                                <p>Change Data</p>\n                                                {dataset.dataType === \"value\" ?\n                                                    <input type=\"file\" \n                                                            name=\"data\"\n                                                            accept=\".txt, .csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\"\n                                                            onChange={e => {\n                                                                setDataFile(e.target.files[0])\n                                                                setPage(1)\n                                                                setChangedData(true)\n                                                                setRefreshData(new Date().getTime())\n                                                            }} />\n                                                :\n                                                    <input type=\"file\" \n                                                            name=\"data\"\n                                                            accept=\"image/*\"\n                                                            multiple\n                                                            onChange={e => {\n                                                                setDataFile(e.target.files)\n                                                                setAssignedLabels(Array(e.target.files.length).fill(\"No label\"))\n                                                                setPage(1)\n                                                                setChangedData(true)\n                                                                setRefreshData(new Date().getTime())\n                                                            }} />\n                                                }\n                                                <button className=\"blue-button item-replace-button\"\n                                                        disabled={!changedData}\n                                                        onClick={() => {replaceData()}}>Upload</button>\n                                                <button className=\"white-button item-replace-button\"\n                                                        onClick={() => {\n                                                            setDataFile(undefined)\n                                                            setChangedData(false)\n                                                        }}\n                                                        disabled={!changedData}>Clear</button>\n                                            </>\n                                        }\n                                        <div className=\"dataset-copy\">\n                                            {copyData ? <p>Data ID</p> : <p>Copied</p>}\n                                            <button disabled={!copyData} onClick={() => {copiedInterval()}}>\n                                                <ContentCopyIcon className=\"dataset-copy-icon\" />\n                                            </button>\n                                        </div>\n                                        <a href={`http://127.0.0.1:5000/files/${dataset.datafile}.csv`} download>Download</a>\n                                    </div>\n                                    {dataset.dataType === \"image\" &&\n                                        <div className=\"item-labels-row\">\n                                            <input className=\"item-label-input\"\n                                                    placeholder=\"Label name\"\n                                                    onChange={e => {setAddLabel(e.target.value)}}\n                                                    value={addLabel} />\n                                            <button className=\"blue-button\"\n                                                    onClick={() => {\n                                                        addLabel !== \"\" && !labels.includes(addLabel) && setLabels(state => [...state, addLabel])\n                                                        setAddLabel(\"\")\n                                                    }}>Add</button>\n                                            <div className=\"item-labels-list\" key={refreshLabels}>\n                                                {labels.length === 0 ?\n                                                    <p>No labels created</p>\n                                                :\n                                                    <>\n                                                        {labels.map((label, i) => {\n                                                            return (\n                                                                <div className=\"item-created-label\" key={i}>\n                                                                    <p>{label}</p>\n                                                                    <div onClick={() => {\n                                                                        assignedLabels.map((assignedLabel, j) => {\n                                                                            if (assignedLabel === labels[i]) {\n                                                                                setAssignedLabels(state => {\n                                                                                    const stateCopy = [...state]\n                                                                                \n                                                                                    stateCopy[j] = \"No label\"\n                                                                                \n                                                                                    return stateCopy\n                                                                                })\n                                                                            }\n                                                                        })\n                                                                        labels.splice(i, 1)\n                                                                        setRefreshLabels(new Date().getTime())\n                                                                    }}>\n                                                                        <CloseIcon className=\"item-created-label-close\" /> \n                                                                    </div>\n                                                                </div>\n                                                            )\n                                                        })}\n                                                    </>\n                                                }\n                                            </div>\n                                        </div>\n                                    }\n                                    <div className=\"item-data-table-pagination\">\n                                        {dataset.dataType ===\"value\" &&\n                                            <>\n                                                <input placeholder=\"Row number\" value={row} onChange={e => {setRow(e.target.value)}} />\n                                                <button onClick={() => {cancelRow()}} className=\"white-button item-data-cancel-find\">Cancel</button>\n                                                <button onClick={() => {fetchRow()}} className=\"blue-button item-data-find\">Find</button>\n                                                <span />\n                                            </>\n                                        }\n                                        <ArrowBackIosNewIcon className=\"item-data-table-pagination-icon\" onClick={() => {previousPage()}} />\n                                        {dataset.dataType ===\"value\" ?\n                                            <p>Page {page} / {Math.ceil(maxRows/30)}</p>\n                                        :\n                                            <p>Page {page} / {Math.ceil(images.length/30)}</p>\n                                        }\n                                        <ArrowForwardIosIcon className=\"item-data-table-pagination-icon\" onClick={() => {nextPage()}} />\n                                    </div>\n                                    {dataset.dataType ===\"value\" ?\n                                        <div className=\"item-data-table\">\n                                            <DataTable dataTable={dataTable} start={start} end={end} key={refreshData} />\n                                        </div>\n                                    :\n                                        <div className=\"item-data-images\" key={refreshData}>\n                                            {images.map((image, i) => {\n                                                if (i >= start && i < end) {\n                                                    return (\n                                                        <div className=\"item-data-images-list\" key={i}>\n                                                            <div>\n                                                                <img src={`http://127.0.0.1:5000/files/${dataset.datafile}/${image}.jpg`} />\n                                                                <select value={assignedLabels[i]}\n                                                                        onChange={e => {setAssignedLabels(state => {\n                                                                                    const stateCopy = [...state]\n                                                                                \n                                                                                    stateCopy[i] = e.target.value\n                                                                                \n                                                                                    return stateCopy\n                                                                                })\n                                                                                setRefreshLabels(new Date().getTime())}}>\n                                                                    <option value=\"No label\">No label</option>\n                                                                    {labels.map((label, j) => \n                                                                        <option value={label} key={j}>{label}</option>\n                                                                    )}\n                                                                </select>\n                                                            </div>\n                                                        </div>\n                                                    )\n                                                }\n                                            })}\n                                        </div>\n                                    }\n                                </>\n                            : section === \"workspaces\" ?\n                                <>\n                                    <div className=\"item-workspaces\">\n                                        <p>{`${workspaces.length} Workspaces use this dataset`}</p>\n                                        <img src=\"http://localhost:3000/List.png\" className=\"item-workspaces-row-icon\" onClick={() => {setRowFormat(true)}} />\n                                        <img src=\"http://localhost:3000/Grid.png\" className=\"item-workspaces-grid-icon\" onClick={() => {setRowFormat(false)}} />\n                                    </div>\n                                    <div className=\"item-workspaces-list\">\n                                        {workspaces.length > 0 &&\n                                            <>\n                                                {workspaces.map((workspace, i) => {\n                                                    return rowFormat ? <ItemRowCard item={workspace} creator={workspace.creatorName.name} currentUserID={currentUser.id} created={workspace.creator === currentUser.id} key={i} /> : <ItemSquareCard item={workspace} creator={workspace.creatorName.name} currentUserID={currentUser.id} created={workspace.creator === currentUser.id} key={i} />\n                                                })}\n                                            </>\n                                        }\n                                    </div>\n                                    <div className=\"item-workspaces-end\">\n                                        {workspaces.length >= 0 && finishedWorkspaces ?\n                                            <p className=\"end-items\">No more workspaces</p>\n                                            :\n                                            <p className=\"load-items\" onClick={() => {loadMore()}}>Load more</p>\n                                        }\n                                    </div>\n                                </>\n                            :\n                                <>\n                                    <form className=\"item-comment-form\" method=\"PUT\" onSubmit={addComment}>\n                                        <p className=\"item-comment\">Leave a Comment</p>\n                                        <textarea className=\"item-comment-input\" placeholder=\"Write here\" value={comment} onChange={e => {setComment(e.target.value)}} />\n                                        <button className=\"blue-button\">Comment</button>\n                                    </form>\n                                    <div className=\"item-comments\">\n                                        {comments.length === 0 ?\n                                            <p className=\"end-items\">No comments</p>\n                                            :\n                                            <>\n                                                {comments.map((comment, i) => {\n                                                    return (\n                                                        <div className=\"comment-card\" key={i}>\n                                                            <div>\n                                                                <p className=\"comment-card-user\">{comment.user}</p>\n                                                                <p className=\"comment-card-date\">{commentDate(comment.createdAt)}</p>\n                                                            </div>\n                                                            <p className=\"comment-card-comment\">{comment.comment}</p>\n                                                        </div>\n                                                    )\n                                                })}\n                                            </>\n                                        }\n                                    </div>\n                                </>\n                            }\n                        </div>\n                    </div>\n                </div>\n            :   loaded && !exist &&\n                <div className=\"width-body\">  \n                    <p className=\"item-exist\">Cannot find dataset</p>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default Dataset"]},"metadata":{},"sourceType":"module"}