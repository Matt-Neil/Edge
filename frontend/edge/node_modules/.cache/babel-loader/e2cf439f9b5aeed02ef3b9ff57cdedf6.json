{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Dataset.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useContext } from 'react';\nimport { useHistory, useParams, Link } from \"react-router-dom\";\nimport usersAPI from '../API/users';\nimport itemsAPI from '../API/items';\nimport globalAPI from '../API/global';\nimport imageAPI from '../API/images';\nimport fileAPI from '../API/files';\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport CloseIcon from '@mui/icons-material/Close';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport Shortcut from '../Components/Shortcut';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Dataset = _ref => {\n  _s();\n\n  let {\n    currentUser,\n    type\n  } = _ref;\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [visibility, setVisibility] = useState(false);\n  const [rgb, setRgb] = useState(false);\n  const [bookmarked, setBookmarked] = useState();\n  const [upvoted, setUpvoted] = useState();\n  const [upvotes, setUpvotes] = useState();\n  const [updated, setUpdated] = useState();\n  const [picture, setPicture] = useState();\n  const [date, setDate] = useState(\"\");\n  const [start, setStart] = useState(0);\n  const [end, setEnd] = useState(30);\n  const [page, setPage] = useState(1);\n  const [image, setImage] = useState();\n  const [dataset, setDataset] = useState([]);\n  const [labels, setLabels] = useState([]);\n  const [copyData, setCopyData] = useState(true);\n  const [changedSettings, setChangedSettings] = useState(false);\n  const [changedData, setChangedData] = useState(false);\n  const [uploadedImages, setUploadedImages] = useState([]);\n  const [imageFiles, setImageFiles] = useState([]);\n  const [assignedLabels, setAssignedLabels] = useState([]);\n  const [refreshData, setRefreshData] = useState();\n  const [refreshLabels, setRefreshLabels] = useState();\n  const [loaded, setLoaded] = useState(false);\n  const [exist, setExist] = useState();\n  const [addLabel, setAddLabel] = useState(\"\");\n  const [disableCreate, setDisabledCreate] = useState(false);\n  const {\n    addOpenItems,\n    removeOpenItems\n  } = useContext(OpenItemsContext);\n  const colours = [\"label-blue1\", \"label-red\", \"label-green1\", \"label-orange1\", \"label-pink\", \"label-orange2\", \"label-blue2\", \"label-yellow1\", \"label-green2\", \"label-yellow2\"];\n  const datasetID = useParams().id;\n  const copyInterval = useRef(0);\n  const history = useHistory();\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (type === \"create\") {\n          const dataset = await usersAPI.get(\"/created?type=dataset\");\n          dataset.data.data.map(dataset => {\n            setDataset(previous => [...previous, dataset.title]);\n          });\n          setExist(true);\n          setLoaded(true);\n        } else {\n          const dataset = await itemsAPI.get(`/${datasetID}?type=dataset`);\n\n          if (dataset.data.data.self) {\n            addOpenItems(dataset.data.data._id, dataset.data.data.title, dataset.data.data.type);\n          }\n\n          setDataset(dataset.data.data);\n          setUpdated(dataset.data.data.updated);\n          setBookmarked(dataset.data.data.bookmarked);\n          setUpvoted(dataset.data.data.upvoted);\n          setPicture(dataset.data.data.picture);\n          setUpvotes(dataset.data.data.upvotes);\n          setVisibility(dataset.data.data.visibility);\n          setTitle(dataset.data.data.title);\n          setDescription(dataset.data.data.description);\n          setLabels(dataset.data.data.labels);\n          setRgb(dataset.data.data.rgb);\n          fetch(`http://127.0.0.1:5000/files/${dataset.data.data.imageFile}/labels.json`).then(response => response.json()).then(images => {\n            images.map(image => {\n              setUploadedImages(state => [...state, image.filename]);\n              setAssignedLabels(state => [...state, image.label]);\n            });\n            setExist(true);\n            setLoaded(true);\n          }).catch(() => {\n            setExist(true);\n            setLoaded(true);\n          });\n        }\n      } catch (err) {\n        setExist(false);\n        setLoaded(true);\n      }\n    };\n\n    fetchData();\n  }, []);\n  useEffect(() => {\n    if (loaded && exist) {\n      const updatedDate = new Date(updated);\n      const currentDate = new Date();\n\n      if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365).toString()} years ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n        setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24)).toString()} days ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600)).toString()} hours ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60)).toString()} minutes ago`);\n      } else {\n        setDate(\"Updated just now\");\n      }\n    }\n  }, [loaded, updated]);\n\n  const copiedInterval = () => {\n    clearInterval(copyInterval.current);\n    navigator.clipboard.writeText(dataset.datafile);\n    setCopyData(false);\n    copyInterval.current = setInterval(() => {\n      setCopyData(true);\n    }, 800);\n    return () => {\n      clearInterval(copyInterval.current);\n    };\n  };\n\n  const addFunctionKey = e => {\n    if (e.key === \"Enter\" && addLabel !== \"\") {\n      setLabels(state => [...state, addLabel]);\n      setChangedSettings(true);\n      setAddLabel(\"\");\n    }\n  };\n\n  const updateUpvote = async () => {\n    try {\n      await globalAPI.put(`/upvote/${datasetID}?state=${upvoted}`);\n\n      if (upvoted) {\n        setUpvotes(state => state - 1);\n      } else {\n        setUpvotes(state => state + 1);\n      }\n\n      setUpvoted(state => !state);\n    } catch (err) {}\n  };\n\n  const updateBookmark = async () => {\n    try {\n      await globalAPI.put(`/bookmark/${datasetID}?state=${bookmarked}`);\n      setBookmarked(state => !state);\n    } catch (err) {}\n  };\n\n  const updateVisibility = async () => {\n    try {\n      await globalAPI.put(`/visibility/${datasetID}`);\n      setVisibility(state => !state);\n    } catch (err) {}\n  };\n\n  const previousPage = () => {\n    if (page > 1) {\n      setStart((page - 2) * 30);\n      setEnd((page - 1) * 30);\n      setPage(state => state - 1);\n      setRefreshData(new Date().getTime());\n    }\n  };\n\n  const nextPage = () => {\n    if (page * 30 < uploadedImages.length && uploadedImages.length > 30) {\n      setPage(state => state + 1);\n      setStart(page * 30);\n      setEnd((page + 1) * 30);\n      setRefreshData(new Date().getTime());\n    }\n  };\n\n  const deleteImage = async (filename, index) => {\n    if (type === \"view\") {\n      const formData = new FormData();\n      formData.append('id', dataset.imageFile);\n      formData.append('filename', filename);\n\n      try {\n        await fileAPI.post(\"/delete\", formData);\n      } catch (err) {}\n    }\n\n    uploadedImages.splice(index, 1);\n    assignedLabels.splice(index, 1);\n    setRefreshData(new Date().getTime());\n  };\n\n  const addImages = async () => {\n    for (let i = 0; i < imageFiles.length; i++) {\n      setUploadedImages(state => [...state, imageFiles[i]]);\n    }\n\n    setAssignedLabels(Array(imageFiles).fill(\"No label\"));\n    setPage(1);\n    setRefreshData(new Date().getTime());\n    setImageFiles([]);\n  };\n\n  const replaceImages = async () => {\n    if (type === \"create\") {\n      for (let i = 0; i < imageFiles.length; i++) {\n        setUploadedImages(state => [...state, imageFiles[i]]);\n      }\n\n      setAssignedLabels(Array(imageFiles).fill(\"No label\"));\n      setPage(1);\n      setRefreshData(new Date().getTime());\n      setImageFiles([]);\n    } else {\n      const formData = new FormData();\n      formData.append('id', dataset.imageFile);\n\n      for (let i = 0; i < imageFiles.length; i++) {\n        formData.append('data[]', imageFiles[i]);\n        formData.append('labels[]', assignedLabels[i]);\n      }\n\n      try {\n        await fileAPI.post(\"/replace\", formData);\n\n        for (let i = 0; i < imageFiles.length; i++) {\n          setUploadedImages(state => [...state, i]);\n        }\n\n        setAssignedLabels(Array(imageFiles).fill(\"No label\"));\n        setPage(1);\n        setRefreshData(new Date().getTime());\n        setImageFiles([]);\n      } catch (err) {}\n    }\n  };\n\n  const appendImages = async () => {\n    if (type === \"create\") {\n      for (let i = 0; i < imageFiles.length; i++) {\n        setUploadedImages(state => [...state, imageFiles[i]]);\n      }\n\n      setAssignedLabels(Array(imageFiles).fill(\"No label\"));\n      setRefreshData(new Date().getTime());\n      setImageFiles([]);\n    } else {\n      const formData = new FormData();\n      formData.append('id', dataset.imageFile);\n      formData.append('last', uploadedImages[uploadedImages.length - 1]);\n\n      for (let i = 0; i < imageFiles.length; i++) {\n        formData.append('data[]', imageFiles[i]);\n        formData.append('labels[]', assignedLabels[i]);\n      }\n\n      try {\n        await fileAPI.post(\"/append\", formData);\n\n        for (let i = uploadedImages[uploadedImages.length - 1] + 1; i < imageFiles.length; i++) {\n          setUploadedImages(state => [...state, i]);\n        }\n\n        setAssignedLabels(Array(imageFiles).fill(\"No label\"));\n        setRefreshData(new Date().getTime());\n        setImageFiles([]);\n      } catch (err) {}\n    }\n\n    setAssignedLabels(state => [...state, Array(imageFiles).fill(\"No label\")]);\n    setPage(1);\n    setRefreshData(new Date().getTime());\n    setImageFiles([]);\n  };\n\n  const uploadImage = async () => {\n    setDisabledCreate(true);\n\n    if (uploadedImages.length !== 0 && !assignedLabels.includes(\"No label\") && title !== \"\" && description !== \"\") {\n      const formData = new FormData();\n      const id = new Date().toISOString();\n      formData.append('id', id);\n\n      for (let i = 0; i < uploadedImages.length; i++) {\n        formData.append('data[]', uploadedImages[i]);\n        formData.append('labels[]', assignedLabels[i]);\n      }\n\n      try {\n        await fileAPI.post(\"/upload\", formData);\n      } catch (err) {}\n\n      if (image) {\n        const formImage = new FormData();\n        formImage.append('image', image);\n\n        try {\n          const imageResponse = await imageAPI.post(\"/upload\", formImage);\n          uploadDataset(imageResponse.data.data, id);\n        } catch (err) {}\n      } else {\n        uploadDataset(\"default.png\", id);\n      }\n    } else {\n      setDisabledCreate(false);\n    }\n  };\n\n  const uploadDataset = async (imageName, id) => {\n    try {\n      const datasetResponse = await itemsAPI.post(\"/\", {\n        title: title,\n        imageFile: id,\n        creator: currentUser.id,\n        description: description,\n        picture: imageName,\n        upvotes: [],\n        bookmarks: [],\n        labels: labels,\n        rgb: rgb,\n        updated: new Date().toISOString(),\n        visibility: visibility,\n        type: \"dataset\"\n      });\n      history.push(`/dataset/${datasetResponse.data.data}`);\n    } catch (err) {}\n  };\n\n  const updateDataset = async () => {\n    const formImage = new FormData();\n    formImage.append('image', image);\n\n    try {\n      const tempPicture = picture;\n      const imageResponse = await imageAPI.post(\"/upload\", formImage);\n      await itemsAPI.put(`/${datasetID}?type=dataset`, {\n        title: title,\n        description: description,\n        picture: imageResponse.data.data,\n        labels: labels,\n        rgb: rgb,\n        updated: new Date().toISOString()\n      });\n      setImage(undefined);\n      setPicture(imageResponse.data.data);\n\n      if (tempPicture !== \"default.png\") {\n        await imageAPI.put('/remove', {\n          picture: tempPicture\n        });\n      }\n    } catch (err) {}\n\n    setUpdated(new Date().toISOString());\n    setChangedData(false);\n    setChangedSettings(false);\n  };\n\n  const deleteDataset = async () => {\n    try {\n      const formData = new formData();\n      formData.append('id', dataset.imageFile);\n      await itemsAPI.delete(`/${datasetID}`);\n      await fileAPI.post(\"/remove\", formData);\n      removeOpenItems(datasetID);\n      history.replace(\"/home\");\n    } catch (err) {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loaded && exist ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sidebar-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"http://localhost:3000/dataset.png\",\n            className: !(type === \"view\" && !dataset.self) ? \"create-item-edit-image\" : undefined\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: `create-item-title ${!(type === \"view\" && !dataset.self) && \"create-item-edit-input\"}`,\n            placeholder: \"Title\",\n            onChange: e => {\n              setTitle(e.target.value);\n              setChangedSettings(true);\n            },\n            disabled: !(dataset.self || type === \"create\"),\n            value: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: `create-item-description ${!(type === \"view\" && !dataset.self) && \"create-item-edit-textarea\"}`,\n          placeholder: \"Description\",\n          onChange: e => {\n            setDescription(e.target.value);\n            setChangedSettings(true);\n          },\n          disabled: !(dataset.self || type === \"create\"),\n          value: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 25\n        }, this), (dataset.self || type === \"create\") && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-item-setup\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"create-item-setup-label\",\n              children: \"Picture\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"create-item-setup-input\",\n              type: \"file\",\n              name: \"image\",\n              onChange: e => {\n                setImage(e.target.files[0]);\n                setChangedSettings(true);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-item-setup\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"create-item-setup-label\",\n              children: \"Public?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 437,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              onChange: () => {\n                setVisibility(previous => !previous);\n                setChangedSettings(true);\n              },\n              checked: visibility\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-item-setup\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"create-item-setup-label\",\n              children: \"RGB Images?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 446,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              onChange: () => {\n                setRgb(previous => !previous);\n                setChangedSettings(true);\n              },\n              checked: rgb\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 447,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true), !dataset.self && type !== \"create\" && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"item-creator\",\n          children: dataset.creatorName.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 64\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-information\",\n          children: [type !== \"create\" && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"item-date\",\n            children: date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 51\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 29\n          }, this), !dataset.self && type !== \"create\" && /*#__PURE__*/_jsxDEV(BookmarkIcon, {\n            className: `item-icon ${bookmarked ? \"blue2\" : \"white\"}`,\n            onClick: () => {\n              updateBookmark();\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 68\n          }, this), dataset.self && type !== \"create\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: visibility ? /*#__PURE__*/_jsxDEV(VisibilityIcon, {\n              className: \"item-visibility\",\n              onClick: () => {\n                updateVisibility();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(VisibilityOffIcon, {\n              className: \"item-visibility\",\n              onClick: () => {\n                updateVisibility();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 466,\n              columnNumber: 41\n            }, this)\n          }, void 0, false), type !== \"create\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(ThumbUpIcon, {\n              className: `item-icon ${upvoted ? \"blue2\" : \"white\"}`,\n              onClick: () => {\n                updateUpvote();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: upvoted ? \"blue2\" : \"white\",\n              children: upvotes\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 25\n        }, this), type === \"view\" && !dataset.self && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sidebar-divided\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sidebar-dataset-copy\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [copyData ? /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Data ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 482,\n                columnNumber: 53\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Copied\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 482,\n                columnNumber: 70\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                disabled: !copyData,\n                onClick: () => {\n                  copiedInterval();\n                },\n                children: /*#__PURE__*/_jsxDEV(ContentCopyIcon, {\n                  className: \"dataset-copy-icon\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 484,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 483,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 481,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n              href: `http://127.0.0.1:5000/files/${dataset.imageFile}`,\n              download: true,\n              children: /*#__PURE__*/_jsxDEV(DownloadIcon, {\n                className: \"dataset-download-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 488,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 487,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true), type === \"view\" && !dataset.self && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sidebar-divided\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Shortcut, {\n            type: \"related\",\n            datasetID: datasetID\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true), type === \"view\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: dataset.self && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sidebar-divided\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 503,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"blue-button item-save\",\n              disabled: !changedSettings && !changedData,\n              onClick: () => {\n                updateDataset();\n              },\n              children: \"Save Changes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 504,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"text-button item-delete\",\n              onClick: () => {\n                deleteDataset();\n              },\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 507,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true)\n        }, void 0, false)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"workspace-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"workspace-inner\",\n            children: type === \"create\" || dataset.self ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"view-items-top\",\n                children: type === \"create\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                    children: \"Create Dataset\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 522,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"blue-button\",\n                    disabled: disableCreate,\n                    onClick: () => {\n                      uploadImage();\n                    },\n                    children: \"Create\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 523,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Dataset\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 528,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 519,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-dataset-upload\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"file\",\n                  name: \"data\",\n                  accept: \"image/*\",\n                  multiple: true,\n                  onChange: e => {\n                    setImageFiles(e.target.files);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 532,\n                  columnNumber: 45\n                }, this), type === \"create\" && uploadedImages.length === 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"white-button\",\n                  onClick: () => {\n                    addImages();\n                    setChangedData(true);\n                  },\n                  children: \"Add\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 538,\n                  columnNumber: 49\n                }, this), (dataset.self || type === \"create\") && uploadedImages.length !== 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"white-button\",\n                    onClick: () => {\n                      setUploadedImages([]);\n                      replaceImages();\n                      setChangedData(true);\n                    },\n                    children: \"Replace\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 546,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"white-button\",\n                    onClick: () => {\n                      appendImages();\n                      setChangedData(true);\n                    },\n                    children: \"Append\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 552,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true), uploadedImages.length !== 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"create-dataset-pagination\",\n                  children: [/*#__PURE__*/_jsxDEV(ArrowBackIosNewIcon, {\n                    className: \"create-dataset-pagination-icon\",\n                    onClick: () => {\n                      previousPage();\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 561,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"Page \", page, \" / \", Math.ceil(uploadedImages.length / 30)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 562,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(ArrowForwardIosIcon, {\n                    className: \"create-dataset-pagination-icon\",\n                    onClick: () => {\n                      nextPage();\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 563,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 560,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 531,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-dataset-images-list\",\n                children: uploadedImages.map((image, i) => {\n                  if (i >= start && i < end) {\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"create-dataset-image\",\n                      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                        src: type === \"create\" ? URL.createObjectURL(image) : `http://127.0.0.1:5000/files/${dataset.imageFile}/${image}.jpg`\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 572,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                          value: assignedLabels[i],\n                          onChange: e => {\n                            setAssignedLabels(state => {\n                              const stateCopy = [...state];\n                              stateCopy[i] = e.target.value;\n                              return stateCopy;\n                            });\n                            setChangedData(true);\n                            setRefreshLabels(new Date().getTime());\n                          },\n                          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"No label\",\n                            children: \"No label\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 584,\n                            columnNumber: 69\n                          }, this), labels.map((label, j) => /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: label,\n                            children: label\n                          }, j, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 586,\n                            columnNumber: 73\n                          }, this))]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 574,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          onClick: () => {\n                            deleteImage(image, i);\n                          },\n                          children: /*#__PURE__*/_jsxDEV(DeleteIcon, {\n                            className: \"create-dataset-image-delete\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 590,\n                            columnNumber: 69\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 589,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 573,\n                        columnNumber: 61\n                      }, this)]\n                    }, i, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 571,\n                      columnNumber: 57\n                    }, this);\n                  }\n                })\n              }, refreshData, false, {\n                fileName: _jsxFileName,\n                lineNumber: 567,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"view-items-top\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Dataset\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 602,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 601,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-dataset-images-list\",\n                children: uploadedImages.map((image, i) => {\n                  if (i >= start && i < end) {\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"create-dataset-image\",\n                      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                        src: `http://127.0.0.1:5000/files/${dataset.imageFile}/${image}.jpg`\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 609,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: /*#__PURE__*/_jsxDEV(\"p\", {\n                          children: assignedLabels[i]\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 611,\n                          columnNumber: 65\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 610,\n                        columnNumber: 61\n                      }, this)]\n                    }, i, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 608,\n                      columnNumber: 57\n                    }, this);\n                  }\n                })\n              }, refreshData, false, {\n                fileName: _jsxFileName,\n                lineNumber: 604,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 516,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-workspace-data\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"create-workspace-data-header\",\n              children: \"Labels:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 622,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sidebar-divided\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 623,\n              columnNumber: 33\n            }, this), (type === \"create\" || dataset.self) && /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"create-dataset-label-input\",\n              placeholder: \"Add Label\",\n              onChange: e => {\n                setAddLabel(e.target.value);\n              },\n              onKeyPress: addFunctionKey,\n              value: addLabel\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 625,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"create-dataset-labels-list\",\n              children: labels.map((label, i) => {\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `create-dataset-label ${colours[i % colours.length]}`,\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    children: label\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 635,\n                    columnNumber: 49\n                  }, this), (type === \"create\" || dataset.self) && /*#__PURE__*/_jsxDEV(\"div\", {\n                    onClick: () => {\n                      assignedLabels.map((assignedLabel, j) => {\n                        if (assignedLabel === labels[i]) {\n                          setAssignedLabels(state => {\n                            const stateCopy = [...state];\n                            stateCopy[j] = \"No label\";\n                            return stateCopy;\n                          });\n                        }\n                      });\n                      labels.splice(i, 1);\n                      setRefreshLabels(new Date().getTime());\n                    },\n                    children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n                      className: \"create-dataset-label-icon\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 652,\n                      columnNumber: 57\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 637,\n                    columnNumber: 53\n                  }, this)]\n                }, i, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 634,\n                  columnNumber: 45\n                }, this);\n              })\n            }, refreshLabels, false, {\n              fileName: _jsxFileName,\n              lineNumber: 631,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 621,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 17\n    }, this) : loaded && !exist && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inner-body\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"item-exist\",\n        children: \"Cannot find dataset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 664,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(Dataset, \"ZiK3PENHOpYuVc4y9QFZ2K2tY2U=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = Dataset;\nexport default Dataset;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dataset\");","map":{"version":3,"sources":["/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Dataset.jsx"],"names":["React","useState","useEffect","useRef","useContext","useHistory","useParams","Link","usersAPI","itemsAPI","globalAPI","imageAPI","fileAPI","OpenItemsContext","BookmarkIcon","ThumbUpIcon","VisibilityOffIcon","VisibilityIcon","CloseIcon","DeleteIcon","ArrowForwardIosIcon","ArrowBackIosNewIcon","ContentCopyIcon","DownloadIcon","Shortcut","Dataset","currentUser","type","title","setTitle","description","setDescription","visibility","setVisibility","rgb","setRgb","bookmarked","setBookmarked","upvoted","setUpvoted","upvotes","setUpvotes","updated","setUpdated","picture","setPicture","date","setDate","start","setStart","end","setEnd","page","setPage","image","setImage","dataset","setDataset","labels","setLabels","copyData","setCopyData","changedSettings","setChangedSettings","changedData","setChangedData","uploadedImages","setUploadedImages","imageFiles","setImageFiles","assignedLabels","setAssignedLabels","refreshData","setRefreshData","refreshLabels","setRefreshLabels","loaded","setLoaded","exist","setExist","addLabel","setAddLabel","disableCreate","setDisabledCreate","addOpenItems","removeOpenItems","colours","datasetID","id","copyInterval","history","fetchData","get","data","map","previous","self","_id","fetch","imageFile","then","response","json","images","state","filename","label","catch","err","updatedDate","Date","currentDate","getTime","Math","floor","toString","copiedInterval","clearInterval","current","navigator","clipboard","writeText","datafile","setInterval","addFunctionKey","e","key","updateUpvote","put","updateBookmark","updateVisibility","previousPage","nextPage","length","deleteImage","index","formData","FormData","append","post","splice","addImages","i","Array","fill","replaceImages","appendImages","uploadImage","includes","toISOString","formImage","imageResponse","uploadDataset","imageName","datasetResponse","creator","bookmarks","push","updateDataset","tempPicture","undefined","deleteDataset","delete","replace","target","value","files","creatorName","name","ceil","URL","createObjectURL","stateCopy","j","assignedLabel"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef, useContext} from 'react'\nimport {useHistory, useParams, Link} from \"react-router-dom\"\nimport usersAPI from '../API/users'\nimport itemsAPI from '../API/items'\nimport globalAPI from '../API/global'\nimport imageAPI from '../API/images'\nimport fileAPI from '../API/files'\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport CloseIcon from '@mui/icons-material/Close';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport Shortcut from '../Components/Shortcut'\n\nconst Dataset = ({currentUser, type}) => {\n    const [title, setTitle] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [visibility, setVisibility] = useState(false);\n    const [rgb, setRgb] = useState(false)\n    const [bookmarked, setBookmarked] = useState()\n    const [upvoted, setUpvoted] = useState()\n    const [upvotes, setUpvotes] = useState()\n    const [updated, setUpdated] = useState()\n    const [picture, setPicture] = useState()\n    const [date, setDate] = useState(\"\")\n    const [start, setStart] = useState(0)\n    const [end, setEnd] = useState(30)\n    const [page, setPage] = useState(1)\n    const [image, setImage] = useState();\n    const [dataset, setDataset] = useState([]);\n    const [labels, setLabels] = useState([])\n    const [copyData, setCopyData] = useState(true)\n    const [changedSettings, setChangedSettings] = useState(false)\n    const [changedData, setChangedData] = useState(false)\n    const [uploadedImages, setUploadedImages] = useState([])\n    const [imageFiles, setImageFiles] = useState([])\n    const [assignedLabels, setAssignedLabels] = useState([])\n    const [refreshData, setRefreshData] = useState()\n    const [refreshLabels, setRefreshLabels] = useState()\n    const [loaded, setLoaded] = useState(false);\n    const [exist, setExist] = useState()\n    const [addLabel, setAddLabel] = useState(\"\")\n    const [disableCreate, setDisabledCreate] = useState(false)\n    const {addOpenItems, removeOpenItems} = useContext(OpenItemsContext);\n    const colours = [\"label-blue1\", \"label-red\", \"label-green1\", \"label-orange1\", \"label-pink\", \n        \"label-orange2\", \"label-blue2\", \"label-yellow1\", \"label-green2\", \"label-yellow2\"]\n    const datasetID = useParams().id;\n    const copyInterval = useRef(0)\n    const history = useHistory();\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                if (type === \"create\") {\n                    const dataset = await usersAPI.get(\"/created?type=dataset\");\n    \n                    dataset.data.data.map((dataset) => {\n                        setDataset(previous => [...previous, dataset.title]);\n                    })\n\n                    setExist(true)\n                    setLoaded(true)\n                } else {\n                    const dataset = await itemsAPI.get(`/${datasetID}?type=dataset`);\n\n                    if (dataset.data.data.self) {\n                        addOpenItems(dataset.data.data._id, dataset.data.data.title, dataset.data.data.type)\n                    }\n\n                    setDataset(dataset.data.data);\n                    setUpdated(dataset.data.data.updated);\n                    setBookmarked(dataset.data.data.bookmarked)\n                    setUpvoted(dataset.data.data.upvoted)\n                    setPicture(dataset.data.data.picture)\n                    setUpvotes(dataset.data.data.upvotes)\n                    setVisibility(dataset.data.data.visibility)\n                    setTitle(dataset.data.data.title)\n                    setDescription(dataset.data.data.description)\n                    setLabels(dataset.data.data.labels)\n                    setRgb(dataset.data.data.rgb)\n\n                    fetch(`http://127.0.0.1:5000/files/${dataset.data.data.imageFile}/labels.json`)\n                        .then(response => response.json())\n                        .then(images => {\n                            images.map(image => {\n                                setUploadedImages(state => [...state, image.filename])\n                                setAssignedLabels(state => [...state, image.label])\n                            })\n                            setExist(true)\n                            setLoaded(true)\n                        }).catch(() => {\n                            setExist(true)\n                            setLoaded(true)\n                        });\n                }\n            } catch (err) {\n              setExist(false)\n              setLoaded(true)\n            }\n        }\n        fetchData();\n    }, [])\n\n    useEffect(() => {\n        if (loaded && exist) {\n            const updatedDate = new Date(updated);\n            const currentDate = new Date();\n    \n            if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} years ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} days ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hours ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minutes ago`)\n            } else {\n                setDate(\"Updated just now\")\n            }\n        }\n    }, [loaded, updated])\n\n    const copiedInterval = () => {\n        clearInterval(copyInterval.current)\n        navigator.clipboard.writeText(dataset.datafile);\n        setCopyData(false);\n        copyInterval.current = setInterval(() => {\n            setCopyData(true);\n        }, 800)\n        return ()=> {clearInterval(copyInterval.current)};\n    }\n\n    const addFunctionKey = (e) => {\n        if (e.key === \"Enter\" && addLabel !== \"\") {\n            setLabels(state => [...state, addLabel])\n            setChangedSettings(true)\n            setAddLabel(\"\")\n        }\n    }\n\n    const updateUpvote = async () => {\n        try {\n            await globalAPI.put(`/upvote/${datasetID}?state=${upvoted}`);\n\n            if (upvoted) {\n                setUpvotes(state => state-1)\n            } else {\n                setUpvotes(state => state+1)\n            }\n\n            setUpvoted(state => !state)\n        } catch (err) {}\n    }\n\n    const updateBookmark = async () => {\n        try {\n            await globalAPI.put(`/bookmark/${datasetID}?state=${bookmarked}`);\n            \n            setBookmarked(state => !state)\n        } catch (err) {}\n    }\n\n    const updateVisibility = async () => {\n        try {\n            await globalAPI.put(`/visibility/${datasetID}`);\n\n            setVisibility(state => !state)\n        } catch (err) {}\n    }\n\n    const previousPage = () => {\n        if (page > 1) {\n            setStart((page-2)*30)\n            setEnd((page-1)*30)\n            setPage(state => state-1)\n            setRefreshData(new Date().getTime())\n        }\n    }\n    \n    const nextPage = () => {\n        if (page*30 < uploadedImages.length && uploadedImages.length > 30) {\n            setPage(state => state+1)\n            setStart((page)*30)\n            setEnd((page+1)*30)\n            setRefreshData(new Date().getTime())\n        }\n    }\n\n    const deleteImage = async (filename, index) => {\n        if (type === \"view\") {\n            const formData = new FormData();\n\n            formData.append('id', dataset.imageFile)\n            formData.append('filename', filename)\n\n            try {\n                await fileAPI.post(\"/delete\", formData);\n            } catch (err) {}\n        }\n\n        uploadedImages.splice(index, 1)\n        assignedLabels.splice(index, 1)\n        setRefreshData(new Date().getTime())\n    }\n\n    const addImages = async () => {\n        for (let i = 0; i < imageFiles.length; i++) {\n            setUploadedImages(state => [...state, imageFiles[i]])\n        }\n\n        setAssignedLabels(Array(imageFiles).fill(\"No label\"))\n        setPage(1)\n        setRefreshData(new Date().getTime())\n        setImageFiles([])\n    }\n\n    const replaceImages = async () => {\n        if (type === \"create\") {\n            for (let i = 0; i < imageFiles.length; i++) {\n                setUploadedImages(state => [...state, imageFiles[i]])\n            }\n\n            setAssignedLabels(Array(imageFiles).fill(\"No label\"))\n            setPage(1)\n            setRefreshData(new Date().getTime())\n            setImageFiles([])\n        } else {\n            const formData = new FormData();\n\n            formData.append('id', dataset.imageFile)\n\n            for (let i = 0; i < imageFiles.length; i++) {\n                formData.append('data[]', imageFiles[i]);\n                formData.append('labels[]', assignedLabels[i]);\n            }\n\n            try {\n                await fileAPI.post(\"/replace\", formData);\n\n                for (let i = 0; i < imageFiles.length; i++) {\n                    setUploadedImages(state => [...state, i])\n                }\n\n                setAssignedLabels(Array(imageFiles).fill(\"No label\"))\n                setPage(1)\n                setRefreshData(new Date().getTime())\n                setImageFiles([])\n            } catch (err) {}\n        }\n    }\n    \n    const appendImages = async () => {\n        if (type === \"create\") {\n            for (let i = 0; i < imageFiles.length; i++) {\n                setUploadedImages(state => [...state, imageFiles[i]])\n            }\n\n            setAssignedLabels(Array(imageFiles).fill(\"No label\"))\n            setRefreshData(new Date().getTime())\n            setImageFiles([])\n        } else {\n            const formData = new FormData();\n\n            formData.append('id', dataset.imageFile)\n            formData.append('last', uploadedImages[uploadedImages.length-1])\n\n            for (let i = 0; i < imageFiles.length; i++) {\n                formData.append('data[]', imageFiles[i]);\n                formData.append('labels[]', assignedLabels[i]);\n            }\n\n            try {\n                await fileAPI.post(\"/append\", formData);\n\n                for (let i = uploadedImages[uploadedImages.length-1]+1; i < imageFiles.length; i++) {\n                    setUploadedImages(state => [...state, i])\n                }\n\n                setAssignedLabels(Array(imageFiles).fill(\"No label\"))\n                setRefreshData(new Date().getTime())\n                setImageFiles([])\n            } catch (err) {}\n        }\n\n        setAssignedLabels(state => [...state, Array(imageFiles).fill(\"No label\")])\n        setPage(1)\n        setRefreshData(new Date().getTime())\n        setImageFiles([])\n    }\n\n    const uploadImage = async () => {\n        setDisabledCreate(true)\n\n        if (uploadedImages.length !== 0 && !assignedLabels.includes(\"No label\") && title !== \"\" && description !== \"\") {\n            const formData = new FormData();\n            const id = new Date().toISOString();\n\n            formData.append('id', id)\n\n            for (let i = 0; i < uploadedImages.length; i++) {\n                formData.append('data[]', uploadedImages[i]);\n                formData.append('labels[]', assignedLabels[i]);\n            }\n\n            try {\n                await fileAPI.post(\"/upload\", formData);\n            } catch (err) {}\n\n            if (image) {\n                const formImage = new FormData();\n                formImage.append('image', image);\n                \n                try {\n                    const imageResponse = await imageAPI.post(\"/upload\", formImage);\n    \n                    uploadDataset(imageResponse.data.data, id)\n                } catch (err) {}\n            } else {\n                uploadDataset(\"default.png\", id)\n            }\n        } else {\n            setDisabledCreate(false)\n        }\n    }\n\n    const uploadDataset = async (imageName, id) => {\n        try {\n            const datasetResponse = await itemsAPI.post(\"/\", {\n                title: title,\n                imageFile: id,\n                creator: currentUser.id,\n                description: description,\n                picture: imageName,\n                upvotes: [],\n                bookmarks: [],\n                labels: labels,\n                rgb: rgb,\n                updated: new Date().toISOString(),\n                visibility: visibility,\n                type: \"dataset\"\n            });\n\n            history.push(`/dataset/${datasetResponse.data.data}`)\n        } catch (err) {}\n    }\n\n    const updateDataset = async () => {\n        const formImage = new FormData();\n        formImage.append('image', image);\n            \n        try {\n            const tempPicture = picture\n            const imageResponse = await imageAPI.post(\"/upload\", formImage);\n\n            await itemsAPI.put(`/${datasetID}?type=dataset`, {\n                title: title,\n                description: description,\n                picture: imageResponse.data.data,\n                labels: labels,\n                rgb: rgb,\n                updated: new Date().toISOString()\n            })\n\n            setImage(undefined)\n            setPicture(imageResponse.data.data)\n\n            if (tempPicture !== \"default.png\") {\n                await imageAPI.put('/remove', {picture: tempPicture});\n            }\n        } catch (err) {}\n\n        setUpdated(new Date().toISOString())\n        setChangedData(false)\n        setChangedSettings(false)\n    }\n\n    const deleteDataset = async () => {\n        try {\n            const formData = new formData()\n\n            formData.append('id', dataset.imageFile)\n\n            await itemsAPI.delete(`/${datasetID}`)\n            await fileAPI.post(\"/remove\", formData);\n\n            removeOpenItems(datasetID)\n            history.replace(\"/home\")\n        } catch (err) {}\n    }\n\n    return (\n        <>\n            {loaded && exist ?\n                <div className=\"main-body\">\n                    <div className=\"sidebar\">\n                        <div className=\"sidebar-header\">\n                            <img src=\"http://localhost:3000/dataset.png\"\n                                    className={!(type === \"view\" && !dataset.self) ? \"create-item-edit-image\" : undefined} />\n                            <input className={`create-item-title ${!(type === \"view\" && !dataset.self) && \"create-item-edit-input\"}`}\n                                    placeholder=\"Title\"\n                                    onChange={e => {\n                                        setTitle(e.target.value)\n                                        setChangedSettings(true)\n                                    }}\n                                    disabled={!(dataset.self || type === \"create\")}\n                                    value={title} />\n                        </div>\n                        <textarea className={`create-item-description ${!(type === \"view\" && !dataset.self) && \"create-item-edit-textarea\"}`}\n                                    placeholder=\"Description\"\n                                    onChange={e => {\n                                        setDescription(e.target.value)\n                                        setChangedSettings(true)\n                                    }}\n                                    disabled={!(dataset.self || type === \"create\")}\n                                    value={description} />\n                        {(dataset.self || type === \"create\") &&\n                            <>\n                                <div className=\"create-item-setup\">\n                                    <label className=\"create-item-setup-label\">Picture</label>\n                                    <input className=\"create-item-setup-input\"\n                                            type=\"file\" \n                                            name=\"image\" \n                                            onChange={e => {\n                                                setImage(e.target.files[0])\n                                                setChangedSettings(true)\n                                            }} />\n                                </div>\n                                <div className=\"create-item-setup\">\n                                    <label className=\"create-item-setup-label\">Public?</label>\n                                    <input type=\"checkbox\" \n                                            onChange={() => {\n                                                setVisibility(previous => !previous)\n                                                setChangedSettings(true)\n                                            }}\n                                            checked={visibility} />\n                                </div>\n                                <div className=\"create-item-setup\">\n                                    <label className=\"create-item-setup-label\">RGB Images?</label>\n                                    <input type=\"checkbox\" \n                                            onChange={() => {\n                                                setRgb(previous => !previous)\n                                                setChangedSettings(true)\n                                            }}\n                                            checked={rgb} />\n                                </div>\n                            </>\n                        }\n                        {!dataset.self && type !== \"create\" && <p className=\"item-creator\">{dataset.creatorName.name}</p>}\n                        <div className=\"item-information\">\n                            {type !== \"create\" && <p className=\"item-date\">{date}</p>}\n                            <span />\n                            {!dataset.self && type !== \"create\" && <BookmarkIcon className={`item-icon ${bookmarked ? \"blue2\" : \"white\"}`} onClick={() => {updateBookmark()}} />}\n                            {dataset.self && type !== \"create\" && \n                                <>\n                                    {visibility ? \n                                        <VisibilityIcon className=\"item-visibility\" onClick={() => {updateVisibility()}} />\n                                    :\n                                        <VisibilityOffIcon className=\"item-visibility\" onClick={() => {updateVisibility()}} />\n                                    }\n                                </>\n                            }\n                            {type !== \"create\" &&\n                                <>\n                                    <ThumbUpIcon className={`item-icon ${upvoted ? \"blue2\" : \"white\"}`} onClick={() => {updateUpvote()}} />\n                                    <p className={upvoted ? \"blue2\" : \"white\"}>{upvotes}</p>\n                                </>\n                            }\n                        </div>\n                        {type === \"view\" && !dataset.self &&\n                            <>\n                                <div className=\"sidebar-divided\" />\n                                <div className=\"sidebar-dataset-copy\">\n                                    <div>\n                                        {copyData ? <p>Data ID</p> : <p>Copied</p>}\n                                        <button disabled={!copyData} onClick={() => {copiedInterval()}}>\n                                            <ContentCopyIcon className=\"dataset-copy-icon\" />\n                                        </button>\n                                    </div>\n                                    <a href={`http://127.0.0.1:5000/files/${dataset.imageFile}`} download>\n                                        <DownloadIcon className=\"dataset-download-icon\" />\n                                    </a>\n                                </div>\n                            </>\n                        }\n                        {type === \"view\" && !dataset.self &&\n                            <>\n                                <div className=\"sidebar-divided\" />\n                                <Shortcut type={\"related\"} datasetID={datasetID} />\n                            </>\n                        }\n                        {type === \"view\" &&\n                            <>\n                                {dataset.self &&\n                                    <>\n                                        <div className=\"sidebar-divided\" />\n                                        <button className=\"blue-button item-save\"\n                                                disabled={!changedSettings && !changedData}\n                                                onClick={() => {updateDataset()}}>Save Changes</button>\n                                        <button className=\"text-button item-delete\"\n                                                onClick={() => {deleteDataset()}}>Delete</button>\n                                    </>\n                                }\n                            </>\n                        }\n                    </div>\n                    <div className=\"inner\">\n                        <div className=\"workspace-body\">\n                            <div className=\"workspace-inner\">\n                                {(type === \"create\" || dataset.self) ?\n                                    <>\n                                        <div className=\"view-items-top\">\n                                            {type === \"create\" ?\n                                                <>\n                                                    <h1>Create Dataset</h1>\n                                                    <button className=\"blue-button\"\n                                                            disabled={disableCreate}\n                                                            onClick={() => {uploadImage()}}>Create</button>\n                                                </>\n                                            :\n                                                <p>Dataset</p>\n                                            }\n                                        </div>\n                                        <div className=\"create-dataset-upload\">\n                                            <input type=\"file\" \n                                                    name=\"data\"\n                                                    accept=\"image/*\"\n                                                    multiple\n                                                    onChange={e => {setImageFiles(e.target.files)}} />\n                                            {type === \"create\" && uploadedImages.length === 0 && \n                                                <button className=\"white-button\"\n                                                        onClick={() => {\n                                                            addImages()\n                                                            setChangedData(true)\n                                                        }}>Add</button>\n                                            }\n                                            {(dataset.self || type === \"create\") && uploadedImages.length !== 0 && \n                                                <>\n                                                    <button className=\"white-button\"\n                                                            onClick={() => {\n                                                                setUploadedImages([])\n                                                                replaceImages()\n                                                                setChangedData(true)\n                                                            }}>Replace</button>\n                                                    <button className=\"white-button\"\n                                                            onClick={() => {\n                                                                appendImages()\n                                                                setChangedData(true)\n                                                            }}>Append</button>\n                                                </>\n                                            }\n                                            {uploadedImages.length !== 0 &&\n                                                <div className=\"create-dataset-pagination\">\n                                                    <ArrowBackIosNewIcon className=\"create-dataset-pagination-icon\" onClick={() => {previousPage()}} />\n                                                    <p>Page {page} / {Math.ceil(uploadedImages.length/30)}</p>\n                                                    <ArrowForwardIosIcon className=\"create-dataset-pagination-icon\" onClick={() => {nextPage()}} />\n                                                </div>\n                                            }\n                                        </div>\n                                        <div className=\"create-dataset-images-list\" key={refreshData}>\n                                            {uploadedImages.map((image, i) => {\n                                                if (i >= start && i < end) {\n                                                    return (\n                                                        <div className=\"create-dataset-image\" key={i}>\n                                                            <img src={type === \"create\" ? URL.createObjectURL(image) : `http://127.0.0.1:5000/files/${dataset.imageFile}/${image}.jpg`} />\n                                                            <div>\n                                                                <select value={assignedLabels[i]}\n                                                                        onChange={e => {setAssignedLabels(state => {\n                                                                                    const stateCopy = [...state]\n                                                                                \n                                                                                    stateCopy[i] = e.target.value\n                                                                                \n                                                                                    return stateCopy\n                                                                                })\n                                                                                setChangedData(true)\n                                                                                setRefreshLabels(new Date().getTime())}}>\n                                                                    <option value=\"No label\">No label</option>\n                                                                    {labels.map((label, j) => \n                                                                        <option value={label} key={j}>{label}</option>\n                                                                    )}\n                                                                </select>\n                                                                <div onClick={() => {deleteImage(image, i)}}>\n                                                                    <DeleteIcon className=\"create-dataset-image-delete\" />\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                    )\n                                                }\n                                            })}\n                                        </div>\n                                    </>\n                                :   \n                                    <>\n                                        <div className=\"view-items-top\">\n                                            <p>Dataset</p>\n                                        </div>\n                                        <div className=\"create-dataset-images-list\" key={refreshData}>\n                                            {uploadedImages.map((image, i) => {\n                                                if (i >= start && i < end) {\n                                                    return (\n                                                        <div className=\"create-dataset-image\" key={i}>\n                                                            <img src={`http://127.0.0.1:5000/files/${dataset.imageFile}/${image}.jpg`} />\n                                                            <div>\n                                                                <p>{assignedLabels[i]}</p>\n                                                            </div>\n                                                        </div>\n                                                    )\n                                                }\n                                            })}\n                                        </div>\n                                    </>\n                                }\n                            </div>\n                            <div className=\"create-workspace-data\">\n                                <p className=\"create-workspace-data-header\">Labels:</p>\n                                <div className=\"sidebar-divided\" />\n                                {(type === \"create\" || dataset.self) &&\n                                    <input className=\"create-dataset-label-input\"\n                                            placeholder=\"Add Label\"\n                                            onChange={e => {setAddLabel(e.target.value)}}\n                                            onKeyPress={addFunctionKey}\n                                            value={addLabel} />\n                                }\n                                <div className=\"create-dataset-labels-list\" key={refreshLabels}>\n                                    {labels.map((label, i) => {\n                                        return (\n                                            <div className={`create-dataset-label ${colours[i % colours.length]}`} key={i}>\n                                                <p>{label}</p>\n                                                {(type === \"create\" || dataset.self) &&\n                                                    <div onClick={() => {\n                                                        assignedLabels.map((assignedLabel, j) => {\n                                                            if (assignedLabel === labels[i]) {\n                                                                setAssignedLabels(state => {\n                                                                    const stateCopy = [...state]\n                                                                \n                                                                    stateCopy[j] = \"No label\"\n                                                                \n                                                                    return stateCopy\n                                                                })\n                                                            }\n                                                        })\n                                                        labels.splice(i, 1)\n                                                        setRefreshLabels(new Date().getTime())\n                                                    }}>\n                                                        <CloseIcon className=\"create-dataset-label-icon\" /> \n                                                    </div>\n                                                }\n                                            </div>\n                                        )\n                                    })}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            : loaded && !exist &&\n                <div className=\"inner-body\">  \n                    <p className=\"item-exist\">Cannot find dataset</p>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default Dataset"]},"metadata":{},"sourceType":"module"}