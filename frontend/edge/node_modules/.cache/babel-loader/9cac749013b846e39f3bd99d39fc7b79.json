{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Create-Experiment.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext, useRef } from 'react';\nimport { useHistory, useParams } from \"react-router-dom\";\nimport itemsAPI from '../API/items';\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport ModelNode from '../Components/Model-Node';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CreateExperiment = _ref => {\n  _s();\n\n  let {\n    currentUser\n  } = _ref;\n  const [stage, setStage] = useState(\"setup\");\n  const [title, setTitle] = useState(\"\");\n  const [loaded, setLoaded] = useState(false);\n  const [noData, setNoData] = useState();\n  const [exist, setExist] = useState(false);\n  const [visibility, setVisibility] = useState(false);\n  const [model, setModel] = useState([]);\n  const [selectedNode, setSelectedNode] = useState(0);\n  const [configuration, setConfiguration] = useState({\n    epochs: \"\",\n    trainingSplit: \"\",\n    validationSplit: \"\",\n    testSplit: \"\",\n    maxError: \"\",\n    batch: \"\",\n    optimiser: \"\",\n    model: \"\"\n  });\n  const [experiments, setExperiments] = useState([]);\n  const [addNode, setAddNode] = useState(false);\n  const [disableTrain, setDisabledTrain] = useState(true);\n  const [refreshDiagram, setRefreshDiagram] = useState();\n  const {\n    addOpenItems\n  } = useContext(OpenItemsContext);\n  const modelRef = useRef(null);\n  const history = useHistory();\n  const workspaceID = useParams().id;\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const experiments = await itemsAPI.get(`/all-experiments/${workspaceID}`);\n        const workspace = await itemsAPI.get(`/${workspaceID}?type=workspace`);\n\n        if (workspace.data.data.creator === currentUser.id) {\n          addOpenItems(workspace.data.data._id, workspace.data.data.title, workspace.data.data.type);\n        }\n\n        experiments.data.data.experiments.map(experiment => {\n          setExperiments(state => [...state, experiment.title]);\n        });\n        fetch(`http://127.0.0.1:5000/files/${workspace.data.data.dataset.datafile}.csv`).then(response => response.text()).then(text => {\n          setModel([{\n            type: \"Input\",\n            value: text.slice(0, text.indexOf('\\n')).split(',').length,\n            activation: \"\"\n          }]);\n          setNoData(false);\n          setLoaded(true);\n          setExist(true);\n        }).catch(() => {\n          setNoData(true);\n          setLoaded(true);\n          setExist(true);\n        });\n      } catch (err) {\n        setExist(false);\n        setLoaded(true);\n      }\n    };\n\n    fetchData();\n  }, []);\n  console.log(exist);\n  console.log(loaded);\n  useEffect(() => {\n    if (modelRef.current) {\n      modelRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'end',\n        inline: 'end'\n      });\n    }\n  }, [model, addNode]);\n\n  const next = () => {\n    if (stage === \"setup\" && title !== \"\" && !experiments.includes(title)) {\n      setStage(\"modelling\");\n    }\n\n    if (stage === \"modelling\" && model.length > 2 && model[model.length - 1].type === \"Output\" && configuration.epochs !== \"\" && configuration.trainingSplit !== \"\" && configuration.validationSplit !== \"\" && configuration.testSplit !== \"\" && configuration.maxError !== \"\" && configuration.batch !== \"\" && configuration.optimiser !== \"\" && configuration.model !== \"\") {\n      setStage(\"training\");\n    }\n\n    if (stage === \"training\" && !disableTrain) {\n      setStage(\"evaluation\");\n    }\n  };\n\n  const cancel = () => {\n    history.replace(`/${workspaceID}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loaded && exist ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"create-sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Create Experiment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"create-item-header\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"create-item-title\",\n            children: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${\"create-sidebar-stage\"} ${stage === \"setup\" ? \"create-sidebar-stage-selected\" : \"create-sidebar-stage-unselected\"}`,\n          disabled: stage === \"setup\",\n          onClick: () => {\n            setStage(\"setup\");\n          },\n          children: \"Setup\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${\"create-sidebar-stage\"} ${stage === \"modelling\" ? \"create-sidebar-stage-selected\" : \"create-sidebar-stage-unselected\"}`,\n          disabled: stage === \"setup\" || stage === \"modelling\",\n          onClick: () => {\n            setStage(\"modelling\");\n          },\n          children: \"Modelling\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${\"create-sidebar-stage\"} ${stage === \"training\" ? \"create-sidebar-stage-selected\" : \"create-sidebar-stage-unselected\"}`,\n          disabled: stage === \"setup\" || stage === \"modelling\" || stage === \"training\",\n          onClick: () => {\n            setStage(\"training\");\n          },\n          children: \"Training\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${\"create-sidebar-stage\"} ${stage === \"evaluation\" ? \"create-sidebar-stage-selected\" : \"create-sidebar-stage-unselected\"}`,\n          disabled: true,\n          children: \"Evaluation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner-body\",\n        children: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: stage === \"setup\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-item-setup-information\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"create-item-nav\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"create-item-filename\",\n                children: \"Experiment Information\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"white-button create-item-cancel\",\n                onClick: () => {\n                  cancel();\n                },\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"blue-button\",\n                onClick: () => {\n                  next();\n                },\n                children: \"Next\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"create-item-title\",\n              placeholder: \"Title\",\n              onChange: e => {\n                setTitle(e.target.value);\n              },\n              value: title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"create-item-setup\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"create-item-setup-label\",\n                children: \"Public?\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                onChange: () => {\n                  setVisibility(previous => !previous);\n                },\n                checked: visibility\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 33\n          }, this) : stage === \"modelling\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-item-modelling\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"create-item-modelling-top\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"white-button create-item-cancel\",\n                onClick: () => {\n                  cancel();\n                },\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"blue-button\",\n                onClick: () => {\n                  next();\n                },\n                children: \"Train\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"create-item-modelling-body\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-item-model\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"create-item-model-diagram\",\n                  children: [model.map((node, i) => {\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"create-item-model-diagram-node\",\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          onClick: () => {\n                            setSelectedNode(i);\n                          },\n                          children: /*#__PURE__*/_jsxDEV(ModelNode, {\n                            setSelectedNode: setSelectedNode,\n                            type: node.type,\n                            value: node.value,\n                            selected: i === selectedNode,\n                            last: i === model.length - 1\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 154,\n                            columnNumber: 69\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 153,\n                          columnNumber: 65\n                        }, this), node.type !== \"Input\" && /*#__PURE__*/_jsxDEV(\"div\", {\n                          onClick: () => {\n                            {\n                              selectedNode === i ? setSelectedNode(state => state - 1) : selectedNode < i ? setSelectedNode(state => state) : selectedNode > i && /*#__PURE__*/_jsxDEV(_Fragment, {\n                                children: selectedNode - i === 1 ? setSelectedNode(state => state - 1) : setSelectedNode(i)\n                              }, void 0, false);\n                            }\n                            model.splice(i, 1);\n                            setRefreshDiagram(new Date().getTime());\n                          },\n                          children: /*#__PURE__*/_jsxDEV(ClearIcon, {\n                            className: \"create-item-model-diagram-remove\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 172,\n                            columnNumber: 73\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 157,\n                          columnNumber: 69\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 152,\n                        columnNumber: 61\n                      }, this), i === model.length - 1 && node.type !== \"Output\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                        children: addNode ? /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"create-item-model-diagram-add\",\n                          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                            onClick: () => {\n                              setAddNode(false);\n                            },\n                            children: /*#__PURE__*/_jsxDEV(RemoveIcon, {\n                              className: \"create-item-model-diagram-add-icon\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 181,\n                              columnNumber: 81\n                            }, this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 180,\n                            columnNumber: 77\n                          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                            className: \"create-item-model-diagram-add-options\",\n                            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                              onClick: () => {\n                                setModel(state => [...state, {\n                                  type: \"Dense\",\n                                  value: 0,\n                                  activation: \"\"\n                                }]);\n                                setAddNode(false);\n                              },\n                              children: \"Dense\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 184,\n                              columnNumber: 81\n                            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                              onClick: () => {\n                                setModel(state => [...state, {\n                                  type: \"Output\",\n                                  value: 0,\n                                  activation: \"\"\n                                }]);\n                                setAddNode(false);\n                              },\n                              children: \"Output\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 191,\n                              columnNumber: 81\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 183,\n                            columnNumber: 77\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 179,\n                          columnNumber: 73\n                        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                          onClick: () => {\n                            setAddNode(true);\n                          },\n                          children: /*#__PURE__*/_jsxDEV(AddIcon, {\n                            className: \"create-item-model-diagram-add-icon\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 202,\n                            columnNumber: 77\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 201,\n                          columnNumber: 73\n                        }, this)\n                      }, void 0, false)]\n                    }, i, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 151,\n                      columnNumber: 57\n                    }, this);\n                  }), /*#__PURE__*/_jsxDEV(\"div\", {\n                    ref: modelRef\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 210,\n                    columnNumber: 49\n                  }, this)]\n                }, refreshDiagram, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 148,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"create-item-model-selected\",\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    children: model[selectedNode].type\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 213,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Units\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 214,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    value: model[selectedNode].value,\n                    disabled: model[selectedNode].type === \"Input\",\n                    onChange: e => {\n                      setModel(state => {\n                        const stateCopy = [...state];\n                        stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                          value: Number(e.target.value)\n                        };\n                        return stateCopy;\n                      });\n                      setRefreshDiagram(new Date().getTime());\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 215,\n                    columnNumber: 49\n                  }, this), model[selectedNode].type !== \"Output\" && model[selectedNode].type !== \"Input\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Activation\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 230,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      value: model[selectedNode].activation,\n                      onChange: e => {\n                        setModel(state => {\n                          const stateCopy = [...state];\n                          stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                            activation: e.target.value\n                          };\n                          return stateCopy;\n                        });\n                        setRefreshDiagram(new Date().getTime());\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        disabled: true,\n                        selected: true,\n                        value: \"\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 243,\n                        columnNumber: 65\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"Relu\",\n                        children: \"Relu\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 244,\n                        columnNumber: 65\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"Sigmoid\",\n                        children: \"Sigmoid\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 245,\n                        columnNumber: 65\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 231,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 212,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-item-configuration\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"create-item-configuration-option\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Epochs\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 254,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: configuration.epochs,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          epochs: e.target.value\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 255,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 253,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Training Split\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 261,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: configuration.trainingSplit,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          trainingSplit: e.target.value\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 262,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 260,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Validation Split\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 268,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: configuration.validationSplit,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          validationSplit: e.target.value\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 269,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 267,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Test Split\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 275,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: configuration.testSplit,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          testSplit: e.target.value\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 276,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 274,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Maximum Error\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 282,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: configuration.maxError,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          maxError: e.target.value\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 283,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 281,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Batch Size\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 289,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: configuration.batch,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          batch: e.target.value\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 290,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 288,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Optimiser\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 296,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      value: configuration.optimiser,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          optimiser: e.target.value\n                        }));\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        disabled: true,\n                        selected: true,\n                        value: \"\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 301,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"Sigmoid\",\n                        children: \"Sigmoid\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 302,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"Relu\",\n                        children: \"Relu\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 303,\n                        columnNumber: 57\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 297,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 295,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Model Type\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 307,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      value: configuration.model,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          model: e.target.value\n                        }));\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        disabled: true,\n                        selected: true,\n                        value: \"\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 312,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"Regression\",\n                        children: \"Regression\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 313,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"Classification\",\n                        children: \"Classification\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 314,\n                        columnNumber: 57\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 308,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 306,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 252,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 33\n          }, this) : stage === \"training\" ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }, this) : loaded && !exist && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"width-body\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"item-exist\",\n        children: \"Cannot find workspace\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(CreateExperiment, \"LvBXfK/Y92JoiyRnRgnIDIUQ2MA=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = CreateExperiment;\nexport default CreateExperiment;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateExperiment\");","map":{"version":3,"sources":["/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Create-Experiment.jsx"],"names":["React","useState","useEffect","useContext","useRef","useHistory","useParams","itemsAPI","OpenItemsContext","ModelNode","ClearIcon","AddIcon","RemoveIcon","CreateExperiment","currentUser","stage","setStage","title","setTitle","loaded","setLoaded","noData","setNoData","exist","setExist","visibility","setVisibility","model","setModel","selectedNode","setSelectedNode","configuration","setConfiguration","epochs","trainingSplit","validationSplit","testSplit","maxError","batch","optimiser","experiments","setExperiments","addNode","setAddNode","disableTrain","setDisabledTrain","refreshDiagram","setRefreshDiagram","addOpenItems","modelRef","history","workspaceID","id","fetchData","get","workspace","data","creator","_id","type","map","experiment","state","fetch","dataset","datafile","then","response","text","value","slice","indexOf","split","length","activation","catch","err","console","log","current","scrollIntoView","behavior","block","inline","next","includes","cancel","replace","e","target","previous","node","i","splice","Date","getTime","stateCopy","Number"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useContext, useRef} from 'react'\nimport {useHistory, useParams} from \"react-router-dom\"\nimport itemsAPI from '../API/items'\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport ModelNode from '../Components/Model-Node';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\n\nconst CreateExperiment = ({currentUser}) => {\n    const [stage, setStage] = useState(\"setup\");\n    const [title, setTitle] = useState(\"\");\n    const [loaded, setLoaded] = useState(false)\n    const [noData, setNoData] = useState()\n    const [exist, setExist] = useState(false)\n    const [visibility, setVisibility] = useState(false);\n    const [model, setModel] = useState([])\n    const [selectedNode, setSelectedNode] = useState(0)\n    const [configuration, setConfiguration] = useState({epochs: \"\", trainingSplit: \"\", validationSplit: \"\", testSplit: \"\", \n                                                        maxError: \"\", batch: \"\", optimiser: \"\", model: \"\"})\n    const [experiments, setExperiments] = useState([]);\n    const [addNode, setAddNode] = useState(false)\n    const [disableTrain, setDisabledTrain] = useState(true)\n    const [refreshDiagram, setRefreshDiagram] = useState()\n    const {addOpenItems} = useContext(OpenItemsContext);\n    const modelRef = useRef(null)\n    const history = useHistory();\n    const workspaceID = useParams().id;\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const experiments = await itemsAPI.get(`/all-experiments/${workspaceID}`);\n                const workspace = await itemsAPI.get(`/${workspaceID}?type=workspace`);\n\n                if (workspace.data.data.creator === currentUser.id) {\n                    addOpenItems(workspace.data.data._id, workspace.data.data.title, workspace.data.data.type)\n                }\n\n                experiments.data.data.experiments.map((experiment) => {\n                    setExperiments(state => [...state, experiment.title]);\n                })\n\n                fetch(`http://127.0.0.1:5000/files/${workspace.data.data.dataset.datafile}.csv`)\n                    .then(response => response.text())\n                    .then(text => {\n                        setModel([{type: \"Input\", value: text.slice(0, text.indexOf('\\n')).split(',').length, activation: \"\"}])\n                        setNoData(false)\n                        setLoaded(true);\n                        setExist(true)\n                    }).catch(() => {\n                        setNoData(true)\n                        setLoaded(true);\n                        setExist(true)\n                    });\n            } catch (err) {\n                setExist(false)\n                setLoaded(true)\n            }\n        }\n        fetchData();\n    }, [])\n    console.log(exist)\n    console.log(loaded)\n\n    useEffect(() => {\n        if (modelRef.current) {\n            modelRef.current.scrollIntoView({\n                behavior: 'smooth',\n                block: 'end',\n                inline: 'end'\n            })\n        }\n    }, [model, addNode])\n\n    const next = () => {\n        if (stage === \"setup\" && title !== \"\" && !experiments.includes(title)) {\n            setStage(\"modelling\")\n        }\n        if (stage === \"modelling\" && model.length > 2 && model[model.length-1].type === \"Output\" && configuration.epochs !== \"\" && \n            configuration.trainingSplit !== \"\" && configuration.validationSplit !== \"\" && configuration.testSplit !== \"\" && \n            configuration.maxError !== \"\" && configuration.batch !== \"\" && configuration.optimiser !== \"\" && \n            configuration.model !== \"\") {\n            setStage(\"training\")\n        }\n        if (stage === \"training\" && !disableTrain) {\n            setStage(\"evaluation\")\n        }\n    }\n\n    const cancel = () => {\n        history.replace(`/${workspaceID}`);\n    }\n\n    return (\n        <>\n            {loaded && exist ?\n                <div className=\"sidebar-body\">\n                    <div className=\"create-sidebar\">\n                        <h1>Create Experiment</h1> \n                        <div className=\"create-item-header\">\n                            <p className=\"create-item-title\">{title}</p> \n                        </div>\n                        <button className={`${\"create-sidebar-stage\"} ${stage === \"setup\" ? \"create-sidebar-stage-selected\" : \"create-sidebar-stage-unselected\"}`}\n                                disabled={stage === \"setup\"}\n                                onClick={() => {setStage(\"setup\")}}>Setup</button>\n                        <button className={`${\"create-sidebar-stage\"} ${stage === \"modelling\" ? \"create-sidebar-stage-selected\" : \"create-sidebar-stage-unselected\"}`}\n                                disabled={stage === \"setup\" || stage === \"modelling\"}\n                                onClick={() => {setStage(\"modelling\")}}>Modelling</button>\n                        <button className={`${\"create-sidebar-stage\"} ${stage === \"training\" ? \"create-sidebar-stage-selected\" : \"create-sidebar-stage-unselected\"}`}\n                                disabled={stage === \"setup\" || stage === \"modelling\" || stage === \"training\"}\n                                onClick={() => {setStage(\"training\")}}>Training</button>\n                        <button className={`${\"create-sidebar-stage\"} ${stage === \"evaluation\" ? \"create-sidebar-stage-selected\" : \"create-sidebar-stage-unselected\"}`}\n                                disabled>Evaluation</button>\n                    </div>\n                    <div className=\"inner-body\">\n                        <>\n                            {stage === \"setup\" ?\n                                <div className=\"create-item-setup-information\">\n                                    <div className=\"create-item-nav\">   \n                                        <p className=\"create-item-filename\">Experiment Information</p>\n                                        <button className=\"white-button create-item-cancel\"\n                                                onClick={() => {cancel()}}>Cancel</button>\n                                        <button className=\"blue-button\"\n                                                onClick={() => {next()}}>Next</button>\n                                    </div>\n                                    <input className=\"create-item-title\"\n                                            placeholder=\"Title\"\n                                            onChange={e => {setTitle(e.target.value)}}\n                                            value={title} />\n                                    <div className=\"create-item-setup\">\n                                        <label className=\"create-item-setup-label\">Public?</label>\n                                        <input type=\"checkbox\" \n                                                onChange={() => {setVisibility(previous => !previous)}}\n                                                checked={visibility} />\n                                    </div>\n                                </div>\n                            : (stage === \"modelling\") ?\n                                <div className=\"create-item-modelling\">\n                                    <div className=\"create-item-modelling-top\">   \n                                        <button className=\"white-button create-item-cancel\"\n                                                onClick={() => {cancel()}}>Cancel</button>\n                                        <button className=\"blue-button\"\n                                                onClick={() => {next()}}>Train</button>\n                                    </div>\n                                    <div className=\"create-item-modelling-body\">\n                                        <div className=\"create-item-model\">\n                                            <div className=\"create-item-model-diagram\" key={refreshDiagram}>\n                                                {model.map((node, i) => {\n                                                    return (\n                                                        <div key={i}>\n                                                            <div className={\"create-item-model-diagram-node\"}>\n                                                                <div onClick={() => {setSelectedNode(i)}}>\n                                                                    <ModelNode setSelectedNode={setSelectedNode} type={node.type} value={node.value} selected={i === selectedNode} last={i === model.length-1} />\n                                                                </div>\n                                                                {node.type !== \"Input\" &&\n                                                                    <div onClick={() => {{selectedNode === i ?\n                                                                                            setSelectedNode(state => state-1)\n                                                                                        : selectedNode < i ?\n                                                                                            setSelectedNode(state => state)\n                                                                                        : selectedNode > i &&\n                                                                                            <>\n                                                                                                {selectedNode-i === 1 ?\n                                                                                                    setSelectedNode(state => state-1)\n                                                                                                :\n                                                                                                    setSelectedNode(i)\n                                                                                                } \n                                                                                            </>  \n                                                                                        }\n                                                                                        model.splice(i, 1)\n                                                                                        setRefreshDiagram(new Date().getTime())}}>\n                                                                        <ClearIcon className=\"create-item-model-diagram-remove\" />\n                                                                    </div>\n                                                                }\n                                                            </div>\n                                                            {i === model.length-1 && node.type !== \"Output\" &&\n                                                                <>\n                                                                    {addNode ?\n                                                                        <div className=\"create-item-model-diagram-add\">\n                                                                            <div onClick={() => {setAddNode(false)}}>\n                                                                                <RemoveIcon className=\"create-item-model-diagram-add-icon\" />\n                                                                            </div>\n                                                                            <div className=\"create-item-model-diagram-add-options\">\n                                                                                <button onClick={() => {setModel(state => [...state, {\n                                                                                    type: \"Dense\",\n                                                                                    value: 0,\n                                                                                    activation: \"\"\n                                                                                }])\n                                                                                setAddNode(false)\n                                                                                }}>Dense</button>\n                                                                                <button onClick={() => {setModel(state => [...state, {\n                                                                                    type: \"Output\",\n                                                                                    value: 0,\n                                                                                    activation: \"\"\n                                                                                }])\n                                                                                setAddNode(false)\n                                                                                }}>Output</button>\n                                                                            </div>\n                                                                        </div>\n                                                                    :\n                                                                        <div onClick={() => {setAddNode(true)}}>\n                                                                            <AddIcon className=\"create-item-model-diagram-add-icon\" />\n                                                                        </div>\n                                                                    }\n                                                                </>\n                                                            }\n                                                        </div>\n                                                    )\n                                                })}\n                                                <div ref={modelRef} />\n                                            </div>\n                                            <div className=\"create-item-model-selected\">\n                                                <p>{model[selectedNode].type}</p>\n                                                <label>Units</label>\n                                                <input value={model[selectedNode].value} \n                                                        disabled={model[selectedNode].type === \"Input\"}\n                                                        onChange={e => {setModel(state => {\n                                                                            const stateCopy = [...state]\n                                                                        \n                                                                            stateCopy[selectedNode] = {\n                                                                                ...stateCopy[selectedNode],\n                                                                                value: Number(e.target.value)\n                                                                            }\n                                                                        \n                                                                            return stateCopy\n                                                                        })\n                                                                        setRefreshDiagram(new Date().getTime())}} />\n                                                {model[selectedNode].type !== \"Output\" && model[selectedNode].type !== \"Input\" &&\n                                                    <>\n                                                        <label>Activation</label>\n                                                        <select value={model[selectedNode].activation} \n                                                                onChange={e => {setModel(state => {\n                                                                                    const stateCopy = [...state]\n                                                                                \n                                                                                    stateCopy[selectedNode] = {\n                                                                                        ...stateCopy[selectedNode],\n                                                                                        activation: e.target.value\n                                                                                    }\n                                                                                \n                                                                                    return stateCopy\n                                                                                })\n                                                                                setRefreshDiagram(new Date().getTime())}}>\n                                                                <option disabled selected value=\"\"></option>\n                                                                <option value=\"Relu\">Relu</option>\n                                                                <option value=\"Sigmoid\">Sigmoid</option>\n                                                        </select>\n                                                    </>\n                                                }  \n                                            </div>\n                                        </div>\n                                        <div className=\"create-item-configuration\">\n                                            <div className=\"create-item-configuration-option\">\n                                                <div>\n                                                    <label>Epochs</label>\n                                                    <input value={configuration.epochs} onChange={e => {setConfiguration(state => ({\n                                                                                                            ...state,\n                                                                                                            epochs: e.target.value\n                                                                                                        }))}} />\n                                                </div>\n                                                <div>\n                                                    <label>Training Split</label>\n                                                    <input value={configuration.trainingSplit} onChange={e => {setConfiguration(state => ({\n                                                                                                            ...state,\n                                                                                                            trainingSplit: e.target.value\n                                                                                                        }))}} />\n                                                </div>\n                                                <div>\n                                                    <label>Validation Split</label>\n                                                    <input value={configuration.validationSplit} onChange={e => {setConfiguration(state => ({\n                                                                                                            ...state,\n                                                                                                            validationSplit: e.target.value\n                                                                                                        }))}} />\n                                                </div>\n                                                <div>\n                                                    <label>Test Split</label>\n                                                    <input value={configuration.testSplit} onChange={e => {setConfiguration(state => ({\n                                                                                                            ...state,\n                                                                                                            testSplit: e.target.value\n                                                                                                        }))}} />\n                                                </div>\n                                                <div>\n                                                    <label>Maximum Error</label>\n                                                    <input value={configuration.maxError} onChange={e => {setConfiguration(state => ({\n                                                                                                            ...state,\n                                                                                                            maxError: e.target.value\n                                                                                                        }))}} />\n                                                </div>\n                                                <div>\n                                                    <label>Batch Size</label>\n                                                    <input value={configuration.batch} onChange={e => {setConfiguration(state => ({\n                                                                                                            ...state,\n                                                                                                            batch: e.target.value\n                                                                                                        }))}} />\n                                                </div>\n                                                <div>\n                                                    <label>Optimiser</label>\n                                                    <select value={configuration.optimiser} onChange={e => {setConfiguration(state => ({\n                                                                                                            ...state,\n                                                                                                            optimiser: e.target.value\n                                                                                                        }))}}>\n                                                        <option disabled selected value=\"\"></option>\n                                                        <option value=\"Sigmoid\">Sigmoid</option>\n                                                        <option value=\"Relu\">Relu</option>\n                                                    </select>\n                                                </div>\n                                                <div>\n                                                    <label>Model Type</label>\n                                                    <select value={configuration.model} onChange={e => {setConfiguration(state => ({\n                                                                                                            ...state,\n                                                                                                            model: e.target.value\n                                                                                                        }))}}>\n                                                        <option disabled selected value=\"\"></option>\n                                                        <option value=\"Regression\">Regression</option>\n                                                        <option value=\"Classification\">Classification</option>\n                                                    </select>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            : (stage === \"training\") ?\n                                <>\n                                </>\n                            :\n                                <>\n                                </>\n                            }\n                        </>\n                    </div>\n                </div>\n            : loaded && !exist &&\n                <div className=\"width-body\">  \n                    <p className=\"item-exist\">Cannot find workspace</p>\n                </div>\n            }    \n        </>\n    )\n}\n\nexport default CreateExperiment\n"]},"metadata":{},"sourceType":"module"}