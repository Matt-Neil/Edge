{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Experiment.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport itemsAPI from '../API/items';\nimport globalAPI from '../API/global';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport ModelNode from '../Components/Model-Node';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Experiment = _ref => {\n  _s();\n\n  let {\n    currentUser\n  } = _ref;\n  const [loaded, setLoaded] = useState(false);\n  const [exist, setExist] = useState();\n  const [model, setModel] = useState();\n  const [configuration, setConfiguration] = useState();\n  const [updated, setUpdated] = useState();\n  const [changed, setChanged] = useState(false);\n  const [date, setDate] = useState();\n  const [visibility, setVisibility] = useState();\n  const [section, setSection] = useState(\"model\");\n  const [experiment, setExperiment] = useState();\n  const [selectedNode, setSelectedNode] = useState(0);\n  const [title, setTitle] = useState(\"\");\n  const modelRef = useRef(null);\n  const workspaceID = useParams().workspace;\n  const experimentID = useParams().experiment;\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const experiment = await itemsAPI.get(`/experiment/${experimentID}?workspace=${workspaceID}`);\n        setExperiment(experiment.data.data);\n        setUpdated(experiment.data.data.experiments.updated);\n        setTitle(experiment.data.data.experiments.title);\n        setModel(experiment.data.data.experiments.model);\n        setVisibility(experiment.data.data.experiments.visibility);\n        setConfiguration(experiment.data.data.experiments.configuration);\n        setExist(true);\n        setLoaded(true);\n      } catch (err) {\n        setExist(false);\n        setLoaded(true);\n      }\n    };\n\n    fetchData();\n  }, []);\n  useEffect(() => {\n    if (loaded && exist) {\n      const updatedDate = new Date(updated);\n      const currentDate = new Date();\n\n      if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365).toString()} years ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n        setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24)).toString()} days ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600)).toString()} hours ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60)).toString()} minutes ago`);\n      } else {\n        setDate(\"Updated just now\");\n      }\n    }\n  }, [loaded, updated]);\n\n  const updateVisibility = async () => {\n    try {\n      await globalAPI.put(``);\n      setVisibility(state => !state);\n    } catch (err) {}\n  };\n\n  const updateExperiment = async () => {\n    try {\n      setUpdated(new Date().toISOString());\n      setChanged(false);\n    } catch (err) {}\n  };\n\n  const deleteExperiment = async () => {\n    try {} catch (err) {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loaded && exist ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"width-body\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-top\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"item-heading\",\n            children: experiment.self ? /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"item-title-input\",\n              placeholder: \"Title\",\n              value: title,\n              onChange: e => {\n                setTitle(e.target.value);\n                {\n                  !changed && setChanged(true);\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 37\n            }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: experiment.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"item-meta\",\n              children: date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 33\n            }, this), experiment.self && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: visibility ? /*#__PURE__*/_jsxDEV(VisibilityIcon, {\n                className: \"item-visibility\",\n                onClick: () => {\n                  updateVisibility();\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 45\n              }, this) : /*#__PURE__*/_jsxDEV(VisibilityOffIcon, {\n                className: \"item-visibility\",\n                onClick: () => {\n                  updateVisibility();\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 45\n              }, this)\n            }, void 0, false)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 29\n          }, this), experiment.self && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"item-middle\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"dark-grey-button item-delete\",\n              onClick: () => {\n                deleteExperiment();\n              },\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"blue-button\",\n              disabled: !changed,\n              onClick: () => {\n                updateExperiment();\n              },\n              children: \"Save Changes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"item-select\",\n            onChange: e => {\n              setSection(e.target.value);\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"model\",\n              children: \"Model\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"results\",\n              children: \"Results\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-bottom\",\n          children: section === \"model\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-item-modelling-body\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"create-item-model\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-item-model-diagram\",\n                children: [model.map((node, i) => {\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"create-item-model-diagram-node\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        onClick: () => {\n                          setSelectedNode(i);\n                        },\n                        children: /*#__PURE__*/_jsxDEV(ModelNode, {\n                          setSelectedNode: setSelectedNode,\n                          type: node.type,\n                          value: node.value,\n                          selected: i === selectedNode,\n                          last: i === model.length - 1\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 149,\n                          columnNumber: 65\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 148,\n                        columnNumber: 61\n                      }, this), node.type !== \"Input\" && /*#__PURE__*/_jsxDEV(\"div\", {\n                        onClick: () => {\n                          {\n                            selectedNode === i ? setSelectedNode(state => state - 1) : selectedNode < i ? setSelectedNode(state => state) : selectedNode > i && /*#__PURE__*/_jsxDEV(_Fragment, {\n                              children: selectedNode - i === 1 ? setSelectedNode(state => state - 1) : setSelectedNode(i)\n                            }, void 0, false);\n                          }\n                          model.splice(i, 1);\n                          setRefreshDiagram(new Date().getTime());\n                        },\n                        children: /*#__PURE__*/_jsxDEV(ClearIcon, {\n                          className: \"create-item-model-diagram-remove\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 167,\n                          columnNumber: 69\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 152,\n                        columnNumber: 65\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 147,\n                      columnNumber: 57\n                    }, this), i === model.length - 1 && node.type !== \"Output\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                      children: addNode ? /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"create-item-model-diagram-add\",\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          onClick: () => {\n                            setAddNode(false);\n                          },\n                          children: /*#__PURE__*/_jsxDEV(RemoveIcon, {\n                            className: \"create-item-model-diagram-add-icon\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 176,\n                            columnNumber: 77\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 175,\n                          columnNumber: 73\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"create-item-model-diagram-add-options\",\n                          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                            onClick: () => {\n                              setModel(state => [...state, {\n                                type: \"Dense\",\n                                value: 0,\n                                activation: \"\"\n                              }]);\n                              setAddNode(false);\n                            },\n                            children: \"Dense\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 179,\n                            columnNumber: 77\n                          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                            onClick: () => {\n                              setModel(state => [...state, {\n                                type: \"Output\",\n                                value: 0,\n                                activation: \"\"\n                              }]);\n                              setAddNode(false);\n                            },\n                            children: \"Output\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 186,\n                            columnNumber: 77\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 178,\n                          columnNumber: 73\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 174,\n                        columnNumber: 69\n                      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                        onClick: () => {\n                          setAddNode(true);\n                        },\n                        children: /*#__PURE__*/_jsxDEV(AddIcon, {\n                          className: \"create-item-model-diagram-add-icon\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 197,\n                          columnNumber: 73\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 196,\n                        columnNumber: 69\n                      }, this)\n                    }, void 0, false)]\n                  }, i, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 146,\n                    columnNumber: 53\n                  }, this);\n                }), /*#__PURE__*/_jsxDEV(\"div\", {\n                  ref: modelRef\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 205,\n                  columnNumber: 45\n                }, this)]\n              }, refreshDiagram, true, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-item-model-selected\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: model[selectedNode].type\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 208,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Units\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 209,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  value: model[selectedNode].value,\n                  disabled: model[selectedNode].type === \"Input\",\n                  onChange: e => {\n                    setModel(state => {\n                      const stateCopy = [...state];\n                      stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                        value: Number(e.target.value)\n                      };\n                      return stateCopy;\n                    });\n                    setRefreshDiagram(new Date().getTime());\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 210,\n                  columnNumber: 45\n                }, this), model[selectedNode].type !== \"Output\" && model[selectedNode].type !== \"Input\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Activation\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 225,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                    value: model[selectedNode].activation,\n                    onChange: e => {\n                      setModel(state => {\n                        const stateCopy = [...state];\n                        stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                          activation: e.target.value\n                        };\n                        return stateCopy;\n                      });\n                      setRefreshDiagram(new Date().getTime());\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      disabled: true,\n                      selected: true,\n                      value: \"\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 238,\n                      columnNumber: 61\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"Relu\",\n                      children: \"Relu\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 239,\n                      columnNumber: 61\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"Sigmoid\",\n                      children: \"Sigmoid\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 240,\n                      columnNumber: 61\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 226,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"create-item-configuration\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-item-configuration-option\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Epochs\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 249,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    value: configuration.epochs,\n                    onChange: e => {\n                      setConfiguration(state => ({ ...state,\n                        epochs: e.target.value\n                      }));\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 250,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 248,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Training Split\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 256,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    value: configuration.trainingSplit,\n                    onChange: e => {\n                      setConfiguration(state => ({ ...state,\n                        trainingSplit: e.target.value\n                      }));\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 257,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 255,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Validation Split\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 263,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    value: configuration.validationSplit,\n                    onChange: e => {\n                      setConfiguration(state => ({ ...state,\n                        validationSplit: e.target.value\n                      }));\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 264,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 262,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Test Split\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 270,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    value: configuration.testSplit,\n                    onChange: e => {\n                      setConfiguration(state => ({ ...state,\n                        testSplit: e.target.value\n                      }));\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 271,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 269,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Maximum Error\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 277,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    value: configuration.maxError,\n                    onChange: e => {\n                      setConfiguration(state => ({ ...state,\n                        maxError: e.target.value\n                      }));\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 278,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 276,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Batch Size\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 284,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    value: configuration.batch,\n                    onChange: e => {\n                      setConfiguration(state => ({ ...state,\n                        batch: e.target.value\n                      }));\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 285,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 283,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Optimiser\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 291,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                    value: configuration.optimiser,\n                    onChange: e => {\n                      setConfiguration(state => ({ ...state,\n                        optimiser: e.target.value\n                      }));\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      disabled: true,\n                      selected: true,\n                      value: \"\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 296,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"Sigmoid\",\n                      children: \"Sigmoid\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 297,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"Relu\",\n                      children: \"Relu\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 298,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 292,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 290,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Model Type\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 302,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                    value: configuration.model,\n                    onChange: e => {\n                      setConfiguration(state => ({ ...state,\n                        model: e.target.value\n                      }));\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      disabled: true,\n                      selected: true,\n                      value: \"\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 307,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"Regression\",\n                      children: \"Regression\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 308,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"Classification\",\n                      children: \"Classification\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 309,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 303,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 301,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 247,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }, this) : loaded && !exist && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"width-body\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"item-exist\",\n        children: \"Cannot find experiment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(Experiment, \"BN1EGg2N1dGsNz/t1iH0VvB/rb4=\", false, function () {\n  return [useParams, useParams];\n});\n\n_c = Experiment;\nexport default Experiment;\n\nvar _c;\n\n$RefreshReg$(_c, \"Experiment\");","map":{"version":3,"sources":["/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Experiment.jsx"],"names":["React","useState","useEffect","useRef","useParams","itemsAPI","globalAPI","VisibilityOffIcon","VisibilityIcon","ModelNode","ClearIcon","AddIcon","RemoveIcon","Experiment","currentUser","loaded","setLoaded","exist","setExist","model","setModel","configuration","setConfiguration","updated","setUpdated","changed","setChanged","date","setDate","visibility","setVisibility","section","setSection","experiment","setExperiment","selectedNode","setSelectedNode","title","setTitle","modelRef","workspaceID","workspace","experimentID","fetchData","get","data","experiments","err","updatedDate","Date","currentDate","getTime","Math","floor","toString","updateVisibility","put","state","updateExperiment","toISOString","deleteExperiment","self","e","target","value","map","node","i","type","length","splice","setRefreshDiagram","addNode","setAddNode","activation","refreshDiagram","stateCopy","Number","epochs","trainingSplit","validationSplit","testSplit","maxError","batch","optimiser"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\nimport {useParams} from \"react-router-dom\"\nimport itemsAPI from '../API/items'\nimport globalAPI from '../API/global'\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport ModelNode from '../Components/Model-Node';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\n\nconst Experiment = ({currentUser}) => {\n    const [loaded, setLoaded] = useState(false)\n    const [exist, setExist] = useState()\n    const [model, setModel] = useState()\n    const [configuration, setConfiguration] = useState()\n    const [updated, setUpdated] = useState()\n    const [changed, setChanged] = useState(false)\n    const [date, setDate] = useState()\n    const [visibility, setVisibility] = useState()\n    const [section, setSection] = useState(\"model\")\n    const [experiment, setExperiment] = useState()\n    const [selectedNode, setSelectedNode] = useState(0)\n    const [title, setTitle] = useState(\"\")\n    const modelRef = useRef(null)\n    const workspaceID = useParams().workspace;\n    const experimentID = useParams().experiment;\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const experiment = await itemsAPI.get(`/experiment/${experimentID}?workspace=${workspaceID}`);\n\n                setExperiment(experiment.data.data);\n                setUpdated(experiment.data.data.experiments.updated);\n                setTitle(experiment.data.data.experiments.title)\n                setModel(experiment.data.data.experiments.model)\n                setVisibility(experiment.data.data.experiments.visibility)\n                setConfiguration(experiment.data.data.experiments.configuration)\n\n                setExist(true)\n                setLoaded(true)\n            } catch (err) {\n                setExist(false)\n                setLoaded(true)\n            }\n        }\n        fetchData();\n    }, [])    \n\n    useEffect(() => {\n        if (loaded && exist) {\n            const updatedDate = new Date(updated);\n            const currentDate = new Date();\n    \n            if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} years ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} days ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hours ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minutes ago`)\n            } else {\n                setDate(\"Updated just now\")\n            }\n        }\n    }, [loaded, updated])\n\n    const updateVisibility = async () => {\n        try {\n            await globalAPI.put(``);\n\n            setVisibility(state => !state)\n        } catch (err) {}\n    }\n\n    const updateExperiment = async () => {\n        try {\n            setUpdated(new Date().toISOString())\n            setChanged(false)\n        } catch (err) {}\n    }\n\n    const deleteExperiment = async () => {\n        try {\n            \n        } catch (err) {}\n    }\n\n    return (\n        <>\n            {loaded && exist ?\n                <div className=\"width-body\">  \n                    <div className=\"item-body\">\n                        <div className=\"item-top\">\n                            <div className=\"item-heading\">\n                                {experiment.self ? \n                                    <input className=\"item-title-input\"\n                                            placeholder=\"Title\" \n                                            value={title}\n                                            onChange={e => {\n                                                setTitle(e.target.value)\n                                                {!changed && setChanged(true)}\n                                            }} /> \n                                : \n                                    <h1>{experiment.title}</h1>\n                                }\n                            </div>\n                            <div>\n                                <p className=\"item-meta\">{date}</p>\n                                <span />\n                                {experiment.self && \n                                    <>\n                                        {visibility ? \n                                            <VisibilityIcon className=\"item-visibility\" onClick={() => {updateVisibility()}} />\n                                        :\n                                            <VisibilityOffIcon className=\"item-visibility\" onClick={() => {updateVisibility()}} />\n                                        }\n                                    </>\n                                }\n                            </div>\n                            {experiment.self &&\n                                <div className=\"item-middle\">\n                                    <button className=\"dark-grey-button item-delete\"\n                                            onClick={() => {deleteExperiment()}}>Delete</button>\n                                    <button className=\"blue-button\"\n                                            disabled={!changed}\n                                            onClick={() => {updateExperiment()}}>Save Changes</button>\n                                </div>\n                            }\n                            <select className=\"item-select\" onChange={e => {setSection(e.target.value)}}>\n                                <option value=\"model\">Model</option>\n                                <option value=\"results\">Results</option>\n                            </select>\n                        </div>\n                        <div className=\"item-bottom\">\n                            {section === \"model\" ? \n                                <div className=\"create-item-modelling-body\">\n                                    <div className=\"create-item-model\">\n                                        <div className=\"create-item-model-diagram\" key={refreshDiagram}>\n                                            {model.map((node, i) => {\n                                                return (\n                                                    <div key={i}>\n                                                        <div className={\"create-item-model-diagram-node\"}>\n                                                            <div onClick={() => {setSelectedNode(i)}}>\n                                                                <ModelNode setSelectedNode={setSelectedNode} type={node.type} value={node.value} selected={i === selectedNode} last={i === model.length-1} />\n                                                            </div>\n                                                            {node.type !== \"Input\" &&\n                                                                <div onClick={() => {{selectedNode === i ?\n                                                                                        setSelectedNode(state => state-1)\n                                                                                    : selectedNode < i ?\n                                                                                        setSelectedNode(state => state)\n                                                                                    : selectedNode > i &&\n                                                                                        <>\n                                                                                            {selectedNode-i === 1 ?\n                                                                                                setSelectedNode(state => state-1)\n                                                                                            :\n                                                                                                setSelectedNode(i)\n                                                                                            } \n                                                                                        </>  \n                                                                                    }\n                                                                                    model.splice(i, 1)\n                                                                                    setRefreshDiagram(new Date().getTime())}}>\n                                                                    <ClearIcon className=\"create-item-model-diagram-remove\" />\n                                                                </div>\n                                                            }\n                                                        </div>\n                                                        {i === model.length-1 && node.type !== \"Output\" &&\n                                                            <>\n                                                                {addNode ?\n                                                                    <div className=\"create-item-model-diagram-add\">\n                                                                        <div onClick={() => {setAddNode(false)}}>\n                                                                            <RemoveIcon className=\"create-item-model-diagram-add-icon\" />\n                                                                        </div>\n                                                                        <div className=\"create-item-model-diagram-add-options\">\n                                                                            <button onClick={() => {setModel(state => [...state, {\n                                                                                type: \"Dense\",\n                                                                                value: 0,\n                                                                                activation: \"\"\n                                                                            }])\n                                                                            setAddNode(false)\n                                                                            }}>Dense</button>\n                                                                            <button onClick={() => {setModel(state => [...state, {\n                                                                                type: \"Output\",\n                                                                                value: 0,\n                                                                                activation: \"\"\n                                                                            }])\n                                                                            setAddNode(false)\n                                                                            }}>Output</button>\n                                                                        </div>\n                                                                    </div>\n                                                                :\n                                                                    <div onClick={() => {setAddNode(true)}}>\n                                                                        <AddIcon className=\"create-item-model-diagram-add-icon\" />\n                                                                    </div>\n                                                                }\n                                                            </>\n                                                        }\n                                                    </div>\n                                                )\n                                            })}\n                                            <div ref={modelRef} />\n                                        </div>\n                                        <div className=\"create-item-model-selected\">\n                                            <p>{model[selectedNode].type}</p>\n                                            <label>Units</label>\n                                            <input value={model[selectedNode].value} \n                                                    disabled={model[selectedNode].type === \"Input\"}\n                                                    onChange={e => {setModel(state => {\n                                                                        const stateCopy = [...state]\n                                                                    \n                                                                        stateCopy[selectedNode] = {\n                                                                            ...stateCopy[selectedNode],\n                                                                            value: Number(e.target.value)\n                                                                        }\n                                                                    \n                                                                        return stateCopy\n                                                                    })\n                                                                    setRefreshDiagram(new Date().getTime())}} />\n                                            {model[selectedNode].type !== \"Output\" && model[selectedNode].type !== \"Input\" &&\n                                                <>\n                                                    <label>Activation</label>\n                                                    <select value={model[selectedNode].activation} \n                                                            onChange={e => {setModel(state => {\n                                                                                const stateCopy = [...state]\n                                                                            \n                                                                                stateCopy[selectedNode] = {\n                                                                                    ...stateCopy[selectedNode],\n                                                                                    activation: e.target.value\n                                                                                }\n                                                                            \n                                                                                return stateCopy\n                                                                            })\n                                                                            setRefreshDiagram(new Date().getTime())}}>\n                                                            <option disabled selected value=\"\"></option>\n                                                            <option value=\"Relu\">Relu</option>\n                                                            <option value=\"Sigmoid\">Sigmoid</option>\n                                                    </select>\n                                                </>\n                                            }  \n                                        </div>\n                                    </div>\n                                    <div className=\"create-item-configuration\">\n                                        <div className=\"create-item-configuration-option\">\n                                            <div>\n                                                <label>Epochs</label>\n                                                <input value={configuration.epochs} onChange={e => {setConfiguration(state => ({\n                                                                                                        ...state,\n                                                                                                        epochs: e.target.value\n                                                                                                    }))}} />\n                                            </div>\n                                            <div>\n                                                <label>Training Split</label>\n                                                <input value={configuration.trainingSplit} onChange={e => {setConfiguration(state => ({\n                                                                                                        ...state,\n                                                                                                        trainingSplit: e.target.value\n                                                                                                    }))}} />\n                                            </div>\n                                            <div>\n                                                <label>Validation Split</label>\n                                                <input value={configuration.validationSplit} onChange={e => {setConfiguration(state => ({\n                                                                                                        ...state,\n                                                                                                        validationSplit: e.target.value\n                                                                                                    }))}} />\n                                            </div>\n                                            <div>\n                                                <label>Test Split</label>\n                                                <input value={configuration.testSplit} onChange={e => {setConfiguration(state => ({\n                                                                                                        ...state,\n                                                                                                        testSplit: e.target.value\n                                                                                                    }))}} />\n                                            </div>\n                                            <div>\n                                                <label>Maximum Error</label>\n                                                <input value={configuration.maxError} onChange={e => {setConfiguration(state => ({\n                                                                                                        ...state,\n                                                                                                        maxError: e.target.value\n                                                                                                    }))}} />\n                                            </div>\n                                            <div>\n                                                <label>Batch Size</label>\n                                                <input value={configuration.batch} onChange={e => {setConfiguration(state => ({\n                                                                                                        ...state,\n                                                                                                        batch: e.target.value\n                                                                                                    }))}} />\n                                            </div>\n                                            <div>\n                                                <label>Optimiser</label>\n                                                <select value={configuration.optimiser} onChange={e => {setConfiguration(state => ({\n                                                                                                        ...state,\n                                                                                                        optimiser: e.target.value\n                                                                                                    }))}}>\n                                                    <option disabled selected value=\"\"></option>\n                                                    <option value=\"Sigmoid\">Sigmoid</option>\n                                                    <option value=\"Relu\">Relu</option>\n                                                </select>\n                                            </div>\n                                            <div>\n                                                <label>Model Type</label>\n                                                <select value={configuration.model} onChange={e => {setConfiguration(state => ({\n                                                                                                        ...state,\n                                                                                                        model: e.target.value\n                                                                                                    }))}}>\n                                                    <option disabled selected value=\"\"></option>\n                                                    <option value=\"Regression\">Regression</option>\n                                                    <option value=\"Classification\">Classification</option>\n                                                </select>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            :\n                                <div></div>\n                            }\n                        </div>\n                    </div>\n                </div>\n            : loaded && !exist &&\n                <div className=\"width-body\">  \n                    <p className=\"item-exist\">Cannot find experiment</p>\n                </div>\n            }   \n        </>\n    )\n}\n\nexport default Experiment"]},"metadata":{},"sourceType":"module"}