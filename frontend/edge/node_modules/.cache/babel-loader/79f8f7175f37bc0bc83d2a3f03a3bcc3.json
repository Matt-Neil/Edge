{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Create-Experiment.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useHistory, useParams } from \"react-router-dom\";\nimport itemsAPI from '../API/items';\nimport ModelNode from '../Components/Model-Node';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CreateExperiment = _ref => {\n  _s();\n\n  let {\n    currentUser\n  } = _ref;\n  const [stage, setStage] = useState(\"setup\");\n  const [title, setTitle] = useState(\"\");\n  const [visibility, setVisibility] = useState(false);\n  const [model, setModel] = useState([{\n    type: \"Input\",\n    value: \"3\",\n    activation: \"\"\n  }]);\n  const [selectedNode, setSelectedNode] = useState(0);\n  const [configuration, setConfiguration] = useState({\n    epochs: \"\",\n    trainingSplit: \"\",\n    validationSplit: \"\",\n    testSplit: \"\",\n    maxError: \"\",\n    batch: \"\",\n    optimiser: \"Sigmoid\",\n    model: \"Regression\"\n  });\n  const [experiments, setExperiments] = useState([]);\n  const [addNode, setAddNode] = useState(false);\n  const [loaded, setLoaded] = useState(false);\n  const [disableTrain, setDisabledTrain] = useState(true);\n  const [refreshDiagram, setRefreshDiagram] = useState();\n  const modelRef = useRef();\n  const history = useHistory();\n  const workspaceID = useParams().id;\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const experiments = await itemsAPI.get(`/created-experiments/${workspaceID}`);\n        experiments.data.data.experiments.map(experiment => {\n          setExperiments(state => [...state, experiment.title]);\n        });\n        setLoaded(true);\n      } catch (err) {}\n    };\n\n    fetchData();\n  }, []);\n  useEffect(() => {\n    if (modelRef.current) {\n      modelRef.current.scrollIntoView({\n        behavior: 'auto',\n        block: 'end',\n        inline: 'nearest'\n      });\n    }\n  }, [model]);\n\n  const next = () => {\n    if (stage === \"setup\" && title !== \"\" && !experiments.includes(title)) {\n      setStage(\"modelling\");\n    }\n\n    if (stage === \"modelling\" && model.length > 2 && model[model.length - 1].type === \"Output\" && configuration.epochs !== \"\" && configuration.trainingSplit !== \"\" && configuration.validationSplit !== \"\" && configuration.testSplit !== \"\" && configuration.maxError !== \"\" && configuration.batch !== \"\" && configuration.optimiser !== \"\" && configuration.model !== \"\") {\n      setStage(\"training\");\n    }\n\n    if (stage === \"training\" && !disableTrain) {\n      setStage(\"evaluation\");\n    }\n  };\n\n  const cancel = () => {\n    history.replace(`/${workspaceID}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loaded && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"create-sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Create Experiment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"create-item-header\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"create-item-title\",\n            children: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${\"create-sidebar-stage\"} ${stage === \"setup\" ? \"create-sidebar-stage-selected\" : \"create-sidebar-stage-unselected\"}`,\n          disabled: stage === \"setup\",\n          onClick: () => {\n            setStage(\"setup\");\n          },\n          children: \"Setup\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${\"create-sidebar-stage\"} ${stage === \"modelling\" ? \"create-sidebar-stage-selected\" : \"create-sidebar-stage-unselected\"}`,\n          disabled: stage === \"setup\" || stage === \"modelling\",\n          onClick: () => {\n            setStage(\"modelling\");\n          },\n          children: \"Modelling\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${\"create-sidebar-stage\"} ${stage === \"training\" ? \"create-sidebar-stage-selected\" : \"create-sidebar-stage-unselected\"}`,\n          disabled: stage === \"setup\" || stage === \"modelling\" || stage === \"training\",\n          onClick: () => {\n            setStage(\"training\");\n          },\n          children: \"Training\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${\"create-sidebar-stage\"} ${stage === \"evaluation\" ? \"create-sidebar-stage-selected\" : \"create-sidebar-stage-unselected\"}`,\n          disabled: true,\n          children: \"Evaluation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner-body\",\n        children: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: stage === \"setup\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-item-setup-information\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"create-item-nav\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"create-item-filename\",\n                children: \"Experiment Information\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"white-button create-item-cancel\",\n                onClick: () => {\n                  cancel();\n                },\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"blue-button\",\n                onClick: () => {\n                  next();\n                },\n                children: \"Next\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"create-item-title\",\n              placeholder: \"Title\",\n              onChange: e => {\n                setTitle(e.target.value);\n              },\n              value: title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"create-item-setup\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"create-item-setup-label\",\n                children: \"Public?\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                onChange: () => {\n                  setVisibility(previous => !previous);\n                },\n                checked: visibility\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 33\n          }, this) : stage === \"modelling\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-item-modelling\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"create-item-modelling-top\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"white-button create-item-cancel\",\n                onClick: () => {\n                  cancel();\n                },\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"blue-button\",\n                onClick: () => {\n                  next();\n                },\n                children: \"Train\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"create-item-modelling-body\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-item-model\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"create-item-model-diagram\",\n                  children: model.map((node, i) => {\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: addNode && (i === model.length - 1 || model.length === 1) && \"create-item-model-diagram-node-adjust\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"create-item-model-diagram-node\",\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          onClick: () => {\n                            setSelectedNode(i);\n                          },\n                          children: /*#__PURE__*/_jsxDEV(ModelNode, {\n                            setSelectedNode: setSelectedNode,\n                            type: node.type,\n                            value: node.value,\n                            selected: i === selectedNode,\n                            last: i === model.length - 1\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 129,\n                            columnNumber: 69\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 128,\n                          columnNumber: 65\n                        }, this), node.type !== \"Input\" && /*#__PURE__*/_jsxDEV(\"div\", {\n                          onClick: () => {\n                            {\n                              selectedNode === i ? setSelectedNode(state => state - 1) : selectedNode < i ? setSelectedNode(state => state) : selectedNode > i && /*#__PURE__*/_jsxDEV(_Fragment, {\n                                children: selectedNode - i === 1 ? setSelectedNode(state => state - 1) : setSelectedNode(i)\n                              }, void 0, false);\n                            }\n                            model.splice(i, 1);\n                            setRefreshDiagram(new Date().getTime());\n                          },\n                          children: /*#__PURE__*/_jsxDEV(ClearIcon, {\n                            className: \"create-item-model-diagram-remove\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 147,\n                            columnNumber: 73\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 132,\n                          columnNumber: 69\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 127,\n                        columnNumber: 61\n                      }, this), i === model.length - 1 && node.type !== \"Output\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                        children: addNode ? /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"create-item-model-diagram-add\",\n                          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                            onClick: () => {\n                              setAddNode(false);\n                            },\n                            children: /*#__PURE__*/_jsxDEV(RemoveIcon, {\n                              className: \"create-item-model-diagram-add-icon\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 156,\n                              columnNumber: 81\n                            }, this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 155,\n                            columnNumber: 77\n                          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                            className: \"create-item-model-diagram-add-options\",\n                            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                              onClick: () => {\n                                setModel(state => [...state, {\n                                  type: \"Dense\",\n                                  value: \"0\",\n                                  activation: \"\"\n                                }]);\n                                setAddNode(false);\n                              },\n                              children: \"Dense\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 159,\n                              columnNumber: 81\n                            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                              onClick: () => {\n                                setModel(state => [...state, {\n                                  type: \"Output\",\n                                  value: \"0\",\n                                  activation: \"\"\n                                }]);\n                                setAddNode(false);\n                              },\n                              children: \"Output\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 166,\n                              columnNumber: 81\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 158,\n                            columnNumber: 77\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 154,\n                          columnNumber: 73\n                        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                          onClick: () => {\n                            setAddNode(true);\n                          },\n                          children: /*#__PURE__*/_jsxDEV(AddIcon, {\n                            className: \"create-item-model-diagram-add-icon\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 177,\n                            columnNumber: 77\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 176,\n                          columnNumber: 73\n                        }, this)\n                      }, void 0, false)]\n                    }, i, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 126,\n                      columnNumber: 57\n                    }, this);\n                  })\n                }, refreshDiagram, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 123,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"create-item-model-selected\",\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    className: model[selectedNode].type !== \"Input\" ? \"create-item-model-selected-other\" : undefined,\n                    children: model[selectedNode].type\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 187,\n                    columnNumber: 49\n                  }, this), model[selectedNode].type !== \"Input\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Units\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 190,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: model[selectedNode].value,\n                      onChange: e => {\n                        setModel(state => {\n                          const stateCopy = [...state];\n                          stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                            value: e.target.value\n                          };\n                          return stateCopy;\n                        });\n                        setRefreshDiagram(new Date().getTime());\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 191,\n                      columnNumber: 57\n                    }, this), model[selectedNode].type !== \"Output\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                        children: \"Activation\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 205,\n                        columnNumber: 65\n                      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                        value: model[selectedNode].activation,\n                        onChange: e => {\n                          setModel(state => {\n                            const stateCopy = [...state];\n                            stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                              activation: e.target.value\n                            };\n                            return stateCopy;\n                          });\n                          setRefreshDiagram(new Date().getTime());\n                        },\n                        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                          disabled: true,\n                          selected: true,\n                          value: \"\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 218,\n                          columnNumber: 73\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          value: \"Relu\",\n                          children: \"Relu\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 219,\n                          columnNumber: 73\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          value: \"Sigmoid\",\n                          children: \"Sigmoid\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 220,\n                          columnNumber: 73\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 206,\n                        columnNumber: 65\n                      }, this)]\n                    }, void 0, true)]\n                  }, void 0, true)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 186,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-item-configuration\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"create-item-configuration-option\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Epochs\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 231,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: configuration.epochs,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          epochs: e.target.value\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 232,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 230,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Training Split\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 238,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: configuration.trainingSplit,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          trainingSplit: e.target.value\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 239,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 237,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Validation Split\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 245,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: configuration.validationSplit,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          validationSplit: e.target.value\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 246,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 244,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Test Split\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 252,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: configuration.testSplit,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          testSplit: e.target.value\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 253,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 251,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Maximum Error\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 259,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: configuration.maxError,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          maxError: e.target.value\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 260,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 258,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Batch Size\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 266,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: configuration.batch,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          batch: e.target.value\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 267,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 265,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Optimiser\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 273,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      value: configuration.optimiser,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          optimiser: e.target.value\n                        }));\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        disabled: true,\n                        selected: true,\n                        value: \"\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 278,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"Sigmoid\",\n                        children: \"Sigmoid\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 279,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"Relu\",\n                        children: \"Relu\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 280,\n                        columnNumber: 57\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 274,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 272,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Model Type\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 284,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      value: configuration.model,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          model: e.target.value\n                        }));\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        disabled: true,\n                        selected: true,\n                        value: \"\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 289,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"Regression\",\n                        children: \"Regression\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 290,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"Classification\",\n                        children: \"Classification\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 291,\n                        columnNumber: 57\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 285,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 283,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 229,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 33\n          }, this) : stage === \"training\" ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(CreateExperiment, \"bTF5iRgjRyu9dofoT6IJsSO4bzE=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = CreateExperiment;\nexport default CreateExperiment;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateExperiment\");","map":{"version":3,"sources":["/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Create-Experiment.jsx"],"names":["React","useState","useEffect","useRef","useHistory","useParams","itemsAPI","ModelNode","ClearIcon","AddIcon","RemoveIcon","CreateExperiment","currentUser","stage","setStage","title","setTitle","visibility","setVisibility","model","setModel","type","value","activation","selectedNode","setSelectedNode","configuration","setConfiguration","epochs","trainingSplit","validationSplit","testSplit","maxError","batch","optimiser","experiments","setExperiments","addNode","setAddNode","loaded","setLoaded","disableTrain","setDisabledTrain","refreshDiagram","setRefreshDiagram","modelRef","history","workspaceID","id","fetchData","get","data","map","experiment","state","err","current","scrollIntoView","behavior","block","inline","next","includes","length","cancel","replace","e","target","previous","node","i","splice","Date","getTime","undefined","stateCopy"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\nimport {useHistory, useParams} from \"react-router-dom\"\nimport itemsAPI from '../API/items'\nimport ModelNode from '../Components/Model-Node';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\n\nconst CreateExperiment = ({currentUser}) => {\n    const [stage, setStage] = useState(\"setup\");\n    const [title, setTitle] = useState(\"\");\n    const [visibility, setVisibility] = useState(false);\n    const [model, setModel] = useState([{type: \"Input\", value: \"3\", activation: \"\"}])\n    const [selectedNode, setSelectedNode] = useState(0)\n    const [configuration, setConfiguration] = useState({epochs: \"\", trainingSplit: \"\", validationSplit: \"\", testSplit: \"\", \n                                                        maxError: \"\", batch: \"\", optimiser: \"Sigmoid\", model: \"Regression\"})\n    const [experiments, setExperiments] = useState([]);\n    const [addNode, setAddNode] = useState(false)\n    const [loaded, setLoaded] = useState(false);\n    const [disableTrain, setDisabledTrain] = useState(true)\n    const [refreshDiagram, setRefreshDiagram] = useState()\n    const modelRef = useRef()\n    const history = useHistory();\n    const workspaceID = useParams().id;\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const experiments = await itemsAPI.get(`/created-experiments/${workspaceID}`);\n\n                experiments.data.data.experiments.map((experiment) => {\n                    setExperiments(state => [...state, experiment.title]);\n                })\n                setLoaded(true);\n            } catch (err) {}\n        }\n        fetchData();\n    }, [])\n\n    useEffect(() => {\n        if (modelRef.current) {\n            modelRef.current.scrollIntoView(\n            {\n                behavior: 'auto',\n                block: 'end',\n                inline: 'nearest'\n            })\n        }\n    }, [model])\n\n    const next = () => {\n        if (stage === \"setup\" && title !== \"\" && !experiments.includes(title)) {\n            setStage(\"modelling\")\n        }\n        if (stage === \"modelling\" && model.length > 2 && model[model.length-1].type === \"Output\" && configuration.epochs !== \"\" && \n            configuration.trainingSplit !== \"\" && configuration.validationSplit !== \"\" && configuration.testSplit !== \"\" && \n            configuration.maxError !== \"\" && configuration.batch !== \"\" && configuration.optimiser !== \"\" && \n            configuration.model !== \"\") {\n            setStage(\"training\")\n        }\n        if (stage === \"training\" && !disableTrain) {\n            setStage(\"evaluation\")\n        }\n    }\n\n    const cancel = () => {\n        history.replace(`/${workspaceID}`);\n    }\n\n    return (\n        <>\n            {loaded &&\n                <div className=\"sidebar-body\">\n                    <div className=\"create-sidebar\">\n                        <h1>Create Experiment</h1> \n                        <div className=\"create-item-header\">\n                            <p className=\"create-item-title\">{title}</p> \n                        </div>\n                        <button className={`${\"create-sidebar-stage\"} ${stage === \"setup\" ? \"create-sidebar-stage-selected\" : \"create-sidebar-stage-unselected\"}`}\n                                disabled={stage === \"setup\"}\n                                onClick={() => {setStage(\"setup\")}}>Setup</button>\n                        <button className={`${\"create-sidebar-stage\"} ${stage === \"modelling\" ? \"create-sidebar-stage-selected\" : \"create-sidebar-stage-unselected\"}`}\n                                disabled={stage === \"setup\" || stage === \"modelling\"}\n                                onClick={() => {setStage(\"modelling\")}}>Modelling</button>\n                        <button className={`${\"create-sidebar-stage\"} ${stage === \"training\" ? \"create-sidebar-stage-selected\" : \"create-sidebar-stage-unselected\"}`}\n                                disabled={stage === \"setup\" || stage === \"modelling\" || stage === \"training\"}\n                                onClick={() => {setStage(\"training\")}}>Training</button>\n                        <button className={`${\"create-sidebar-stage\"} ${stage === \"evaluation\" ? \"create-sidebar-stage-selected\" : \"create-sidebar-stage-unselected\"}`}\n                                disabled>Evaluation</button>\n                    </div>\n                    <div className=\"inner-body\">\n                        <>\n                            {stage === \"setup\" ?\n                                <div className=\"create-item-setup-information\">\n                                    <div className=\"create-item-nav\">   \n                                        <p className=\"create-item-filename\">Experiment Information</p>\n                                        <button className=\"white-button create-item-cancel\"\n                                                onClick={() => {cancel()}}>Cancel</button>\n                                        <button className=\"blue-button\"\n                                                onClick={() => {next()}}>Next</button>\n                                    </div>\n                                    <input className=\"create-item-title\"\n                                            placeholder=\"Title\"\n                                            onChange={e => {setTitle(e.target.value)}}\n                                            value={title} />\n                                    <div className=\"create-item-setup\">\n                                        <label className=\"create-item-setup-label\">Public?</label>\n                                        <input type=\"checkbox\" \n                                                onChange={() => {setVisibility(previous => !previous)}}\n                                                checked={visibility} />\n                                    </div>\n                                </div>\n                            : (stage === \"modelling\") ?\n                                <div className=\"create-item-modelling\">\n                                    <div className=\"create-item-modelling-top\">   \n                                        <button className=\"white-button create-item-cancel\"\n                                                onClick={() => {cancel()}}>Cancel</button>\n                                        <button className=\"blue-button\"\n                                                onClick={() => {next()}}>Train</button>\n                                    </div>\n                                    <div className=\"create-item-modelling-body\">\n                                        <div className=\"create-item-model\">\n                                            <div className=\"create-item-model-diagram\" key={refreshDiagram}>\n                                                {model.map((node, i) => {\n                                                    return (\n                                                        <div key={i} className={addNode && (i === model.length-1 || model.length === 1) && \"create-item-model-diagram-node-adjust\"}>\n                                                            <div className={\"create-item-model-diagram-node\"}>\n                                                                <div onClick={() => {setSelectedNode(i)}}>\n                                                                    <ModelNode setSelectedNode={setSelectedNode} type={node.type} value={node.value} selected={i === selectedNode} last={i === model.length-1} />\n                                                                </div>\n                                                                {node.type !== \"Input\" &&\n                                                                    <div onClick={() => {{selectedNode === i ?\n                                                                                            setSelectedNode(state => state-1)\n                                                                                        : selectedNode < i ?\n                                                                                            setSelectedNode(state => state)\n                                                                                        : selectedNode > i &&\n                                                                                            <>\n                                                                                                {selectedNode-i === 1 ?\n                                                                                                    setSelectedNode(state => state-1)\n                                                                                                :\n                                                                                                    setSelectedNode(i)\n                                                                                                } \n                                                                                            </>  \n                                                                                        }\n                                                                                        model.splice(i, 1)\n                                                                                        setRefreshDiagram(new Date().getTime())}}>\n                                                                        <ClearIcon className=\"create-item-model-diagram-remove\" />\n                                                                    </div>\n                                                                }\n                                                            </div>\n                                                            {i === model.length-1 && node.type !== \"Output\" &&\n                                                                <>\n                                                                    {addNode ?\n                                                                        <div className=\"create-item-model-diagram-add\">\n                                                                            <div onClick={() => {setAddNode(false)}}>\n                                                                                <RemoveIcon className=\"create-item-model-diagram-add-icon\" />\n                                                                            </div>\n                                                                            <div className=\"create-item-model-diagram-add-options\">\n                                                                                <button onClick={() => {setModel(state => [...state, {\n                                                                                    type: \"Dense\",\n                                                                                    value: \"0\",\n                                                                                    activation: \"\"\n                                                                                }])\n                                                                                setAddNode(false)\n                                                                                }}>Dense</button>\n                                                                                <button onClick={() => {setModel(state => [...state, {\n                                                                                    type: \"Output\",\n                                                                                    value: \"0\",\n                                                                                    activation: \"\"\n                                                                                }])\n                                                                                setAddNode(false)\n                                                                                }}>Output</button>\n                                                                            </div>\n                                                                        </div>\n                                                                    :\n                                                                        <div onClick={() => {setAddNode(true)}}>\n                                                                            <AddIcon className=\"create-item-model-diagram-add-icon\" />\n                                                                        </div>\n                                                                    }\n                                                                </>\n                                                            }\n                                                        </div>\n                                                    )\n                                                })}\n                                            </div>\n                                            <div className=\"create-item-model-selected\">\n                                                <p className={model[selectedNode].type !== \"Input\" ? \"create-item-model-selected-other\" : undefined}>{model[selectedNode].type}</p>\n                                                {model[selectedNode].type !== \"Input\" &&\n                                                    <>\n                                                        <label>Units</label>\n                                                        <input value={model[selectedNode].value} \n                                                                onChange={e => {setModel(state => {\n                                                                                    const stateCopy = [...state]\n                                                                                \n                                                                                    stateCopy[selectedNode] = {\n                                                                                        ...stateCopy[selectedNode],\n                                                                                        value: e.target.value\n                                                                                    }\n                                                                                \n                                                                                    return stateCopy\n                                                                                })\n                                                                                setRefreshDiagram(new Date().getTime())}} />\n                                                        {model[selectedNode].type !== \"Output\" &&\n                                                            <>\n                                                                <label>Activation</label>\n                                                                <select value={model[selectedNode].activation} \n                                                                        onChange={e => {setModel(state => {\n                                                                                            const stateCopy = [...state]\n                                                                                        \n                                                                                            stateCopy[selectedNode] = {\n                                                                                                ...stateCopy[selectedNode],\n                                                                                                activation: e.target.value\n                                                                                            }\n                                                                                        \n                                                                                            return stateCopy\n                                                                                        })\n                                                                                        setRefreshDiagram(new Date().getTime())}}>\n                                                                        <option disabled selected value=\"\"></option>\n                                                                        <option value=\"Relu\">Relu</option>\n                                                                        <option value=\"Sigmoid\">Sigmoid</option>\n                                                                </select>\n                                                            </>\n                                                        }\n                                                    </>\n                                                }   \n                                            </div>\n                                        </div>\n                                        <div className=\"create-item-configuration\">\n                                            <div className=\"create-item-configuration-option\">\n                                                <div>\n                                                    <label>Epochs</label>\n                                                    <input value={configuration.epochs} onChange={e => {setConfiguration(state => ({\n                                                                                                            ...state,\n                                                                                                            epochs: e.target.value\n                                                                                                        }))}} />\n                                                </div>\n                                                <div>\n                                                    <label>Training Split</label>\n                                                    <input value={configuration.trainingSplit} onChange={e => {setConfiguration(state => ({\n                                                                                                            ...state,\n                                                                                                            trainingSplit: e.target.value\n                                                                                                        }))}} />\n                                                </div>\n                                                <div>\n                                                    <label>Validation Split</label>\n                                                    <input value={configuration.validationSplit} onChange={e => {setConfiguration(state => ({\n                                                                                                            ...state,\n                                                                                                            validationSplit: e.target.value\n                                                                                                        }))}} />\n                                                </div>\n                                                <div>\n                                                    <label>Test Split</label>\n                                                    <input value={configuration.testSplit} onChange={e => {setConfiguration(state => ({\n                                                                                                            ...state,\n                                                                                                            testSplit: e.target.value\n                                                                                                        }))}} />\n                                                </div>\n                                                <div>\n                                                    <label>Maximum Error</label>\n                                                    <input value={configuration.maxError} onChange={e => {setConfiguration(state => ({\n                                                                                                            ...state,\n                                                                                                            maxError: e.target.value\n                                                                                                        }))}} />\n                                                </div>\n                                                <div>\n                                                    <label>Batch Size</label>\n                                                    <input value={configuration.batch} onChange={e => {setConfiguration(state => ({\n                                                                                                            ...state,\n                                                                                                            batch: e.target.value\n                                                                                                        }))}} />\n                                                </div>\n                                                <div>\n                                                    <label>Optimiser</label>\n                                                    <select value={configuration.optimiser} onChange={e => {setConfiguration(state => ({\n                                                                                                            ...state,\n                                                                                                            optimiser: e.target.value\n                                                                                                        }))}}>\n                                                        <option disabled selected value=\"\"></option>\n                                                        <option value=\"Sigmoid\">Sigmoid</option>\n                                                        <option value=\"Relu\">Relu</option>\n                                                    </select>\n                                                </div>\n                                                <div>\n                                                    <label>Model Type</label>\n                                                    <select value={configuration.model} onChange={e => {setConfiguration(state => ({\n                                                                                                            ...state,\n                                                                                                            model: e.target.value\n                                                                                                        }))}}>\n                                                        <option disabled selected value=\"\"></option>\n                                                        <option value=\"Regression\">Regression</option>\n                                                        <option value=\"Classification\">Classification</option>\n                                                    </select>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            : (stage === \"training\") ?\n                                <>\n                                </>\n                            :\n                                <>\n                                </>\n                            }\n                        </>\n                    </div>\n                </div>\n            }   \n        </>\n    )\n}\n\nexport default CreateExperiment\n"]},"metadata":{},"sourceType":"module"}