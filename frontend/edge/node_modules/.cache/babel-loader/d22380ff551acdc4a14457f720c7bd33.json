{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Dataset.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useContext } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport datasetsAPI from '../API/datasets';\nimport globalAPI from '../API/global';\nimport imageAPI from '../API/images';\nimport fileAPI from '../API/files';\nimport ViewData from '../Components/View-Data';\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport ItemRowCard from '../Components/Item-Row-Card';\nimport ItemSquareCard from '../Components/Item-Square-Card';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Workspace = _ref => {\n  _s();\n\n  let {\n    currentUser\n  } = _ref;\n  const [loaded, setLoaded] = useState(false);\n  const [exist, setExist] = useState();\n  const [dataset, setDataset] = useState();\n  const [workspaces, setWorkspaces] = useState();\n  const [finishedWorkspaces, setFinishedWorkspaces] = useState(false);\n  const [section, setSection] = useState(\"data\");\n  const [dataTable, setDataTable] = useState();\n  const [updated, setUpdated] = useState();\n  const [start, setStart] = useState(0);\n  const [end, setEnd] = useState(30);\n  const [dataFile, setDataFile] = useState();\n  const [row, setRow] = useState();\n  const [maxRows, setMaxRows] = useState();\n  const [page, setPage] = useState(1);\n  const [rowFormat, setRowFormat] = useState(false);\n  const [changedData, setChangedData] = useState(false);\n  const [changedSettings, setChangedSettings] = useState(false);\n  const [date, setDate] = useState(\"\");\n  const [picture, setPicture] = useState();\n  const [copyData, setCopyData] = useState(true);\n  const [bookmarked, setBookmarked] = useState();\n  const [upvoted, setUpvoted] = useState();\n  const [upvotes, setUpvotes] = useState();\n  const [visibility, setVisibility] = useState();\n  const [comments, setComments] = useState();\n  const [comment, setComment] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [image, setImage] = useState();\n  const [refreshTable, setRefreshTable] = useState();\n  const {\n    addOpenItems\n  } = useContext(OpenItemsContext);\n  const copyInterval = useRef(0);\n  const datasetID = useParams().id;\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const dataset = await datasetsAPI.get(`/${datasetID}`);\n        const comments = await globalAPI.get(`/comment/${datasetID}?type=dataset`);\n        const workspaces = await datasetsAPI.get(`/workspaces?id=${datasetID}&date=${new Date().toISOString()}`);\n\n        if (workspaces.data.data.length < 21) {\n          setFinishedWorkspaces(true);\n        }\n\n        if (dataset.data.data.self) {\n          addOpenItems(dataset.data.data._id, dataset.data.data.title, dataset.data.data.type);\n        }\n\n        setDataset(dataset.data.data);\n        setUpdated(dataset.data.data.updated);\n        setBookmarked(dataset.data.data.bookmarked);\n        setUpvoted(dataset.data.data.upvoted);\n        setUpvotes(dataset.data.data.upvotes);\n        setVisibility(dataset.data.data.visibility);\n        setTitle(dataset.data.data.title);\n        setPicture(dataset.data.data.picture);\n        setDescription(dataset.data.data.description);\n        setWorkspaces(workspaces.data.data);\n        setComments(comments.data.data);\n        fetch(`http://127.0.0.1:5000/files/${dataset.data.data.data}.csv`).then(response => response.text()).then(text => {\n          setDataTable(text);\n          setMaxRows(text.slice(text.indexOf('\\n') + 1).split('\\n').length);\n          setExist(true);\n          setLoaded(true);\n        });\n      } catch (err) {\n        setExist(false);\n        setLoaded(true);\n      }\n    };\n\n    fetchData();\n  }, []);\n  useEffect(() => {\n    if (loaded && exist) {\n      const updatedDate = new Date(updated);\n      const currentDate = new Date();\n\n      if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365).toString()} years ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n        setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24)).toString()} days ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600)).toString()} hours ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60)).toString()} minutes ago`);\n      } else {\n        setDate(\"Updated just now\");\n      }\n    }\n  }, [loaded, updated]);\n\n  const fetchDataWorkspaces = async date => {\n    if (!finishedWorkspaces) {\n      try {\n        const fetchedWorkspaces = await datasetsAPI.get(`/workspaces?date=${date}`);\n        ;\n\n        if (fetchedWorkspaces.data.data.length < 21) {\n          setFinishedWorkspaces(true);\n        }\n\n        setWorkspaces(items => [...items, ...fetchedWorkspaces.data.data]);\n      } catch (err) {}\n    }\n  };\n\n  const loadMore = () => {\n    if (workspaces.length !== 0) {\n      {\n        fetchDataWorkspaces(workspaces[workspaces.length - 1].createdAt);\n      }\n    }\n  };\n\n  const copiedInterval = () => {\n    clearInterval(copyInterval.current);\n    navigator.clipboard.writeText(dataset.data);\n    setCopyData(false);\n    copyInterval.current = setInterval(() => {\n      setCopyData(true);\n    }, 800);\n    return () => {\n      clearInterval(copyInterval.current);\n    };\n  };\n\n  const updateUpvote = async () => {\n    try {\n      await globalAPI.put(`/upvote/${dataset._id}?type=${dataset.type}&state=${upvoted}`);\n\n      if (upvoted) {\n        setUpvotes(state => state - 1);\n      } else {\n        setUpvotes(state => state + 1);\n      }\n\n      setUpvoted(state => !state);\n    } catch (err) {}\n  };\n\n  const updateBookmark = async () => {\n    try {\n      await globalAPI.put(`/bookmark/${dataset._id}?type=${dataset.type}&state=${bookmarked}`);\n      setBookmarked(state => !state);\n    } catch (err) {}\n  };\n\n  const updateVisibility = async () => {\n    try {\n      await globalAPI.put(`/visibility/${dataset._id}?type=${dataset.type}&state=${visibility}`);\n      setVisibility(state => !state);\n    } catch (err) {}\n  };\n\n  const addComment = async e => {\n    e.preventDefault();\n\n    try {\n      await globalAPI.put(`/comment/${datasetID}?type=dataset`, {\n        comment: comment\n      });\n      setComments([{\n        user: {\n          name: currentUser.name\n        },\n        comment: comment\n      }, ...comments]);\n      setComment(\"\");\n    } catch (err) {}\n  };\n\n  const fetchRow = () => {\n    if (!isNaN(row) && row !== \"\") {\n      setStart(row - 1);\n      setEnd(row);\n      setRefreshTable(new Date().getTime());\n    } else {\n      if (start === (page - 1) * 30 && end === page * 30) {\n        setRow(\"\");\n      } else {\n        setStart((page - 1) * 30);\n        setEnd(page * 30);\n        setRefreshTable(new Date().getTime());\n      }\n    }\n  };\n\n  const cancelRow = () => {\n    if (start === (page - 1) * 30 && end === page * 30) {\n      setRow(\"\");\n    } else {\n      setStart((page - 1) * 30);\n      setEnd(page * 30);\n      setRefreshTable(new Date().getTime());\n    }\n  };\n\n  const previousPage = () => {\n    if (page > 1) {\n      setPage(state => state - 1);\n    }\n\n    setStart((page - 1) * 30);\n    setEnd(page * 30);\n    setRefreshTable(new Date().getTime());\n  };\n\n  const nextPage = () => {\n    if (page * 30 < maxRows && maxRows > 30) {\n      setPage(state => state + 1);\n      setStart(page * 30);\n      setEnd((page + 1) * 30);\n      setRefreshTable(new Date().getTime());\n    }\n  };\n\n  const commentDate = date => {\n    const updatedDate = new Date(date);\n    const currentDate = new Date();\n\n    if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n      return `Posted ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365).toString()} years ago`;\n    } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n      return `Posted ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`;\n    } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n      return `Posted ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24)).toString()} days ago`;\n    } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n      return `Posted ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600)).toString()} hours ago`;\n    } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n      return `Posted ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60)).toString()} minutes ago`;\n    } else {\n      return \"Posted just now\";\n    }\n  };\n\n  const updateSettings = async e => {\n    e.preventDefault();\n\n    if (image) {\n      const formImage = new FormData();\n      formImage.append('image', image);\n\n      try {\n        const tempPicture = picture;\n        const imageResponse = await imageAPI.post(\"/upload\", formImage);\n        await datasetsAPI.put(`/${datasetID}`, {\n          title: title,\n          description: description,\n          picture: imageResponse.data.data,\n          data: dataset.data,\n          updated: new Date().toISOString()\n        });\n        setImage(undefined);\n        setPicture(imageResponse.data.data);\n\n        if (tempPicture !== \"default.png\") {\n          await imageAPI.put('/remove', {\n            picture: tempPicture\n          });\n        }\n      } catch (err) {}\n    } else {\n      try {\n        await datasetsAPI.put(`/${datasetID}`, {\n          title: title,\n          description: description,\n          picture: picture,\n          data: dataset.data,\n          updated: new Date().toISOString()\n        });\n      } catch (err) {}\n    }\n\n    setUpdated(new Date().toISOString());\n    setChangedSettings(false);\n  };\n\n  const replaceData = async () => {\n    if (dataFile !== undefined) {\n      const file = dataFile;\n      const reader = new FileReader();\n      const formData = new FormData();\n      const id = new Date().toISOString();\n\n      reader.onload = function (e) {\n        setDataTable(e.target.result);\n        setMaxRows(e.target.result.slice(e.target.result.indexOf('\\n') + 1).split('\\n').length);\n        setRefreshTable(new Date().getTime());\n      };\n\n      reader.readAsText(file);\n      formData.append('data', dataFile);\n      formData.append('id', id);\n\n      try {\n        await fileAPI.post(\"/upload\", formData);\n        console.log(id);\n        await datasetsAPI.put(`/${datasetID}`, {\n          title: title,\n          description: description,\n          picture: picture,\n          data: id,\n          updated: new Date().toISOString()\n        });\n        setUpdated(new Date().toISOString());\n        setDataFile(undefined);\n        setChangedData(false);\n      } catch (err) {}\n    }\n  };\n\n  const deleteWorkspace = async () => {};\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loaded && exist ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"width-body\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dataset-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dataset-top\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"dataset-picture\",\n            src: `http://localhost:4000/images/${picture}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 29\n          }, this), dataset.self && /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"dataset-image-input\",\n            type: \"file\",\n            name: \"image\",\n            onChange: e => {\n              setImage(e.target.files[0]);\n              {\n                !changedSettings && setChangedSettings(true);\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dataset-heading\",\n            children: dataset.self ? /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"dataset-title-input\",\n              placeholder: \"Title\",\n              value: title,\n              onChange: e => {\n                setTitle(e.target.value);\n                {\n                  !changedSettings && setChangedSettings(true);\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 37\n            }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: \"http://localhost:3000/dataset.png\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 368,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n                children: dataset.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 369,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [!dataset.self && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"dataset-meta\",\n              children: dataset.creatorName.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 374,\n              columnNumber: 51\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"dataset-meta\",\n              children: date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 375,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 33\n            }, this), !dataset.self && /*#__PURE__*/_jsxDEV(BookmarkIcon, {\n              className: `dataset-icon ${bookmarked ? \"blue\" : \"grey\"}`,\n              onClick: () => {\n                updateBookmark();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 377,\n              columnNumber: 51\n            }, this), dataset.self && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: visibility ? /*#__PURE__*/_jsxDEV(VisibilityIcon, {\n                className: \"dataset-visibility\",\n                onClick: () => {\n                  updateVisibility();\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 45\n              }, this) : /*#__PURE__*/_jsxDEV(VisibilityOffIcon, {\n                className: \"dataset-visibility\",\n                onClick: () => {\n                  updateVisibility();\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 383,\n                columnNumber: 45\n              }, this)\n            }, void 0, false), /*#__PURE__*/_jsxDEV(ThumbUpIcon, {\n              className: `dataset-icon ${upvoted ? \"blue\" : \"grey\"}`,\n              onClick: () => {\n                updateUpvote();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: `dataset-upvotes ${upvoted ? \"blue\" : \"grey\"}`,\n              children: upvotes\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 29\n          }, this), dataset.self ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n              className: \"dataset-description-input\",\n              placeholder: \"Description\",\n              value: description,\n              onChange: e => {\n                setDescription(e.target.value);\n                {\n                  !changedSettings && setChangedSettings(true);\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"blue-button dataset-save\",\n              disabled: !changedSettings,\n              onClick: e => {\n                updateSettings(e);\n              },\n              children: \"Save Changes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 399,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"dataset-description\",\n            children: dataset.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"dataset-select\",\n            onChange: e => {\n              setSection(e.target.value);\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"data\",\n              children: \"Data\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 407,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"workspace\",\n              children: \"Workspaces\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"comment\",\n              children: \"Comments\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dataset-bottom\",\n          children: section === \"data\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dataset-options\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                name: \"data\",\n                onChange: e => {\n                  setDataFile(e.target.files[0]);\n                  setChangedData(true);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 416,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"white-button dataset-replace-button\",\n                onClick: () => {\n                  setDataFile(undefined);\n                  setChangedData(false);\n                },\n                disabled: !changedData,\n                children: \"Clear\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 422,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"blue-button dataset-replace-button\",\n                disabled: !changedData,\n                onClick: () => {\n                  replaceData();\n                },\n                children: \"Save\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 428,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"dataset-copy\",\n                children: [copyData ? /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Data ID\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 432,\n                  columnNumber: 57\n                }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Copied\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 432,\n                  columnNumber: 74\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  disabled: !copyData,\n                  onClick: () => {\n                    copiedInterval();\n                  },\n                  children: /*#__PURE__*/_jsxDEV(ContentCopyIcon, {\n                    className: \"dataset-copy-icon\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 434,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 433,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 431,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n                href: `http://127.0.0.1:5000/files/${dataset.data}.csv`,\n                download: true,\n                children: \"Download\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 437,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 415,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dataset-data-table-pagination\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                placeholder: \"Row number\",\n                value: row,\n                onChange: e => {\n                  setRow(e.target.value);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 440,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  fetchRow();\n                },\n                className: \"blue-button dataset-data-fetch\",\n                children: \"Fetch\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 441,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  cancelRow();\n                },\n                className: \"grey-button dataset-data-cancel-fetch\",\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 442,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 443,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(ArrowBackIosNewIcon, {\n                className: \"dataset-data-table-pagination-icon\",\n                onClick: () => {\n                  previousPage();\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 444,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Page \", page, \" / \", Math.ceil(maxRows / 30)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 445,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(ArrowForwardIosIcon, {\n                className: \"dataset-data-table-pagination-icon\",\n                onClick: () => {\n                  nextPage();\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 446,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 439,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dataset-data-table\",\n              children: /*#__PURE__*/_jsxDEV(ViewData, {\n                dataTable: dataTable,\n                start: start,\n                end: end\n              }, refreshTable, false, {\n                fileName: _jsxFileName,\n                lineNumber: 449,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true) : section === \"workspace\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dataset-workspaces\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: `${workspaces.length} Workspaces use this dataset`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 455,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: \"http://localhost:3000/List.png\",\n                className: \"dataset-workspaces-row-icon\",\n                onClick: () => {\n                  setRowFormat(true);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 456,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: \"http://localhost:3000/Grid.png\",\n                className: \"dataset-workspaces-grid-icon\",\n                onClick: () => {\n                  setRowFormat(false);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 457,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 454,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dataset-workspaces-list\",\n              children: workspaces.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: workspaces.map((workspace, i) => {\n                  return rowFormat ? /*#__PURE__*/_jsxDEV(ItemRowCard, {\n                    item: workspace,\n                    creator: workspace.creatorName.name,\n                    currentUserID: currentUser.id,\n                    created: workspace.creator === currentUser.id\n                  }, i, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 463,\n                    columnNumber: 72\n                  }, this) : /*#__PURE__*/_jsxDEV(ItemSquareCard, {\n                    item: workspace,\n                    creator: workspace.creatorName.name,\n                    currentUserID: currentUser.id,\n                    created: workspace.creator === currentUser.id\n                  }, i, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 463,\n                    columnNumber: 230\n                  }, this);\n                })\n              }, void 0, false)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 459,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dataset-workspaces-end\",\n              children: workspaces.length >= 0 && finishedWorkspaces ? /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"end-items\",\n                children: \"No more workspaces\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 470,\n                columnNumber: 45\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"load-items\",\n                onClick: () => {\n                  loadMore();\n                },\n                children: \"Load more\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 472,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"form\", {\n              className: \"dataset-comment-form\",\n              method: \"PUT\",\n              onSubmit: addComment,\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"dataset-comment\",\n                children: \"Leave a Comment\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 479,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                className: \"dataset-comment-input\",\n                placeholder: \"Write here\",\n                value: comment,\n                onChange: e => {\n                  setComment(e.target.value);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 480,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"blue-button\",\n                children: \"Comment\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 481,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 478,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dataset-comments\",\n              children: comments.map((comment, i) => {\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"comment-card\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"comment-card-user\",\n                      children: comment.user.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 488,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"comment-card-date\",\n                      children: commentDate(comment.createdAt)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 489,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 487,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"comment-card-comment\",\n                    children: comment.comment\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 491,\n                    columnNumber: 53\n                  }, this)]\n                }, i, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 486,\n                  columnNumber: 49\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 483,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 17\n    }, this) : loaded && !exist && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"width-body\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"item-exist\",\n        children: \"Cannot find dataset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(Workspace, \"xShFw6NPbzA3xem8qlgujLppx1E=\", false, function () {\n  return [useParams];\n});\n\n_c = Workspace;\nexport default Workspace;\n\nvar _c;\n\n$RefreshReg$(_c, \"Workspace\");","map":{"version":3,"sources":["/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Dataset.jsx"],"names":["React","useState","useEffect","useRef","useContext","useParams","datasetsAPI","globalAPI","imageAPI","fileAPI","ViewData","OpenItemsContext","ItemRowCard","ItemSquareCard","BookmarkIcon","ThumbUpIcon","ContentCopyIcon","ArrowForwardIosIcon","ArrowBackIosNewIcon","VisibilityOffIcon","VisibilityIcon","Workspace","currentUser","loaded","setLoaded","exist","setExist","dataset","setDataset","workspaces","setWorkspaces","finishedWorkspaces","setFinishedWorkspaces","section","setSection","dataTable","setDataTable","updated","setUpdated","start","setStart","end","setEnd","dataFile","setDataFile","row","setRow","maxRows","setMaxRows","page","setPage","rowFormat","setRowFormat","changedData","setChangedData","changedSettings","setChangedSettings","date","setDate","picture","setPicture","copyData","setCopyData","bookmarked","setBookmarked","upvoted","setUpvoted","upvotes","setUpvotes","visibility","setVisibility","comments","setComments","comment","setComment","title","setTitle","description","setDescription","image","setImage","refreshTable","setRefreshTable","addOpenItems","copyInterval","datasetID","id","fetchData","get","Date","toISOString","data","length","self","_id","type","fetch","then","response","text","slice","indexOf","split","err","updatedDate","currentDate","getTime","Math","floor","toString","fetchDataWorkspaces","fetchedWorkspaces","items","loadMore","createdAt","copiedInterval","clearInterval","current","navigator","clipboard","writeText","setInterval","updateUpvote","put","state","updateBookmark","updateVisibility","addComment","e","preventDefault","user","name","fetchRow","isNaN","cancelRow","previousPage","nextPage","commentDate","updateSettings","formImage","FormData","append","tempPicture","imageResponse","post","undefined","replaceData","file","reader","FileReader","formData","onload","target","result","readAsText","console","log","deleteWorkspace","files","value","creatorName","ceil","map","workspace","i","creator"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef, useContext} from 'react'\nimport {useParams} from \"react-router-dom\"\nimport datasetsAPI from '../API/datasets'\nimport globalAPI from '../API/global'\nimport imageAPI from '../API/images'\nimport fileAPI from '../API/files'\nimport ViewData from '../Components/View-Data';\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport ItemRowCard from '../Components/Item-Row-Card'\nimport ItemSquareCard from '../Components/Item-Square-Card'\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\n\nconst Workspace = ({currentUser}) => {\n    const [loaded, setLoaded] = useState(false)\n    const [exist, setExist] = useState()\n    const [dataset, setDataset] = useState()\n    const [workspaces, setWorkspaces] = useState()\n    const [finishedWorkspaces, setFinishedWorkspaces] = useState(false)\n    const [section, setSection] = useState(\"data\")\n    const [dataTable, setDataTable] = useState()\n    const [updated, setUpdated] = useState()\n    const [start, setStart] = useState(0)\n    const [end, setEnd] = useState(30)\n    const [dataFile, setDataFile] = useState()\n    const [row, setRow] = useState()\n    const [maxRows, setMaxRows] = useState()\n    const [page, setPage] = useState(1)\n    const [rowFormat, setRowFormat] = useState(false)\n    const [changedData, setChangedData] = useState(false)\n    const [changedSettings, setChangedSettings] = useState(false)\n    const [date, setDate] = useState(\"\");\n    const [picture, setPicture] = useState()\n    const [copyData, setCopyData] = useState(true)\n    const [bookmarked, setBookmarked] = useState()\n    const [upvoted, setUpvoted] = useState()\n    const [upvotes, setUpvotes] = useState()\n    const [visibility, setVisibility] = useState()\n    const [comments, setComments] = useState()\n    const [comment, setComment] = useState(\"\")\n    const [title, setTitle] = useState(\"\")\n    const [description, setDescription] = useState(\"\")\n    const [image, setImage] = useState();\n    const [refreshTable, setRefreshTable] = useState()\n    const {addOpenItems} = useContext(OpenItemsContext);\n    const copyInterval = useRef(0)\n    const datasetID = useParams().id;\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const dataset = await datasetsAPI.get(`/${datasetID}`);\n                const comments = await globalAPI.get(`/comment/${datasetID}?type=dataset`);\n                const workspaces = await datasetsAPI.get(`/workspaces?id=${datasetID}&date=${new Date().toISOString()}`);\n\n                if (workspaces.data.data.length < 21) {\n                    setFinishedWorkspaces(true)\n                }\n\n                if (dataset.data.data.self) {\n                    addOpenItems(dataset.data.data._id, dataset.data.data.title, dataset.data.data.type)\n                }\n\n                setDataset(dataset.data.data);\n                setUpdated(dataset.data.data.updated);\n                setBookmarked(dataset.data.data.bookmarked)\n                setUpvoted(dataset.data.data.upvoted)\n                setUpvotes(dataset.data.data.upvotes)\n                setVisibility(dataset.data.data.visibility)\n                setTitle(dataset.data.data.title)\n                setPicture(dataset.data.data.picture)\n                setDescription(dataset.data.data.description)\n                setWorkspaces(workspaces.data.data)\n                setComments(comments.data.data)\n\n                fetch(`http://127.0.0.1:5000/files/${dataset.data.data.data}.csv`)\n                    .then(response => response.text())\n                    .then(text => {\n                        setDataTable(text)\n                        setMaxRows(text.slice(text.indexOf('\\n')+1).split('\\n').length)\n                        setExist(true)\n                        setLoaded(true)\n                    })\n            } catch (err) {\n                setExist(false)\n                setLoaded(true)\n            }\n        }\n        fetchData();\n    }, [])\n\n    useEffect(() => {\n        if (loaded && exist) {\n            const updatedDate = new Date(updated);\n            const currentDate = new Date();\n    \n            if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} years ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} days ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hours ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minutes ago`)\n            } else {\n                setDate(\"Updated just now\")\n            }\n        }\n    }, [loaded, updated])\n\n    const fetchDataWorkspaces = async (date) => {\n        if (!finishedWorkspaces) {\n            try {\n                const fetchedWorkspaces = await datasetsAPI.get(`/workspaces?date=${date}`);;\n    \n                if (fetchedWorkspaces.data.data.length < 21) {\n                    setFinishedWorkspaces(true)\n                }\n\n                setWorkspaces(items => [...items, ...fetchedWorkspaces.data.data]);\n            } catch (err) {}\n        }\n    }\n\n    const loadMore = () => {\n        if (workspaces.length !== 0) {\n            {fetchDataWorkspaces(workspaces[workspaces.length-1].createdAt)}\n        }\n    };\n\n    const copiedInterval = () => {\n        clearInterval(copyInterval.current)\n        navigator.clipboard.writeText(dataset.data);\n        setCopyData(false);\n        copyInterval.current = setInterval(() => {\n            setCopyData(true);\n        }, 800)\n        return ()=> {clearInterval(copyInterval.current)};\n    }\n\n    const updateUpvote = async () => {\n        try {\n            await globalAPI.put(`/upvote/${dataset._id}?type=${dataset.type}&state=${upvoted}`);\n\n            if (upvoted) {\n                setUpvotes(state => state-1)\n            } else {\n                setUpvotes(state => state+1)\n            }\n\n            setUpvoted(state => !state)\n        } catch (err) {}\n    }\n\n    const updateBookmark = async () => {\n        try {\n            await globalAPI.put(`/bookmark/${dataset._id}?type=${dataset.type}&state=${bookmarked}`);\n            \n            setBookmarked(state => !state)\n        } catch (err) {}\n    }\n\n    const updateVisibility = async () => {\n        try {\n            await globalAPI.put(`/visibility/${dataset._id}?type=${dataset.type}&state=${visibility}`);\n\n            setVisibility(state => !state)\n        } catch (err) {}\n    }\n\n    const addComment = async (e) => {\n        e.preventDefault()\n\n        try {\n            await globalAPI.put(`/comment/${datasetID}?type=dataset`, {\n                comment: comment\n            });\n\n            setComments([{\n                user: {name: currentUser.name},\n                comment: comment\n            }, ...comments])\n            setComment(\"\")\n        } catch (err) {}\n    }\n\n    const fetchRow = () => {\n        if (!isNaN(row) && row !== \"\") {\n            setStart(row-1)\n            setEnd(row)\n            setRefreshTable(new Date().getTime())\n        } else {\n            if (start === (page-1)*30 && end === page*30) {\n                setRow(\"\")\n            } else {\n                setStart((page-1)*30)\n                setEnd(page*30)\n                setRefreshTable(new Date().getTime())\n            }\n        }\n    }\n\n    const cancelRow = () => {\n        if (start === (page-1)*30 && end === page*30) {\n            setRow(\"\")\n        } else {\n            setStart((page-1)*30)\n            setEnd(page*30)\n            setRefreshTable(new Date().getTime())\n        }\n    }\n\n    const previousPage = () => {\n        if (page > 1) {\n            setPage(state => state-1)\n        }\n        setStart((page-1)*30)\n        setEnd(page*30)\n        setRefreshTable(new Date().getTime())\n    }\n\n    const nextPage = () => {\n        if (page*30 < maxRows && maxRows > 30) {\n            setPage(state => state+1)\n            setStart((page)*30)\n            setEnd((page+1)*30)\n            setRefreshTable(new Date().getTime())\n        }\n    }\n\n    const commentDate = (date) => {\n        const updatedDate = new Date(date);\n        const currentDate = new Date();\n\n        if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n            return `Posted ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} years ago`\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n            return `Posted ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n            return `Posted ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} days ago`\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n            return `Posted ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hours ago`\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n            return `Posted ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minutes ago`\n        } else {\n            return \"Posted just now\"\n        }\n    }\n\n    const updateSettings = async (e) => {\n        e.preventDefault()\n\n        if (image) {\n            const formImage = new FormData();\n            formImage.append('image', image);\n            \n            try {\n                const tempPicture = picture\n                const imageResponse = await imageAPI.post(\"/upload\", formImage);\n\n                await datasetsAPI.put(`/${datasetID}`, {\n                    title: title,\n                    description: description,\n                    picture: imageResponse.data.data,\n                    data: dataset.data,\n                    updated: new Date().toISOString()\n                })\n\n                setImage(undefined)\n                setPicture(imageResponse.data.data)\n\n                if (tempPicture !== \"default.png\") {\n                    await imageAPI.put('/remove', {picture: tempPicture});\n                }\n            } catch (err) {}\n        } else {\n            try {\n                await datasetsAPI.put(`/${datasetID}`, {\n                    title: title,\n                    description: description,\n                    picture: picture,\n                    data: dataset.data,\n                    updated: new Date().toISOString()\n                })\n            } catch (err) {}\n        }\n\n        setUpdated(new Date().toISOString())\n        setChangedSettings(false)\n    }\n\n    \n    const replaceData = async () => {\n        if (dataFile !== undefined) {\n            const file = dataFile;\n            const reader = new FileReader();\n            const formData = new FormData();\n            const id = new Date().toISOString();\n\n            reader.onload = function(e) {\n                setDataTable(e.target.result);\n                setMaxRows(e.target.result.slice(e.target.result.indexOf('\\n')+1).split('\\n').length)\n                setRefreshTable(new Date().getTime())\n            }\n\n            reader.readAsText(file)\n            \n            formData.append('data', dataFile);\n            formData.append('id', id)\n\n            try {\n                await fileAPI.post(\"/upload\", formData);\n\n                console.log(id)\n                await datasetsAPI.put(`/${datasetID}`, {\n                    title: title,\n                    description: description,\n                    picture: picture,\n                    data: id,\n                    updated: new Date().toISOString()\n                })\n\n                setUpdated(new Date().toISOString())\n                setDataFile(undefined)\n                setChangedData(false)\n            } catch (err) {}\n        }\n    }\n\n    const deleteWorkspace = async () => {\n\n    }\n\n    return (\n        <>\n            {loaded && exist ?\n                <div className=\"width-body\">  \n                    <div className=\"dataset-body\">\n                        <div className=\"dataset-top\">\n                            <img className=\"dataset-picture\" src={`http://localhost:4000/images/${picture}`} />\n                            {dataset.self && \n                                <input className=\"dataset-image-input\"\n                                        type=\"file\" \n                                        name=\"image\" \n                                        onChange={e => {\n                                            setImage(e.target.files[0])\n                                            {!changedSettings && setChangedSettings(true)}\n                                        }} />\n                            }\n                            <div className=\"dataset-heading\">\n                                {dataset.self ? \n                                    <input className=\"dataset-title-input\"\n                                            placeholder=\"Title\" \n                                            value={title}\n                                            onChange={e => {\n                                                setTitle(e.target.value)\n                                                {!changedSettings && setChangedSettings(true)}\n                                            }} /> \n                                : \n                                    <>\n                                        <img src=\"http://localhost:3000/dataset.png\" />\n                                        <h1>{dataset.title}</h1>\n                                    </>\n                                }\n                            </div>\n                            <div>\n                                {!dataset.self && <p className=\"dataset-meta\">{dataset.creatorName.name}</p>}\n                                <p className=\"dataset-meta\">{date}</p>\n                                <span />\n                                {!dataset.self && <BookmarkIcon className={`dataset-icon ${bookmarked ? \"blue\" : \"grey\"}`} onClick={() => {updateBookmark()}} />}\n                                {dataset.self && \n                                    <>\n                                        {visibility ? \n                                            <VisibilityIcon className=\"dataset-visibility\" onClick={() => {updateVisibility()}} />\n                                        :\n                                            <VisibilityOffIcon className=\"dataset-visibility\" onClick={() => {updateVisibility()}} />\n                                        }\n                                    </>\n                                }\n                                <ThumbUpIcon className={`dataset-icon ${upvoted ? \"blue\" : \"grey\"}`} onClick={() => {updateUpvote()}} />\n                                <p className={`dataset-upvotes ${upvoted ? \"blue\" : \"grey\"}`}>{upvotes}</p>\n                            </div>\n                            {dataset.self ? \n                                <>\n                                    <textarea className=\"dataset-description-input\"\n                                                placeholder=\"Description\" \n                                                value={description}\n                                                onChange={e => {\n                                                    setDescription(e.target.value)\n                                                    {!changedSettings && setChangedSettings(true)}\n                                                }} /> \n                                    <button className=\"blue-button dataset-save\"\n                                            disabled={!changedSettings}\n                                            onClick={e => {updateSettings(e)}}>Save Changes</button>\n                                </>\n                            : \n                                <p className=\"dataset-description\">{dataset.description}</p>\n                            }\n                            <select className=\"dataset-select\" onChange={e => {setSection(e.target.value)}}>\n                                <option value=\"data\">Data</option>\n                                <option value=\"workspace\">Workspaces</option>\n                                <option value=\"comment\">Comments</option>\n                            </select>\n                        </div>\n                        <div className=\"dataset-bottom\">\n                            {section === \"data\" ? \n                                <> \n                                    <div className=\"dataset-options\">\n                                        <input type=\"file\" \n                                                name=\"data\"\n                                                onChange={e => {\n                                                    setDataFile(e.target.files[0])\n                                                    setChangedData(true)\n                                                }} />\n                                        <button className=\"white-button dataset-replace-button\"\n                                                onClick={() => {\n                                                    setDataFile(undefined)\n                                                    setChangedData(false)\n                                                }}\n                                                disabled={!changedData}>Clear</button>\n                                        <button className=\"blue-button dataset-replace-button\"\n                                                disabled={!changedData}\n                                                onClick={() => {replaceData()}}>Save</button>\n                                        <div className=\"dataset-copy\">\n                                            {copyData ? <p>Data ID</p> : <p>Copied</p>}\n                                            <button disabled={!copyData} onClick={() => {copiedInterval()}}>\n                                                <ContentCopyIcon className=\"dataset-copy-icon\" />\n                                            </button>\n                                        </div>\n                                        <a href={`http://127.0.0.1:5000/files/${dataset.data}.csv`} download>Download</a>\n                                    </div>\n                                    <div className=\"dataset-data-table-pagination\">\n                                        <input placeholder=\"Row number\" value={row} onChange={e => {setRow(e.target.value)}} />\n                                        <button onClick={() => {fetchRow()}} className=\"blue-button dataset-data-fetch\">Fetch</button>\n                                        <button onClick={() => {cancelRow()}} className=\"grey-button dataset-data-cancel-fetch\">Cancel</button>\n                                        <span />\n                                        <ArrowBackIosNewIcon className=\"dataset-data-table-pagination-icon\" onClick={() => {previousPage()}} />\n                                        <p>Page {page} / {Math.ceil(maxRows/30)}</p>\n                                        <ArrowForwardIosIcon className=\"dataset-data-table-pagination-icon\" onClick={() => {nextPage()}} />\n                                    </div>\n                                    <div className=\"dataset-data-table\">\n                                        <ViewData dataTable={dataTable} start={start} end={end} key={refreshTable} />\n                                    </div>\n                                </>\n                            : section === \"workspace\" ?\n                                <>\n                                    <div className=\"dataset-workspaces\">\n                                        <p>{`${workspaces.length} Workspaces use this dataset`}</p>\n                                        <img src=\"http://localhost:3000/List.png\" className=\"dataset-workspaces-row-icon\" onClick={() => {setRowFormat(true)}} />\n                                        <img src=\"http://localhost:3000/Grid.png\" className=\"dataset-workspaces-grid-icon\" onClick={() => {setRowFormat(false)}} />\n                                    </div>\n                                    <div className=\"dataset-workspaces-list\">\n                                        {workspaces.length > 0 &&\n                                            <>\n                                                {workspaces.map((workspace, i) => {\n                                                    return rowFormat ? <ItemRowCard item={workspace} creator={workspace.creatorName.name} currentUserID={currentUser.id} created={workspace.creator === currentUser.id} key={i} /> : <ItemSquareCard item={workspace} creator={workspace.creatorName.name} currentUserID={currentUser.id} created={workspace.creator === currentUser.id} key={i} />\n                                                })}\n                                            </>\n                                        }\n                                    </div>\n                                    <div className=\"dataset-workspaces-end\">\n                                        {workspaces.length >= 0 && finishedWorkspaces ?\n                                            <p className=\"end-items\">No more workspaces</p>\n                                            :\n                                            <p className=\"load-items\" onClick={() => {loadMore()}}>Load more</p>\n                                        }\n                                    </div>\n                                </>\n                            :\n                                <>\n                                    <form className=\"dataset-comment-form\" method=\"PUT\" onSubmit={addComment}>\n                                        <p className=\"dataset-comment\">Leave a Comment</p>\n                                        <textarea className=\"dataset-comment-input\" placeholder=\"Write here\" value={comment} onChange={e => {setComment(e.target.value)}} />\n                                        <button className=\"blue-button\">Comment</button>\n                                    </form>\n                                    <div className=\"dataset-comments\">\n                                        {comments.map((comment, i) => {\n                                            return (\n                                                <div className=\"comment-card\" key={i}>\n                                                    <div>\n                                                        <p className=\"comment-card-user\">{comment.user.name}</p>\n                                                        <p className=\"comment-card-date\">{commentDate(comment.createdAt)}</p>\n                                                    </div>\n                                                    <p className=\"comment-card-comment\">{comment.comment}</p>\n                                                </div>\n                                            )\n                                        })}\n                                    </div>\n                                </>\n                            }\n                        </div>\n                    </div>\n                </div>\n            :   loaded && !exist &&\n                <div className=\"width-body\">  \n                    <p className=\"item-exist\">Cannot find dataset</p>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default Workspace\n"]},"metadata":{},"sourceType":"module"}