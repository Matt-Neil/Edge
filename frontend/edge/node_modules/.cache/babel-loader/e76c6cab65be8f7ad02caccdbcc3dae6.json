{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Dataset.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useContext } from 'react';\nimport { useHistory, useParams, Link } from \"react-router-dom\";\nimport usersAPI from '../API/users';\nimport itemsAPI from '../API/items';\nimport globalAPI from '../API/global';\nimport imageAPI from '../API/images';\nimport trainAPI from '../API/train';\nimport ModelNode from '../Components/Model-Node';\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Dataset = _ref => {\n  _s();\n\n  let {\n    currentUser,\n    type\n  } = _ref;\n  const [stage, setStage] = useState(\"model\");\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [visibility, setVisibility] = useState(false);\n  const [bookmarked, setBookmarked] = useState();\n  const [upvoted, setUpvoted] = useState();\n  const [upvotes, setUpvotes] = useState();\n  const [updated, setUpdated] = useState();\n  const [picture, setPicture] = useState();\n  const [date, setDate] = useState(\"\");\n  const [start, setStart] = useState(0);\n  const [end, setEnd] = useState(30);\n  const [page, setPage] = useState(1);\n  const [image, setImage] = useState();\n  const [dataset, setDataset] = useState([]);\n  const [uploadedImages, setUploadedImages] = useState([]);\n  const [assignedLabels, setAssignedLabels] = useState([]);\n  const [refreshData, setRefreshData] = useState();\n  const [loaded, setLoaded] = useState(false);\n  const [exist, setExist] = useState();\n  const [noData, setNoData] = useState();\n  const [addLabel, setAddLabel] = useState(\"\");\n  const [disableCreate, setDisabledCreate] = useState(false);\n  const {\n    addOpenItems,\n    removeOpenItems\n  } = useContext(OpenItemsContext);\n  const modelRef = useRef(null);\n  const datasetID = useParams().id;\n  const publicInterval = useRef(0);\n  const existInterval = useRef(0);\n  const history = useHistory();\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (type === \"create\") {\n          const dataset = await usersAPI.get(\"/created?type=dataset\");\n          dataset.data.data.map(dataset => {\n            setDataset(previous => [...previous, dataset.title]);\n          });\n          setLoaded(true);\n        } else {\n          const dataset = await itemsAPI.get(`/${datasetID}?type=dataset`);\n\n          if (dataset.data.data.creator === currentUser.id) {\n            addOpenItems(dataset.data.data._id, dataset.data.data.title, dataset.data.data.type);\n          }\n\n          setDataset(dataset.data.data);\n          setUpdated(dataset.data.data.updated);\n          setBookmarked(dataset.data.data.bookmarked);\n          setUpvoted(dataset.data.data.upvoted);\n          setPicture(dataset.data.data.picture);\n          setUpvotes(dataset.data.data.upvotes);\n          setVisibility(dataset.data.data.visibility);\n          setTitle(dataset.data.data.title);\n          setDescription(dataset.data.data.description);\n          setLabels(dataset.data.data.labels);\n          setImageFile(dataset.data.data.imageFile);\n          fetch(`http://127.0.0.1:5000/files/${dataset.data.data.imageFile}/labels.json`).then(response => response.json()).then(images => {\n            images.map(image => {\n              setImages(state => [...state, image.filename]);\n              setAssignedLabels(state => [...state, image.label]);\n            });\n            setExist(true);\n            setLoaded(true);\n          }).catch(() => {\n            setExist(true);\n            setLoaded(true);\n          });\n        }\n      } catch (err) {\n        setExist(false);\n        setLoaded(true);\n      }\n    };\n\n    fetchData();\n  }, []);\n  useEffect(() => {\n    if (loaded && exist) {\n      const updatedDate = new Date(updated);\n      const currentDate = new Date();\n\n      if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365).toString()} years ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n        setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24)).toString()} days ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600)).toString()} hours ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60)).toString()} minutes ago`);\n      } else {\n        setDate(\"Updated just now\");\n      }\n    }\n  }, [loaded, updated]);\n\n  const addFunctionKey = e => {\n    if (e.key === \"Enter\" && addLabel !== \"\") {\n      setLabels(state => [...state, addLabel]);\n    }\n  };\n\n  const updateUpvote = async () => {\n    try {\n      await globalAPI.put(`/upvote/${datasetID}?state=${upvoted}`);\n\n      if (upvoted) {\n        setUpvotes(state => state - 1);\n      } else {\n        setUpvotes(state => state + 1);\n      }\n\n      setUpvoted(state => !state);\n    } catch (err) {}\n  };\n\n  const updateBookmark = async () => {\n    try {\n      await globalAPI.put(`/bookmark/${datasetID}?state=${bookmarked}`);\n      setBookmarked(state => !state);\n    } catch (err) {}\n  };\n\n  const updateVisibility = async () => {\n    try {\n      await globalAPI.put(`/visibility/${datasetID}`);\n      setVisibility(state => !state);\n    } catch (err) {}\n  };\n\n  const displayPublicInterval = () => {\n    clearInterval(publicInterval.current);\n    setDisplayPublic(true);\n    publicInterval.current = setInterval(() => {\n      setDisplayPublic(false);\n    }, 1300);\n    return () => {\n      clearInterval(publicInterval.current);\n    };\n  };\n\n  const displayExistInterval = () => {\n    clearInterval(existInterval.current);\n    setDisplayExist(true);\n    existInterval.current = setInterval(() => {\n      setDisplayExist(false);\n    }, 1300);\n    return () => {\n      clearInterval(existInterval.current);\n    };\n  };\n\n  const previousPage = () => {\n    if (page > 1) {\n      setStart((page - 2) * 30);\n      setEnd((page - 1) * 30);\n      setPage(state => state - 1);\n      setRefreshData(new Date().getTime());\n    }\n  };\n\n  const nextPage = () => {\n    if (page * 30 < uploadedImages.length && uploadedImages.length > 30) {\n      setPage(state => state + 1);\n      setStart(page * 30);\n      setEnd((page + 1) * 30);\n      setRefreshData(new Date().getTime());\n    }\n  };\n\n  const updateDataset = async () => {\n    if (image) {\n      const formImage = new FormData();\n      formImage.append('image', image);\n\n      try {\n        const tempPicture = picture;\n        const imageResponse = await imageAPI.post(\"/upload\", formImage);\n        let updateDataset = {\n          title: title,\n          description: description,\n          picture: imageResponse.data.data,\n          datafile: data,\n          updated: new Date().toISOString()\n        };\n\n        if (dataset.dataType === \"value\") {\n          updateDataset.target = targetAttribute;\n        } else {\n          updateDataset.labels = labels;\n        }\n\n        await itemsAPI.put(`/${datasetID}?type=dataset`, updateDataset);\n        setImage(undefined);\n        setPicture(imageResponse.data.data);\n\n        if (tempPicture !== \"default.png\") {\n          await imageAPI.put('/remove', {\n            picture: tempPicture\n          });\n        }\n      } catch (err) {}\n    } else {\n      try {\n        let updateDataset = {\n          title: title,\n          description: description,\n          picture: picture,\n          datafile: data,\n          updated: new Date().toISOString()\n        };\n\n        if (dataset.dataType === \"value\") {\n          updateDataset.target = targetAttribute;\n        } else {\n          updateDataset.labels = labels;\n        }\n\n        await itemsAPI.put(`/${datasetID}?type=dataset`, updateDataset);\n      } catch (err) {}\n    }\n\n    setUpdated(new Date().toISOString());\n    setChangedSettings(false);\n  };\n\n  const replaceData = async () => {\n    if (dataFile !== undefined && (dataset.dataType === \"image\" && !assignedLabels.includes(\"No label\") || dataset.dataType === \"value\" && targetAttribute !== \"\")) {\n      const formData = new FormData();\n      const file = dataFile;\n      const reader = new FileReader();\n      const removeData = new FormData();\n      const id = new Date().toISOString();\n\n      if (dataset.dataType === \"image\") {\n        for (let i = 0; i < dataFile.length; i++) {\n          formData.append('data[]', dataFile[i]);\n          formData.append('labels[]', assignedLabels[i]);\n        }\n      } else {\n        reader.onload = function (e) {\n          setDataTable(e.target.result);\n          setMaxRows(e.target.result.slice(e.target.result.indexOf('\\n') + 1).split('\\n').length);\n          setRefreshData(new Date().getTime());\n        };\n\n        reader.readAsText(file);\n        formData.append('data', dataFile);\n      }\n\n      formData.append('id', id);\n      removeData.append('id', dataset.datafile);\n\n      try {\n        let updateDataset = {\n          title: title,\n          description: description,\n          picture: picture,\n          datafile: id,\n          updated: new Date().toISOString()\n        };\n\n        if (dataset.dataType === \"value\") {\n          updateDataset.target = targetAttribute;\n        } else {\n          updateDataset.labels = labels;\n        }\n\n        await itemsAPI.put(`/${datasetID}?type=dataset`, updateDataset);\n        await fileAPI.post(\"/upload\", formData);\n        await fileAPI.post(\"/remove\", formData);\n        setData(id);\n        setUpdated(new Date().toISOString());\n        setDataFile(undefined);\n        setChangedData(false);\n        setRefreshData(new Date().getTime());\n      } catch (err) {}\n    }\n  };\n\n  const deleteDataset = async () => {\n    try {\n      await itemsAPI.delete(`/${datasetID}`);\n      removeOpenItems(datasetID);\n      history.replace(\"/home\");\n    } catch (err) {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loaded && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sidebar-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"http://localhost:3000/dataset.png\",\n            className: !(type === \"view\" && !dataset.self) ? \"create-item-edit-image\" : undefined\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: `create-item-title ${!(type === \"view\" && !dataset.self) && \"create-item-edit-input\"}`,\n            placeholder: \"Title\",\n            onChange: e => {\n              setTitle(e.target.value);\n              setChangedSettings(true);\n            },\n            disabled: !(dataset.self || type === \"create\"),\n            value: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: `create-item-description ${!(type === \"view\" && !dataset.self) && \"create-item-edit-textarea\"}`,\n          placeholder: \"Description\",\n          onChange: e => {\n            setDescription(e.target.value);\n            setChangedSettings(true);\n          },\n          disabled: !(dataset.self || type === \"create\"),\n          value: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 25\n        }, this), (dataset.self || type === \"create\") && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-item-setup\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"create-item-setup-label\",\n              children: \"Picture\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"create-item-setup-input\",\n              type: \"file\",\n              name: \"image\",\n              onChange: e => {\n                setImage(e.target.files[0]);\n                setChangedSettings(true);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-item-setup\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"create-item-setup-label\",\n              children: \"Public?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              onChange: () => {\n                setVisibility(previous => !previous);\n                setChangedSettings(true);\n              },\n              checked: visibility\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true), !dataset.self && type !== \"create\" && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"item-creator\",\n          children: dataset.creatorName.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 64\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-information\",\n          children: [type !== \"create\" && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"item-date\",\n            children: date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 51\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 29\n          }, this), !dataset.self && type !== \"create\" && /*#__PURE__*/_jsxDEV(BookmarkIcon, {\n            className: `item-icon ${bookmarked ? \"blue2\" : \"white\"}`,\n            onClick: () => {\n              updateBookmark();\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 68\n          }, this), dataset.self && type !== \"create\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: visibility ? /*#__PURE__*/_jsxDEV(VisibilityIcon, {\n              className: \"item-visibility\",\n              onClick: () => {\n                updateVisibility();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(VisibilityOffIcon, {\n              className: \"item-visibility\",\n              onClick: () => {\n                updateVisibility();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 41\n            }, this)\n          }, void 0, false), type !== \"create\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(ThumbUpIcon, {\n              className: `item-icon ${upvoted ? \"blue2\" : \"white\"}`,\n              onClick: () => {\n                updateUpvote();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 384,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: upvoted ? \"blue2\" : \"white\",\n              children: upvotes\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sidebar-divided\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: `create-workspace-import-existing ${!(type === \"view\" && !dataset.self) && \"create-item-edit-input\"}`,\n          placeholder: \"Dataset ID\",\n          onChange: e => {\n            setDatasetID(e.target.value);\n          },\n          onKeyPress: searchFunctionKey,\n          disabled: !(dataset.self || type === \"create\"),\n          value: datasetID\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"create-item-view-dataset\",\n          onClick: () => {\n            setViewDataset(state => !state);\n          },\n          children: viewDataset ? \"Hide Dataset\" : \"Show Dataset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 25\n        }, this), type === \"view\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: dataset.self && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sidebar-divided\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"blue-button item-save\",\n              disabled: !changedSettings,\n              onClick: () => {\n                updateWorkspace();\n              },\n              children: \"Save Changes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"text-button item-delete\",\n              onClick: () => {\n                deleteWorkspace();\n              },\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true)\n        }, void 0, false), displayPublic && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"create-item-data-notification\",\n          children: \"Dataset not public\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 43\n        }, this), displayExist && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"create-item-data-notification\",\n          children: \"Dataset does not exist\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 42\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"workspace-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"workspace-inner\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"view-items-top\",\n              children: [type === \"create\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                  children: \"Create Workspace\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 421,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 422,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"blue-button\",\n                  disabled: disableTrain,\n                  onClick: () => {\n                    uploadImage();\n                  },\n                  children: \"Train\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 423,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true), type === \"view\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `text-button ${stage === \"model\" ? \"item-header-button-selected\" : \"item-header-button-unselected\"}`,\n                  onClick: () => {\n                    setStage(\"model\");\n                  },\n                  children: \"Model\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 430,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `text-button ${stage === \"evaluation\" ? \"item-header-button-selected\" : \"item-header-button-unselected\"}`,\n                  onClick: () => {\n                    setStage(\"evaluation\");\n                  },\n                  children: \"Evaluation\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 432,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 418,\n              columnNumber: 33\n            }, this), stage === \"model\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: model.length !== 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-modelling-body\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"create-model\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"create-model-diagram\",\n                    children: [model.map((node, i) => {\n                      return /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"create-model-diagram-node\",\n                          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                            onClick: () => {\n                              setSelectedNode(i);\n                            },\n                            children: /*#__PURE__*/_jsxDEV(ModelNode, {\n                              setSelectedNode: setSelectedNode,\n                              type: node.type,\n                              value: node.value,\n                              selected: i === selectedNode,\n                              last: i === model.length - 1\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 448,\n                              columnNumber: 77\n                            }, this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 447,\n                            columnNumber: 73\n                          }, this), node.type !== \"Input\" && (dataset.self || type === \"create\") && /*#__PURE__*/_jsxDEV(\"div\", {\n                            onClick: () => {\n                              {\n                                selectedNode === i ? setSelectedNode(state => state - 1) : selectedNode < i ? setSelectedNode(state => state) : selectedNode > i && /*#__PURE__*/_jsxDEV(_Fragment, {\n                                  children: selectedNode - i === 1 ? setSelectedNode(state => state - 1) : setSelectedNode(i)\n                                }, void 0, false);\n                              }\n                              model.splice(i, 1);\n                              setChangedSettings(true);\n                              setRefreshDiagram(new Date().getTime());\n                            },\n                            children: /*#__PURE__*/_jsxDEV(ClearIcon, {\n                              className: \"create-model-diagram-remove\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 467,\n                              columnNumber: 81\n                            }, this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 451,\n                            columnNumber: 77\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 446,\n                          columnNumber: 69\n                        }, this), i === model.length - 1 && node.type !== \"Output\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                          children: addNode && (dataset.self || type === \"create\") ? /*#__PURE__*/_jsxDEV(\"div\", {\n                            className: \"create-model-diagram-add\",\n                            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                              onClick: () => {\n                                setAddNode(false);\n                              },\n                              children: /*#__PURE__*/_jsxDEV(RemoveIcon, {\n                                className: \"create-model-diagram-add-icon\"\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 476,\n                                columnNumber: 89\n                              }, this)\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 475,\n                              columnNumber: 85\n                            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                              className: \"create-model-diagram-add-options\",\n                              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                                onClick: () => {\n                                  setModel(state => [...state, {\n                                    type: \"Dense\",\n                                    value: 0,\n                                    activation: \"\"\n                                  }]);\n                                  setSelectedNode(model.length);\n                                  setAddNode(false);\n                                  setChangedSettings(true);\n                                },\n                                children: \"Dense\"\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 479,\n                                columnNumber: 89\n                              }, this), model.length > 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n                                onClick: () => {\n                                  {\n                                    uploadedDataset.labels.length === 2 ? setModel(state => [...state, {\n                                      type: \"Output\",\n                                      value: 1,\n                                      activation: \"\"\n                                    }]) : setModel(state => [...state, {\n                                      type: \"Output\",\n                                      value: uploadedDataset.labels.length,\n                                      activation: \"\"\n                                    }]);\n                                  }\n                                  setSelectedNode(model.length);\n                                  setAddNode(false);\n                                  setChangedSettings(true);\n                                },\n                                children: \"Output\"\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 489,\n                                columnNumber: 93\n                              }, this)]\n                            }, void 0, true, {\n                              fileName: _jsxFileName,\n                              lineNumber: 478,\n                              columnNumber: 85\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 474,\n                            columnNumber: 81\n                          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                            children: (dataset.self || type === \"create\") && /*#__PURE__*/_jsxDEV(\"div\", {\n                              onClick: () => {\n                                setAddNode(true);\n                              },\n                              children: /*#__PURE__*/_jsxDEV(AddIcon, {\n                                className: \"create-model-diagram-add-icon\"\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 514,\n                                columnNumber: 93\n                              }, this)\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 513,\n                              columnNumber: 89\n                            }, this)\n                          }, void 0, false)\n                        }, void 0, false)]\n                      }, i, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 445,\n                        columnNumber: 65\n                      }, this);\n                    }), /*#__PURE__*/_jsxDEV(\"div\", {\n                      ref: modelRef\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 524,\n                      columnNumber: 57\n                    }, this)]\n                  }, refreshDiagram, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 442,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 441,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"create-model-selected\",\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      children: model[selectedNode].type\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 529,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"create-model-selected-input\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          children: \"Units\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 532,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                          value: model[selectedNode].value,\n                          disabled: (model[selectedNode].type === \"Input\" || model[selectedNode].type === \"Output\") && !(dataset.self || type === \"create\"),\n                          onChange: e => {\n                            setModel(state => {\n                              const stateCopy = [...state];\n                              stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                                value: Number(e.target.value)\n                              };\n                              return stateCopy;\n                            });\n                            setChangedSettings(true);\n                            setRefreshDiagram(new Date().getTime());\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 533,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 531,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: model[selectedNode].type !== \"Input\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                            children: \"Activation\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 551,\n                            columnNumber: 73\n                          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                            value: model[selectedNode].activation,\n                            disabled: !(dataset.self || type === \"create\"),\n                            onChange: e => {\n                              setModel(state => {\n                                const stateCopy = [...state];\n                                stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                                  activation: e.target.value\n                                };\n                                return stateCopy;\n                              });\n                              setChangedSettings(true);\n                              setRefreshDiagram(new Date().getTime());\n                            },\n                            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                              disabled: true,\n                              defaultValue: true,\n                              value: \"\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 566,\n                              columnNumber: 81\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"sigmoid\",\n                              children: \"Sigmoid\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 567,\n                              columnNumber: 81\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"softmax\",\n                              children: \"Softmax\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 568,\n                              columnNumber: 81\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"softplus\",\n                              children: \"Softplus\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 569,\n                              columnNumber: 81\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"softsign\",\n                              children: \"Softsign\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 570,\n                              columnNumber: 81\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"swish\",\n                              children: \"Swish\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 571,\n                              columnNumber: 81\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"selu\",\n                              children: \"Selu\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 572,\n                              columnNumber: 81\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"tanh\",\n                              children: \"Tanh\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 573,\n                              columnNumber: 81\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"elu\",\n                              children: \"Elu\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 574,\n                              columnNumber: 81\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"exponential\",\n                              children: \"Exponential\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 575,\n                              columnNumber: 81\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"gelu\",\n                              children: \"Gelu\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 576,\n                              columnNumber: 81\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"hard_sigmoid\",\n                              children: \"Hard Sigmoid\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 577,\n                              columnNumber: 81\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"linear\",\n                              children: \"Linear\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 578,\n                              columnNumber: 81\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"relu\",\n                              children: \"Relu\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 579,\n                              columnNumber: 81\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 552,\n                            columnNumber: 73\n                          }, this)]\n                        }, void 0, true)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 548,\n                        columnNumber: 61\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 530,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 528,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"create-model-configuration\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"create-model-configuration-option\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          children: \"Epochs\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 589,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                          value: configuration.epochs,\n                          disabled: !(dataset.self || type === \"create\"),\n                          onChange: e => {\n                            setConfiguration(state => ({ ...state,\n                              epochs: e.target.value\n                            }));\n                            setChangedSettings(true);\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 590,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 588,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          children: \"Training Split\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 601,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                          value: configuration.training_split,\n                          disabled: !(dataset.self || type === \"create\"),\n                          onChange: e => {\n                            setConfiguration(state => ({ ...state,\n                              training_split: e.target.value\n                            }));\n                            setChangedSettings(true);\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 602,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 600,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          children: \"Validation Split\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 613,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                          value: configuration.validation_split,\n                          disabled: !(dataset.self || type === \"create\"),\n                          onChange: e => {\n                            setConfiguration(state => ({ ...state,\n                              validation_split: e.target.value\n                            }));\n                            setChangedSettings(true);\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 614,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 612,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          children: \"Test Split\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 625,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                          value: configuration.test_split,\n                          disabled: !(dataset.self || type === \"create\"),\n                          onChange: e => {\n                            setConfiguration(state => ({ ...state,\n                              test_split: e.target.value\n                            }));\n                            setChangedSettings(true);\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 626,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 624,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          children: \"Minimum Improvement\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 637,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                          value: configuration.improvement,\n                          disabled: !(dataset.self || type === \"create\"),\n                          onChange: e => {\n                            setConfiguration(state => ({ ...state,\n                              improvement: e.target.value\n                            }));\n                            setChangedSettings(true);\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 638,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 636,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          children: \"Patience\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 649,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                          value: configuration.patience,\n                          disabled: !(dataset.self || type === \"create\"),\n                          onChange: e => {\n                            setConfiguration(state => ({ ...state,\n                              patience: e.target.value\n                            }));\n                            setChangedSettings(true);\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 650,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 648,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          children: \"Batch Size\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 661,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                          value: configuration.batch,\n                          disabled: !(dataset.self || type === \"create\"),\n                          onChange: e => {\n                            setConfiguration(state => ({ ...state,\n                              batch: e.target.value\n                            }));\n                            setChangedSettings(true);\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 662,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 660,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          children: \"Learning Rate Scheduler\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 673,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                          className: \"create-model-configuration-option-checkbox\",\n                          type: \"checkbox\",\n                          disabled: !(dataset.self || type === \"create\"),\n                          onChange: e => {\n                            setConfiguration(state => ({ ...state,\n                              lr_scheduler: !configuration.lr_scheduler\n                            }));\n                            setChangedSettings(true);\n                          },\n                          checked: configuration.lr_scheduler\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 674,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 672,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          children: \"Optimiser\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 687,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                          value: configuration.optimiser,\n                          disabled: !(dataset.self || type === \"create\"),\n                          onChange: e => {\n                            setConfiguration(state => ({ ...state,\n                              optimiser: e.target.value\n                            }));\n                            setChangedSettings(true);\n                          },\n                          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                            disabled: true,\n                            defaultValue: true,\n                            value: \"\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 697,\n                            columnNumber: 69\n                          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"Adadelta\",\n                            children: \"Adadelta\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 698,\n                            columnNumber: 69\n                          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"Adagrad\",\n                            children: \"Adagrad\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 699,\n                            columnNumber: 69\n                          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"Adam\",\n                            children: \"Adam\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 700,\n                            columnNumber: 69\n                          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"Adamax\",\n                            children: \"Adamax\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 701,\n                            columnNumber: 69\n                          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"Ftrl\",\n                            children: \"Ftrl\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 702,\n                            columnNumber: 69\n                          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"Nadam\",\n                            children: \"Nadam\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 703,\n                            columnNumber: 69\n                          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"RMSprop\",\n                            children: \"RMSprop\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 704,\n                            columnNumber: 69\n                          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"SGD\",\n                            children: \"SGD\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 705,\n                            columnNumber: 69\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 688,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 686,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          children: \"Loss\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 709,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                          value: configuration.loss,\n                          disabled: !(dataset.self || type === \"create\"),\n                          onChange: e => {\n                            setConfiguration(state => ({ ...state,\n                              loss: e.target.value\n                            }));\n                            setChangedSettings(true);\n                          },\n                          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                            disabled: true,\n                            defaultValue: true,\n                            value: \"\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 719,\n                            columnNumber: 69\n                          }, this), uploadedDataset.labels.length === 2 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"binary_crossentropy\",\n                              children: \"Binary Crossentropy\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 722,\n                              columnNumber: 77\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"hinge\",\n                              children: \"Hinge\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 723,\n                              columnNumber: 77\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"squared_hinge\",\n                              children: \"Squared Hinge\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 724,\n                              columnNumber: 77\n                            }, this)]\n                          }, void 0, true), uploadedDataset.labels.length > 2 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"categorical_crossentropy\",\n                              children: \"Categorical Crossentropy\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 729,\n                              columnNumber: 77\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"sparse_categorical_crossentropy\",\n                              children: \"Sparse Categorical Crossentropy\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 730,\n                              columnNumber: 77\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"kl_divergence\",\n                              children: \"Kullback Leibler Divergence\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 731,\n                              columnNumber: 77\n                            }, this)]\n                          }, void 0, true)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 710,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 708,\n                        columnNumber: 61\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 587,\n                      columnNumber: 57\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 586,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 527,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 440,\n                columnNumber: 45\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"end-items\",\n                children: \"Select a dataset...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 741,\n                columnNumber: 45\n              }, this)\n            }, void 0, false) : stage === \"evaluation\" ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 29\n          }, this), viewDataset && uploadedDataset && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: noData ? /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"end-items\",\n              children: \"Cannot find dataset\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 753,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"create-workspace-data\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"create-workspace-data-header\",\n                children: \"Selected Dataset:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 756,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"create-workspace-data-header-dataset\",\n                children: uploadedDataset._id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 757,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"sidebar-divided\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 758,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-workspace-data-images-list\",\n                children: images.map((image, i) => {\n                  if (i >= start && i < end) {\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"create-workspace-data-image\",\n                      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                        src: `http://127.0.0.1:5000/files/${uploadedDataset.imageFile}/${image}.jpg`\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 764,\n                        columnNumber: 65\n                      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                        children: assignedLabels[i]\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 765,\n                        columnNumber: 65\n                      }, this)]\n                    }, i, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 763,\n                      columnNumber: 61\n                    }, this);\n                  }\n                })\n              }, refreshData, false, {\n                fileName: _jsxFileName,\n                lineNumber: 759,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"sidebar-divided\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 771,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-workspace-data-pagination\",\n                children: [/*#__PURE__*/_jsxDEV(ArrowBackIosNewIcon, {\n                  className: \"create-workspace-data-pagination-icon\",\n                  onClick: () => {\n                    previousPage();\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 773,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Page \", page, \" / \", Math.ceil(images.length / 30)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 774,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(ArrowForwardIosIcon, {\n                  className: \"create-workspace-data-pagination-icon\",\n                  onClick: () => {\n                    nextPage();\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 775,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 772,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 755,\n              columnNumber: 41\n            }, this)\n          }, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(Dataset, \"4UsA0UbQloUhRbSbk1p2Yjz2Bys=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = Dataset;\nexport default Dataset;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dataset\");","map":{"version":3,"sources":["/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Dataset.jsx"],"names":["React","useState","useEffect","useRef","useContext","useHistory","useParams","Link","usersAPI","itemsAPI","globalAPI","imageAPI","trainAPI","ModelNode","OpenItemsContext","ArrowForwardIosIcon","ArrowBackIosNewIcon","ClearIcon","AddIcon","RemoveIcon","BookmarkIcon","ThumbUpIcon","VisibilityOffIcon","VisibilityIcon","Dataset","currentUser","type","stage","setStage","title","setTitle","description","setDescription","visibility","setVisibility","bookmarked","setBookmarked","upvoted","setUpvoted","upvotes","setUpvotes","updated","setUpdated","picture","setPicture","date","setDate","start","setStart","end","setEnd","page","setPage","image","setImage","dataset","setDataset","uploadedImages","setUploadedImages","assignedLabels","setAssignedLabels","refreshData","setRefreshData","loaded","setLoaded","exist","setExist","noData","setNoData","addLabel","setAddLabel","disableCreate","setDisabledCreate","addOpenItems","removeOpenItems","modelRef","datasetID","id","publicInterval","existInterval","history","fetchData","get","data","map","previous","creator","_id","setLabels","labels","setImageFile","imageFile","fetch","then","response","json","images","setImages","state","filename","label","catch","err","updatedDate","Date","currentDate","getTime","Math","floor","toString","addFunctionKey","e","key","updateUpvote","put","updateBookmark","updateVisibility","displayPublicInterval","clearInterval","current","setDisplayPublic","setInterval","displayExistInterval","setDisplayExist","previousPage","nextPage","length","updateDataset","formImage","FormData","append","tempPicture","imageResponse","post","datafile","toISOString","dataType","target","targetAttribute","undefined","setChangedSettings","replaceData","dataFile","includes","formData","file","reader","FileReader","removeData","i","onload","setDataTable","result","setMaxRows","slice","indexOf","split","readAsText","fileAPI","setData","setDataFile","setChangedData","deleteDataset","delete","replace","self","value","files","creatorName","name","setDatasetID","searchFunctionKey","setViewDataset","viewDataset","changedSettings","updateWorkspace","deleteWorkspace","displayPublic","displayExist","disableTrain","uploadImage","model","node","setSelectedNode","selectedNode","splice","setRefreshDiagram","addNode","setAddNode","setModel","activation","uploadedDataset","refreshDiagram","stateCopy","Number","configuration","epochs","setConfiguration","training_split","validation_split","test_split","improvement","patience","batch","lr_scheduler","optimiser","loss","ceil"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef, useContext} from 'react'\nimport {useHistory, useParams, Link} from \"react-router-dom\"\nimport usersAPI from '../API/users'\nimport itemsAPI from '../API/items'\nimport globalAPI from '../API/global'\nimport imageAPI from '../API/images'\nimport trainAPI from '../API/train'\nimport ModelNode from '../Components/Model-Node';\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\n\nconst Dataset = ({currentUser, type}) => {\n    const [stage, setStage] = useState(\"model\");\n    const [title, setTitle] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [visibility, setVisibility] = useState(false);\n    const [bookmarked, setBookmarked] = useState()\n    const [upvoted, setUpvoted] = useState()\n    const [upvotes, setUpvotes] = useState()\n    const [updated, setUpdated] = useState()\n    const [picture, setPicture] = useState()\n    const [date, setDate] = useState(\"\")\n    const [start, setStart] = useState(0)\n    const [end, setEnd] = useState(30)\n    const [page, setPage] = useState(1)\n    const [image, setImage] = useState();\n    const [dataset, setDataset] = useState([]);\n    const [uploadedImages, setUploadedImages] = useState([])\n    const [assignedLabels, setAssignedLabels] = useState([])\n    const [refreshData, setRefreshData] = useState()\n    const [loaded, setLoaded] = useState(false);\n    const [exist, setExist] = useState()\n    const [noData, setNoData] = useState()\n    const [addLabel, setAddLabel] = useState(\"\")\n    const [disableCreate, setDisabledCreate] = useState(false)\n    const {addOpenItems, removeOpenItems} = useContext(OpenItemsContext);\n    const modelRef = useRef(null)\n    const datasetID = useParams().id;\n    const publicInterval = useRef(0)\n    const existInterval = useRef(0)\n    const history = useHistory();\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                if (type === \"create\") {\n                    const dataset = await usersAPI.get(\"/created?type=dataset\");\n    \n                    dataset.data.data.map((dataset) => {\n                        setDataset(previous => [...previous, dataset.title]);\n                    })\n\n                    setLoaded(true)\n                } else {\n                    const dataset = await itemsAPI.get(`/${datasetID}?type=dataset`);\n\n                    if (dataset.data.data.creator === currentUser.id) {\n                        addOpenItems(dataset.data.data._id, dataset.data.data.title, dataset.data.data.type)\n                    }\n\n                    setDataset(dataset.data.data);\n                    setUpdated(dataset.data.data.updated);\n                    setBookmarked(dataset.data.data.bookmarked)\n                    setUpvoted(dataset.data.data.upvoted)\n                    setPicture(dataset.data.data.picture)\n                    setUpvotes(dataset.data.data.upvotes)\n                    setVisibility(dataset.data.data.visibility)\n                    setTitle(dataset.data.data.title)\n                    setDescription(dataset.data.data.description)\n                    setLabels(dataset.data.data.labels)\n                    setImageFile(dataset.data.data.imageFile)\n\n                    fetch(`http://127.0.0.1:5000/files/${dataset.data.data.imageFile}/labels.json`)\n                        .then(response => response.json())\n                        .then(images => {\n                            images.map(image => {\n                                setImages(state => [...state, image.filename])\n                                setAssignedLabels(state => [...state, image.label])\n                            })\n                            setExist(true)\n                            setLoaded(true)\n                        }).catch(() => {\n                            setExist(true)\n                            setLoaded(true)\n                        });\n                }\n            } catch (err) {\n              setExist(false)\n              setLoaded(true)\n            }\n        }\n        fetchData();\n    }, [])\n\n    useEffect(() => {\n        if (loaded && exist) {\n            const updatedDate = new Date(updated);\n            const currentDate = new Date();\n    \n            if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} years ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} days ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hours ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minutes ago`)\n            } else {\n                setDate(\"Updated just now\")\n            }\n        }\n    }, [loaded, updated])\n\n    const addFunctionKey = (e) => {\n        if (e.key === \"Enter\" && addLabel !== \"\") {\n            setLabels(state => [...state, addLabel])\n        }\n    }\n\n    const updateUpvote = async () => {\n        try {\n            await globalAPI.put(`/upvote/${datasetID}?state=${upvoted}`);\n\n            if (upvoted) {\n                setUpvotes(state => state-1)\n            } else {\n                setUpvotes(state => state+1)\n            }\n\n            setUpvoted(state => !state)\n        } catch (err) {}\n    }\n\n    const updateBookmark = async () => {\n        try {\n            await globalAPI.put(`/bookmark/${datasetID}?state=${bookmarked}`);\n            \n            setBookmarked(state => !state)\n        } catch (err) {}\n    }\n\n    const updateVisibility = async () => {\n        try {\n            await globalAPI.put(`/visibility/${datasetID}`);\n\n            setVisibility(state => !state)\n        } catch (err) {}\n    }\n\n    const displayPublicInterval = () => {\n        clearInterval(publicInterval.current)\n        setDisplayPublic(true);\n        publicInterval.current = setInterval(() => {\n            setDisplayPublic(false);\n        }, 1300)\n        return ()=> {clearInterval(publicInterval.current)};\n    }\n\n    const displayExistInterval = () => {\n        clearInterval(existInterval.current)\n        setDisplayExist(true);\n        existInterval.current = setInterval(() => {\n            setDisplayExist(false);\n        }, 1300)\n        return ()=> {clearInterval(existInterval.current)};\n    }\n\n    const previousPage = () => {\n        if (page > 1) {\n            setStart((page-2)*30)\n            setEnd((page-1)*30)\n            setPage(state => state-1)\n            setRefreshData(new Date().getTime())\n        }\n    }\n    \n    const nextPage = () => {\n        if (page*30 < uploadedImages.length && uploadedImages.length > 30) {\n            setPage(state => state+1)\n            setStart((page)*30)\n            setEnd((page+1)*30)\n            setRefreshData(new Date().getTime())\n        }\n    }\n\n    const updateDataset = async () => {\n        if (image) {\n            const formImage = new FormData();\n            formImage.append('image', image);\n            \n            try {\n                const tempPicture = picture\n                const imageResponse = await imageAPI.post(\"/upload\", formImage);\n\n                let updateDataset = {\n                    title: title,\n                    description: description,\n                    picture: imageResponse.data.data,\n                    datafile: data,\n                    updated: new Date().toISOString()\n                }\n\n                if (dataset.dataType === \"value\") {\n                    updateDataset.target = targetAttribute\n                } else {\n                    updateDataset.labels = labels\n                }\n\n                await itemsAPI.put(`/${datasetID}?type=dataset`, updateDataset)\n\n                setImage(undefined)\n                setPicture(imageResponse.data.data)\n\n                if (tempPicture !== \"default.png\") {\n                    await imageAPI.put('/remove', {picture: tempPicture});\n                }\n            } catch (err) {}\n        } else {\n            try {\n                let updateDataset = {\n                    title: title,\n                    description: description,\n                    picture: picture,\n                    datafile: data,\n                    updated: new Date().toISOString()\n                }\n\n                if (dataset.dataType === \"value\") {\n                    updateDataset.target = targetAttribute\n                } else {\n                    updateDataset.labels = labels\n                }\n\n                await itemsAPI.put(`/${datasetID}?type=dataset`, updateDataset)\n            } catch (err) {}\n        }\n\n        setUpdated(new Date().toISOString())\n        setChangedSettings(false)\n    }\n\n    const replaceData = async () => {\n        if (dataFile !== undefined && ((dataset.dataType === \"image\" && !assignedLabels.includes(\"No label\")) \n            || (dataset.dataType === \"value\" && targetAttribute !== \"\"))) {\n\n            const formData = new FormData();\n            const file = dataFile;\n            const reader = new FileReader();\n            const removeData = new FormData();\n            const id = new Date().toISOString();\n\n            if (dataset.dataType === \"image\") {\n                for (let i = 0; i < dataFile.length; i++) {\n                    formData.append('data[]', dataFile[i]);\n                    formData.append('labels[]', assignedLabels[i]);\n                }\n            } else {\n                reader.onload = function(e) {\n                    setDataTable(e.target.result);\n                    setMaxRows(e.target.result.slice(e.target.result.indexOf('\\n')+1).split('\\n').length)\n                    setRefreshData(new Date().getTime())\n                }\n    \n                reader.readAsText(file)\n\n                formData.append('data', dataFile);\n            }\n            \n            formData.append('id', id)\n            removeData.append('id', dataset.datafile)\n\n            try {\n                let updateDataset = {\n                    title: title,\n                    description: description,\n                    picture: picture,\n                    datafile: id,\n                    updated: new Date().toISOString()\n                }\n\n                if (dataset.dataType === \"value\") {\n                    updateDataset.target = targetAttribute\n                } else {\n                    updateDataset.labels = labels\n                }\n\n                await itemsAPI.put(`/${datasetID}?type=dataset`, updateDataset)\n\n                await fileAPI.post(\"/upload\", formData);\n                await fileAPI.post(\"/remove\", formData);\n\n                setData(id)\n                setUpdated(new Date().toISOString())\n                setDataFile(undefined)\n                setChangedData(false)\n                setRefreshData(new Date().getTime())\n            } catch (err) {}\n        }\n    }\n\n    const deleteDataset = async () => {\n        try {\n            await itemsAPI.delete(`/${datasetID}`)\n\n            removeOpenItems(datasetID)\n            history.replace(\"/home\")\n        } catch (err) {}\n    }\n\n    return (\n        <>\n            {loaded &&\n                <div className=\"main-body\">\n                    <div className=\"sidebar\">\n                        <div className=\"sidebar-header\">\n                            <img src=\"http://localhost:3000/dataset.png\"\n                                    className={!(type === \"view\" && !dataset.self) ? \"create-item-edit-image\" : undefined} />\n                            <input className={`create-item-title ${!(type === \"view\" && !dataset.self) && \"create-item-edit-input\"}`}\n                                    placeholder=\"Title\"\n                                    onChange={e => {\n                                        setTitle(e.target.value)\n                                        setChangedSettings(true)\n                                    }}\n                                    disabled={!(dataset.self || type === \"create\")}\n                                    value={title} />\n                        </div>\n                        <textarea className={`create-item-description ${!(type === \"view\" && !dataset.self) && \"create-item-edit-textarea\"}`}\n                                    placeholder=\"Description\"\n                                    onChange={e => {\n                                        setDescription(e.target.value)\n                                        setChangedSettings(true)\n                                    }}\n                                    disabled={!(dataset.self || type === \"create\")}\n                                    value={description} />\n                        {(dataset.self || type === \"create\") &&\n                            <>\n                                <div className=\"create-item-setup\">\n                                    <label className=\"create-item-setup-label\">Picture</label>\n                                    <input className=\"create-item-setup-input\"\n                                            type=\"file\" \n                                            name=\"image\" \n                                            onChange={e => {\n                                                setImage(e.target.files[0])\n                                                setChangedSettings(true)\n                                            }} />\n                                </div>\n                                <div className=\"create-item-setup\">\n                                    <label className=\"create-item-setup-label\">Public?</label>\n                                    <input type=\"checkbox\" \n                                            onChange={() => {\n                                                setVisibility(previous => !previous)\n                                                setChangedSettings(true)\n                                            }}\n                                            checked={visibility} />\n                                </div>\n                            </>\n                        }\n                        {!dataset.self && type !== \"create\" && <p className=\"item-creator\">{dataset.creatorName.name}</p>}\n                        <div className=\"item-information\">\n                            {type !== \"create\" && <p className=\"item-date\">{date}</p>}\n                            <span />\n                            {!dataset.self && type !== \"create\" && <BookmarkIcon className={`item-icon ${bookmarked ? \"blue2\" : \"white\"}`} onClick={() => {updateBookmark()}} />}\n                            {dataset.self && type !== \"create\" && \n                                <>\n                                    {visibility ? \n                                        <VisibilityIcon className=\"item-visibility\" onClick={() => {updateVisibility()}} />\n                                    :\n                                        <VisibilityOffIcon className=\"item-visibility\" onClick={() => {updateVisibility()}} />\n                                    }\n                                </>\n                            }\n                            {type !== \"create\" &&\n                                <>\n                                    <ThumbUpIcon className={`item-icon ${upvoted ? \"blue2\" : \"white\"}`} onClick={() => {updateUpvote()}} />\n                                    <p className={upvoted ? \"blue2\" : \"white\"}>{upvotes}</p>\n                                </>\n                            }\n                        </div>\n                        <div className=\"sidebar-divided\" />\n                        <input className={`create-workspace-import-existing ${!(type === \"view\" && !dataset.self) && \"create-item-edit-input\"}`}\n                                placeholder=\"Dataset ID\"\n                                onChange={e => {setDatasetID(e.target.value)}}\n                                onKeyPress={searchFunctionKey}\n                                disabled={!(dataset.self || type === \"create\")}\n                                value={datasetID} />\n                        <button className=\"create-item-view-dataset\"\n                                onClick={() => {setViewDataset(state => !state)}}>{viewDataset ? \"Hide Dataset\" : \"Show Dataset\"}</button>\n                        {type === \"view\" &&\n                            <>\n                                {dataset.self &&\n                                    <>\n                                        <div className=\"sidebar-divided\" />\n                                        <button className=\"blue-button item-save\"\n                                                disabled={!changedSettings}\n                                                onClick={() => {updateWorkspace()}}>Save Changes</button>\n                                        <button className=\"text-button item-delete\"\n                                                onClick={() => {deleteWorkspace()}}>Delete</button>\n                                    </>\n                                }\n                            </>\n                        }\n                        {displayPublic && <p className=\"create-item-data-notification\">Dataset not public</p>}\n                        {displayExist && <p className=\"create-item-data-notification\">Dataset does not exist</p>}\n                    </div>\n                    <div className=\"inner\">\n                        <div className=\"workspace-body\">\n                            <div className=\"workspace-inner\">\n                                <div className=\"view-items-top\">\n                                    {type === \"create\" &&\n                                        <>\n                                            <h1>Create Workspace</h1>\n                                            <span />\n                                            <button className=\"blue-button\"\n                                                    disabled={disableTrain}\n                                                    onClick={() => {uploadImage()}}>Train</button>\n                                        </>\n                                    }\n                                    {type === \"view\" &&\n                                        <>\n                                            <button className={`text-button ${stage === \"model\" ? \"item-header-button-selected\" : \"item-header-button-unselected\"}`}\n                                                    onClick={() => {setStage(\"model\")}}>Model</button>\n                                            <button className={`text-button ${stage === \"evaluation\" ? \"item-header-button-selected\" : \"item-header-button-unselected\"}`}\n                                                    onClick={() => {setStage(\"evaluation\")}}>Evaluation</button>\n                                        </>\n                                    }\n                                </div>\n                                {stage === \"model\" ?\n                                    <>\n                                        {model.length !== 0 ?\n                                            <div className=\"create-modelling-body\">\n                                                <div className=\"create-model\">\n                                                    <div className=\"create-model-diagram\" key={refreshDiagram}>\n                                                        {model.map((node, i) => {\n                                                            return (\n                                                                <div key={i}>\n                                                                    <div className={\"create-model-diagram-node\"}>\n                                                                        <div onClick={() => {setSelectedNode(i)}}>\n                                                                            <ModelNode setSelectedNode={setSelectedNode} type={node.type} value={node.value} selected={i === selectedNode} last={i === model.length-1} />\n                                                                        </div>\n                                                                        {node.type !== \"Input\" && (dataset.self || type === \"create\") &&\n                                                                            <div onClick={() => {{selectedNode === i ?\n                                                                                                    setSelectedNode(state => state-1)\n                                                                                                : selectedNode < i ?\n                                                                                                    setSelectedNode(state => state)\n                                                                                                : selectedNode > i &&\n                                                                                                    <>\n                                                                                                        {selectedNode-i === 1 ?\n                                                                                                            setSelectedNode(state => state-1)\n                                                                                                        :\n                                                                                                            setSelectedNode(i)\n                                                                                                        } \n                                                                                                    </>  \n                                                                                                }\n                                                                                                model.splice(i, 1)\n                                                                                                setChangedSettings(true)\n                                                                                                setRefreshDiagram(new Date().getTime())}}>\n                                                                                <ClearIcon className=\"create-model-diagram-remove\" />\n                                                                            </div>\n                                                                        }\n                                                                    </div>\n                                                                    {i === model.length-1 && node.type !== \"Output\" &&\n                                                                        <>\n                                                                            {addNode && (dataset.self || type === \"create\") ?\n                                                                                <div className=\"create-model-diagram-add\">\n                                                                                    <div onClick={() => {setAddNode(false)}}>\n                                                                                        <RemoveIcon className=\"create-model-diagram-add-icon\" />\n                                                                                    </div>\n                                                                                    <div className=\"create-model-diagram-add-options\">\n                                                                                        <button onClick={() => {setModel(state => [...state, {\n                                                                                                type: \"Dense\",\n                                                                                                value: 0,\n                                                                                                activation: \"\"\n                                                                                            }])\n                                                                                            setSelectedNode(model.length)\n                                                                                            setAddNode(false)\n                                                                                            setChangedSettings(true)\n                                                                                        }}>Dense</button>\n                                                                                        {model.length > 1 &&\n                                                                                            <button onClick={() => {\n                                                                                                    {uploadedDataset.labels.length === 2 ?\n                                                                                                        setModel(state => [...state, {\n                                                                                                            type: \"Output\",\n                                                                                                            value: 1,\n                                                                                                            activation: \"\"\n                                                                                                        }])\n                                                                                                    :\n                                                                                                        setModel(state => [...state, {\n                                                                                                            type: \"Output\",\n                                                                                                            value: uploadedDataset.labels.length,\n                                                                                                            activation: \"\"\n                                                                                                        }])\n                                                                                                    }\n                                                                                                setSelectedNode(model.length)\n                                                                                                setAddNode(false)\n                                                                                                setChangedSettings(true)\n                                                                                            }}>Output</button>\n                                                                                        }\n                                                                                    </div>\n                                                                                </div>\n                                                                            :\n                                                                                <>  \n                                                                                    {(dataset.self || type === \"create\") &&\n                                                                                        <div onClick={() => {setAddNode(true)}}>\n                                                                                            <AddIcon className=\"create-model-diagram-add-icon\" />\n                                                                                        </div>\n                                                                                    }\n                                                                                </>\n                                                                            }\n                                                                        </>\n                                                                    }\n                                                                </div>\n                                                            )\n                                                        })}\n                                                        <div ref={modelRef} />\n                                                    </div>\n                                                </div>\n                                                <div>\n                                                    <div className=\"create-model-selected\">\n                                                        <p>{model[selectedNode].type}</p>\n                                                        <div className=\"create-model-selected-input\">\n                                                            <div>\n                                                                <label>Units</label>\n                                                                <input value={model[selectedNode].value} \n                                                                        disabled={(model[selectedNode].type === \"Input\" || model[selectedNode].type === \"Output\") && !(dataset.self || type === \"create\")}\n                                                                        onChange={e => {setModel(state => {\n                                                                                            const stateCopy = [...state]\n                                                                                        \n                                                                                            stateCopy[selectedNode] = {\n                                                                                                ...stateCopy[selectedNode],\n                                                                                                value: Number(e.target.value)\n                                                                                            }\n                                                                                        \n                                                                                            return stateCopy\n                                                                                        })\n                                                                                        setChangedSettings(true)\n                                                                                        setRefreshDiagram(new Date().getTime())}} />\n                                                            </div>\n                                                            <div>\n                                                                {model[selectedNode].type !== \"Input\" &&\n                                                                    <>\n                                                                        <label>Activation</label>\n                                                                        <select value={model[selectedNode].activation} \n                                                                                disabled={!(dataset.self || type === \"create\")}\n                                                                                onChange={e => {setModel(state => {\n                                                                                                    const stateCopy = [...state]\n                                                                                                \n                                                                                                    stateCopy[selectedNode] = {\n                                                                                                        ...stateCopy[selectedNode],\n                                                                                                        activation: e.target.value\n                                                                                                    }\n                                                                                                \n                                                                                                    return stateCopy\n                                                                                                })\n                                                                                                setChangedSettings(true)\n                                                                                                setRefreshDiagram(new Date().getTime())}}>\n                                                                                <option disabled defaultValue value=\"\"></option>\n                                                                                <option value=\"sigmoid\">Sigmoid</option>\n                                                                                <option value=\"softmax\">Softmax</option>\n                                                                                <option value=\"softplus\">Softplus</option>\n                                                                                <option value=\"softsign\">Softsign</option>\n                                                                                <option value=\"swish\">Swish</option>\n                                                                                <option value=\"selu\">Selu</option>\n                                                                                <option value=\"tanh\">Tanh</option>\n                                                                                <option value=\"elu\">Elu</option>\n                                                                                <option value=\"exponential\">Exponential</option>\n                                                                                <option value=\"gelu\">Gelu</option>\n                                                                                <option value=\"hard_sigmoid\">Hard Sigmoid</option>\n                                                                                <option value=\"linear\">Linear</option>\n                                                                                <option value=\"relu\">Relu</option>\n                                                                        </select>\n                                                                    </>\n                                                                }\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"create-model-configuration\">\n                                                        <div className=\"create-model-configuration-option\">\n                                                            <div>\n                                                                <label>Epochs</label>\n                                                                <input value={configuration.epochs}\n                                                                        disabled={!(dataset.self || type === \"create\")} \n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                epochs: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Training Split</label>\n                                                                <input value={configuration.training_split} \n                                                                        disabled={!(dataset.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                training_split: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Validation Split</label>\n                                                                <input value={configuration.validation_split} \n                                                                        disabled={!(dataset.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                validation_split: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Test Split</label>\n                                                                <input value={configuration.test_split} \n                                                                        disabled={!(dataset.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                test_split: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Minimum Improvement</label>\n                                                                <input value={configuration.improvement} \n                                                                        disabled={!(dataset.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                improvement: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Patience</label>\n                                                                <input value={configuration.patience} \n                                                                        disabled={!(dataset.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                patience: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Batch Size</label>\n                                                                <input value={configuration.batch} \n                                                                        disabled={!(dataset.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                batch: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Learning Rate Scheduler</label>\n                                                                <input className=\"create-model-configuration-option-checkbox\"\n                                                                        type=\"checkbox\" \n                                                                        disabled={!(dataset.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                lr_scheduler: !configuration.lr_scheduler\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }}\n                                                                        checked={configuration.lr_scheduler} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Optimiser</label>\n                                                                <select value={configuration.optimiser} \n                                                                        disabled={!(dataset.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                optimiser: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }}>\n                                                                    <option disabled defaultValue value=\"\"></option>\n                                                                    <option value=\"Adadelta\">Adadelta</option>\n                                                                    <option value=\"Adagrad\">Adagrad</option>\n                                                                    <option value=\"Adam\">Adam</option>\n                                                                    <option value=\"Adamax\">Adamax</option>\n                                                                    <option value=\"Ftrl\">Ftrl</option>\n                                                                    <option value=\"Nadam\">Nadam</option>\n                                                                    <option value=\"RMSprop\">RMSprop</option>\n                                                                    <option value=\"SGD\">SGD</option>\n                                                                </select>\n                                                            </div>\n                                                            <div>\n                                                                <label>Loss</label>\n                                                                <select value={configuration.loss} \n                                                                        disabled={!(dataset.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                loss: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }}>\n                                                                    <option disabled defaultValue value=\"\"></option>\n                                                                    {uploadedDataset.labels.length === 2 &&\n                                                                        <>\n                                                                            <option value=\"binary_crossentropy\">Binary Crossentropy</option>\n                                                                            <option value=\"hinge\">Hinge</option>\n                                                                            <option value=\"squared_hinge\">Squared Hinge</option>\n                                                                        </>\n                                                                    }\n                                                                    {uploadedDataset.labels.length > 2 &&\n                                                                        <>\n                                                                            <option value=\"categorical_crossentropy\">Categorical Crossentropy</option>\n                                                                            <option value=\"sparse_categorical_crossentropy\">Sparse Categorical Crossentropy</option>\n                                                                            <option value=\"kl_divergence\">Kullback Leibler Divergence</option>\n                                                                        </>\n                                                                    }\n                                                                </select>\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        :\n                                            <p className=\"end-items\">Select a dataset...</p>\n                                        }\n                                    </>\n                                : (stage === \"evaluation\") ?\n                                    <></>\n                                : \n                                    <></>\n                                }\n                            </div>\n                            {viewDataset && uploadedDataset && \n                                <>\n                                    {noData ?\n                                        <p className=\"end-items\">Cannot find dataset</p>\n                                    :\n                                        <div className=\"create-workspace-data\">\n                                            <p className=\"create-workspace-data-header\">Selected Dataset:</p>\n                                            <p className=\"create-workspace-data-header-dataset\">{uploadedDataset._id}</p>\n                                            <div className=\"sidebar-divided\" />\n                                            <div className=\"create-workspace-data-images-list\" key={refreshData}>\n                                                {images.map((image, i) => {\n                                                    if (i >= start && i < end) {\n                                                        return (\n                                                            <div className=\"create-workspace-data-image\" key={i}>\n                                                                <img src={`http://127.0.0.1:5000/files/${uploadedDataset.imageFile}/${image}.jpg`} />\n                                                                <p>{assignedLabels[i]}</p>\n                                                            </div>\n                                                        )\n                                                    }\n                                                })}\n                                            </div>\n                                            <div className=\"sidebar-divided\" />\n                                            <div className=\"create-workspace-data-pagination\">\n                                                <ArrowBackIosNewIcon className=\"create-workspace-data-pagination-icon\" onClick={() => {previousPage()}} />\n                                                <p>Page {page} / {Math.ceil(images.length/30)}</p>\n                                                <ArrowForwardIosIcon className=\"create-workspace-data-pagination-icon\" onClick={() => {nextPage()}} />\n                                            </div>\n                                        </div>\n                                    }   \n                                </>\n                            }\n                        </div>\n                    </div>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default Dataset"]},"metadata":{},"sourceType":"module"}