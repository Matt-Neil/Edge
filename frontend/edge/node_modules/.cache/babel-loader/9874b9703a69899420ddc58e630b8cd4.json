{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Workspace.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport usersAPI from '../API/users';\nimport itemsAPI from '../API/items';\nimport imageAPI from '../API/images';\nimport trainAPI from '../API/train';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport ModelNode from '../Components/Model-Node';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Workspace = _ref => {\n  _s();\n\n  let {\n    currentUser,\n    type\n  } = _ref;\n  const [stage, setStage] = useState(\"model\");\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [visibility, setVisibility] = useState(false);\n  const [start, setStart] = useState(0);\n  const [end, setEnd] = useState(30);\n  const [page, setPage] = useState(1);\n  const [image, setImage] = useState();\n  const [datasetID, setDatasetID] = useState(\"\");\n  const [uploadedDataset, setUploadedDataset] = useState();\n  const [workspaces, setWorkspaces] = useState([]);\n  const [images, setImages] = useState([]);\n  const [assignedLabels, setAssignedLabels] = useState([]);\n  const [refreshData, setRefreshData] = useState();\n  const [refreshDiagram, setRefreshDiagram] = useState();\n  const [model, setModel] = useState([]);\n  const [selectedNode, setSelectedNode] = useState(0);\n  const [configuration, setConfiguration] = useState({\n    epochs: \"\",\n    training_split: \"\",\n    validation_split: \"\",\n    test_split: \"\",\n    improvement: \"\",\n    patience: \"\",\n    batch: \"\",\n    lr_scheduler: false,\n    optimiser: \"\",\n    loss: \"\"\n  });\n  const [addNode, setAddNode] = useState(false);\n  const [results, setResults] = useState();\n  const [loaded, setLoaded] = useState(false);\n  const [disableCreate, setDisabledCreate] = useState(false);\n  const [disableTrain, setDisabledTrain] = useState(true);\n  const [displayPublic, setDisplayPublic] = useState(false);\n  const [displayExist, setDisplayExist] = useState(false);\n  const modelRef = useRef(null);\n  const publicInterval = useRef(0);\n  const existInterval = useRef(0);\n  const history = useHistory();\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const workspaces = await usersAPI.get(\"/created?type=workspace\");\n        workspaces.data.data.map(workspace => {\n          setWorkspaces(previous => [...previous, workspace.title]);\n        });\n        setLoaded(true);\n      } catch (err) {}\n    };\n\n    fetchData();\n  }, []);\n\n  const searchFunctionKey = e => {\n    if (e.key === \"Enter\" && datasetID !== \"\") {\n      existingDataset();\n    }\n  };\n\n  const displayPublicInterval = () => {\n    clearInterval(publicInterval.current);\n    setDisplayPublic(true);\n    publicInterval.current = setInterval(() => {\n      setDisplayPublic(false);\n    }, 1200);\n    return () => {\n      clearInterval(publicInterval.current);\n    };\n  };\n\n  const displayExistInterval = () => {\n    clearInterval(existInterval.current);\n    setDisplayExist(true);\n    existInterval.current = setInterval(() => {\n      setDisplayExist(false);\n    }, 1200);\n    return () => {\n      clearInterval(existInterval.current);\n    };\n  };\n\n  const previousPage = () => {\n    if (page > 1) {\n      setStart((page - 2) * 30);\n      setEnd((page - 1) * 30);\n      setPage(state => state - 1);\n      setRefreshData(new Date().getTime());\n    }\n  };\n\n  const nextPage = () => {\n    if (page * 30 < images.length && images.length > 30) {\n      setPage(state => state + 1);\n      setStart(page * 30);\n      setEnd((page + 1) * 30);\n      setRefreshData(new Date().getTime());\n    }\n  };\n\n  const existingDataset = async () => {\n    try {\n      const checkPublic = await itemsAPI.get(`/check-public-dataset?datafile=${datasetID}`);\n\n      if (checkPublic.data.success && checkPublic.data.data.visibility) {\n        fetch(`http://127.0.0.1:5000/files/${datasetID}/labels.json`).then(response => response.json()).then(images => {\n          images.map(image => {\n            setImages(state => [...state, image.filename]);\n            setAssignedLabels(state => [...state, image.label]);\n          });\n          setUploadedDataset(checkPublic.data.data);\n          setModel([{\n            type: \"Input\",\n            value: 1,\n            activation: \"\"\n          }]);\n        });\n      } else if (checkPublic.data.success && !checkPublic.data.data.visibility) {\n        displayPublicInterval();\n      } else {\n        displayExistInterval();\n      }\n    } catch (err) {}\n  };\n\n  const uploadImage = async () => {\n    setDisabledCreate(true);\n\n    if (image) {\n      const formImage = new FormData();\n      formImage.append('image', image);\n\n      try {\n        const imageResponse = await imageAPI.post(\"/upload\", formImage);\n        uploadData(imageResponse.data.data);\n      } catch (err) {}\n    } else {\n      uploadData(\"default.png\");\n    }\n  };\n\n  const uploadData = async imageName => {\n    try {\n      const workspaceResponse = await itemsAPI.post(\"/\", {\n        title: title,\n        dataset: uploadedDataset._id,\n        creator: currentUser.id,\n        description: description,\n        picture: imageName,\n        upvotes: [],\n        bookmarks: [],\n        updated: new Date().toISOString(),\n        visibility: visibility,\n        type: \"workspace\"\n      });\n      history.push(`/workspace/${workspaceResponse.data.data}`);\n    } catch (err) {}\n  };\n\n  const train = async () => {\n    try {\n      // setDisabledTrain(true)\n      setStage(\"train\");\n      const formData = new FormData();\n      formData.append('epochs', configuration.epochs);\n      formData.append('training_split', configuration.training_split);\n      formData.append('validation_split', configuration.validation_split);\n      formData.append('test_split', configuration.test_split);\n      formData.append('improvement', configuration.improvement);\n      formData.append('patience', configuration.patience);\n      formData.append('batch', configuration.batch);\n      formData.append('lr_scheduler', configuration.lr_scheduler);\n      formData.append('optimiser', configuration.optimiser);\n      formData.append('loss', configuration.loss);\n      formData.append('imageFile', uploadedDataset.imageFile);\n      uploadedDataset.labels.map(label => {\n        formData.append('labels[]', label);\n      });\n      model.map(node => {\n        formData.append('activations[]', node.activation);\n        formData.append('units[]', node.value);\n      });\n      const response = await trainAPI.post(\"\", formData);\n\n      if (response) {\n        setResults(response);\n        setStage(\"evaluation\");\n      } else {\n        setDisabledTrain(false);\n      }\n    } catch (err) {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loaded && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"create-item-title\",\n          placeholder: \"Title\",\n          onChange: e => {\n            setTitle(e.target.value);\n          },\n          value: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"create-item-description\",\n          placeholder: \"Description\",\n          onChange: e => {\n            setDescription(e.target.value);\n          },\n          value: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"create-item-setup\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"create-item-setup-label\",\n            children: \"Picture\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"create-item-setup-input\",\n            type: \"file\",\n            name: \"image\",\n            onChange: e => {\n              setImage(e.target.files[0]);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"create-item-setup\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"create-item-setup-label\",\n            children: \"Public?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            onChange: () => {\n              setVisibility(previous => !previous);\n            },\n            checked: visibility\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sidebar-divided\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"create-workspace-import-existing\",\n          placeholder: \"Dataset ID\",\n          onChange: e => {\n            setDatasetID(e.target.value);\n          },\n          onKeyPress: searchFunctionKey,\n          value: datasetID\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 25\n        }, this), displayPublic && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"create-item-data-notification\",\n          children: \"Dataset not public\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 43\n        }, this), displayExist && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"create-item-data-notification\",\n          children: \"Dataset does not exist\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 42\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner\",\n        children: type === \"create\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"view-items-top\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Create Workspace\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"blue-button\",\n              disabled: disableTrain,\n              onClick: () => {\n                uploadImage();\n              },\n              children: \"Train\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 33\n          }, this), model.length !== 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-modelling-body\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"create-model\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-model-diagram\",\n                children: [model.map((node, i) => {\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"create-model-diagram-node\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        onClick: () => {\n                          setSelectedNode(i);\n                        },\n                        children: /*#__PURE__*/_jsxDEV(ModelNode, {\n                          setSelectedNode: setSelectedNode,\n                          type: node.type,\n                          value: node.value,\n                          selected: i === selectedNode,\n                          last: i === model.length - 1\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 253,\n                          columnNumber: 69\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 252,\n                        columnNumber: 65\n                      }, this), node.type !== \"Input\" && /*#__PURE__*/_jsxDEV(\"div\", {\n                        onClick: () => {\n                          {\n                            selectedNode === i ? setSelectedNode(state => state - 1) : selectedNode < i ? setSelectedNode(state => state) : selectedNode > i && /*#__PURE__*/_jsxDEV(_Fragment, {\n                              children: selectedNode - i === 1 ? setSelectedNode(state => state - 1) : setSelectedNode(i)\n                            }, void 0, false);\n                          }\n                          model.splice(i, 1);\n                          setRefreshDiagram(new Date().getTime());\n                        },\n                        children: /*#__PURE__*/_jsxDEV(ClearIcon, {\n                          className: \"create-model-diagram-remove\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 271,\n                          columnNumber: 73\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 256,\n                        columnNumber: 69\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 251,\n                      columnNumber: 61\n                    }, this), i === model.length - 1 && node.type !== \"Output\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                      children: addNode ? /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"create-model-diagram-add\",\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          onClick: () => {\n                            setAddNode(false);\n                          },\n                          children: /*#__PURE__*/_jsxDEV(RemoveIcon, {\n                            className: \"create-model-diagram-add-icon\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 280,\n                            columnNumber: 81\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 279,\n                          columnNumber: 77\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"create-model-diagram-add-options\",\n                          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                            onClick: () => {\n                              setModel(state => [...state, {\n                                type: \"Dense\",\n                                value: 0,\n                                activation: \"\"\n                              }]);\n                              setSelectedNode(model.length);\n                              setAddNode(false);\n                            },\n                            children: \"Dense\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 283,\n                            columnNumber: 81\n                          }, this), model.length > 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n                            onClick: () => {\n                              {\n                                uploadedDataset.labels.length === 2 ? setModel(state => [...state, {\n                                  type: \"Output\",\n                                  value: 1,\n                                  activation: \"\"\n                                }]) : setModel(state => [...state, {\n                                  type: \"Output\",\n                                  value: uploadedDataset.labels.length,\n                                  activation: \"\"\n                                }]);\n                              }\n                              setSelectedNode(model.length);\n                              setAddNode(false);\n                            },\n                            children: \"Output\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 292,\n                            columnNumber: 85\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 282,\n                          columnNumber: 77\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 278,\n                        columnNumber: 73\n                      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                        onClick: () => {\n                          setAddNode(true);\n                        },\n                        children: /*#__PURE__*/_jsxDEV(AddIcon, {\n                          className: \"create-model-diagram-add-icon\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 314,\n                          columnNumber: 77\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 313,\n                        columnNumber: 73\n                      }, this)\n                    }, void 0, false)]\n                  }, i, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 250,\n                    columnNumber: 57\n                  }, this);\n                }), /*#__PURE__*/_jsxDEV(\"div\", {\n                  ref: modelRef\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 322,\n                  columnNumber: 49\n                }, this)]\n              }, refreshDiagram, true, {\n                fileName: _jsxFileName,\n                lineNumber: 247,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-model-selected\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: model[selectedNode].type\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 327,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Units\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 328,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  value: model[selectedNode].value,\n                  disabled: model[selectedNode].type === \"Input\" || model[selectedNode].type === \"Output\",\n                  onChange: e => {\n                    setModel(state => {\n                      const stateCopy = [...state];\n                      stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                        value: Number(e.target.value)\n                      };\n                      return stateCopy;\n                    });\n                    setRefreshDiagram(new Date().getTime());\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 329,\n                  columnNumber: 49\n                }, this), model[selectedNode].type !== \"Input\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Activation\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 344,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                    value: model[selectedNode].activation,\n                    onChange: e => {\n                      setModel(state => {\n                        const stateCopy = [...state];\n                        stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                          activation: e.target.value\n                        };\n                        return stateCopy;\n                      });\n                      setRefreshDiagram(new Date().getTime());\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      disabled: true,\n                      defaultValue: true,\n                      value: \"\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 357,\n                      columnNumber: 65\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"sigmoid\",\n                      children: \"Sigmoid\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 358,\n                      columnNumber: 65\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"softmax\",\n                      children: \"Softmax\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 359,\n                      columnNumber: 65\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"softplus\",\n                      children: \"Softplus\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 360,\n                      columnNumber: 65\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"softsign\",\n                      children: \"Softsign\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 361,\n                      columnNumber: 65\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"swish\",\n                      children: \"Swish\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 362,\n                      columnNumber: 65\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"selu\",\n                      children: \"Selu\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 363,\n                      columnNumber: 65\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"tanh\",\n                      children: \"Tanh\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 364,\n                      columnNumber: 65\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"elu\",\n                      children: \"Elu\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 365,\n                      columnNumber: 65\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"exponential\",\n                      children: \"Exponential\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 366,\n                      columnNumber: 65\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"gelu\",\n                      children: \"Gelu\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 367,\n                      columnNumber: 65\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"hard_sigmoid\",\n                      children: \"Hard Sigmoid\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 368,\n                      columnNumber: 65\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"linear\",\n                      children: \"Linear\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 369,\n                      columnNumber: 65\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"relu\",\n                      children: \"Relu\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 370,\n                      columnNumber: 65\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 345,\n                    columnNumber: 57\n                  }, this)]\n                }, void 0, true)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 326,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-model-configuration\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"create-model-configuration-option\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Epochs\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 378,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: configuration.epochs,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          epochs: e.target.value\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 379,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 377,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Training Split\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 385,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: configuration.training_split,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          training_split: e.target.value\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 386,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 384,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Validation Split\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 392,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: configuration.validation_split,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          validation_split: e.target.value\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 393,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 391,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Test Split\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 399,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: configuration.test_split,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          test_split: e.target.value\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 400,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 398,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Minimum Improvement\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 406,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: configuration.improvement,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          improvement: e.target.value\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 407,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 405,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Patience\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 413,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: configuration.patience,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          patience: e.target.value\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 414,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 412,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Batch Size\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 420,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: configuration.batch,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          batch: e.target.value\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 421,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 419,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Learning Rate Scheduler\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 427,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      className: \"create-model-configuration-option-checkbox\",\n                      type: \"checkbox\",\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          lr_scheduler: !configuration.lr_scheduler\n                        }));\n                      },\n                      checked: configuration.lr_scheduler\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 428,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 426,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Optimiser\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 437,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      value: configuration.optimiser,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          optimiser: e.target.value\n                        }));\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        disabled: true,\n                        defaultValue: true,\n                        value: \"\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 442,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"Adadelta\",\n                        children: \"Adadelta\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 443,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"Adagrad\",\n                        children: \"Adagrad\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 444,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"Adam\",\n                        children: \"Adam\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 445,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"Adamax\",\n                        children: \"Adamax\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 446,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"Ftrl\",\n                        children: \"Ftrl\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 447,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"Nadam\",\n                        children: \"Nadam\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 448,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"RMSprop\",\n                        children: \"RMSprop\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 449,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"SGD\",\n                        children: \"SGD\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 450,\n                        columnNumber: 61\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 438,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 436,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Loss\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 454,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      value: configuration.loss,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          loss: e.target.value\n                        }));\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        disabled: true,\n                        defaultValue: true,\n                        value: \"\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 459,\n                        columnNumber: 61\n                      }, this), uploadedDataset.labels.length === 2 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                          value: \"binary_crossentropy\",\n                          children: \"Binary Crossentropy\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 462,\n                          columnNumber: 69\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          value: \"hinge\",\n                          children: \"Hinge\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 463,\n                          columnNumber: 69\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          value: \"squared_hinge\",\n                          children: \"Squared Hinge\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 464,\n                          columnNumber: 69\n                        }, this)]\n                      }, void 0, true), uploadedDataset.labels.length > 2 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                          value: \"categorical_crossentropy\",\n                          children: \"Categorical Crossentropy\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 469,\n                          columnNumber: 69\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          value: \"sparse_categorical_crossentropy\",\n                          children: \"Sparse Categorical Crossentropy\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 470,\n                          columnNumber: 69\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          value: \"kl_divergence\",\n                          children: \"Kullback Leibler Divergence\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 471,\n                          columnNumber: 69\n                        }, this)]\n                      }, void 0, true)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 455,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 453,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 376,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 375,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 37\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"end-items\",\n            children: \"Upload a dataset...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(Workspace, \"k1Pv+NJnPlbBLR3B2R38SiWPG9o=\", false, function () {\n  return [useHistory];\n});\n\n_c = Workspace;\nexport default Workspace;\n\nvar _c;\n\n$RefreshReg$(_c, \"Workspace\");","map":{"version":3,"sources":["/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Workspace.jsx"],"names":["React","useState","useEffect","useRef","useHistory","usersAPI","itemsAPI","imageAPI","trainAPI","ArrowForwardIosIcon","ArrowBackIosNewIcon","ModelNode","ClearIcon","AddIcon","RemoveIcon","Workspace","currentUser","type","stage","setStage","title","setTitle","description","setDescription","visibility","setVisibility","start","setStart","end","setEnd","page","setPage","image","setImage","datasetID","setDatasetID","uploadedDataset","setUploadedDataset","workspaces","setWorkspaces","images","setImages","assignedLabels","setAssignedLabels","refreshData","setRefreshData","refreshDiagram","setRefreshDiagram","model","setModel","selectedNode","setSelectedNode","configuration","setConfiguration","epochs","training_split","validation_split","test_split","improvement","patience","batch","lr_scheduler","optimiser","loss","addNode","setAddNode","results","setResults","loaded","setLoaded","disableCreate","setDisabledCreate","disableTrain","setDisabledTrain","displayPublic","setDisplayPublic","displayExist","setDisplayExist","modelRef","publicInterval","existInterval","history","fetchData","get","data","map","workspace","previous","err","searchFunctionKey","e","key","existingDataset","displayPublicInterval","clearInterval","current","setInterval","displayExistInterval","previousPage","state","Date","getTime","nextPage","length","checkPublic","success","fetch","then","response","json","filename","label","value","activation","uploadImage","formImage","FormData","append","imageResponse","post","uploadData","imageName","workspaceResponse","dataset","_id","creator","id","picture","upvotes","bookmarks","updated","toISOString","push","train","formData","imageFile","labels","node","target","files","i","splice","stateCopy","Number"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\nimport {useHistory} from \"react-router-dom\"\nimport usersAPI from '../API/users'\nimport itemsAPI from '../API/items'\nimport imageAPI from '../API/images'\nimport trainAPI from '../API/train'\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport ModelNode from '../Components/Model-Node';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\n\nconst Workspace = ({currentUser, type}) => {\n    const [stage, setStage] = useState(\"model\");\n    const [title, setTitle] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [visibility, setVisibility] = useState(false);\n    const [start, setStart] = useState(0)\n    const [end, setEnd] = useState(30)\n    const [page, setPage] = useState(1)\n    const [image, setImage] = useState();\n    const [datasetID, setDatasetID] = useState(\"\")\n    const [uploadedDataset, setUploadedDataset] = useState()\n    const [workspaces, setWorkspaces] = useState([]);\n    const [images, setImages] = useState([])\n    const [assignedLabels, setAssignedLabels] = useState([])\n    const [refreshData, setRefreshData] = useState()\n    const [refreshDiagram, setRefreshDiagram] = useState()\n    const [model, setModel] = useState([])\n    const [selectedNode, setSelectedNode] = useState(0)\n    const [configuration, setConfiguration] = useState({epochs: \"\", training_split: \"\", validation_split: \"\", test_split: \"\", improvement: \"\",\n                                                        patience: \"\", batch: \"\", lr_scheduler: false, optimiser: \"\", loss: \"\"})\n    const [addNode, setAddNode] = useState(false)\n    const [results, setResults] = useState()\n    const [loaded, setLoaded] = useState(false);\n    const [disableCreate, setDisabledCreate] = useState(false)\n    const [disableTrain, setDisabledTrain] = useState(true)\n    const [displayPublic, setDisplayPublic] = useState(false)\n    const [displayExist, setDisplayExist] = useState(false)\n    const modelRef = useRef(null)\n    const publicInterval = useRef(0)\n    const existInterval = useRef(0)\n    const history = useHistory();\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const workspaces = await usersAPI.get(\"/created?type=workspace\");\n\n                workspaces.data.data.map((workspace) => {\n                    setWorkspaces(previous => [...previous, workspace.title]);\n                })\n                setLoaded(true);\n            } catch (err) {}\n        }\n        fetchData();\n    }, [])\n\n    const searchFunctionKey = (e) => {\n        if (e.key === \"Enter\" && datasetID !== \"\") {\n            existingDataset()\n        }\n    }\n\n    const displayPublicInterval = () => {\n        clearInterval(publicInterval.current)\n        setDisplayPublic(true);\n        publicInterval.current = setInterval(() => {\n            setDisplayPublic(false);\n        }, 1200)\n        return ()=> {clearInterval(publicInterval.current)};\n    }\n\n    const displayExistInterval = () => {\n        clearInterval(existInterval.current)\n        setDisplayExist(true);\n        existInterval.current = setInterval(() => {\n            setDisplayExist(false);\n        }, 1200)\n        return ()=> {clearInterval(existInterval.current)};\n    }\n\n    const previousPage = () => {\n        if (page > 1) {\n            setStart((page-2)*30)\n            setEnd((page-1)*30)\n            setPage(state => state-1)\n            setRefreshData(new Date().getTime())\n        }\n    }\n    \n    const nextPage = () => {\n        if (page*30 < images.length && images.length > 30) {\n            setPage(state => state+1)\n            setStart((page)*30)\n            setEnd((page+1)*30)\n            setRefreshData(new Date().getTime())\n        }\n    }\n\n    const existingDataset = async () => {\n        try {\n            const checkPublic = await itemsAPI.get(`/check-public-dataset?datafile=${datasetID}`)\n    \n            if (checkPublic.data.success && checkPublic.data.data.visibility) {\n                fetch(`http://127.0.0.1:5000/files/${datasetID}/labels.json`)\n                        .then(response => response.json())\n                        .then(images => {\n                            images.map(image => {\n                                setImages(state => [...state, image.filename])\n                                setAssignedLabels(state => [...state, image.label])\n                            })\n                            setUploadedDataset(checkPublic.data.data)\n                            setModel([{type: \"Input\", value: 1, activation: \"\"}])\n                        })\n            } else if (checkPublic.data.success && !checkPublic.data.data.visibility) {\n                displayPublicInterval()\n            } else {\n                displayExistInterval()\n            }\n        } catch (err) {}\n    }\n\n    const uploadImage = async () => {\n        setDisabledCreate(true)\n\n        if (image) {\n            const formImage = new FormData();\n            formImage.append('image', image);\n\n            try {\n                const imageResponse = await imageAPI.post(\"/upload\", formImage);\n\n                uploadData(imageResponse.data.data)\n            } catch (err) {}\n        } else {\n            uploadData(\"default.png\")\n        }\n    }\n\n    const uploadData = async (imageName) => {\n        try {\n            const workspaceResponse = await itemsAPI.post(\"/\", {\n                title: title,\n                dataset: uploadedDataset._id,\n                creator: currentUser.id,\n                description: description,\n                picture: imageName,\n                upvotes: [],\n                bookmarks: [],\n                updated: new Date().toISOString(),\n                visibility: visibility,\n                type: \"workspace\"\n            });\n\n            history.push(`/workspace/${workspaceResponse.data.data}`)\n        } catch (err) {}\n    }\n\n    const train = async () => {\n        try {\n            // setDisabledTrain(true)\n            setStage(\"train\")\n    \n            const formData = new FormData();\n        \n            formData.append('epochs', configuration.epochs)\n            formData.append('training_split', configuration.training_split)\n            formData.append('validation_split', configuration.validation_split)\n            formData.append('test_split', configuration.test_split)\n            formData.append('improvement', configuration.improvement)\n            formData.append('patience', configuration.patience)\n            formData.append('batch', configuration.batch)\n            formData.append('lr_scheduler', configuration.lr_scheduler)\n            formData.append('optimiser', configuration.optimiser)\n            formData.append('loss', configuration.loss)\n            formData.append('imageFile', uploadedDataset.imageFile)\n\n            uploadedDataset.labels.map(label => {\n                formData.append('labels[]', label)\n            })\n            model.map(node => {\n                formData.append('activations[]', node.activation)\n                formData.append('units[]', node.value)\n            })\n\n            const response = await trainAPI.post(\"\", formData);\n\n            if (response) {\n                setResults(response)\n                setStage(\"evaluation\")\n            } else {\n                setDisabledTrain(false)\n            }\n        } catch (err) {}\n    }\n\n    return (\n        <>\n            {loaded &&\n                <div className=\"main-body\">\n                    <div className=\"sidebar\">\n                        <input className=\"create-item-title\"\n                                placeholder=\"Title\"\n                                onChange={e => {setTitle(e.target.value)}}\n                                value={title} />\n                        <textarea className=\"create-item-description\"\n                                    placeholder=\"Description\"\n                                    onChange={e => {setDescription(e.target.value)}}\n                                    value={description} />\n                        <div className=\"create-item-setup\">\n                            <label className=\"create-item-setup-label\">Picture</label>\n                            <input className=\"create-item-setup-input\"\n                                    type=\"file\" \n                                    name=\"image\" \n                                    onChange={e => {setImage(e.target.files[0])}} />\n                        </div>\n                        <div className=\"create-item-setup\">\n                            <label className=\"create-item-setup-label\">Public?</label>\n                            <input type=\"checkbox\" \n                                    onChange={() => {setVisibility(previous => !previous)}}\n                                    checked={visibility} />\n                        </div>\n                        <div className=\"sidebar-divided\" />\n                        <input className=\"create-workspace-import-existing\"\n                                placeholder=\"Dataset ID\"\n                                onChange={e => {setDatasetID(e.target.value)}}\n                                onKeyPress={searchFunctionKey}\n                                value={datasetID} />\n                        {displayPublic && <p className=\"create-item-data-notification\">Dataset not public</p>}\n                        {displayExist && <p className=\"create-item-data-notification\">Dataset does not exist</p>}\n                    </div>\n                    <div className=\"inner\">\n                        {type === \"create\" &&\n                            <>\n                                <div className=\"view-items-top\">\n                                    <h1>Create Workspace</h1>\n                                    <span />\n                                    <button className=\"blue-button\"\n                                            disabled={disableTrain}\n                                            onClick={() => {uploadImage()}}>Train</button>\n                                </div>\n                                {model.length !== 0 ?\n                                    <div className=\"create-modelling-body\">\n                                        <div className=\"create-model\">\n                                            <div className=\"create-model-diagram\" key={refreshDiagram}>\n                                                {model.map((node, i) => {\n                                                    return (\n                                                        <div key={i}>\n                                                            <div className={\"create-model-diagram-node\"}>\n                                                                <div onClick={() => {setSelectedNode(i)}}>\n                                                                    <ModelNode setSelectedNode={setSelectedNode} type={node.type} value={node.value} selected={i === selectedNode} last={i === model.length-1} />\n                                                                </div>\n                                                                {node.type !== \"Input\" &&\n                                                                    <div onClick={() => {{selectedNode === i ?\n                                                                                            setSelectedNode(state => state-1)\n                                                                                        : selectedNode < i ?\n                                                                                            setSelectedNode(state => state)\n                                                                                        : selectedNode > i &&\n                                                                                            <>\n                                                                                                {selectedNode-i === 1 ?\n                                                                                                    setSelectedNode(state => state-1)\n                                                                                                :\n                                                                                                    setSelectedNode(i)\n                                                                                                } \n                                                                                            </>  \n                                                                                        }\n                                                                                        model.splice(i, 1)\n                                                                                        setRefreshDiagram(new Date().getTime())}}>\n                                                                        <ClearIcon className=\"create-model-diagram-remove\" />\n                                                                    </div>\n                                                                }\n                                                            </div>\n                                                            {i === model.length-1 && node.type !== \"Output\" &&\n                                                                <>\n                                                                    {addNode ?\n                                                                        <div className=\"create-model-diagram-add\">\n                                                                            <div onClick={() => {setAddNode(false)}}>\n                                                                                <RemoveIcon className=\"create-model-diagram-add-icon\" />\n                                                                            </div>\n                                                                            <div className=\"create-model-diagram-add-options\">\n                                                                                <button onClick={() => {setModel(state => [...state, {\n                                                                                    type: \"Dense\",\n                                                                                    value: 0,\n                                                                                    activation: \"\"\n                                                                                }])\n                                                                                setSelectedNode(model.length)\n                                                                                setAddNode(false)\n                                                                                }}>Dense</button>\n                                                                                {model.length > 1 &&\n                                                                                    <button onClick={() => {\n                                                                                        {uploadedDataset.labels.length === 2 ?\n                                                                                            setModel(state => [...state, {\n                                                                                                type: \"Output\",\n                                                                                                value: 1,\n                                                                                                activation: \"\"\n                                                                                            }])\n                                                                                        :\n                                                                                            setModel(state => [...state, {\n                                                                                                type: \"Output\",\n                                                                                                value: uploadedDataset.labels.length,\n                                                                                                activation: \"\"\n                                                                                            }])\n                                                                                        }\n                                                                                    setSelectedNode(model.length)\n                                                                                    setAddNode(false)\n                                                                                    }}>Output</button>\n                                                                                }\n                                                                            </div>\n                                                                        </div>\n                                                                    :\n                                                                        <div onClick={() => {setAddNode(true)}}>\n                                                                            <AddIcon className=\"create-model-diagram-add-icon\" />\n                                                                        </div>\n                                                                    }\n                                                                </>\n                                                            }\n                                                        </div>\n                                                    )\n                                                })}\n                                                <div ref={modelRef} />\n                                            </div>\n                                        </div>\n                                        <div>\n                                            <div className=\"create-model-selected\">\n                                                <p>{model[selectedNode].type}</p>\n                                                <label>Units</label>\n                                                <input value={model[selectedNode].value} \n                                                        disabled={model[selectedNode].type === \"Input\" || model[selectedNode].type === \"Output\"}\n                                                        onChange={e => {setModel(state => {\n                                                                            const stateCopy = [...state]\n                                                                        \n                                                                            stateCopy[selectedNode] = {\n                                                                                ...stateCopy[selectedNode],\n                                                                                value: Number(e.target.value)\n                                                                            }\n                                                                        \n                                                                            return stateCopy\n                                                                        })\n                                                                        setRefreshDiagram(new Date().getTime())}} />\n                                                {model[selectedNode].type !== \"Input\" &&\n                                                    <>\n                                                        <label>Activation</label>\n                                                        <select value={model[selectedNode].activation} \n                                                                onChange={e => {setModel(state => {\n                                                                                    const stateCopy = [...state]\n                                                                                \n                                                                                    stateCopy[selectedNode] = {\n                                                                                        ...stateCopy[selectedNode],\n                                                                                        activation: e.target.value\n                                                                                    }\n                                                                                \n                                                                                    return stateCopy\n                                                                                })\n                                                                                setRefreshDiagram(new Date().getTime())}}>\n                                                                <option disabled defaultValue value=\"\"></option>\n                                                                <option value=\"sigmoid\">Sigmoid</option>\n                                                                <option value=\"softmax\">Softmax</option>\n                                                                <option value=\"softplus\">Softplus</option>\n                                                                <option value=\"softsign\">Softsign</option>\n                                                                <option value=\"swish\">Swish</option>\n                                                                <option value=\"selu\">Selu</option>\n                                                                <option value=\"tanh\">Tanh</option>\n                                                                <option value=\"elu\">Elu</option>\n                                                                <option value=\"exponential\">Exponential</option>\n                                                                <option value=\"gelu\">Gelu</option>\n                                                                <option value=\"hard_sigmoid\">Hard Sigmoid</option>\n                                                                <option value=\"linear\">Linear</option>\n                                                                <option value=\"relu\">Relu</option>\n                                                        </select>\n                                                    </>\n                                                }  \n                                            </div>\n                                            <div className=\"create-model-configuration\">\n                                                <div className=\"create-model-configuration-option\">\n                                                    <div>\n                                                        <label>Epochs</label>\n                                                        <input value={configuration.epochs} onChange={e => {setConfiguration(state => ({\n                                                                                                                ...state,\n                                                                                                                epochs: e.target.value\n                                                                                                            }))}} />\n                                                    </div>\n                                                    <div>\n                                                        <label>Training Split</label>\n                                                        <input value={configuration.training_split} onChange={e => {setConfiguration(state => ({\n                                                                                                                ...state,\n                                                                                                                training_split: e.target.value\n                                                                                                            }))}} />\n                                                    </div>\n                                                    <div>\n                                                        <label>Validation Split</label>\n                                                        <input value={configuration.validation_split} onChange={e => {setConfiguration(state => ({\n                                                                                                                ...state,\n                                                                                                                validation_split: e.target.value\n                                                                                                            }))}} />\n                                                    </div>\n                                                    <div>\n                                                        <label>Test Split</label>\n                                                        <input value={configuration.test_split} onChange={e => {setConfiguration(state => ({\n                                                                                                                ...state,\n                                                                                                                test_split: e.target.value\n                                                                                                            }))}} />\n                                                    </div>\n                                                    <div>\n                                                        <label>Minimum Improvement</label>\n                                                        <input value={configuration.improvement} onChange={e => {setConfiguration(state => ({\n                                                                                                                ...state,\n                                                                                                                improvement: e.target.value\n                                                                                                            }))}} />\n                                                    </div>\n                                                    <div>\n                                                        <label>Patience</label>\n                                                        <input value={configuration.patience} onChange={e => {setConfiguration(state => ({\n                                                                                                                ...state,\n                                                                                                                patience: e.target.value\n                                                                                                            }))}} />\n                                                    </div>\n                                                    <div>\n                                                        <label>Batch Size</label>\n                                                        <input value={configuration.batch} onChange={e => {setConfiguration(state => ({\n                                                                                                                ...state,\n                                                                                                                batch: e.target.value\n                                                                                                            }))}} />\n                                                    </div>\n                                                    <div>\n                                                        <label>Learning Rate Scheduler</label>\n                                                        <input className=\"create-model-configuration-option-checkbox\"\n                                                                type=\"checkbox\" \n                                                                onChange={e => {setConfiguration(state => ({\n                                                                    ...state,\n                                                                    lr_scheduler: !configuration.lr_scheduler\n                                                                }))}}\n                                                                checked={configuration.lr_scheduler} />\n                                                    </div>\n                                                    <div>\n                                                        <label>Optimiser</label>\n                                                        <select value={configuration.optimiser} onChange={e => {setConfiguration(state => ({\n                                                                                                                ...state,\n                                                                                                                optimiser: e.target.value\n                                                                                                            }))}}>\n                                                            <option disabled defaultValue value=\"\"></option>\n                                                            <option value=\"Adadelta\">Adadelta</option>\n                                                            <option value=\"Adagrad\">Adagrad</option>\n                                                            <option value=\"Adam\">Adam</option>\n                                                            <option value=\"Adamax\">Adamax</option>\n                                                            <option value=\"Ftrl\">Ftrl</option>\n                                                            <option value=\"Nadam\">Nadam</option>\n                                                            <option value=\"RMSprop\">RMSprop</option>\n                                                            <option value=\"SGD\">SGD</option>\n                                                        </select>\n                                                    </div>\n                                                    <div>\n                                                        <label>Loss</label>\n                                                        <select value={configuration.loss} onChange={e => {setConfiguration(state => ({\n                                                                                                                ...state,\n                                                                                                                loss: e.target.value\n                                                                                                            }))}}>\n                                                            <option disabled defaultValue value=\"\"></option>\n                                                            {uploadedDataset.labels.length === 2 &&\n                                                                <>\n                                                                    <option value=\"binary_crossentropy\">Binary Crossentropy</option>\n                                                                    <option value=\"hinge\">Hinge</option>\n                                                                    <option value=\"squared_hinge\">Squared Hinge</option>\n                                                                </>\n                                                            }\n                                                            {uploadedDataset.labels.length > 2 &&\n                                                                <>\n                                                                    <option value=\"categorical_crossentropy\">Categorical Crossentropy</option>\n                                                                    <option value=\"sparse_categorical_crossentropy\">Sparse Categorical Crossentropy</option>\n                                                                    <option value=\"kl_divergence\">Kullback Leibler Divergence</option>\n                                                                </>\n                                                            }\n                                                        </select>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                :\n                                    <p className=\"end-items\">Upload a dataset...</p>\n                                }\n                            </>\n                        }\n                    </div>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default Workspace"]},"metadata":{},"sourceType":"module"}