{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Dataset.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useContext } from 'react';\nimport { useHistory, useParams } from \"react-router-dom\";\nimport usersAPI from '../API/users';\nimport itemsAPI from '../API/items';\nimport globalAPI from '../API/global';\nimport imageAPI from '../API/images';\nimport fileAPI from '../API/files';\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport { MessageContext } from '../Contexts/messageContext';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport CloseIcon from '@mui/icons-material/Close';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport Shortcut from '../Components/Shortcut';\nimport MessageCard from '../Components/MessageCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Dataset = _ref => {\n  _s();\n\n  let {\n    currentUser,\n    type\n  } = _ref;\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [visibility, setVisibility] = useState(false);\n  const [rgb, setRgb] = useState(false);\n  const [bookmarked, setBookmarked] = useState();\n  const [upvoted, setUpvoted] = useState();\n  const [upvotes, setUpvotes] = useState();\n  const [updated, setUpdated] = useState();\n  const [appendMode, setAppendMode] = useState(true);\n  const [picture, setPicture] = useState();\n  const [width, setWidth] = useState();\n  const [height, setHeight] = useState();\n  const [date, setDate] = useState(\"\");\n  const [start, setStart] = useState(0);\n  const [end, setEnd] = useState(30);\n  const [page, setPage] = useState(1);\n  const [image, setImage] = useState();\n  const [dataset, setDataset] = useState([]);\n  const [labels, setLabels] = useState([]);\n  const [newLabels, setNewLabels] = useState([]);\n  const [copyData, setCopyData] = useState(true);\n  const [changedSettings, setChangedSettings] = useState(false);\n  const [changedData, setChangedData] = useState(false);\n  const [uploadedImages, setUploadedImages] = useState([]);\n  const [newImages, setNewImages] = useState([]);\n  const [imageFiles, setImageFiles] = useState([]);\n  const [assignedLabels, setAssignedLabels] = useState([]);\n  const [refreshData, setRefreshData] = useState();\n  const [refreshLabels, setRefreshLabels] = useState();\n  const [loaded, setLoaded] = useState(false);\n  const [exist, setExist] = useState();\n  const [addLabel, setAddLabel] = useState(\"\");\n  const [disabledCreate, setDisabledCreate] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const {\n    addOpenItems,\n    removeOpenItems\n  } = useContext(OpenItemsContext);\n  const {\n    displayMessage,\n    displayMessageInterval\n  } = useContext(MessageContext);\n  const colours = [\"label-blue1\", \"label-red\", \"label-green1\", \"label-orange1\", \"label-pink\", \"label-orange2\", \"label-blue2\", \"label-yellow1\", \"label-green2\", \"label-yellow2\"];\n  const datasetID = useParams().id;\n  const copyInterval = useRef(0);\n  const firstRender = useRef(true);\n  const history = useHistory();\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (type === \"create\") {\n          const dataset = await usersAPI.get(\"/created?type=dataset\");\n          dataset.data.data.map(dataset => {\n            setDataset(previous => [...previous, dataset.title]);\n          });\n          setExist(true);\n          setLoaded(true);\n        } else {\n          const dataset = await itemsAPI.get(`/${datasetID}?type=dataset`);\n\n          if (dataset.data.data.self) {\n            addOpenItems(dataset.data.data._id, dataset.data.data.title, dataset.data.data.type);\n          }\n\n          setDataset(dataset.data.data);\n          setUpdated(dataset.data.data.updated);\n          setBookmarked(dataset.data.data.bookmarked);\n          setUpvoted(dataset.data.data.upvoted);\n          setPicture(dataset.data.data.picture);\n          setUpvotes(dataset.data.data.upvotes);\n          setVisibility(dataset.data.data.visibility);\n          setTitle(dataset.data.data.title);\n          setDescription(dataset.data.data.description);\n          setLabels(dataset.data.data.labels);\n          setRgb(dataset.data.data.rgb);\n          setHeight(dataset.data.data.height);\n          setWidth(dataset.data.data.width);\n          fetch(`http://127.0.0.1:5000/datasets/${dataset.data.data.imageDir}/labels.json`).then(response => response.json()).then(images => {\n            images.map(image => {\n              setUploadedImages(state => [...state, image.filename]);\n              setAssignedLabels(state => [...state, image.label]);\n            });\n            setExist(true);\n            setLoaded(true);\n          }).catch(() => {\n            setExist(true);\n            setLoaded(true);\n          });\n        }\n      } catch (err) {\n        setExist(false);\n        setLoaded(true);\n      }\n    };\n\n    fetchData();\n  }, []);\n  useEffect(() => {\n    if (loaded && exist) {\n      const updatedDate = new Date(updated);\n      const currentDate = new Date();\n\n      if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365).toString()} years ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n        setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24)).toString()} days ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600)).toString()} hours ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60)).toString()} minutes ago`);\n      } else {\n        setDate(\"Updated just now\");\n      }\n    }\n  }, [loaded, updated]);\n  useEffect(() => {\n    if (!firstRender.current && loaded && type !== \"create\") {\n      updateDataset();\n    } else {\n      firstRender.current = false;\n    }\n  }, [labels]);\n\n  const copiedInterval = () => {\n    clearInterval(copyInterval.current);\n    navigator.clipboard.writeText(dataset.datafile);\n    setCopyData(false);\n    copyInterval.current = setInterval(() => {\n      setCopyData(true);\n    }, 800);\n    return () => {\n      clearInterval(copyInterval.current);\n    };\n  };\n\n  const addLabelKey = async e => {\n    if (e.key === \"Enter\" && addLabel !== \"\" && !labels.includes(addLabel)) {\n      setLabels(state => [...state, addLabel]);\n      setChangedSettings(true);\n      setAddLabel(\"\");\n\n      if (type !== \"create\") {\n        const formData = new FormData();\n        formData.append('id', dataset.imageDir);\n        formData.append('datasetID', datasetID);\n        formData.append('label', addLabel);\n        await fileAPI.post(\"/add-label\", formData);\n      }\n    }\n  };\n\n  const deleteLabel = async index => {\n    try {\n      assignedLabels.map((assignedLabel, j) => {\n        if (assignedLabel === labels[index]) {\n          setAssignedLabels(state => {\n            const stateCopy = [...state];\n            stateCopy[j] = \"No label\";\n            return stateCopy;\n          });\n        }\n      });\n      const formData = new FormData();\n      formData.append('id', dataset.imageDir);\n      formData.append('datasetID', datasetID);\n      formData.append('label', labels[index]);\n      labels.splice(index, 1);\n      await fileAPI.post(\"/delete-label\", formData).then(() => {\n        updateDataset();\n      });\n      setRefreshLabels(new Date().getTime());\n      setRefreshData(new Date().getTime());\n    } catch (err) {\n      setMessage(\"Error occurred\");\n      displayMessageInterval();\n    }\n  };\n\n  const updateLabel = async (e, index) => {\n    setAssignedLabels(state => {\n      const stateCopy = [...state];\n      stateCopy[index] = e.target.value;\n      return stateCopy;\n    });\n\n    if (type !== \"create\") {\n      try {\n        const formData = new FormData();\n        formData.append('id', dataset.imageDir);\n        formData.append('datasetID', datasetID);\n        formData.append('filename', uploadedImages[index]);\n        formData.append('oldLabel', assignedLabels[index]);\n        formData.append('newLabel', e.target.value);\n        formData.append('index', index);\n        await fileAPI.post(\"/update-image\", formData);\n        setChangedData(true);\n        setRefreshLabels(new Date().getTime());\n      } catch (err) {\n        setMessage(\"Error occurred\");\n        displayMessageInterval();\n      }\n    }\n  };\n\n  const updateUpvote = async () => {\n    try {\n      await globalAPI.put(`/upvote/${datasetID}?state=${upvoted}`);\n\n      if (upvoted) {\n        setUpvotes(state => state - 1);\n      } else {\n        setUpvotes(state => state + 1);\n      }\n\n      setUpvoted(state => !state);\n    } catch (err) {\n      setMessage(\"Error occurred\");\n      displayMessageInterval();\n    }\n  };\n\n  const updateBookmark = async () => {\n    try {\n      await globalAPI.put(`/bookmark/${datasetID}?state=${bookmarked}`);\n      setBookmarked(state => !state);\n    } catch (err) {\n      setMessage(\"Error occurred\");\n      displayMessageInterval();\n    }\n  };\n\n  const updateVisibility = async () => {\n    try {\n      await globalAPI.put(`/visibility/${datasetID}`);\n      setVisibility(state => !state);\n    } catch (err) {\n      setMessage(\"Error occurred\");\n      displayMessageInterval();\n    }\n  };\n\n  const previousPage = () => {\n    if (page > 1) {\n      setStart((page - 2) * 30);\n      setEnd((page - 1) * 30);\n      setPage(state => state - 1);\n      setRefreshData(new Date().getTime());\n    }\n  };\n\n  const nextPage = () => {\n    if (page * 30 < uploadedImages.length && uploadedImages.length > 30) {\n      setPage(state => state + 1);\n      setStart(page * 30);\n      setEnd((page + 1) * 30);\n      setRefreshData(new Date().getTime());\n    }\n  };\n\n  const deleteImage = async (filename, index, label) => {\n    uploadedImages.splice(index, 1);\n    assignedLabels.splice(index, 1);\n\n    if (type === \"view\") {\n      const formData = new FormData();\n      formData.append('id', dataset.imageDir);\n      formData.append('datasetID', datasetID);\n      formData.append('index', index);\n      formData.append('label', label);\n      formData.append('filename', filename);\n      updateDataset();\n\n      try {\n        await fileAPI.post(\"/delete-image\", formData);\n        setMessage(\"Image deleted\");\n        displayMessageInterval();\n      } catch (err) {\n        setMessage(\"Error occurred\");\n        displayMessageInterval();\n      }\n    }\n\n    setRefreshData(new Date().getTime());\n  };\n\n  const addImages = async () => {\n    for (let i = 0; i < imageFiles.length; i++) {\n      setUploadedImages(state => [...state, imageFiles[i]]);\n    }\n\n    setAssignedLabels(Array(imageFiles.length).fill(\"No label\"));\n    setPage(1);\n    setRefreshData(new Date().getTime());\n    setImageFiles([]);\n  };\n\n  const replaceImages = () => {\n    if (type === \"create\") {\n      for (let i = 0; i < imageFiles.length; i++) {\n        setUploadedImages(state => [...state, imageFiles[i]]);\n      }\n\n      setAssignedLabels(Array(imageFiles.length).fill(\"No label\"));\n    } else {\n      for (let i = 0; i < imageFiles.length; i++) {\n        setNewImages(state => [...state, imageFiles[i]]);\n      }\n\n      setNewLabels(Array(imageFiles.length).fill(\"No label\"));\n      setImageFiles([]);\n    }\n  };\n\n  const uploadReplaced = async () => {\n    const formData = new FormData();\n    formData.append('id', dataset.imageDir);\n    formData.append('datasetID', datasetID);\n\n    for (let i = 0; i < newImages.length; i++) {\n      formData.append('data[]', newImages[i]);\n      formData.append('labels[]', newLabels[i]);\n    }\n\n    updateDataset();\n\n    try {\n      await fileAPI.post(\"/replace-image\", formData);\n\n      for (let i = 0; i < newImages.length; i++) {\n        setUploadedImages(state => [...state, i]);\n      }\n\n      setMessage(\"Images replaced\");\n      displayMessageInterval();\n    } catch (err) {\n      setMessage(\"Error occurred\");\n      displayMessageInterval();\n    }\n\n    setAssignedLabels(Array(newImages.length).fill(\"No label\"));\n    setPage(1);\n    setRefreshData(new Date().getTime());\n    setImageFiles([]);\n  };\n\n  const appendImages = () => {\n    if (type === \"create\") {\n      for (let i = 0; i < imageFiles.length; i++) {\n        setUploadedImages(state => [imageFiles[i], ...state]);\n      }\n\n      setAssignedLabels(state => [...Array(imageFiles.length).fill(\"No label\"), ...state]);\n    } else {\n      for (let i = 0; i < imageFiles.length; i++) {\n        setNewImages(state => [...state, imageFiles[i]]);\n      }\n\n      setNewLabels(Array(imageFiles.length).fill(\"No label\"));\n      setImageFiles([]);\n    }\n  };\n\n  const deleteNewImages = index => {\n    newImages.splice(index, 1);\n    newLabels.splice(index, 1);\n  };\n\n  const uploadAppended = async () => {\n    let filenames = [];\n    const formData = new FormData();\n    formData.append('id', dataset.imageDir);\n    formData.append('datasetID', datasetID);\n    formData.append('last', uploadedImages.length - 1);\n\n    for (let i = 0; i < newImages.length; i++) {\n      formData.append('data[]', newImages[i]);\n      formData.append('labels[]', newLabels[i]);\n      formData.append('filenames[]', parseInt(uploadedImages[uploadedImages.length - 1]) + i + 1);\n      filenames.push((parseInt(uploadedImages[uploadedImages.length - 1]) + i + 1).toString());\n    }\n\n    setUploadedImages(state => [...state, ...filenames]);\n    setAssignedLabels(state => [...state, ...newLabels]);\n    updateDataset();\n\n    try {\n      await fileAPI.post(\"/append-image\", formData);\n      setMessage(\"Images appended\");\n      displayMessageInterval();\n    } catch (err) {\n      setMessage(\"Error occurred\");\n      displayMessageInterval();\n    }\n\n    setNewImages([]);\n    setNewLabels([]);\n    setRefreshData(new Date().getTime());\n  };\n\n  const uploadImage = async () => {\n    setDisabledCreate(true);\n\n    if (uploadedImages.length !== 0 && !assignedLabels.includes(\"No label\") && title !== \"\" && description !== \"\") {\n      const formData = new FormData();\n      const id = new Date().toISOString();\n      formData.append('id', id);\n      formData.append('datasetID', datasetID);\n\n      for (let i = 0; i < uploadedImages.length; i++) {\n        formData.append('data[]', uploadedImages[i]);\n        formData.append('labels[]', assignedLabels[i]);\n      }\n\n      try {\n        await fileAPI.post(\"/upload\", formData);\n      } catch (err) {\n        setMessage(\"Error occurred\");\n        displayMessageInterval();\n      }\n\n      if (image) {\n        const formImage = new FormData();\n        formImage.append('image', image);\n\n        try {\n          const imageResponse = await imageAPI.post(\"/upload-image\", formImage);\n          uploadDataset(imageResponse.data.data, id);\n        } catch (err) {\n          setMessage(\"Error occurred\");\n          displayMessageInterval();\n        }\n      } else {\n        uploadDataset(\"default.png\", id);\n      }\n    } else {\n      setDisabledCreate(false);\n    }\n  };\n\n  const uploadDataset = async (imageName, id) => {\n    try {\n      const datasetResponse = await itemsAPI.post(\"/\", {\n        title: title,\n        imageDir: id,\n        creator: currentUser.id,\n        description: description,\n        picture: imageName,\n        upvotes: [],\n        bookmarks: [],\n        labels: labels,\n        rgb: rgb,\n        width: width,\n        height: height,\n        updated: new Date().toISOString(),\n        visibility: visibility,\n        type: \"dataset\"\n      });\n      setMessage(\"Dataset created\");\n      displayMessageInterval();\n      history.push(`/dataset/${datasetResponse.data.data}`);\n    } catch (err) {\n      setMessage(\"Error occurred\");\n      displayMessageInterval();\n    }\n  };\n\n  const updateDataset = async () => {\n    if (image) {\n      try {\n        const formImage = new FormData();\n        formImage.append('image', image);\n        const tempPicture = picture;\n        const imageResponse = await imageAPI.post(\"/upload\", formImage);\n        await itemsAPI.put(`/${datasetID}?type=dataset`, {\n          title: title,\n          description: description,\n          picture: imageResponse.data.data,\n          labels: labels,\n          rgb: rgb,\n          width: width,\n          height: height,\n          updated: new Date().toISOString()\n        });\n        setImage(undefined);\n        setPicture(imageResponse.data.data);\n\n        if (tempPicture !== \"default.png\") {\n          await imageAPI.put('/remove', {\n            picture: tempPicture\n          });\n        }\n      } catch (err) {\n        setMessage(\"Error occurred\");\n        displayMessageInterval();\n      }\n    } else {\n      try {\n        await itemsAPI.put(`/${datasetID}?type=dataset`, {\n          title: title,\n          description: description,\n          picture: picture,\n          labels: labels,\n          rgb: rgb,\n          width: width,\n          height: height,\n          updated: new Date().toISOString()\n        });\n      } catch (err) {\n        setMessage(\"Error occurred\");\n        displayMessageInterval();\n      }\n    }\n\n    setUpdated(new Date().toISOString());\n    setChangedData(false);\n    setChangedSettings(false);\n  };\n\n  const deleteDataset = async () => {\n    try {\n      const formData = new formData();\n      formData.append('id', dataset.imageDir);\n      await itemsAPI.delete(`/${datasetID}`);\n      await fileAPI.post(\"/remove-dataset\", formData);\n      removeOpenItems(datasetID);\n      history.replace(\"/home\");\n    } catch (err) {\n      setMessage(\"Error occurred\");\n      displayMessageInterval();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loaded && exist ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sidebar-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"http://localhost:3000/dataset.png\",\n            className: !(type === \"view\" && !dataset.self) ? \"create-item-edit-image\" : undefined\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 593,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: `create-item-title ${!(type === \"view\" && !dataset.self) && \"create-item-edit-input\"}`,\n            placeholder: \"Title\",\n            onChange: e => {\n              setTitle(e.target.value);\n              setChangedSettings(true);\n            },\n            disabled: !(dataset.self || type === \"create\"),\n            value: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 595,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: `create-item-description ${!(type === \"view\" && !dataset.self) && \"create-item-edit-textarea\"}`,\n          placeholder: \"Description\",\n          onChange: e => {\n            setDescription(e.target.value);\n            setChangedSettings(true);\n          },\n          disabled: !(dataset.self || type === \"create\"),\n          value: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 604,\n          columnNumber: 25\n        }, this), (dataset.self || type === \"create\") && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-item-setup\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"create-item-setup-label\",\n              children: \"Picture\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 615,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"create-item-setup-input\",\n              type: \"file\",\n              name: \"image\",\n              onChange: e => {\n                setImage(e.target.files[0]);\n                setChangedSettings(true);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 616,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 614,\n            columnNumber: 33\n          }, this), type === \"create\" && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-item-setup\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"create-item-setup-label\",\n              children: \"Public?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 626,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              onChange: () => {\n                setVisibility(previous => !previous);\n                setChangedSettings(true);\n              },\n              checked: visibility\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 627,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 625,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-item-setup\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"create-item-setup-label\",\n              children: \"RGB Images?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 636,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              onChange: () => {\n                setRgb(previous => !previous);\n                setChangedSettings(true);\n              },\n              checked: rgb\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 637,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 635,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-item-setup\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"create-item-setup-label\",\n              children: \"Image Height\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 645,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"create-item-setup-dimension\",\n              placeholder: \"Pixels\",\n              disabled: !(dataset.self || type === \"create\"),\n              value: height,\n              onChange: e => {\n                setHeight(e.target.value);\n                setChangedSettings(true);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 646,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 644,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-item-setup\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"create-item-setup-label\",\n              children: \"Image Width\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 656,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"create-item-setup-dimension\",\n              placeholder: \"Pixels\",\n              disabled: !(dataset.self || type === \"create\"),\n              value: width,\n              onChange: e => {\n                setWidth(e.target.value);\n                setChangedSettings(true);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 657,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 655,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true), !dataset.self && type !== \"create\" && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"item-creator\",\n          children: dataset.creatorName.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 668,\n          columnNumber: 64\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-information\",\n          children: [type !== \"create\" && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"item-date\",\n            children: date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 670,\n            columnNumber: 51\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 671,\n            columnNumber: 29\n          }, this), type !== \"create\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(ThumbUpIcon, {\n              className: `item-icon ${upvoted ? \"blue2\" : \"white\"}`,\n              onClick: () => {\n                updateUpvote();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 674,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: upvoted ? \"blue2\" : \"white\",\n              children: upvotes\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 675,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true), !dataset.self && type !== \"create\" && /*#__PURE__*/_jsxDEV(BookmarkIcon, {\n            className: `item-icon ${bookmarked ? \"blue2\" : \"white\"}`,\n            onClick: () => {\n              updateBookmark();\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 678,\n            columnNumber: 68\n          }, this), dataset.self && type !== \"create\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: visibility ? /*#__PURE__*/_jsxDEV(VisibilityIcon, {\n              className: \"item-visibility\",\n              onClick: () => {\n                updateVisibility();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 682,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(VisibilityOffIcon, {\n              className: \"item-visibility\",\n              onClick: () => {\n                updateVisibility();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 684,\n              columnNumber: 41\n            }, this)\n          }, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 669,\n          columnNumber: 25\n        }, this), !dataset.self && type !== \"create\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sidebar-divided\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 691,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-item-setup\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"create-item-setup-label\",\n              children: \"Image Height\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 693,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"dataset-dimension\",\n              children: height\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 694,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 692,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-item-setup\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"create-item-setup-label\",\n              children: \"Image Width\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 697,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"dataset-dimension\",\n              children: width\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 698,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 696,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true), type === \"view\" && !dataset.self && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sidebar-divided\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 704,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sidebar-dataset-copy\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: copyData ? \"Dataset ID\" : \"Copied\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 707,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                disabled: !copyData,\n                onClick: () => {\n                  copiedInterval();\n                },\n                children: /*#__PURE__*/_jsxDEV(ContentCopyIcon, {\n                  className: \"dataset-copy-icon\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 709,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 708,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 706,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n              href: `http://127.0.0.1:5000/datasets/${dataset.imageDir}/${datasetID}-dataset.zip`,\n              download: true,\n              children: /*#__PURE__*/_jsxDEV(DownloadIcon, {\n                className: \"dataset-download-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 713,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 712,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 705,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true), type === \"view\" && !dataset.self && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sidebar-divided\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 720,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Shortcut, {\n            type: \"related\",\n            datasetID: datasetID\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 721,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true), type === \"view\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: dataset.self && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sidebar-divided\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 728,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"blue-button item-save\",\n              disabled: !changedSettings && !changedData,\n              onClick: () => {\n                updateDataset();\n                setMessage(\"Dataset saved\");\n                displayMessageInterval();\n              },\n              children: \"Save Dataset\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 729,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"text-button item-delete\",\n              onClick: () => {\n                deleteDataset();\n              },\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 736,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true)\n        }, void 0, false)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"workspace-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"workspace-inner\",\n            children: [type === \"create\" || dataset.self ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"view-items-top\",\n                children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                  children: type === \"create\" ? \"Create Dataset\" : \"Dataset\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 749,\n                  columnNumber: 45\n                }, this), type === \"create\" && /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 752,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"blue-button\",\n                    disabled: disabledCreate,\n                    onClick: () => {\n                      uploadImage();\n                    },\n                    children: \"Create\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 753,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 751,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"create-dataset-upload\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"file\",\n                    name: \"data\",\n                    accept: \"image/*\",\n                    multiple: true,\n                    onChange: e => {\n                      setImageFiles(e.target.files);\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 759,\n                    columnNumber: 49\n                  }, this), type === \"create\" && uploadedImages.length === 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"white-button\",\n                    disabled: imageFiles.length === 0,\n                    onClick: () => {\n                      addImages();\n                      setChangedData(true);\n                    },\n                    children: \"Add\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 765,\n                    columnNumber: 53\n                  }, this), uploadedImages.length !== 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"white-button\",\n                      disabled: imageFiles.length === 0,\n                      onClick: () => {\n                        if (newImages.length !== 0) {\n                          setNewImages([]);\n                          setNewLabels([]);\n                        }\n\n                        setAppendMode(false);\n                        setUploadedImages([]);\n                        replaceImages();\n                        setChangedData(true);\n                      },\n                      children: \"Replace\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 774,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"white-button\",\n                      disabled: imageFiles.length === 0,\n                      onClick: () => {\n                        if (newImages.length !== 0) {\n                          setNewImages([]);\n                          setNewLabels([]);\n                        }\n\n                        setAppendMode(true);\n                        appendImages();\n                        setChangedData(true);\n                      },\n                      children: \"Add\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 786,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"create-dataset-pagination\",\n                      children: [/*#__PURE__*/_jsxDEV(ArrowBackIosNewIcon, {\n                        className: \"create-dataset-pagination-icon\",\n                        onClick: () => {\n                          previousPage();\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 798,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                        children: [\"Page \", page, \" / \", Math.ceil(uploadedImages.length / 30)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 799,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(ArrowForwardIosIcon, {\n                        className: \"create-dataset-pagination-icon\",\n                        onClick: () => {\n                          nextPage();\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 800,\n                        columnNumber: 61\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 797,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 758,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 748,\n                columnNumber: 41\n              }, this), (type === \"create\" || dataset.self) && newImages.length !== 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-dataset-appended\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"create-dataset-appended-header\",\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    children: \"Uploaded Images\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 809,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"text-button\",\n                    onClick: () => {\n                      setNewImages([]);\n                      setNewLabels([]);\n                    },\n                    children: \"Discard\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 810,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 808,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"create-dataset-appended-list\",\n                  children: newImages.map((image, i) => {\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"create-dataset-image\",\n                      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                        src: URL.createObjectURL(image)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 820,\n                        columnNumber: 65\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                          value: newLabels[i],\n                          onChange: e => {\n                            setNewLabels(state => {\n                              const stateCopy = [...state];\n                              stateCopy[i] = e.target.value;\n                              return stateCopy;\n                            });\n                          },\n                          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"No label\",\n                            children: \"No label\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 830,\n                            columnNumber: 73\n                          }, this), labels.map((label, j) => /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: label,\n                            children: label\n                          }, j, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 832,\n                            columnNumber: 77\n                          }, this))]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 822,\n                          columnNumber: 69\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          onClick: () => {\n                            deleteNewImages(i);\n                          },\n                          children: /*#__PURE__*/_jsxDEV(DeleteIcon, {\n                            className: \"create-dataset-image-delete\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 836,\n                            columnNumber: 73\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 835,\n                          columnNumber: 69\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 821,\n                        columnNumber: 65\n                      }, this)]\n                    }, i, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 819,\n                      columnNumber: 61\n                    }, this);\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 816,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"create-dataset-appended-footer\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"blue-button\",\n                    disabled: newLabels.includes(\"No label\"),\n                    onClick: () => {\n                      if (appendMode) {\n                        uploadAppended();\n                      } else {\n                        uploadReplaced();\n                      }\n                    },\n                    children: \"Upload\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 844,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 843,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 807,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-dataset-images-list\",\n                children: uploadedImages.map((image, i) => {\n                  if (i >= start && i < end) {\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"create-dataset-image\",\n                      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                        src: type === \"create\" ? URL.createObjectURL(image) : assignedLabels[i] === \"No label\" ? `http://127.0.0.1:5000/datasets/${dataset.imageDir}/no-label/${image}.jpg` : assignedLabels[i] !== \"No label\" ? `http://127.0.0.1:5000/datasets/${dataset.imageDir}/images/${assignedLabels[i]}/${image}.jpg` : URL.createObjectURL(image)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 861,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                          value: assignedLabels[i],\n                          onChange: e => {\n                            updateLabel(e, i);\n                          },\n                          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"No label\",\n                            children: \"No label\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 874,\n                            columnNumber: 69\n                          }, this), labels.map((label, j) => /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: label,\n                            children: label\n                          }, j, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 876,\n                            columnNumber: 73\n                          }, this))]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 872,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          onClick: () => {\n                            deleteImage(image, i, assignedLabels[i]);\n                          },\n                          children: /*#__PURE__*/_jsxDEV(DeleteIcon, {\n                            className: \"create-dataset-image-delete\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 880,\n                            columnNumber: 69\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 879,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 871,\n                        columnNumber: 61\n                      }, this)]\n                    }, i, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 860,\n                      columnNumber: 57\n                    }, this);\n                  }\n                })\n              }, refreshData, false, {\n                fileName: _jsxFileName,\n                lineNumber: 856,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"view-items-top\",\n                children: /*#__PURE__*/_jsxDEV(\"h1\", {\n                  children: \"Dataset\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 892,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 891,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-dataset-images-list\",\n                children: uploadedImages.map((image, i) => {\n                  if (i >= start && i < end) {\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"create-dataset-image\",\n                      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                        src: `http://127.0.0.1:5000/datasets/${dataset.imageDir}/images/${assignedLabels[i]}/${image}.jpg`\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 899,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: /*#__PURE__*/_jsxDEV(\"p\", {\n                          children: assignedLabels[i]\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 901,\n                          columnNumber: 65\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 900,\n                        columnNumber: 61\n                      }, this)]\n                    }, i, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 898,\n                      columnNumber: 57\n                    }, this);\n                  }\n                })\n              }, refreshData, false, {\n                fileName: _jsxFileName,\n                lineNumber: 894,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true), displayMessage && /*#__PURE__*/_jsxDEV(MessageCard, {\n              message: message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 910,\n              columnNumber: 52\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 745,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-workspace-data\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"create-workspace-data-header\",\n              children: \"Labels:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 913,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sidebar-divided\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 914,\n              columnNumber: 33\n            }, this), (type === \"create\" || dataset.self) && /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"create-dataset-label-input\",\n              placeholder: \"Add Label\",\n              onChange: e => {\n                setAddLabel(e.target.value);\n              },\n              onKeyPress: addLabelKey,\n              value: addLabel\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 916,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"create-dataset-labels-list\",\n              children: labels.map((label, i) => {\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `create-dataset-label ${colours[i % colours.length]}`,\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    children: label\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 926,\n                    columnNumber: 49\n                  }, this), (type === \"create\" || dataset.self) && /*#__PURE__*/_jsxDEV(\"div\", {\n                    onClick: () => {\n                      deleteLabel(i);\n                    },\n                    children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n                      className: \"create-dataset-label-icon\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 929,\n                      columnNumber: 57\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 928,\n                    columnNumber: 53\n                  }, this)]\n                }, i, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 925,\n                  columnNumber: 45\n                }, this);\n              })\n            }, refreshLabels, false, {\n              fileName: _jsxFileName,\n              lineNumber: 922,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 912,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 744,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 743,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 590,\n      columnNumber: 17\n    }, this) : loaded && !exist && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inner-body\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"item-exist\",\n        children: \"Cannot find dataset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 942,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 941,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(Dataset, \"2n0lapV27GM6My2wxqi/TvzRK20=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = Dataset;\nexport default Dataset;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dataset\");","map":{"version":3,"sources":["/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Dataset.jsx"],"names":["React","useState","useEffect","useRef","useContext","useHistory","useParams","usersAPI","itemsAPI","globalAPI","imageAPI","fileAPI","OpenItemsContext","MessageContext","BookmarkIcon","ThumbUpIcon","VisibilityOffIcon","VisibilityIcon","CloseIcon","DeleteIcon","ArrowForwardIosIcon","ArrowBackIosNewIcon","ContentCopyIcon","DownloadIcon","Shortcut","MessageCard","Dataset","currentUser","type","title","setTitle","description","setDescription","visibility","setVisibility","rgb","setRgb","bookmarked","setBookmarked","upvoted","setUpvoted","upvotes","setUpvotes","updated","setUpdated","appendMode","setAppendMode","picture","setPicture","width","setWidth","height","setHeight","date","setDate","start","setStart","end","setEnd","page","setPage","image","setImage","dataset","setDataset","labels","setLabels","newLabels","setNewLabels","copyData","setCopyData","changedSettings","setChangedSettings","changedData","setChangedData","uploadedImages","setUploadedImages","newImages","setNewImages","imageFiles","setImageFiles","assignedLabels","setAssignedLabels","refreshData","setRefreshData","refreshLabels","setRefreshLabels","loaded","setLoaded","exist","setExist","addLabel","setAddLabel","disabledCreate","setDisabledCreate","message","setMessage","addOpenItems","removeOpenItems","displayMessage","displayMessageInterval","colours","datasetID","id","copyInterval","firstRender","history","fetchData","get","data","map","previous","self","_id","fetch","imageDir","then","response","json","images","state","filename","label","catch","err","updatedDate","Date","currentDate","getTime","Math","floor","toString","current","updateDataset","copiedInterval","clearInterval","navigator","clipboard","writeText","datafile","setInterval","addLabelKey","e","key","includes","formData","FormData","append","post","deleteLabel","index","assignedLabel","j","stateCopy","splice","updateLabel","target","value","updateUpvote","put","updateBookmark","updateVisibility","previousPage","nextPage","length","deleteImage","addImages","i","Array","fill","replaceImages","uploadReplaced","appendImages","deleteNewImages","uploadAppended","filenames","parseInt","push","uploadImage","toISOString","formImage","imageResponse","uploadDataset","imageName","datasetResponse","creator","bookmarks","tempPicture","undefined","deleteDataset","delete","replace","files","creatorName","name","ceil","URL","createObjectURL"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef, useContext} from 'react'\nimport {useHistory, useParams} from \"react-router-dom\"\nimport usersAPI from '../API/users'\nimport itemsAPI from '../API/items'\nimport globalAPI from '../API/global'\nimport imageAPI from '../API/images'\nimport fileAPI from '../API/files'\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport { MessageContext } from '../Contexts/messageContext';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport CloseIcon from '@mui/icons-material/Close';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport Shortcut from '../Components/Shortcut'\nimport MessageCard from '../Components/MessageCard'\n\nconst Dataset = ({currentUser, type}) => {\n    const [title, setTitle] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [visibility, setVisibility] = useState(false);\n    const [rgb, setRgb] = useState(false)\n    const [bookmarked, setBookmarked] = useState()\n    const [upvoted, setUpvoted] = useState()\n    const [upvotes, setUpvotes] = useState()\n    const [updated, setUpdated] = useState()\n    const [appendMode, setAppendMode] = useState(true)\n    const [picture, setPicture] = useState()\n    const [width, setWidth] = useState()\n    const [height, setHeight] = useState()\n    const [date, setDate] = useState(\"\")\n    const [start, setStart] = useState(0)\n    const [end, setEnd] = useState(30)\n    const [page, setPage] = useState(1)\n    const [image, setImage] = useState();\n    const [dataset, setDataset] = useState([]);\n    const [labels, setLabels] = useState([])\n    const [newLabels, setNewLabels] = useState([])\n    const [copyData, setCopyData] = useState(true)\n    const [changedSettings, setChangedSettings] = useState(false)\n    const [changedData, setChangedData] = useState(false)\n    const [uploadedImages, setUploadedImages] = useState([])\n    const [newImages, setNewImages] = useState([])\n    const [imageFiles, setImageFiles] = useState([])\n    const [assignedLabels, setAssignedLabels] = useState([])\n    const [refreshData, setRefreshData] = useState()\n    const [refreshLabels, setRefreshLabels] = useState()\n    const [loaded, setLoaded] = useState(false);\n    const [exist, setExist] = useState()\n    const [addLabel, setAddLabel] = useState(\"\")\n    const [disabledCreate, setDisabledCreate] = useState(false)\n    const [message, setMessage] = useState(\"\")\n    const {addOpenItems, removeOpenItems} = useContext(OpenItemsContext);\n    const {displayMessage, displayMessageInterval} = useContext(MessageContext);\n    const colours = [\"label-blue1\", \"label-red\", \"label-green1\", \"label-orange1\", \"label-pink\", \n        \"label-orange2\", \"label-blue2\", \"label-yellow1\", \"label-green2\", \"label-yellow2\"]\n    const datasetID = useParams().id;\n    const copyInterval = useRef(0)\n    const firstRender = useRef(true);\n    const history = useHistory();\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                if (type === \"create\") {\n                    const dataset = await usersAPI.get(\"/created?type=dataset\");\n    \n                    dataset.data.data.map((dataset) => {\n                        setDataset(previous => [...previous, dataset.title]);\n                    })\n\n                    setExist(true)\n                    setLoaded(true)\n                } else {\n                    const dataset = await itemsAPI.get(`/${datasetID}?type=dataset`);\n\n                    if (dataset.data.data.self) {\n                        addOpenItems(dataset.data.data._id, dataset.data.data.title, dataset.data.data.type)\n                    }\n\n                    setDataset(dataset.data.data);\n                    setUpdated(dataset.data.data.updated);\n                    setBookmarked(dataset.data.data.bookmarked)\n                    setUpvoted(dataset.data.data.upvoted)\n                    setPicture(dataset.data.data.picture)\n                    setUpvotes(dataset.data.data.upvotes)\n                    setVisibility(dataset.data.data.visibility)\n                    setTitle(dataset.data.data.title)\n                    setDescription(dataset.data.data.description)\n                    setLabels(dataset.data.data.labels)\n                    setRgb(dataset.data.data.rgb)\n                    setHeight(dataset.data.data.height)\n                    setWidth(dataset.data.data.width)\n                    \n                    fetch(`http://127.0.0.1:5000/datasets/${dataset.data.data.imageDir}/labels.json`)\n                        .then(response => response.json())\n                        .then(images => {\n                            images.map(image => {\n                                setUploadedImages(state => [...state, image.filename])\n                                setAssignedLabels(state => [...state, image.label])\n                            })\n                            setExist(true)\n                            setLoaded(true)\n                        }).catch(() => {\n                            setExist(true)\n                            setLoaded(true)\n                        });\n                }\n            } catch (err) {\n              setExist(false)\n              setLoaded(true)\n            }\n        }\n        fetchData();\n    }, [])\n\n    useEffect(() => {\n        if (loaded && exist) {\n            const updatedDate = new Date(updated);\n            const currentDate = new Date();\n    \n            if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} years ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} days ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hours ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minutes ago`)\n            } else {\n                setDate(\"Updated just now\")\n            }\n        }\n    }, [loaded, updated])\n\n    useEffect(() => {\n        if (!firstRender.current && loaded && type !== \"create\") {\n            updateDataset()\n        } else {\n            firstRender.current = false\n        }\n    }, [labels])\n\n    const copiedInterval = () => {\n        clearInterval(copyInterval.current)\n        navigator.clipboard.writeText(dataset.datafile);\n        setCopyData(false);\n        copyInterval.current = setInterval(() => {\n            setCopyData(true);\n        }, 800)\n        return ()=> {clearInterval(copyInterval.current)};\n    }\n\n    const addLabelKey = async (e) => {\n        if (e.key === \"Enter\" && addLabel !== \"\" && !labels.includes(addLabel)) {\n            setLabels(state => [...state, addLabel])\n            setChangedSettings(true)\n            setAddLabel(\"\")\n            \n            if (type !== \"create\") {\n                const formData = new FormData();\n    \n                formData.append('id', dataset.imageDir)\n                formData.append('datasetID', datasetID)\n                formData.append('label', addLabel)\n    \n                await fileAPI.post(\"/add-label\", formData)\n            }\n        }\n    }\n\n    const deleteLabel = async (index) => {\n        try {\n            assignedLabels.map((assignedLabel, j) => {\n                if (assignedLabel === labels[index]) {\n                    setAssignedLabels(state => {\n                        const stateCopy = [...state]\n                    \n                        stateCopy[j] = \"No label\"\n                    \n                        return stateCopy\n                    })\n                }\n            })\n\n            const formData = new FormData();\n\n            formData.append('id', dataset.imageDir)\n            formData.append('datasetID', datasetID)\n            formData.append('label', labels[index])\n\n            labels.splice(index, 1)\n\n            await fileAPI.post(\"/delete-label\", formData).then(() => {\n                updateDataset()\n            });\n\n            setRefreshLabels(new Date().getTime())\n            setRefreshData(new Date().getTime())\n        } catch (err) {\n            setMessage(\"Error occurred\")\n            displayMessageInterval()\n        }\n    }\n\n    const updateLabel = async (e, index) => {\n        setAssignedLabels(state => {\n            const stateCopy = [...state]\n        \n            stateCopy[index] = e.target.value\n        \n            return stateCopy\n        })\n\n        if (type !== \"create\") {\n            try {\n                const formData = new FormData();\n    \n                formData.append('id', dataset.imageDir)\n                formData.append('datasetID', datasetID)\n                formData.append('filename', uploadedImages[index])\n                formData.append('oldLabel', assignedLabels[index])\n                formData.append('newLabel', e.target.value)\n                formData.append('index', index)\n    \n                await fileAPI.post(\"/update-image\", formData);\n    \n                setChangedData(true)\n                setRefreshLabels(new Date().getTime())\n            } catch (err) {\n                setMessage(\"Error occurred\")\n                displayMessageInterval()\n            }\n        }\n    }\n\n    const updateUpvote = async () => {\n        try {\n            await globalAPI.put(`/upvote/${datasetID}?state=${upvoted}`);\n\n            if (upvoted) {\n                setUpvotes(state => state-1)\n            } else {\n                setUpvotes(state => state+1)\n            }\n\n            setUpvoted(state => !state)\n        } catch (err) {\n            setMessage(\"Error occurred\")\n            displayMessageInterval()\n        }\n    }\n\n    const updateBookmark = async () => {\n        try {\n            await globalAPI.put(`/bookmark/${datasetID}?state=${bookmarked}`);\n            \n            setBookmarked(state => !state)\n        } catch (err) {\n            setMessage(\"Error occurred\")\n            displayMessageInterval()\n        }\n    }\n\n    const updateVisibility = async () => {\n        try {\n            await globalAPI.put(`/visibility/${datasetID}`);\n\n            setVisibility(state => !state)\n        } catch (err) {\n            setMessage(\"Error occurred\")\n            displayMessageInterval()\n        }\n    }\n\n    const previousPage = () => {\n        if (page > 1) {\n            setStart((page-2)*30)\n            setEnd((page-1)*30)\n            setPage(state => state-1)\n            setRefreshData(new Date().getTime())\n        }\n    }\n    \n    const nextPage = () => {\n        if (page*30 < uploadedImages.length && uploadedImages.length > 30) {\n            setPage(state => state+1)\n            setStart((page)*30)\n            setEnd((page+1)*30)\n            setRefreshData(new Date().getTime())\n        }\n    }\n\n    const deleteImage = async (filename, index, label) => {\n        uploadedImages.splice(index, 1)\n        assignedLabels.splice(index, 1)\n\n        if (type === \"view\") {\n            const formData = new FormData();\n\n            formData.append('id', dataset.imageDir)\n            formData.append('datasetID', datasetID)\n            formData.append('index', index)\n            formData.append('label', label)\n            formData.append('filename', filename)\n\n            updateDataset()\n\n            try {\n                await fileAPI.post(\"/delete-image\", formData);\n\n                setMessage(\"Image deleted\")\n                displayMessageInterval()\n            } catch (err) {\n                setMessage(\"Error occurred\")\n                displayMessageInterval()\n            }\n        }\n\n        setRefreshData(new Date().getTime())\n    }\n\n    const addImages = async () => {\n        for (let i = 0; i < imageFiles.length; i++) {\n            setUploadedImages(state => [...state, imageFiles[i]])\n        }\n\n        setAssignedLabels(Array(imageFiles.length).fill(\"No label\"))\n        setPage(1)\n        setRefreshData(new Date().getTime())\n        setImageFiles([])\n    }\n\n    const replaceImages = () => {\n        if (type === \"create\") {\n            for (let i = 0; i < imageFiles.length; i++) {\n                setUploadedImages(state => [...state, imageFiles[i]])\n            }\n\n            setAssignedLabels(Array(imageFiles.length).fill(\"No label\"))\n        } else {\n            for (let i = 0; i < imageFiles.length; i++) {\n                setNewImages(state => [...state, imageFiles[i]])\n            }\n    \n            setNewLabels(Array(imageFiles.length).fill(\"No label\"))\n            setImageFiles([])\n        }\n    }\n\n    const uploadReplaced = async () => {\n        const formData = new FormData();\n\n        formData.append('id', dataset.imageDir)\n        formData.append('datasetID', datasetID)\n\n        for (let i = 0; i < newImages.length; i++) {\n            formData.append('data[]', newImages[i]);\n            formData.append('labels[]', newLabels[i]);\n        }\n\n        updateDataset()\n\n        try {\n            await fileAPI.post(\"/replace-image\", formData);\n\n            for (let i = 0; i < newImages.length; i++) {\n                setUploadedImages(state => [...state, i])\n            }\n\n            setMessage(\"Images replaced\")\n            displayMessageInterval()\n        } catch (err) {\n            setMessage(\"Error occurred\")\n            displayMessageInterval()\n        }\n        \n        setAssignedLabels(Array(newImages.length).fill(\"No label\"))\n        setPage(1)\n        setRefreshData(new Date().getTime())\n        setImageFiles([])\n    }\n    \n    const appendImages = () => {\n        if (type === \"create\") {\n            for (let i = 0; i < imageFiles.length; i++) {\n                setUploadedImages(state => [imageFiles[i], ...state])\n            }\n\n            setAssignedLabels(state => [...Array(imageFiles.length).fill(\"No label\"), ...state])\n        } else {\n            for (let i = 0; i < imageFiles.length; i++) {\n                setNewImages(state => [...state, imageFiles[i]])\n            }\n    \n            setNewLabels(Array(imageFiles.length).fill(\"No label\"))\n            setImageFiles([])\n        }\n    }\n\n    const deleteNewImages = (index) => {\n        newImages.splice(index, 1)\n        newLabels.splice(index, 1)\n    }\n\n    const uploadAppended = async () => {\n        let filenames = []\n\n        const formData = new FormData();\n\n        formData.append('id', dataset.imageDir)\n        formData.append('datasetID', datasetID)\n        formData.append('last', uploadedImages.length-1)\n\n        for (let i = 0; i < newImages.length; i++) {\n            formData.append('data[]', newImages[i]);\n            formData.append('labels[]', newLabels[i]);\n            formData.append('filenames[]', parseInt(uploadedImages[uploadedImages.length-1])+i+1);\n            filenames.push((parseInt(uploadedImages[uploadedImages.length-1])+i+1).toString())\n        }\n\n        setUploadedImages(state => [...state, ...filenames])\n        setAssignedLabels(state => [...state, ...newLabels])\n        updateDataset()\n\n        try {\n            await fileAPI.post(\"/append-image\", formData)\n\n            setMessage(\"Images appended\")\n            displayMessageInterval()\n        } catch (err) {\n            setMessage(\"Error occurred\")\n            displayMessageInterval()\n        }\n\n        setNewImages([])\n        setNewLabels([])\n        setRefreshData(new Date().getTime())\n    }\n\n    const uploadImage = async () => {\n        setDisabledCreate(true)\n\n        if (uploadedImages.length !== 0 && !assignedLabels.includes(\"No label\") && title !== \"\" && description !== \"\") {\n            const formData = new FormData();\n            const id = new Date().toISOString();\n\n            formData.append('id', id)\n            formData.append('datasetID', datasetID)\n\n            for (let i = 0; i < uploadedImages.length; i++) {\n                formData.append('data[]', uploadedImages[i]);\n                formData.append('labels[]', assignedLabels[i]);\n            }\n\n            try {\n                await fileAPI.post(\"/upload\", formData);\n            } catch (err) {\n                setMessage(\"Error occurred\")\n                displayMessageInterval()\n            }\n\n            if (image) {\n                const formImage = new FormData();\n                formImage.append('image', image);\n                \n                try {\n                    const imageResponse = await imageAPI.post(\"/upload-image\", formImage);\n    \n                    uploadDataset(imageResponse.data.data, id)\n                } catch (err) {\n                    setMessage(\"Error occurred\")\n                    displayMessageInterval()\n                }\n            } else {\n                uploadDataset(\"default.png\", id)\n            }\n        } else {\n            setDisabledCreate(false)\n        }\n    }\n\n    const uploadDataset = async (imageName, id) => {\n        try {\n            const datasetResponse = await itemsAPI.post(\"/\", {\n                title: title,\n                imageDir: id,\n                creator: currentUser.id,\n                description: description,\n                picture: imageName,\n                upvotes: [],\n                bookmarks: [],\n                labels: labels,\n                rgb: rgb,\n                width: width,\n                height: height,\n                updated: new Date().toISOString(),\n                visibility: visibility,\n                type: \"dataset\"\n            });\n\n            setMessage(\"Dataset created\")\n            displayMessageInterval()\n            history.push(`/dataset/${datasetResponse.data.data}`)\n        } catch (err) {\n            setMessage(\"Error occurred\")\n            displayMessageInterval()\n        }\n    }\n\n    const updateDataset = async () => {\n        if (image) {\n            try {\n                const formImage = new FormData();\n                formImage.append('image', image);\n    \n                const tempPicture = picture\n                const imageResponse = await imageAPI.post(\"/upload\", formImage);\n\n                await itemsAPI.put(`/${datasetID}?type=dataset`, {\n                    title: title,\n                    description: description,\n                    picture: imageResponse.data.data,\n                    labels: labels,\n                    rgb: rgb,\n                    width: width,\n                    height: height,\n                    updated: new Date().toISOString()\n                })\n\n                setImage(undefined)\n                setPicture(imageResponse.data.data)\n    \n                if (tempPicture !== \"default.png\") {\n                    await imageAPI.put('/remove', {picture: tempPicture});\n                }\n            } catch (err) {\n                setMessage(\"Error occurred\")\n                displayMessageInterval()\n            }\n        } else {\n            try {\n                await itemsAPI.put(`/${datasetID}?type=dataset`, {\n                    title: title,\n                    description: description,\n                    picture: picture,\n                    labels: labels,\n                    rgb: rgb,\n                    width: width,\n                    height: height,\n                    updated: new Date().toISOString()\n                })\n            } catch (err) {\n                setMessage(\"Error occurred\")\n                displayMessageInterval()\n            }\n        }\n\n        setUpdated(new Date().toISOString())\n        setChangedData(false)\n        setChangedSettings(false)\n    }\n\n    const deleteDataset = async () => {\n        try {\n            const formData = new formData()\n            formData.append('id', dataset.imageDir)\n\n            await itemsAPI.delete(`/${datasetID}`)\n            await fileAPI.post(\"/remove-dataset\", formData);\n\n            removeOpenItems(datasetID)\n            history.replace(\"/home\")\n        } catch (err) {\n            setMessage(\"Error occurred\")\n            displayMessageInterval()\n        }\n    }\n\n    return (\n        <>\n            {loaded && exist ?\n                <div className=\"main-body\">\n                    <div className=\"sidebar\">\n                        <div className=\"sidebar-header\">\n                            <img src=\"http://localhost:3000/dataset.png\"\n                                    className={!(type === \"view\" && !dataset.self) ? \"create-item-edit-image\" : undefined} />\n                            <input className={`create-item-title ${!(type === \"view\" && !dataset.self) && \"create-item-edit-input\"}`}\n                                    placeholder=\"Title\"\n                                    onChange={e => {\n                                        setTitle(e.target.value)\n                                        setChangedSettings(true)\n                                    }}\n                                    disabled={!(dataset.self || type === \"create\")}\n                                    value={title} />\n                        </div>\n                        <textarea className={`create-item-description ${!(type === \"view\" && !dataset.self) && \"create-item-edit-textarea\"}`}\n                                    placeholder=\"Description\"\n                                    onChange={e => {\n                                        setDescription(e.target.value)\n                                        setChangedSettings(true)\n                                    }}\n                                    disabled={!(dataset.self || type === \"create\")}\n                                    value={description} />\n                        {(dataset.self || type === \"create\") &&\n                            <>\n                                <div className=\"create-item-setup\">\n                                    <label className=\"create-item-setup-label\">Picture</label>\n                                    <input className=\"create-item-setup-input\"\n                                            type=\"file\" \n                                            name=\"image\" \n                                            onChange={e => {\n                                                setImage(e.target.files[0])\n                                                setChangedSettings(true)\n                                            }} />\n                                </div>\n                                {type === \"create\" &&\n                                    <div className=\"create-item-setup\">\n                                        <label className=\"create-item-setup-label\">Public?</label>\n                                        <input type=\"checkbox\" \n                                                onChange={() => {\n                                                    setVisibility(previous => !previous)\n                                                    setChangedSettings(true)\n                                                }}\n                                                checked={visibility} />\n                                    </div>\n                                }\n                                <div className=\"create-item-setup\">\n                                    <label className=\"create-item-setup-label\">RGB Images?</label>\n                                    <input type=\"checkbox\" \n                                            onChange={() => {\n                                                setRgb(previous => !previous)\n                                                setChangedSettings(true)\n                                            }}\n                                            checked={rgb} />\n                                </div>\n                                <div className=\"create-item-setup\">\n                                    <label className=\"create-item-setup-label\">Image Height</label>\n                                    <input className=\"create-item-setup-dimension\"\n                                            placeholder=\"Pixels\"\n                                            disabled={!(dataset.self || type === \"create\")}\n                                            value={height}\n                                            onChange={e => {\n                                                setHeight(e.target.value)\n                                                setChangedSettings(true)\n                                            }} />\n                                </div>\n                                <div className=\"create-item-setup\">\n                                    <label className=\"create-item-setup-label\">Image Width</label>\n                                    <input className=\"create-item-setup-dimension\"\n                                            placeholder=\"Pixels\"\n                                            disabled={!(dataset.self || type === \"create\")}\n                                            value={width}\n                                            onChange={e => {\n                                                setWidth(e.target.value)\n                                                setChangedSettings(true)\n                                            }} />\n                                </div>\n                            </>\n                        }\n                        {!dataset.self && type !== \"create\" && <p className=\"item-creator\">{dataset.creatorName.name}</p>}\n                        <div className=\"item-information\">\n                            {type !== \"create\" && <p className=\"item-date\">{date}</p>}\n                            <span />\n                            {type !== \"create\" &&\n                                <>\n                                    <ThumbUpIcon className={`item-icon ${upvoted ? \"blue2\" : \"white\"}`} onClick={() => {updateUpvote()}} />\n                                    <p className={upvoted ? \"blue2\" : \"white\"}>{upvotes}</p>\n                                </>\n                            }\n                            {!dataset.self && type !== \"create\" && <BookmarkIcon className={`item-icon ${bookmarked ? \"blue2\" : \"white\"}`} onClick={() => {updateBookmark()}} />}\n                            {dataset.self && type !== \"create\" && \n                                <>\n                                    {visibility ? \n                                        <VisibilityIcon className=\"item-visibility\" onClick={() => {updateVisibility()}} />\n                                    :\n                                        <VisibilityOffIcon className=\"item-visibility\" onClick={() => {updateVisibility()}} />\n                                    }\n                                </>\n                            }\n                        </div>\n                        {!dataset.self && type !== \"create\" &&\n                            <>\n                                <div className=\"sidebar-divided\" />\n                                <div className=\"create-item-setup\">\n                                    <label className=\"create-item-setup-label\">Image Height</label>\n                                    <p className=\"dataset-dimension\">{height}</p>\n                                </div>\n                                <div className=\"create-item-setup\">\n                                    <label className=\"create-item-setup-label\">Image Width</label>\n                                    <p className=\"dataset-dimension\">{width}</p>\n                                </div>\n                            </>\n                        }\n                        {type === \"view\" && !dataset.self &&\n                            <>\n                                <div className=\"sidebar-divided\" />\n                                <div className=\"sidebar-dataset-copy\">\n                                    <div>\n                                        <p>{copyData ? \"Dataset ID\" : \"Copied\"}</p>\n                                        <button disabled={!copyData} onClick={() => {copiedInterval()}}>\n                                            <ContentCopyIcon className=\"dataset-copy-icon\" />\n                                        </button>\n                                    </div>\n                                    <a href={`http://127.0.0.1:5000/datasets/${dataset.imageDir}/${datasetID}-dataset.zip`} download>\n                                        <DownloadIcon className=\"dataset-download-icon\" />\n                                    </a>\n                                </div>\n                            </>\n                        }\n                        {type === \"view\" && !dataset.self &&\n                            <>\n                                <div className=\"sidebar-divided\" />\n                                <Shortcut type={\"related\"} datasetID={datasetID} />\n                            </>\n                        }\n                        {type === \"view\" &&\n                            <>\n                                {dataset.self &&\n                                    <>\n                                        <div className=\"sidebar-divided\" />\n                                        <button className=\"blue-button item-save\"\n                                                disabled={!changedSettings && !changedData}\n                                                onClick={() => {\n                                                    updateDataset()\n                                                    setMessage(\"Dataset saved\")\n                                                    displayMessageInterval()\n                                                }}>Save Dataset</button>\n                                        <button className=\"text-button item-delete\"\n                                                onClick={() => {deleteDataset()}}>Delete</button>\n                                    </>\n                                }\n                            </>\n                        }\n                    </div>\n                    <div className=\"inner\">\n                        <div className=\"workspace-body\">\n                            <div className=\"workspace-inner\">\n                                {(type === \"create\" || dataset.self) ?\n                                    <>\n                                        <div className=\"view-items-top\">\n                                            <h1>{type === \"create\" ? \"Create Dataset\" : \"Dataset\"}</h1>\n                                            {type === \"create\" &&\n                                                <div>\n                                                    <span />\n                                                    <button className=\"blue-button\"\n                                                            disabled={disabledCreate}\n                                                            onClick={() => {uploadImage()}}>Create</button>\n                                                </div>\n                                            }\n                                            <div className=\"create-dataset-upload\">\n                                                <input type=\"file\" \n                                                        name=\"data\"\n                                                        accept=\"image/*\"\n                                                        multiple\n                                                        onChange={e => {setImageFiles(e.target.files)}} />\n                                                {type === \"create\" && uploadedImages.length === 0 && \n                                                    <button className=\"white-button\"\n                                                            disabled={imageFiles.length === 0}\n                                                            onClick={() => {\n                                                                addImages()\n                                                                setChangedData(true)\n                                                            }}>Add</button>\n                                                }\n                                                {uploadedImages.length !== 0 && \n                                                    <>\n                                                        <button className=\"white-button\"\n                                                                disabled={imageFiles.length === 0}\n                                                                onClick={() => {\n                                                                    if (newImages.length !== 0) {\n                                                                        setNewImages([])\n                                                                        setNewLabels([])\n                                                                    }\n                                                                    setAppendMode(false)\n                                                                    setUploadedImages([])\n                                                                    replaceImages()\n                                                                    setChangedData(true)\n                                                                }}>Replace</button>\n                                                        <button className=\"white-button\"\n                                                                disabled={imageFiles.length === 0}\n                                                                onClick={() => {\n                                                                    if (newImages.length !== 0) {\n                                                                        setNewImages([])\n                                                                        setNewLabels([])\n                                                                    }\n                                                                    setAppendMode(true)\n                                                                    appendImages()\n                                                                    setChangedData(true)\n                                                                }}>Add</button>\n                                                        <div className=\"create-dataset-pagination\">\n                                                            <ArrowBackIosNewIcon className=\"create-dataset-pagination-icon\" onClick={() => {previousPage()}} />\n                                                            <p>Page {page} / {Math.ceil(uploadedImages.length/30)}</p>\n                                                            <ArrowForwardIosIcon className=\"create-dataset-pagination-icon\" onClick={() => {nextPage()}} />\n                                                        </div>\n                                                    </>\n                                                }\n                                            </div>\n                                        </div>\n                                        {(type === \"create\" || dataset.self) && newImages.length !== 0 && \n                                            <div className=\"create-dataset-appended\">\n                                                <div className=\"create-dataset-appended-header\">\n                                                    <p>Uploaded Images</p>\n                                                    <button className=\"text-button\"\n                                                            onClick={() => {\n                                                        setNewImages([])\n                                                        setNewLabels([])\n                                                    }}>Discard</button>\n                                                </div>\n                                                <div className=\"create-dataset-appended-list\">\n                                                    {newImages.map((image, i) => {\n                                                        return (\n                                                            <div className=\"create-dataset-image\" key={i}>\n                                                                <img src={URL.createObjectURL(image)} />\n                                                                <div>\n                                                                    <select value={newLabels[i]}\n                                                                            onChange={e => {setNewLabels(state => {\n                                                                                        const stateCopy = [...state]\n                                                                                    \n                                                                                        stateCopy[i] = e.target.value\n                                                                                    \n                                                                                        return stateCopy\n                                                                                    })}}>\n                                                                        <option value=\"No label\">No label</option>\n                                                                        {labels.map((label, j) => \n                                                                            <option value={label} key={j}>{label}</option>\n                                                                        )}\n                                                                    </select>\n                                                                    <div onClick={() => {deleteNewImages(i)}}>\n                                                                        <DeleteIcon className=\"create-dataset-image-delete\" />\n                                                                    </div>\n                                                                </div>\n                                                            </div>\n                                                        )\n                                                    })}\n                                                </div>\n                                                <div className=\"create-dataset-appended-footer\">\n                                                    <button className=\"blue-button\" \n                                                            disabled={newLabels.includes(\"No label\")}\n                                                            onClick={() => {\n                                                                if (appendMode) {\n                                                                    uploadAppended()\n                                                                } else {\n                                                                    uploadReplaced()\n                                                                }\n                                                            }}>Upload</button>\n                                                </div>\n                                            </div>\n                                        }\n                                        <div className=\"create-dataset-images-list\" key={refreshData}>\n                                            {uploadedImages.map((image, i) => {\n                                                if (i >= start && i < end) {\n                                                    return (\n                                                        <div className=\"create-dataset-image\" key={i}>\n                                                            <img src={type === \"create\" ? \n                                                                            URL.createObjectURL(image) \n                                                                        : assignedLabels[i] === \"No label\" ?\n                                                                            `http://127.0.0.1:5000/datasets/${dataset.imageDir}/no-label/${image}.jpg`\n                                                                        : assignedLabels[i] !== \"No label\" ?\n                                                                            `http://127.0.0.1:5000/datasets/${dataset.imageDir}/images/${assignedLabels[i]}/${image}.jpg`\n                                                                        :\n                                                                            URL.createObjectURL(image) \n                                                                        } \n                                                            />\n                                                            <div>\n                                                                <select value={assignedLabels[i]}\n                                                                        onChange={e => {updateLabel(e, i)}}>\n                                                                    <option value=\"No label\">No label</option>\n                                                                    {labels.map((label, j) => \n                                                                        <option value={label} key={j}>{label}</option>\n                                                                    )}\n                                                                </select>\n                                                                <div onClick={() => {deleteImage(image, i, assignedLabels[i])}}>\n                                                                    <DeleteIcon className=\"create-dataset-image-delete\" />\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                    )\n                                                }\n                                            })}\n                                        </div>\n                                    </>\n                                :   \n                                    <>\n                                        <div className=\"view-items-top\">\n                                            <h1>Dataset</h1>\n                                        </div>\n                                        <div className=\"create-dataset-images-list\" key={refreshData}>\n                                            {uploadedImages.map((image, i) => {\n                                                if (i >= start && i < end) {\n                                                    return (\n                                                        <div className=\"create-dataset-image\" key={i}>\n                                                            <img src={`http://127.0.0.1:5000/datasets/${dataset.imageDir}/images/${assignedLabels[i]}/${image}.jpg`} />\n                                                            <div>\n                                                                <p>{assignedLabels[i]}</p>\n                                                            </div>\n                                                        </div>\n                                                    )\n                                                }\n                                            })}\n                                        </div>\n                                    </>\n                                }\n                                {displayMessage && <MessageCard message={message} />}\n                            </div>\n                            <div className=\"create-workspace-data\">\n                                <p className=\"create-workspace-data-header\">Labels:</p>\n                                <div className=\"sidebar-divided\" />\n                                {(type === \"create\" || dataset.self) &&\n                                    <input className=\"create-dataset-label-input\"\n                                            placeholder=\"Add Label\"\n                                            onChange={e => {setAddLabel(e.target.value)}}\n                                            onKeyPress={addLabelKey}\n                                            value={addLabel} />\n                                }\n                                <div className=\"create-dataset-labels-list\" key={refreshLabels}>\n                                    {labels.map((label, i) => {\n                                        return (\n                                            <div className={`create-dataset-label ${colours[i % colours.length]}`} key={i}>\n                                                <p>{label}</p>\n                                                {(type === \"create\" || dataset.self) &&\n                                                    <div onClick={() => {deleteLabel(i)}}>\n                                                        <CloseIcon className=\"create-dataset-label-icon\" /> \n                                                    </div>\n                                                }\n                                            </div>\n                                        )\n                                    })}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            : loaded && !exist &&\n                <div className=\"inner-body\">  \n                    <p className=\"item-exist\">Cannot find dataset</p>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default Dataset"]},"metadata":{},"sourceType":"module"}