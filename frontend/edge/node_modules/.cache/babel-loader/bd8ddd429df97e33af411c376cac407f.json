{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Dataset.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useContext } from 'react';\nimport { useHistory, Link, useParams } from \"react-router-dom\";\nimport datasetsAPI from '../API/datasets';\nimport globalAPI from '../API/global';\nimport fileAPI from '../API/files';\nimport ViewData from '../Components/View-Data';\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport ItemRowCard from '../Components/Item-Row-Card';\nimport ItemSquareCard from '../Components/Item-Square-Card';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport { set } from 'mongoose';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Workspace = _ref => {\n  _s();\n\n  let {\n    currentUser\n  } = _ref;\n  const [loaded, setLoaded] = useState(false);\n  const [dataset, setDataset] = useState();\n  const [workspaces, setWorkspaces] = useState();\n  const [finishedWorkspaces, setFinishedWorkspaces] = useState(false);\n  const [section, setSection] = useState(\"data\");\n  const [dataTable, setDataTable] = useState();\n  const [start, setStart] = useState(0);\n  const [end, setEnd] = useState(30);\n  const [dataFile, setDataFile] = useState();\n  const [row, setRow] = useState();\n  const [maxRows, setMaxRows] = useState();\n  const [page, setPage] = useState(1);\n  const [rowFormat, setRowFormat] = useState(false);\n  const [replaceData, setReplaceData] = useState(false);\n  const [editData, setEditData] = useState(false);\n  const [date, setDate] = useState(\"\");\n  const [copyData, setCopyData] = useState(true);\n  const [bookmarked, setBookmarked] = useState();\n  const [upvoted, setUpvoted] = useState();\n  const [upvotes, setUpvotes] = useState();\n  const [visibility, setVisibility] = useState();\n  const [comments, setComments] = useState();\n  const [comment, setComment] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [image, setImage] = useState();\n  const [refreshTable, setRefreshTable] = useState();\n  const {\n    addOpenItems\n  } = useContext(OpenItemsContext);\n  const copyInterval = useRef(0);\n  const datasetID = useParams().id;\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const dataset = await datasetsAPI.get(`/${datasetID}`);\n        const comments = await globalAPI.get(`/comment/${datasetID}?type=dataset`);\n        const workspaces = await datasetsAPI.get(`/workspaces?id=${datasetID}&date=${new Date().toISOString()}`);\n\n        if (workspaces.data.data.length < 21) {\n          setFinishedWorkspaces(true);\n        }\n\n        if (dataset.data.data.self) {\n          addOpenItems(dataset.data.data._id, dataset.data.data.title, dataset.data.data.type);\n        }\n\n        setDataset(dataset.data.data);\n        setBookmarked(dataset.data.data.bookmarked);\n        setUpvoted(dataset.data.data.upvoted);\n        setUpvotes(dataset.data.data.upvotes);\n        setVisibility(dataset.data.data.visibility);\n        setTitle(dataset.data.data.title);\n        setDescription(dataset.data.data.description);\n        setWorkspaces(workspaces.data.data);\n        setComments(comments.data.data);\n        fetch(`http://127.0.0.1:5000/files/${dataset.data.data.data}.csv`).then(response => response.text()).then(text => {\n          setDataTable(text);\n          setMaxRows(text.slice(text.indexOf('\\n') + 1).split('\\n').length);\n          setLoaded(true);\n        });\n      } catch (err) {}\n    };\n\n    fetchData();\n  }, []);\n  useEffect(() => {\n    if (loaded) {\n      const updatedDate = new Date(dataset.updated);\n      const currentDate = new Date();\n\n      if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365).toString()} years ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n        setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24)).toString()} days ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600)).toString()} hours ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60)).toString()} minutes ago`);\n      } else {\n        setDate(\"Updated just now\");\n      }\n    }\n  }, [loaded]);\n\n  const fetchDataWorkspaces = async date => {\n    if (!finishedWorkspaces) {\n      try {\n        const fetchedWorkspaces = await datasetsAPI.get(`/workspaces?date=${date}`);\n        ;\n\n        if (fetchedWorkspaces.data.data.length < 21) {\n          setFinishedWorkspaces(true);\n        }\n\n        setWorkspaces(items => [...items, ...fetchedWorkspaces.data.data]);\n      } catch (err) {}\n    }\n  };\n\n  const loadMore = () => {\n    if (workspaces.length !== 0) {\n      {\n        fetchDataWorkspaces(workspaces[workspaces.length - 1].createdAt);\n      }\n    }\n  };\n\n  const copiedInterval = () => {\n    clearInterval(copyInterval.current);\n    navigator.clipboard.writeText(dataset.data);\n    setCopyData(false);\n    copyInterval.current = setInterval(() => {\n      setCopyData(true);\n    }, 800);\n    return () => {\n      clearInterval(copyInterval.current);\n    };\n  };\n\n  const updateUpvote = async () => {\n    try {\n      await globalAPI.put(`/upvote/${dataset._id}?type=${dataset.type}&state=${upvoted}`);\n\n      if (upvoted) {\n        setUpvotes(state => state - 1);\n      } else {\n        setUpvotes(state => state + 1);\n      }\n\n      setUpvoted(state => !state);\n    } catch (err) {}\n  };\n\n  const updateBookmark = async () => {\n    try {\n      await globalAPI.put(`/bookmark/${dataset._id}?type=${dataset.type}&state=${bookmarked}`);\n      setBookmarked(state => !state);\n    } catch (err) {}\n  };\n\n  const updateVisibility = async () => {\n    try {\n      await globalAPI.put(`/visibility/${dataset._id}?type=${dataset.type}&state=${visibility}`);\n      setVisibility(state => !state);\n    } catch (err) {}\n  };\n\n  const addComment = async e => {\n    e.preventDefault();\n\n    try {\n      await globalAPI.put(`/comment/${datasetID}?type=dataset`, {\n        comment: comment\n      });\n      setComments([{\n        user: {\n          name: currentUser.name\n        },\n        comment: comment\n      }, ...comments]);\n      setComment(\"\");\n    } catch (err) {}\n  };\n\n  const fetchRow = () => {\n    if (!isNaN(row) && row !== \"\") {\n      setStart(row - 1);\n      setEnd(row);\n      setRefreshTable(new Date().getTime());\n    } else {\n      if (start === (page - 1) * 30 && end === page * 30) {\n        setRow(\"\");\n      } else {\n        setStart((page - 1) * 30);\n        setEnd(page * 30);\n        setRefreshTable(new Date().getTime());\n      }\n    }\n  };\n\n  const cancelRow = () => {\n    if (start === (page - 1) * 30 && end === page * 30) {\n      setRow(\"\");\n    } else {\n      setStart((page - 1) * 30);\n      setEnd(page * 30);\n      setRefreshTable(new Date().getTime());\n    }\n  };\n\n  const previousPage = () => {\n    if (page > 1) {\n      setPage(state => state - 1);\n    }\n\n    setStart((page - 1) * 30);\n    setEnd(page * 30);\n    setRefreshTable(new Date().getTime());\n  };\n\n  const nextPage = () => {\n    if (page * 30 < maxRows && maxRows > 30) {\n      setPage(state => state + 1);\n      setStart(page * 30);\n      setEnd((page + 1) * 30);\n      setRefreshTable(new Date().getTime());\n    }\n  };\n\n  const uploadData = async () => {\n    if (dataFile !== undefined) {\n      const file = dataFile;\n      const reader = new FileReader();\n      const formData = new FormData();\n      const id = new Date().toISOString();\n\n      reader.onload = function (e) {\n        setDataTable(e.target.result);\n        setMaxRows(e.target.result.slice(e.target.result.indexOf('\\n') + 1).split('\\n').length);\n        setRefreshTable(new Date().getTime());\n      };\n\n      reader.readAsText(file);\n      formData.append('data', dataFile);\n      formData.append('id', id);\n\n      try {\n        await fileAPI.post(\"/upload\", formData);\n      } catch (err) {}\n    }\n  };\n\n  const commentDate = date => {\n    const updatedDate = new Date(date);\n    const currentDate = new Date();\n\n    if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n      return `Posted ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365).toString()} years ago`;\n    } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n      return `Posted ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`;\n    } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n      return `Posted ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24)).toString()} days ago`;\n    } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n      return `Posted ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600)).toString()} hours ago`;\n    } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n      return `Posted ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60)).toString()} minutes ago`;\n    } else {\n      return \"Posted just now\";\n    }\n  };\n\n  const updateWorkspaceSettings = () => {};\n\n  const deleteWorkspace = () => {};\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loaded && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"width-body\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dataset-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dataset-top\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"dataset-picture\",\n            src: `http://localhost:4000/images/${dataset.picture}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 29\n          }, this), dataset.self && /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"dataset-image-input\",\n            type: \"file\",\n            name: \"image\",\n            onChange: e => {\n              setImage(e.target.files[0]);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dataset-heading\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"http://localhost:3000/dataset.png\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 33\n            }, this), dataset.self ? /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"dataset-title-input\",\n              placeholder: \"Title\",\n              value: title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 37\n            }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: dataset.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [!dataset.self && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"dataset-meta\",\n              children: dataset.creatorName.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 51\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"dataset-date\",\n              children: date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 33\n            }, this), !dataset.self && /*#__PURE__*/_jsxDEV(BookmarkIcon, {\n              className: `dataset-icon ${bookmarked ? \"blue\" : \"grey\"}`,\n              onClick: () => {\n                updateBookmark();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 51\n            }, this), /*#__PURE__*/_jsxDEV(ThumbUpIcon, {\n              className: `dataset-icon ${upvoted ? \"blue\" : \"grey\"}`,\n              onClick: () => {\n                updateUpvote();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: `dataset-upvotes ${upvoted ? \"blue\" : \"grey\"}`,\n              children: upvotes\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 29\n          }, this), dataset.self ? /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"dataset-description-input\",\n            placeholder: \"Description\",\n            value: description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"dataset-description\",\n            children: dataset.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"dataset-select\",\n            onChange: e => {\n              setSection(e.target.value);\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"data\",\n              children: \"Data\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"workspace\",\n              children: \"Workspaces\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"comment\",\n              children: \"Comments\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dataset-bottom\",\n          children: section === \"data\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dataset-options\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"dataset-copy\",\n                children: [copyData ? /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Data ID\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 326,\n                  columnNumber: 57\n                }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Copied\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 326,\n                  columnNumber: 74\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  disabled: !copyData,\n                  onClick: () => {\n                    copiedInterval();\n                  },\n                  children: /*#__PURE__*/_jsxDEV(ContentCopyIcon, {\n                    className: \"dataset-copy-icon\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 328,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 327,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 325,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n                href: `http://127.0.0.1:5000/files/${dataset.data}.csv`,\n                download: true,\n                children: \"Download\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 331,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dataset-data-table-pagination\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                placeholder: \"Row number\",\n                value: row,\n                onChange: e => {\n                  setRow(e.target.value);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 334,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  fetchRow();\n                },\n                className: \"blue-button dataset-data-fetch\",\n                children: \"Fetch\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 335,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  cancelRow();\n                },\n                className: \"grey-button dataset-data-cancel-fetch\",\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 336,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 337,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(ArrowBackIosNewIcon, {\n                className: \"dataset-data-table-pagination-icon\",\n                onClick: () => {\n                  previousPage();\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 338,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Page \", page, \" / Page \", Math.ceil(maxRows / 30)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 339,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(ArrowForwardIosIcon, {\n                className: \"dataset-data-table-pagination-icon\",\n                onClick: () => {\n                  nextPage();\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 340,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dataset-data-table\",\n              children: /*#__PURE__*/_jsxDEV(ViewData, {\n                dataTable: dataTable,\n                start: start,\n                end: end\n              }, refreshTable, false, {\n                fileName: _jsxFileName,\n                lineNumber: 343,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true) : section === \"workspace\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dataset-workspaces\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: `${workspaces.length} Workspaces use this dataset`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 349,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: \"http://localhost:3000/List.png\",\n                className: \"dataset-workspaces-row-icon\",\n                onClick: () => {\n                  setRowFormat(true);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: \"http://localhost:3000/Grid.png\",\n                className: \"dataset-workspaces-grid-icon\",\n                onClick: () => {\n                  setRowFormat(false);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 351,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dataset-workspaces-list\",\n              children: workspaces.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: workspaces.map((workspace, i) => {\n                  return rowFormat ? /*#__PURE__*/_jsxDEV(ItemRowCard, {\n                    item: workspace,\n                    creator: workspace.creatorName.name,\n                    currentUserID: currentUser.id,\n                    created: workspace.creator === currentUser.id\n                  }, i, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 357,\n                    columnNumber: 72\n                  }, this) : /*#__PURE__*/_jsxDEV(ItemSquareCard, {\n                    item: workspace,\n                    creator: workspace.creatorName.name,\n                    currentUserID: currentUser.id,\n                    created: workspace.creator === currentUser.id\n                  }, i, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 357,\n                    columnNumber: 230\n                  }, this);\n                })\n              }, void 0, false)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dataset-workspaces-end\",\n              children: workspaces.length >= 0 && finishedWorkspaces ? /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"end-items\",\n                children: \"No more workspaces\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 364,\n                columnNumber: 45\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"load-items\",\n                onClick: () => {\n                  loadMore();\n                },\n                children: \"Load more\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 366,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 362,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"form\", {\n              className: \"dataset-comment-form\",\n              method: \"PUT\",\n              onSubmit: addComment,\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"dataset-comment\",\n                children: \"Leave a Comment\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 373,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                className: \"dataset-comment-input\",\n                placeholder: \"Write here\",\n                value: comment,\n                onChange: e => {\n                  setComment(e.target.value);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"blue-button\",\n                children: \"Comment\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 375,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dataset-comments\",\n              children: comments.map((comment, i) => {\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"comment-card\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"comment-card-user\",\n                      children: comment.user.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 382,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"comment-card-date\",\n                      children: commentDate(comment.createdAt)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 383,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 381,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"comment-card-comment\",\n                    children: comment.comment\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 385,\n                    columnNumber: 53\n                  }, this)]\n                }, i, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 380,\n                  columnNumber: 49\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 377,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(Workspace, \"ZX3qikIOrvlahXjN3+e6hAL7Wtc=\", false, function () {\n  return [useParams];\n});\n\n_c = Workspace;\nexport default Workspace;\n\nvar _c;\n\n$RefreshReg$(_c, \"Workspace\");","map":{"version":3,"sources":["/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Dataset.jsx"],"names":["React","useState","useEffect","useRef","useContext","useHistory","Link","useParams","datasetsAPI","globalAPI","fileAPI","ViewData","OpenItemsContext","ItemRowCard","ItemSquareCard","BookmarkIcon","ThumbUpIcon","ContentCopyIcon","ArrowForwardIosIcon","ArrowBackIosNewIcon","set","Workspace","currentUser","loaded","setLoaded","dataset","setDataset","workspaces","setWorkspaces","finishedWorkspaces","setFinishedWorkspaces","section","setSection","dataTable","setDataTable","start","setStart","end","setEnd","dataFile","setDataFile","row","setRow","maxRows","setMaxRows","page","setPage","rowFormat","setRowFormat","replaceData","setReplaceData","editData","setEditData","date","setDate","copyData","setCopyData","bookmarked","setBookmarked","upvoted","setUpvoted","upvotes","setUpvotes","visibility","setVisibility","comments","setComments","comment","setComment","title","setTitle","description","setDescription","image","setImage","refreshTable","setRefreshTable","addOpenItems","copyInterval","datasetID","id","fetchData","get","Date","toISOString","data","length","self","_id","type","fetch","then","response","text","slice","indexOf","split","err","updatedDate","updated","currentDate","getTime","Math","floor","toString","fetchDataWorkspaces","fetchedWorkspaces","items","loadMore","createdAt","copiedInterval","clearInterval","current","navigator","clipboard","writeText","setInterval","updateUpvote","put","state","updateBookmark","updateVisibility","addComment","e","preventDefault","user","name","fetchRow","isNaN","cancelRow","previousPage","nextPage","uploadData","undefined","file","reader","FileReader","formData","FormData","onload","target","result","readAsText","append","post","commentDate","updateWorkspaceSettings","deleteWorkspace","picture","files","creatorName","value","ceil","map","workspace","i","creator"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef, useContext} from 'react'\nimport {useHistory, Link, useParams} from \"react-router-dom\"\nimport datasetsAPI from '../API/datasets'\nimport globalAPI from '../API/global'\nimport fileAPI from '../API/files'\nimport ViewData from '../Components/View-Data';\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport ItemRowCard from '../Components/Item-Row-Card'\nimport ItemSquareCard from '../Components/Item-Square-Card'\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport { set } from 'mongoose'\n\nconst Workspace = ({currentUser}) => {\n    const [loaded, setLoaded] = useState(false)\n    const [dataset, setDataset] = useState()\n    const [workspaces, setWorkspaces] = useState()\n    const [finishedWorkspaces, setFinishedWorkspaces] = useState(false)\n    const [section, setSection] = useState(\"data\")\n    const [dataTable, setDataTable] = useState()\n    const [start, setStart] = useState(0)\n    const [end, setEnd] = useState(30)\n    const [dataFile, setDataFile] = useState()\n    const [row, setRow] = useState()\n    const [maxRows, setMaxRows] = useState()\n    const [page, setPage] = useState(1)\n    const [rowFormat, setRowFormat] = useState(false)\n    const [replaceData, setReplaceData] = useState(false)\n    const [editData, setEditData] = useState(false)\n    const [date, setDate] = useState(\"\");\n    const [copyData, setCopyData] = useState(true)\n    const [bookmarked, setBookmarked] = useState()\n    const [upvoted, setUpvoted] = useState()\n    const [upvotes, setUpvotes] = useState()\n    const [visibility, setVisibility] = useState()\n    const [comments, setComments] = useState()\n    const [comment, setComment] = useState(\"\")\n    const [title, setTitle] = useState(\"\")\n    const [description, setDescription] = useState(\"\")\n    const [image, setImage] = useState();\n    const [refreshTable, setRefreshTable] = useState()\n    const {addOpenItems} = useContext(OpenItemsContext);\n    const copyInterval = useRef(0)\n    const datasetID = useParams().id;\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const dataset = await datasetsAPI.get(`/${datasetID}`);\n                const comments = await globalAPI.get(`/comment/${datasetID}?type=dataset`);\n                const workspaces = await datasetsAPI.get(`/workspaces?id=${datasetID}&date=${new Date().toISOString()}`);\n\n                if (workspaces.data.data.length < 21) {\n                    setFinishedWorkspaces(true)\n                }\n\n                if (dataset.data.data.self) {\n                    addOpenItems(dataset.data.data._id, dataset.data.data.title, dataset.data.data.type)\n                }\n\n                setDataset(dataset.data.data);\n                setBookmarked(dataset.data.data.bookmarked)\n                setUpvoted(dataset.data.data.upvoted)\n                setUpvotes(dataset.data.data.upvotes)\n                setVisibility(dataset.data.data.visibility)\n                setTitle(dataset.data.data.title)\n                setDescription(dataset.data.data.description)\n                setWorkspaces(workspaces.data.data)\n                setComments(comments.data.data)\n\n                fetch(`http://127.0.0.1:5000/files/${dataset.data.data.data}.csv`)\n                    .then(response => response.text())\n                    .then(text => {\n                        setDataTable(text)\n                        setMaxRows(text.slice(text.indexOf('\\n')+1).split('\\n').length)\n                        setLoaded(true)\n                    })\n            } catch (err) {}\n        }\n        fetchData();\n    }, [])\n\n    useEffect(() => {\n        if (loaded) {\n            const updatedDate = new Date(dataset.updated);\n            const currentDate = new Date();\n    \n            if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} years ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} days ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hours ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minutes ago`)\n            } else {\n                setDate(\"Updated just now\")\n            }\n        }\n    }, [loaded])\n\n    const fetchDataWorkspaces = async (date) => {\n        if (!finishedWorkspaces) {\n            try {\n                const fetchedWorkspaces = await datasetsAPI.get(`/workspaces?date=${date}`);;\n    \n                if (fetchedWorkspaces.data.data.length < 21) {\n                    setFinishedWorkspaces(true)\n                }\n\n                setWorkspaces(items => [...items, ...fetchedWorkspaces.data.data]);\n            } catch (err) {}\n        }\n    }\n\n    const loadMore = () => {\n        if (workspaces.length !== 0) {\n            {fetchDataWorkspaces(workspaces[workspaces.length-1].createdAt)}\n        }\n    };\n\n    const copiedInterval = () => {\n        clearInterval(copyInterval.current)\n        navigator.clipboard.writeText(dataset.data);\n        setCopyData(false);\n        copyInterval.current = setInterval(() => {\n            setCopyData(true);\n        }, 800)\n        return ()=> {clearInterval(copyInterval.current)};\n    }\n\n    const updateUpvote = async () => {\n        try {\n            await globalAPI.put(`/upvote/${dataset._id}?type=${dataset.type}&state=${upvoted}`);\n\n            if (upvoted) {\n                setUpvotes(state => state-1)\n            } else {\n                setUpvotes(state => state+1)\n            }\n\n            setUpvoted(state => !state)\n        } catch (err) {}\n    }\n\n    const updateBookmark = async () => {\n        try {\n            await globalAPI.put(`/bookmark/${dataset._id}?type=${dataset.type}&state=${bookmarked}`);\n            \n            setBookmarked(state => !state)\n        } catch (err) {}\n    }\n\n    const updateVisibility = async () => {\n        try {\n            await globalAPI.put(`/visibility/${dataset._id}?type=${dataset.type}&state=${visibility}`);\n\n            setVisibility(state => !state)\n        } catch (err) {}\n    }\n\n    const addComment = async (e) => {\n        e.preventDefault()\n\n        try {\n            await globalAPI.put(`/comment/${datasetID}?type=dataset`, {\n                comment: comment\n            });\n\n            setComments([{\n                user: {name: currentUser.name},\n                comment: comment\n            }, ...comments])\n            setComment(\"\")\n        } catch (err) {}\n    }\n\n    const fetchRow = () => {\n        if (!isNaN(row) && row !== \"\") {\n            setStart(row-1)\n            setEnd(row)\n            setRefreshTable(new Date().getTime())\n        } else {\n            if (start === (page-1)*30 && end === page*30) {\n                setRow(\"\")\n            } else {\n                setStart((page-1)*30)\n                setEnd(page*30)\n                setRefreshTable(new Date().getTime())\n            }\n        }\n    }\n\n    const cancelRow = () => {\n        if (start === (page-1)*30 && end === page*30) {\n            setRow(\"\")\n        } else {\n            setStart((page-1)*30)\n            setEnd(page*30)\n            setRefreshTable(new Date().getTime())\n        }\n    }\n\n    const previousPage = () => {\n        if (page > 1) {\n            setPage(state => state-1)\n        }\n        setStart((page-1)*30)\n        setEnd(page*30)\n        setRefreshTable(new Date().getTime())\n    }\n\n    const nextPage = () => {\n        if (page*30 < maxRows && maxRows > 30) {\n            setPage(state => state+1)\n            setStart((page)*30)\n            setEnd((page+1)*30)\n            setRefreshTable(new Date().getTime())\n        }\n    }\n\n    const uploadData = async () => {\n        if (dataFile !== undefined) {\n            const file = dataFile;\n            const reader = new FileReader();\n            const formData = new FormData();\n            const id = new Date().toISOString();\n\n            reader.onload = function(e) {\n                setDataTable(e.target.result);\n                setMaxRows(e.target.result.slice(e.target.result.indexOf('\\n')+1).split('\\n').length)\n                setRefreshTable(new Date().getTime())\n            }\n\n            reader.readAsText(file)\n            \n            formData.append('data', dataFile);\n            formData.append('id', id)\n\n            try {\n                await fileAPI.post(\"/upload\", formData);\n            } catch (err) {}\n        }\n    }\n\n    const commentDate = (date) => {\n        const updatedDate = new Date(date);\n        const currentDate = new Date();\n\n        if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n            return `Posted ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} years ago`\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n            return `Posted ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n            return `Posted ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} days ago`\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n            return `Posted ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hours ago`\n        } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n            return `Posted ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minutes ago`\n        } else {\n            return \"Posted just now\"\n        }\n    }\n\n    const updateWorkspaceSettings = () => {\n\n    }\n\n    const deleteWorkspace = () => {\n\n    }\n\n    return (\n        <>\n            {loaded &&\n                <div className=\"width-body\">  \n                    <div className=\"dataset-body\">\n                        <div className=\"dataset-top\">\n                            <img className=\"dataset-picture\" src={`http://localhost:4000/images/${dataset.picture}`} />\n                            {dataset.self && \n                                <input className=\"dataset-image-input\"\n                                        type=\"file\" \n                                        name=\"image\" \n                                        onChange={e => {setImage(e.target.files[0])}} />\n                            }\n                            <div className=\"dataset-heading\">\n                                <img src=\"http://localhost:3000/dataset.png\" />\n                                {dataset.self ? \n                                    <input className=\"dataset-title-input\"\n                                            placeholder=\"Title\" \n                                            value={title} /> \n                                : \n                                    <h1>{dataset.title}</h1>\n                                }\n                            </div>\n                            <div>\n                                {!dataset.self && <p className=\"dataset-meta\">{dataset.creatorName.name}</p>}\n                                <p className=\"dataset-date\">{date}</p>\n                                {!dataset.self && <BookmarkIcon className={`dataset-icon ${bookmarked ? \"blue\" : \"grey\"}`} onClick={() => {updateBookmark()}} />}\n                                <ThumbUpIcon className={`dataset-icon ${upvoted ? \"blue\" : \"grey\"}`} onClick={() => {updateUpvote()}} />\n                                <p className={`dataset-upvotes ${upvoted ? \"blue\" : \"grey\"}`}>{upvotes}</p>\n                            </div>\n                            {dataset.self ? \n                                <input className=\"dataset-description-input\"\n                                        placeholder=\"Description\" \n                                        value={description} /> \n                            : \n                                <p className=\"dataset-description\">{dataset.description}</p>\n                            }\n                            <select className=\"dataset-select\" onChange={e => {setSection(e.target.value)}}>\n                                <option value=\"data\">Data</option>\n                                <option value=\"workspace\">Workspaces</option>\n                                <option value=\"comment\">Comments</option>\n                            </select>\n                        </div>\n                        <div className=\"dataset-bottom\">\n                            {section === \"data\" ? \n                                <> \n                                    <div className=\"dataset-options\">\n                                        <div className=\"dataset-copy\">\n                                            {copyData ? <p>Data ID</p> : <p>Copied</p>}\n                                            <button disabled={!copyData} onClick={() => {copiedInterval()}}>\n                                                <ContentCopyIcon className=\"dataset-copy-icon\" />\n                                            </button>\n                                        </div>\n                                        <a href={`http://127.0.0.1:5000/files/${dataset.data}.csv`} download>Download</a>\n                                    </div>\n                                    <div className=\"dataset-data-table-pagination\">\n                                        <input placeholder=\"Row number\" value={row} onChange={e => {setRow(e.target.value)}} />\n                                        <button onClick={() => {fetchRow()}} className=\"blue-button dataset-data-fetch\">Fetch</button>\n                                        <button onClick={() => {cancelRow()}} className=\"grey-button dataset-data-cancel-fetch\">Cancel</button>\n                                        <span />\n                                        <ArrowBackIosNewIcon className=\"dataset-data-table-pagination-icon\" onClick={() => {previousPage()}} />\n                                        <p>Page {page} / Page {Math.ceil(maxRows/30)}</p>\n                                        <ArrowForwardIosIcon className=\"dataset-data-table-pagination-icon\" onClick={() => {nextPage()}} />\n                                    </div>\n                                    <div className=\"dataset-data-table\">\n                                        <ViewData dataTable={dataTable} start={start} end={end} key={refreshTable} />\n                                    </div>\n                                </>\n                            : section === \"workspace\" ?\n                                <>\n                                    <div className=\"dataset-workspaces\">\n                                        <p>{`${workspaces.length} Workspaces use this dataset`}</p>\n                                        <img src=\"http://localhost:3000/List.png\" className=\"dataset-workspaces-row-icon\" onClick={() => {setRowFormat(true)}} />\n                                        <img src=\"http://localhost:3000/Grid.png\" className=\"dataset-workspaces-grid-icon\" onClick={() => {setRowFormat(false)}} />\n                                    </div>\n                                    <div className=\"dataset-workspaces-list\">\n                                        {workspaces.length > 0 &&\n                                            <>\n                                                {workspaces.map((workspace, i) => {\n                                                    return rowFormat ? <ItemRowCard item={workspace} creator={workspace.creatorName.name} currentUserID={currentUser.id} created={workspace.creator === currentUser.id} key={i} /> : <ItemSquareCard item={workspace} creator={workspace.creatorName.name} currentUserID={currentUser.id} created={workspace.creator === currentUser.id} key={i} />\n                                                })}\n                                            </>\n                                        }\n                                    </div>\n                                    <div className=\"dataset-workspaces-end\">\n                                        {workspaces.length >= 0 && finishedWorkspaces ?\n                                            <p className=\"end-items\">No more workspaces</p>\n                                            :\n                                            <p className=\"load-items\" onClick={() => {loadMore()}}>Load more</p>\n                                        }\n                                    </div>\n                                </>\n                            :\n                                <>\n                                    <form className=\"dataset-comment-form\" method=\"PUT\" onSubmit={addComment}>\n                                        <p className=\"dataset-comment\">Leave a Comment</p>\n                                        <textarea className=\"dataset-comment-input\" placeholder=\"Write here\" value={comment} onChange={e => {setComment(e.target.value)}} />\n                                        <button className=\"blue-button\">Comment</button>\n                                    </form>\n                                    <div className=\"dataset-comments\">\n                                        {comments.map((comment, i) => {\n                                            return (\n                                                <div className=\"comment-card\" key={i}>\n                                                    <div>\n                                                        <p className=\"comment-card-user\">{comment.user.name}</p>\n                                                        <p className=\"comment-card-date\">{commentDate(comment.createdAt)}</p>\n                                                    </div>\n                                                    <p className=\"comment-card-comment\">{comment.comment}</p>\n                                                </div>\n                                            )\n                                        })}\n                                    </div>\n                                </>\n                            }\n                        </div>\n                    </div>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default Workspace\n"]},"metadata":{},"sourceType":"module"}