{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/View-Workspaces.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useHistory, Link, useParams } from \"react-router-dom\";\nimport WorkspaceRowCard from '../Components/Workspace-Row-Card';\nimport WorkspaceSquareCard from '../Components/Workspace-Square-Card';\nimport usersAPI from '../API/users';\nimport workspacesAPI from '../API/workspaces';\nimport GridOnIcon from '@mui/icons-material/GridOn';\nimport ListAltIcon from '@mui/icons-material/ListAlt';\nimport SearchIcon from '@mui/icons-material/Search';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AccountWorkspaces = _ref => {\n  _s();\n\n  let {\n    type\n  } = _ref;\n  const [workspaces, setWorkspaces] = useState();\n  const [loaded, setLoaded] = useState(false);\n  const [rowFormat, setRowFormat] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        let workspaces;\n\n        if (type === \"self\") {\n          workspaces = await usersAPI.get(`/created?date=${new Date().toISOString()}`);\n        } else if (type === \"bookmark\") {\n          workspaces = await usersAPI.get(`/bookmarked?date=${new Date().toISOString()}`);\n        } else if (type === \"popular\") {\n          workspaces = await workspacesAPI.get(`/popular?date=${new Date().toISOString()}`);\n        } else if (type === \"all\") {\n          workspaces = await workspacesAPI.get(`/all?date=${new Date().toISOString()}`);\n        } else {\n          workspaces = await workspacesAPI.get(\"/discover\");\n        }\n\n        setWorkspaces(workspaces.data.data);\n        setLoaded(true);\n      } catch (err) {}\n    };\n\n    fetchData();\n  }, []);\n\n  const displayHeading = () => {\n    if (type === \"self\") {\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"My Workspaces\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 20\n      }, this);\n    } else if (type === \"bookmark\") {\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Bookmarked Workspaces\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 20\n      }, this);\n    } else if (type === \"popular\") {\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Popular Workspaces\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"All Workspaces\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 20\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loaded && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"width-body\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"view-workspaces-body\",\n        children: [(type === \"popular\" || type === \"all\") && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"view-workspaces-search\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"view-workspaces-search-input\",\n            placeholder: \"Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(SearchIcon, {\n            className: \"view-workspaces-search-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"view-workspaces-top\",\n          children: [displayHeading(), type === \"self\" && /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/new-workspace\",\n            className: \"blue-button\",\n            children: \"New Workspace\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 49\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"view-workspaces-middle\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: `${workspaces.length} Workspaces`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(ListAltIcon, {\n            className: \"view-workspaces-row-icon\",\n            onClick: () => {\n              setRowFormat(true);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(GridOnIcon, {\n            className: \"view-workspaces-grid-icon\",\n            onClick: () => {\n              setRowFormat(false);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"view-workspaces-list\",\n          children: workspaces.map((workspace, i) => {\n            return rowFormat ? /*#__PURE__*/_jsxDEV(WorkspaceRowCard, {\n              workspace: workspace,\n              self: type === \"self\"\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 52\n            }, this) : /*#__PURE__*/_jsxDEV(WorkspaceSquareCard, {\n              workspace: workspace,\n              self: type === \"self\"\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 128\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(AccountWorkspaces, \"KNJbg/Gf/YiD5BbdqlQvagaH2bE=\");\n\n_c = AccountWorkspaces;\nexport default AccountWorkspaces;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountWorkspaces\");","map":{"version":3,"sources":["/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/View-Workspaces.jsx"],"names":["React","useState","useEffect","useHistory","Link","useParams","WorkspaceRowCard","WorkspaceSquareCard","usersAPI","workspacesAPI","GridOnIcon","ListAltIcon","SearchIcon","AccountWorkspaces","type","workspaces","setWorkspaces","loaded","setLoaded","rowFormat","setRowFormat","fetchData","get","Date","toISOString","data","err","displayHeading","length","map","workspace","i"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport {useHistory, Link, useParams} from \"react-router-dom\"\nimport WorkspaceRowCard from '../Components/Workspace-Row-Card'\nimport WorkspaceSquareCard from '../Components/Workspace-Square-Card'\nimport usersAPI from '../API/users'\nimport workspacesAPI from '../API/workspaces'\nimport GridOnIcon from '@mui/icons-material/GridOn';\nimport ListAltIcon from '@mui/icons-material/ListAlt';\nimport SearchIcon from '@mui/icons-material/Search';\n\nconst AccountWorkspaces = ({type}) => {\n    const [workspaces, setWorkspaces] = useState();\n    const [loaded, setLoaded] = useState(false);\n    const [rowFormat, setRowFormat] = useState(false)\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                let workspaces;\n\n                if (type === \"self\") {\n                    workspaces = await usersAPI.get(`/created?date=${new Date().toISOString()}`);\n                } else if (type === \"bookmark\") {\n                    workspaces = await usersAPI.get(`/bookmarked?date=${new Date().toISOString()}`);\n                } else if (type === \"popular\") {\n                    workspaces = await workspacesAPI.get(`/popular?date=${new Date().toISOString()}`);\n                } else if (type === \"all\") {\n                    workspaces = await workspacesAPI.get(`/all?date=${new Date().toISOString()}`);\n                } else {\n                    workspaces = await workspacesAPI.get(\"/discover\");\n                }\n\n                setWorkspaces(workspaces.data.data);\n                setLoaded(true);\n            } catch (err) {}\n        }\n        fetchData();\n    }, [])\n\n    const displayHeading = () => {\n        if (type === \"self\") {\n            return <h1>My Workspaces</h1>\n        } else if (type === \"bookmark\") {\n            return <h1>Bookmarked Workspaces</h1>\n        } else if (type === \"popular\") {\n            return <h1>Popular Workspaces</h1>\n        } else {\n            return <h1>All Workspaces</h1>\n        }\n    }\n\n    return (\n        <>\n            {loaded &&\n                <div className=\"width-body\">  \n                    <div className=\"view-workspaces-body\">\n                        {(type === \"popular\" || type === \"all\") &&\n                            <div className=\"view-workspaces-search\">\n                                <input className=\"view-workspaces-search-input\" placeholder=\"Search\" />\n                                <SearchIcon className=\"view-workspaces-search-icon\" />\n                            </div>\n                        }\n                        <div className=\"view-workspaces-top\">\n                            {displayHeading()}\n                            {type === \"self\" && <Link to=\"/new-workspace\" className=\"blue-button\">New Workspace</Link>}\n                        </div>\n                        <div className=\"view-workspaces-middle\">\n                            <p>{`${workspaces.length} Workspaces`}</p>\n                            <ListAltIcon className=\"view-workspaces-row-icon\" onClick={() => {setRowFormat(true)}} />\n                            <GridOnIcon className=\"view-workspaces-grid-icon\" onClick={() => {setRowFormat(false)}} />\n                        </div>\n                        <div className=\"view-workspaces-list\">\n                            {workspaces.map((workspace, i) => {\n                                return rowFormat ? <WorkspaceRowCard workspace={workspace} self={type === \"self\"} key={i} /> : <WorkspaceSquareCard workspace={workspace\n                                } self={type === \"self\"} key={i} />\n                            })}\n                        </div>\n                    </div>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default AccountWorkspaces"]},"metadata":{},"sourceType":"module"}