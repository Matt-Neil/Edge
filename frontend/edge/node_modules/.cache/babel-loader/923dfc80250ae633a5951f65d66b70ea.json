{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Workspace.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useContext } from 'react';\nimport { useHistory, useParams, Link } from \"react-router-dom\";\nimport { Line } from 'react-chartjs-2';\nimport usersAPI from '../API/users';\nimport itemsAPI from '../API/items';\nimport globalAPI from '../API/global';\nimport imageAPI from '../API/images';\nimport trainAPI from '../API/train';\nimport ModelNode from '../Components/Model-Node';\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n\nconst Workspace = _ref => {\n  _s();\n\n  let {\n    currentUser,\n    type\n  } = _ref;\n  const [stage, setStage] = useState(\"model\");\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [visibility, setVisibility] = useState(false);\n  const [bookmarked, setBookmarked] = useState();\n  const [upvoted, setUpvoted] = useState();\n  const [upvotes, setUpvotes] = useState();\n  const [updated, setUpdated] = useState();\n  const [picture, setPicture] = useState();\n  const [date, setDate] = useState(\"\");\n  const [start, setStart] = useState(0);\n  const [timer, setTimer] = useState(0);\n  const [end, setEnd] = useState(20);\n  const [page, setPage] = useState(1);\n  const [image, setImage] = useState();\n  const [datasetID, setDatasetID] = useState(\"\");\n  const [uploadedDataset, setUploadedDataset] = useState();\n  const [workspace, setWorkspace] = useState([]);\n  const [images, setImages] = useState([]);\n  const [assignedLabels, setAssignedLabels] = useState([]);\n  const [refreshData, setRefreshData] = useState();\n  const [refreshDiagram, setRefreshDiagram] = useState();\n  const [changedSettings, setChangedSettings] = useState(false);\n  const [model, setModel] = useState([]);\n  const [selectedNode, setSelectedNode] = useState(0);\n  const [configuration, setConfiguration] = useState({\n    epochs: 0,\n    training_split: 0,\n    validation_split: 0,\n    improvement: 0,\n    early_stopping: false,\n    patience: 0,\n    batch: 32,\n    lr_scheduler: false,\n    initial_lr: 0.01,\n    optimiser: \"\",\n    loss: \"\"\n  });\n  const [addNode, setAddNode] = useState(false);\n  const [testAcc, setTestAcc] = useState();\n  const [testLoss, setTestLoss] = useState();\n  const [trainAcc, setTrainAcc] = useState();\n  const [trainLoss, setTrainLoss] = useState();\n  const [trainEpochs, setTrainEpochs] = useState([]);\n  const [validationAcc, setValidationAcc] = useState();\n  const [validationLoss, setValidationLoss] = useState();\n  const [loaded, setLoaded] = useState(false);\n  const [exist, setExist] = useState();\n  const [noData, setNoData] = useState();\n  const [disableCreate, setDisabledCreate] = useState(false);\n  const [disableTrain, setDisabledTrain] = useState(false);\n  const [displayPublic, setDisplayPublic] = useState(false);\n  const [displayExist, setDisplayExist] = useState(false);\n  const {\n    addOpenItems,\n    removeOpenItems\n  } = useContext(OpenItemsContext);\n  const modelRef = useRef(null);\n  const workspaceID = useParams().id;\n  const publicInterval = useRef(0);\n  const existInterval = useRef(0);\n  const history = useHistory();\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (type === \"create\") {\n          const workspace = await usersAPI.get(\"/created?type=workspace\");\n          workspace.data.data.map(workspace => {\n            setWorkspace(previous => [...previous, workspace.title]);\n          });\n          setExist(true);\n          setLoaded(true);\n        } else {\n          const workspace = await itemsAPI.get(`/${workspaceID}?type=workspace`);\n\n          if (workspace.data.data.self) {\n            addOpenItems(workspace.data.data._id, workspace.data.data.title, workspace.data.data.type);\n          }\n\n          setWorkspace(workspace.data.data);\n          setUpdated(workspace.data.data.updated);\n          setBookmarked(workspace.data.data.bookmarked);\n          setUpvoted(workspace.data.data.upvoted);\n          setPicture(workspace.data.data.picture);\n          setUpvotes(workspace.data.data.upvotes);\n          setDatasetID(workspace.data.data.dataset._id);\n          setVisibility(workspace.data.data.visibility);\n          setTitle(workspace.data.data.title);\n          setDescription(workspace.data.data.description);\n          setModel(workspace.data.data.model);\n          setConfiguration(workspace.data.data.configuration);\n          setUploadedDataset(workspace.data.data.dataset);\n          fetch(`http://127.0.0.1:5000/files/${workspace.data.data.dataset.imageFile}/labels.json`).then(response => response.json()).then(images => {\n            images.map(image => {\n              setImages(state => [...state, image.filename]);\n              setAssignedLabels(state => [...state, image.label]);\n            });\n            setExist(true);\n            setNoData(false);\n            setLoaded(true);\n          }).catch(() => {\n            setExist(true);\n            setNoData(true);\n            setLoaded(true);\n          });\n        }\n      } catch (err) {\n        setExist(false);\n        setLoaded(true);\n      }\n    };\n\n    fetchData();\n  }, []);\n  useEffect(() => {\n    const timerID = stage === \"train\" && setInterval(() => {\n      setTimer(previous => previous + 1);\n    }, 1000);\n    return () => {\n      clearInterval(timerID);\n    };\n  }, [timer, stage]);\n  useEffect(() => {\n    if (modelRef.current) {\n      modelRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'end',\n        inline: 'end'\n      });\n    }\n  }, [model.length, addNode]);\n  useEffect(() => {\n    if (loaded && exist) {\n      const updatedDate = new Date(updated);\n      const currentDate = new Date();\n\n      if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365).toString()} years ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n        setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24)).toString()} days ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600)).toString()} hours ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60)).toString()} minutes ago`);\n      } else {\n        setDate(\"Updated just now\");\n      }\n    }\n  }, [loaded, updated]);\n\n  const searchFunctionKey = e => {\n    if (e.key === \"Enter\" && datasetID !== \"\") {\n      existingDataset();\n    }\n  };\n\n  const updateUpvote = async () => {\n    try {\n      await globalAPI.put(`/upvote/${workspaceID}?state=${upvoted}`);\n\n      if (upvoted) {\n        setUpvotes(state => state - 1);\n      } else {\n        setUpvotes(state => state + 1);\n      }\n\n      setUpvoted(state => !state);\n    } catch (err) {}\n  };\n\n  const updateBookmark = async () => {\n    try {\n      await globalAPI.put(`/bookmark/${workspaceID}?state=${bookmarked}`);\n      setBookmarked(state => !state);\n    } catch (err) {}\n  };\n\n  const updateVisibility = async () => {\n    try {\n      await globalAPI.put(`/visibility/${workspaceID}`);\n      setVisibility(state => !state);\n    } catch (err) {}\n  };\n\n  const displayPublicInterval = () => {\n    clearInterval(publicInterval.current);\n    setDisplayPublic(true);\n    publicInterval.current = setInterval(() => {\n      setDisplayPublic(false);\n    }, 1200);\n    return () => {\n      clearInterval(publicInterval.current);\n    };\n  };\n\n  const displayExistInterval = () => {\n    clearInterval(existInterval.current);\n    setDisplayExist(true);\n    existInterval.current = setInterval(() => {\n      setDisplayExist(false);\n    }, 1200);\n    return () => {\n      clearInterval(existInterval.current);\n    };\n  };\n\n  const previousPage = () => {\n    if (page > 1) {\n      setStart((page - 2) * 20);\n      setEnd((page - 1) * 20);\n      setPage(state => state - 1);\n      setRefreshData(new Date().getTime());\n    }\n  };\n\n  const nextPage = () => {\n    if (page * 20 < images.length && images.length > 20) {\n      setPage(state => state + 1);\n      setStart(page * 20);\n      setEnd((page + 1) * 20);\n      setRefreshData(new Date().getTime());\n    }\n  };\n\n  const existingDataset = async () => {\n    try {\n      const checkPublic = await itemsAPI.get(`/check-public-dataset?id=${datasetID}`);\n\n      if (checkPublic.data.success && checkPublic.data.data.visibility) {\n        fetch(`http://127.0.0.1:5000/files/${checkPublic.data.data.imageFile}/labels.json`).then(response => response.json()).then(images => {\n          images.map(image => {\n            setImages(state => [...state, image.filename]);\n            setAssignedLabels(state => [...state, image.label]);\n          });\n          setUploadedDataset(checkPublic.data.data);\n          setRefreshData(new Date().getTime());\n          {\n            model.length === 0 && setModel([{\n              type: \"Input\"\n            }]);\n          }\n          setChangedSettings(true);\n        });\n      } else if (checkPublic.data.success && !checkPublic.data.data.visibility) {\n        displayPublicInterval();\n      } else {\n        displayExistInterval();\n      }\n    } catch (err) {}\n  };\n\n  const uploadImage = async () => {\n    setDisabledCreate(true);\n\n    if (uploadedDataset && title !== \"\" && description !== \"\") {\n      const formImage = new FormData();\n      formImage.append('image', image);\n\n      try {\n        const imageResponse = await imageAPI.post(\"/upload\", formImage);\n        uploadData(imageResponse.data.data);\n      } catch (err) {}\n    } else {\n      uploadData(\"default.png\");\n    }\n  };\n\n  const uploadData = async imageName => {\n    try {\n      const workspaceResponse = await itemsAPI.post(\"/\", {\n        title: title,\n        dataset: uploadedDataset._id,\n        creator: currentUser.id,\n        description: description,\n        picture: imageName,\n        upvotes: [],\n        bookmarks: [],\n        model: model,\n        configuration: configuration,\n        updated: new Date().toISOString(),\n        visibility: visibility,\n        type: \"workspace\"\n      });\n      history.push(`/workspace/${workspaceResponse.data.data}`);\n    } catch (err) {}\n  };\n\n  const train = async () => {\n    try {\n      setTimer(0);\n      setDisabledTrain(true);\n      setStage(\"train\");\n      const formData = new FormData();\n      formData.append('epochs', configuration.epochs);\n      formData.append('training_split', configuration.training_split);\n      formData.append('validation_split', configuration.validation_split);\n      formData.append('improvement', configuration.improvement);\n      formData.append('patience', configuration.patience);\n      formData.append('batch', configuration.batch);\n      formData.append('early_stopping', configuration.early_stopping ? \"true\" : \"false\");\n      formData.append('lr_scheduler', configuration.lr_scheduler ? \"true\" : \"false\");\n      formData.append('initial_lr', configuration.initial_lr);\n      formData.append('optimiser', configuration.optimiser);\n      formData.append('loss', configuration.loss);\n      formData.append('rgb', uploadedDataset.rgb);\n      formData.append('imageFile', uploadedDataset.imageFile);\n      formData.append('height', uploadedDataset.height);\n      formData.append('width', uploadedDataset.width);\n      formData.append('label', uploadedDataset.labels.length);\n      formData.append('id', uploadedDataset._id);\n      model.map(node => {\n        formData.append('model[]', JSON.stringify(node));\n      });\n      const response = await trainAPI.post(\"\", formData);\n      setDisabledTrain(false);\n\n      if (response) {\n        setTestAcc(response.data.test_acc);\n        setTestLoss(response.data.test_loss);\n        setTrainAcc(response.data.training.accuracy);\n        setTrainLoss(response.data.training.loss);\n        setValidationAcc(response.data.training.val_accuracy);\n        setValidationLoss(response.data.training.val_loss);\n        setTrainEpochs(Array.from(Array(response.data.epochs + 1), (e, i) => (i + 1).toString()));\n        setStage(\"evaluation\");\n      }\n    } catch (err) {}\n  };\n\n  const updateWorkspace = async () => {\n    if (image) {\n      const formImage = new FormData();\n      formImage.append('image', image);\n\n      try {\n        const tempPicture = picture;\n        const imageResponse = await imageAPI.post(\"/upload\", formImage);\n        await itemsAPI.put(`/${workspaceID}?type=workspace`, {\n          title: title,\n          description: description,\n          picture: imageResponse.data.data,\n          dataset: uploadedDataset._id,\n          model: model,\n          configuration: configuration,\n          updated: new Date().toISOString()\n        });\n        setImage(undefined);\n        setPicture(imageResponse.data.data);\n\n        if (tempPicture !== \"default.png\") {\n          await imageAPI.put('/remove', {\n            picture: tempPicture\n          });\n        }\n      } catch (err) {}\n    } else {\n      try {\n        await itemsAPI.put(`/${workspaceID}?type=workspace`, {\n          title: title,\n          description: description,\n          picture: picture,\n          dataset: uploadedDataset._id,\n          model: model,\n          configuration: configuration,\n          updated: new Date().toISOString()\n        });\n      } catch (err) {}\n    }\n\n    setUpdated(new Date().toISOString());\n    setChangedSettings(false);\n  };\n\n  const deleteWorkspace = async () => {\n    try {\n      await itemsAPI.delete(`/${workspaceID}`);\n      removeOpenItems(workspaceID);\n      history.replace(\"/home\");\n    } catch (err) {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loaded && exist ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sidebar-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"http://localhost:3000/workspace.png\",\n            className: !(type === \"view\" && !workspace.self) ? \"create-item-edit-image\" : undefined\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 432,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: `create-item-title ${!(type === \"view\" && !workspace.self) && \"create-item-edit-input\"}`,\n            placeholder: \"Title\",\n            onChange: e => {\n              setTitle(e.target.value);\n              setChangedSettings(true);\n            },\n            disabled: !(workspace.self || type === \"create\"),\n            value: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: `create-item-description ${!(type === \"view\" && !workspace.self) && \"create-item-edit-textarea\"}`,\n          placeholder: \"Description\",\n          onChange: e => {\n            setDescription(e.target.value);\n            setChangedSettings(true);\n          },\n          disabled: !(workspace.self || type === \"create\"),\n          value: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 25\n        }, this), (workspace.self || type === \"create\") && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-item-setup\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"create-item-setup-label\",\n              children: \"Picture\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 454,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"create-item-setup-input\",\n              type: \"file\",\n              name: \"image\",\n              onChange: e => {\n                setImage(e.target.files[0]);\n                setChangedSettings(true);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 455,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 33\n          }, this), type === \"create\" && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-item-setup\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"create-item-setup-label\",\n              children: \"Public?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              onChange: () => {\n                setVisibility(previous => !previous);\n                setChangedSettings(true);\n              },\n              checked: visibility\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 466,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true), !workspace.self && type !== \"create\" && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"item-creator\",\n          children: workspace.creatorName.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 66\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-information\",\n          children: [type !== \"create\" && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"item-date\",\n            children: date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 51\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 29\n          }, this), type !== \"create\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(ThumbUpIcon, {\n              className: `item-icon ${upvoted ? \"blue2\" : \"white\"}`,\n              onClick: () => {\n                updateUpvote();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: upvoted ? \"blue2\" : \"white\",\n              children: upvotes\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 483,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true), !workspace.self && type !== \"create\" && /*#__PURE__*/_jsxDEV(BookmarkIcon, {\n            className: `item-icon ${bookmarked ? \"blue2\" : \"white\"}`,\n            onClick: () => {\n              updateBookmark();\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 486,\n            columnNumber: 70\n          }, this), workspace.self && type !== \"create\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: visibility ? /*#__PURE__*/_jsxDEV(VisibilityIcon, {\n              className: \"item-visibility\",\n              onClick: () => {\n                updateVisibility();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 490,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(VisibilityOffIcon, {\n              className: \"item-visibility\",\n              onClick: () => {\n                updateVisibility();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 492,\n              columnNumber: 41\n            }, this)\n          }, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sidebar-divided\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"create-workspace-uploaded-dataset\",\n          children: type === \"create\" || workspace.self ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: `create-workspace-import-existing ${!(type === \"view\" && !workspace.self) && \"create-item-edit-input\"}`,\n              placeholder: \"Dataset ID\",\n              onChange: e => {\n                setDatasetID(e.target.value);\n              },\n              onKeyPress: searchFunctionKey,\n              value: datasetID\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 501,\n              columnNumber: 37\n            }, this), type === \"view\" && /*#__PURE__*/_jsxDEV(Link, {\n              className: \"create-item-view-dataset\",\n              to: `/dataset/${datasetID}`,\n              children: /*#__PURE__*/_jsxDEV(OpenInNewIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 506,\n                columnNumber: 129\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 506,\n              columnNumber: 57\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"create-workspace-uploaded-dataset-header\",\n              children: \"Selected Dataset:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 510,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Link, {\n              to: `/dataset/${datasetID}`,\n              className: \"create-workspace-uploaded-dataset-link\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: `http://localhost:4000/images/${uploadedDataset.picture}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 512,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: uploadedDataset.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 513,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 511,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 509,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 25\n        }, this), type === \"view\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: workspace.self && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sidebar-divided\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 523,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"blue-button item-save\",\n              disabled: !changedSettings,\n              onClick: () => {\n                updateWorkspace();\n              },\n              children: \"Save Changes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 524,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"text-button item-delete\",\n              onClick: () => {\n                deleteWorkspace();\n              },\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 527,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true)\n        }, void 0, false), displayPublic && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"create-item-data-notification\",\n          children: \"Dataset not public\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 43\n        }, this), displayExist && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"create-item-data-notification\",\n          children: \"Dataset does not exist\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 42\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"workspace-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"workspace-inner\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"view-items-top\",\n              children: [type === \"create\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                  children: \"Create Workspace\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 542,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"blue-button\",\n                  disabled: disableTrain,\n                  onClick: () => {\n                    train();\n                  },\n                  children: \"Train\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 543,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true), type === \"view\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `text-button ${stage === \"model\" ? \"item-header-button-selected\" : \"item-header-button-unselected\"}`,\n                  onClick: () => {\n                    setStage(\"model\");\n                  },\n                  children: \"Model\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 550,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `text-button ${stage === \"evaluation\" ? \"item-header-button-selected\" : \"item-header-button-unselected\"}`,\n                  onClick: () => {\n                    setStage(\"evaluation\");\n                  },\n                  children: \"Evaluation\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 552,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 554,\n                  columnNumber: 45\n                }, this), workspace.self && /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"blue-button\",\n                  disabled: disableTrain,\n                  onClick: () => {\n                    train();\n                  },\n                  children: \"Train\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 556,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 539,\n              columnNumber: 33\n            }, this), stage === \"model\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: model.length !== 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-modelling-body\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"create-model\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"create-model-diagram\",\n                    children: [model.map((node, i) => {\n                      return /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"create-model-diagram-node\",\n                          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                            onClick: () => {\n                              setSelectedNode(i);\n                            },\n                            children: /*#__PURE__*/_jsxDEV(ModelNode, {\n                              setSelectedNode: setSelectedNode,\n                              type: node.type,\n                              value: node.value,\n                              selected: i === selectedNode,\n                              last: i === model.length - 1\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 574,\n                              columnNumber: 77\n                            }, this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 573,\n                            columnNumber: 73\n                          }, this), node.type !== \"Input\" && (workspace.self || type === \"create\") && /*#__PURE__*/_jsxDEV(\"div\", {\n                            onClick: () => {\n                              {\n                                selectedNode === i ? setSelectedNode(state => state - 1) : selectedNode < i ? setSelectedNode(state => state) : selectedNode > i && /*#__PURE__*/_jsxDEV(_Fragment, {\n                                  children: selectedNode - i === 1 ? setSelectedNode(state => state - 1) : setSelectedNode(i)\n                                }, void 0, false);\n                              }\n                              model.splice(i, 1);\n                              setChangedSettings(true);\n                              setRefreshDiagram(new Date().getTime());\n                            },\n                            children: /*#__PURE__*/_jsxDEV(ClearIcon, {\n                              className: \"create-model-diagram-remove\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 593,\n                              columnNumber: 81\n                            }, this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 577,\n                            columnNumber: 77\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 572,\n                          columnNumber: 69\n                        }, this), i === model.length - 1 && model[selectedNode].type !== \"Output\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                          children: addNode && (workspace.self || type === \"create\") ? /*#__PURE__*/_jsxDEV(\"div\", {\n                            className: \"create-model-diagram-add\",\n                            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                              onClick: () => {\n                                setAddNode(false);\n                              },\n                              children: /*#__PURE__*/_jsxDEV(RemoveIcon, {\n                                className: \"create-model-diagram-add-icon\"\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 602,\n                                columnNumber: 89\n                              }, this)\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 601,\n                              columnNumber: 85\n                            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                              className: \"create-model-diagram-add-options\",\n                              children: [(model[selectedNode].type === \"Input\" || model[selectedNode].type === \"Conv2D\" || model[selectedNode].type === \"MaxPooling2D\" || model[selectedNode].type === \"Dropout\" || model[selectedNode].type === \"BatchNormalisation\") && /*#__PURE__*/_jsxDEV(_Fragment, {\n                                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                                  onClick: () => {\n                                    setModel(state => {\n                                      const stateCopy = [...state];\n                                      stateCopy.splice(selectedNode + 1, 0, {\n                                        type: \"Conv2D\",\n                                        filters: 0,\n                                        kernel: 3,\n                                        strides: 2,\n                                        padding: \"same\",\n                                        activation: \"\"\n                                      });\n                                      return stateCopy;\n                                    });\n                                    setSelectedNode(model.length);\n                                    setAddNode(false);\n                                    setChangedSettings(true);\n                                  },\n                                  children: \"Conv2D\"\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 608,\n                                  columnNumber: 97\n                                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                                  onClick: () => {\n                                    setModel(state => {\n                                      const stateCopy = [...state];\n                                      stateCopy.splice(selectedNode + 1, 0, {\n                                        type: \"MaxPooling2D\",\n                                        pool: 3,\n                                        strides: 2,\n                                        padding: \"same\"\n                                      });\n                                      return stateCopy;\n                                    });\n                                    setSelectedNode(model.length);\n                                    setAddNode(false);\n                                    setChangedSettings(true);\n                                  },\n                                  children: \"MaxPooling2D\"\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 628,\n                                  columnNumber: 97\n                                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                                  onClick: () => {\n                                    setModel(state => {\n                                      const stateCopy = [...state];\n                                      stateCopy.splice(selectedNode + 1, 0, {\n                                        type: \"AvgPooling2D\",\n                                        pool: 3,\n                                        strides: 2,\n                                        padding: \"same\"\n                                      });\n                                      return stateCopy;\n                                    });\n                                    setSelectedNode(model.length);\n                                    setAddNode(false);\n                                    setChangedSettings(true);\n                                  },\n                                  children: \"AvgPooling2D\"\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 646,\n                                  columnNumber: 97\n                                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                                  onClick: () => {\n                                    setModel(state => {\n                                      const stateCopy = [...state];\n                                      stateCopy.splice(selectedNode + 1, 0, {\n                                        type: \"BatchNormalisation\",\n                                        momentum: 0\n                                      });\n                                      return stateCopy;\n                                    });\n                                    setSelectedNode(model.length);\n                                    setAddNode(false);\n                                    setChangedSettings(true);\n                                  },\n                                  children: \"Batch Normalisation\"\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 664,\n                                  columnNumber: 97\n                                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                                  onClick: () => {\n                                    setModel(state => {\n                                      const stateCopy = [...state];\n                                      stateCopy.splice(selectedNode + 1, 0, {\n                                        type: \"Dropout\",\n                                        rate: 0\n                                      });\n                                      return stateCopy;\n                                    });\n                                    setSelectedNode(model.length);\n                                    setAddNode(false);\n                                    setChangedSettings(true);\n                                  },\n                                  children: \"Dropout\"\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 680,\n                                  columnNumber: 97\n                                }, this), selectedNode === model.length - 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n                                  onClick: () => {\n                                    setModel(state => [...state, {\n                                      type: \"Flatten\"\n                                    }]);\n                                    setSelectedNode(model.length);\n                                    setAddNode(false);\n                                    setChangedSettings(true);\n                                  },\n                                  children: \"Flatten\"\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 697,\n                                  columnNumber: 101\n                                }, this)]\n                              }, void 0, true), (model[selectedNode].type === \"Flatten\" || model[selectedNode].type === \"Dense\") && /*#__PURE__*/_jsxDEV(\"button\", {\n                                onClick: () => {\n                                  setModel(state => {\n                                    const stateCopy = [...state];\n                                    stateCopy.splice(selectedNode + 1, 0, {\n                                      type: \"Dense\",\n                                      units: 0,\n                                      activation: \"\"\n                                    });\n                                    return stateCopy;\n                                  });\n                                  setSelectedNode(model.length);\n                                  setAddNode(false);\n                                  setChangedSettings(true);\n                                },\n                                children: \"Dense\"\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 708,\n                                columnNumber: 93\n                              }, this), model[selectedNode].type === \"Dense\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                                  onClick: () => {\n                                    setModel(state => {\n                                      const stateCopy = [...state];\n                                      stateCopy.splice(selectedNode + 1, 0, {\n                                        type: \"Dropout\",\n                                        rate: 0\n                                      });\n                                      return stateCopy;\n                                    });\n                                    setSelectedNode(model.length);\n                                    setAddNode(false);\n                                    setChangedSettings(true);\n                                  },\n                                  children: \"Dropout\"\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 728,\n                                  columnNumber: 97\n                                }, this), selectedNode === model.length - 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n                                  onClick: () => {\n                                    {\n                                      uploadedDataset.labels.length === 2 ? setModel(state => [...state, {\n                                        type: \"Output\",\n                                        units: 1,\n                                        activation: \"\"\n                                      }]) : setModel(state => [...state, {\n                                        type: \"Output\",\n                                        units: uploadedDataset.labels.length,\n                                        activation: \"\"\n                                      }]);\n                                    }\n                                    setSelectedNode(model.length);\n                                    setAddNode(false);\n                                    setChangedSettings(true);\n                                  },\n                                  children: \"Output\"\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 745,\n                                  columnNumber: 101\n                                }, this)]\n                              }, void 0, true)]\n                            }, void 0, true, {\n                              fileName: _jsxFileName,\n                              lineNumber: 604,\n                              columnNumber: 85\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 600,\n                            columnNumber: 81\n                          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                            children: (workspace.self || type === \"create\") && /*#__PURE__*/_jsxDEV(\"div\", {\n                              onClick: () => {\n                                setAddNode(true);\n                              },\n                              children: /*#__PURE__*/_jsxDEV(AddIcon, {\n                                className: \"create-model-diagram-add-icon\"\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 772,\n                                columnNumber: 93\n                              }, this)\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 771,\n                              columnNumber: 89\n                            }, this)\n                          }, void 0, false)\n                        }, void 0, false)]\n                      }, i, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 571,\n                        columnNumber: 65\n                      }, this);\n                    }), /*#__PURE__*/_jsxDEV(\"div\", {\n                      ref: modelRef\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 782,\n                      columnNumber: 57\n                    }, this)]\n                  }, refreshDiagram, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 568,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 567,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"create-model-selected\",\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      children: model[selectedNode].type\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 787,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"create-model-selected-input\",\n                      children: model[selectedNode].type !== \"Flatten\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                        children: [model[selectedNode].type === \"Dense\" && /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                            children: \"Units\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 793,\n                            columnNumber: 77\n                          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                            value: model[selectedNode].units,\n                            disabled: !(workspace.self || type === \"create\"),\n                            onChange: e => {\n                              setModel(state => {\n                                const stateCopy = [...state];\n                                stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                                  units: Number(e.target.value)\n                                };\n                                return stateCopy;\n                              });\n                              setChangedSettings(true);\n                              setRefreshDiagram(new Date().getTime());\n                            }\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 794,\n                            columnNumber: 77\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 792,\n                          columnNumber: 73\n                        }, this), (model[selectedNode].type === \"Dense\" || model[selectedNode].type === \"Conv2D\" || model[selectedNode].type === \"Output\") && /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                            children: \"Activation\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 812,\n                            columnNumber: 77\n                          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                            value: model[selectedNode].activation,\n                            disabled: !(workspace.self || type === \"create\"),\n                            onChange: e => {\n                              setModel(state => {\n                                const stateCopy = [...state];\n                                stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                                  activation: e.target.value\n                                };\n                                return stateCopy;\n                              });\n                              setChangedSettings(true);\n                              setRefreshDiagram(new Date().getTime());\n                            },\n                            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                              disabled: true,\n                              defaultValue: true,\n                              value: \"\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 827,\n                              columnNumber: 85\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"sigmoid\",\n                              children: \"Sigmoid\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 828,\n                              columnNumber: 85\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"softmax\",\n                              children: \"Softmax\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 829,\n                              columnNumber: 85\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"softplus\",\n                              children: \"Softplus\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 830,\n                              columnNumber: 85\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"softsign\",\n                              children: \"Softsign\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 831,\n                              columnNumber: 85\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"swish\",\n                              children: \"Swish\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 832,\n                              columnNumber: 85\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"selu\",\n                              children: \"Selu\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 833,\n                              columnNumber: 85\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"tanh\",\n                              children: \"Tanh\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 834,\n                              columnNumber: 85\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"elu\",\n                              children: \"Elu\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 835,\n                              columnNumber: 85\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"exponential\",\n                              children: \"Exponential\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 836,\n                              columnNumber: 85\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"gelu\",\n                              children: \"Gelu\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 837,\n                              columnNumber: 85\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"hard_sigmoid\",\n                              children: \"Hard Sigmoid\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 838,\n                              columnNumber: 85\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"linear\",\n                              children: \"Linear\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 839,\n                              columnNumber: 85\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"relu\",\n                              children: \"Relu\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 840,\n                              columnNumber: 85\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 813,\n                            columnNumber: 77\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 811,\n                          columnNumber: 73\n                        }, this), (model[selectedNode].type === \"Conv2D\" || model[selectedNode].type === \"MaxPooling2D\") && /*#__PURE__*/_jsxDEV(_Fragment, {\n                          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                              children: \"Padding\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 847,\n                              columnNumber: 81\n                            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                              value: model[selectedNode].padding,\n                              disabled: !(workspace.self || type === \"create\"),\n                              onChange: e => {\n                                setModel(state => {\n                                  const stateCopy = [...state];\n                                  stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                                    padding: e.target.value\n                                  };\n                                  return stateCopy;\n                                });\n                                setChangedSettings(true);\n                                setRefreshDiagram(new Date().getTime());\n                              },\n                              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                                disabled: true,\n                                defaultValue: true,\n                                value: \"\"\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 862,\n                                columnNumber: 85\n                              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                                value: \"same\",\n                                children: \"Same\"\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 863,\n                                columnNumber: 85\n                              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                                value: \"valid\",\n                                children: \"Valid\"\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 864,\n                                columnNumber: 85\n                              }, this)]\n                            }, void 0, true, {\n                              fileName: _jsxFileName,\n                              lineNumber: 848,\n                              columnNumber: 81\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 846,\n                            columnNumber: 77\n                          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                              children: \"Strides\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 868,\n                              columnNumber: 81\n                            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                              value: model[selectedNode].strides,\n                              disabled: !(workspace.self || type === \"create\"),\n                              onChange: e => {\n                                setModel(state => {\n                                  const stateCopy = [...state];\n                                  stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                                    strides: Number(e.target.value)\n                                  };\n                                  return stateCopy;\n                                });\n                                setChangedSettings(true);\n                                setRefreshDiagram(new Date().getTime());\n                              }\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 869,\n                              columnNumber: 81\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 867,\n                            columnNumber: 77\n                          }, this)]\n                        }, void 0, true), model[selectedNode].type === \"Conv2D\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                              children: \"Filters\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 889,\n                              columnNumber: 81\n                            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                              value: model[selectedNode].filters,\n                              disabled: !(workspace.self || type === \"create\"),\n                              onChange: e => {\n                                setModel(state => {\n                                  const stateCopy = [...state];\n                                  stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                                    filters: Number(e.target.value)\n                                  };\n                                  return stateCopy;\n                                });\n                                setChangedSettings(true);\n                                setRefreshDiagram(new Date().getTime());\n                              }\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 890,\n                              columnNumber: 81\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 888,\n                            columnNumber: 77\n                          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                              children: \"Kernel Size\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 906,\n                              columnNumber: 81\n                            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                              value: model[selectedNode].kernel,\n                              disabled: !(workspace.self || type === \"create\"),\n                              onChange: e => {\n                                setModel(state => {\n                                  const stateCopy = [...state];\n                                  stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                                    kernel: Number(e.target.value)\n                                  };\n                                  return stateCopy;\n                                });\n                                setChangedSettings(true);\n                                setRefreshDiagram(new Date().getTime());\n                              }\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 907,\n                              columnNumber: 81\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 905,\n                            columnNumber: 77\n                          }, this)]\n                        }, void 0, true), model[selectedNode].type === \"MaxPooling2D\" && /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                            children: \"Pooling Size\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 926,\n                            columnNumber: 77\n                          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                            value: model[selectedNode].pool,\n                            disabled: !(workspace.self || type === \"create\"),\n                            onChange: e => {\n                              setModel(state => {\n                                const stateCopy = [...state];\n                                stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                                  pool: Number(e.target.value)\n                                };\n                                return stateCopy;\n                              });\n                              setChangedSettings(true);\n                              setRefreshDiagram(new Date().getTime());\n                            }\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 927,\n                            columnNumber: 77\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 925,\n                          columnNumber: 73\n                        }, this), model[selectedNode].type === \"Dropout\" && /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                            children: \"Rate\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 945,\n                            columnNumber: 77\n                          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                            value: model[selectedNode].rate,\n                            disabled: !(workspace.self || type === \"create\"),\n                            onChange: e => {\n                              setModel(state => {\n                                const stateCopy = [...state];\n                                stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                                  rate: Number(e.target.value)\n                                };\n                                return stateCopy;\n                              });\n                              setChangedSettings(true);\n                              setRefreshDiagram(new Date().getTime());\n                            }\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 946,\n                            columnNumber: 77\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 944,\n                          columnNumber: 73\n                        }, this), model[selectedNode].type === \"BatchNormalisation\" && /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                            children: \"Momentum\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 964,\n                            columnNumber: 77\n                          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                            value: model[selectedNode].momentum,\n                            disabled: !(workspace.self || type === \"create\"),\n                            onChange: e => {\n                              setModel(state => {\n                                const stateCopy = [...state];\n                                stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                                  momentum: Number(e.target.value)\n                                };\n                                return stateCopy;\n                              });\n                              setChangedSettings(true);\n                              setRefreshDiagram(new Date().getTime());\n                            }\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 965,\n                            columnNumber: 77\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 963,\n                          columnNumber: 73\n                        }, this), model[selectedNode].type === \"Input\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                              children: \"Image Height\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 984,\n                              columnNumber: 81\n                            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                              children: uploadedDataset.height\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 985,\n                              columnNumber: 81\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 983,\n                            columnNumber: 77\n                          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                              children: \"Image Width\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 988,\n                              columnNumber: 81\n                            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                              children: uploadedDataset.width\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 989,\n                              columnNumber: 81\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 987,\n                            columnNumber: 77\n                          }, this)]\n                        }, void 0, true)]\n                      }, void 0, true)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 788,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 786,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"create-model-configuration\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"create-model-configuration-option\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          children: \"Epochs\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1000,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                          value: configuration.epochs,\n                          disabled: !(workspace.self || type === \"create\"),\n                          onChange: e => {\n                            setConfiguration(state => ({ ...state,\n                              epochs: e.target.value\n                            }));\n                            setChangedSettings(true);\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1001,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 999,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          children: \"Training Split\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1012,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                          value: configuration.training_split,\n                          disabled: !(workspace.self || type === \"create\"),\n                          onChange: e => {\n                            setConfiguration(state => ({ ...state,\n                              training_split: e.target.value\n                            }));\n                            setChangedSettings(true);\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1013,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1011,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          children: \"Validation Split\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1024,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                          value: configuration.validation_split,\n                          disabled: !(workspace.self || type === \"create\"),\n                          onChange: e => {\n                            setConfiguration(state => ({ ...state,\n                              validation_split: e.target.value\n                            }));\n                            setChangedSettings(true);\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1025,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1023,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          children: \"Minimum Improvement\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1036,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                          value: configuration.improvement,\n                          disabled: !(workspace.self || type === \"create\"),\n                          onChange: e => {\n                            setConfiguration(state => ({ ...state,\n                              improvement: e.target.value\n                            }));\n                            setChangedSettings(true);\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1037,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1035,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          children: \"Patience\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1048,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                          value: configuration.patience,\n                          disabled: !(workspace.self || type === \"create\"),\n                          onChange: e => {\n                            setConfiguration(state => ({ ...state,\n                              patience: e.target.value\n                            }));\n                            setChangedSettings(true);\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1049,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1047,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          children: \"Batch Size\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1060,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                          value: configuration.batch,\n                          disabled: !(workspace.self || type === \"create\"),\n                          onChange: e => {\n                            setConfiguration(state => ({ ...state,\n                              batch: e.target.value\n                            }));\n                            setChangedSettings(true);\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1061,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1059,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          children: \"Initial Learning Rate\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1072,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                          value: configuration.initial_lr,\n                          disabled: !(workspace.self || type === \"create\"),\n                          onChange: e => {\n                            setConfiguration(state => ({ ...state,\n                              initial_lr: e.target.value\n                            }));\n                            setChangedSettings(true);\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1073,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1071,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          children: \"Learning Rate Scheduler\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1084,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                          className: \"create-model-configuration-option-checkbox\",\n                          type: \"checkbox\",\n                          disabled: !(workspace.self || type === \"create\"),\n                          onChange: () => {\n                            setConfiguration(state => ({ ...state,\n                              lr_scheduler: !configuration.lr_scheduler\n                            }));\n                            setChangedSettings(true);\n                          },\n                          checked: configuration.lr_scheduler\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1085,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1083,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          children: \"Early Stopping\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1098,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                          className: \"create-model-configuration-option-checkbox\",\n                          type: \"checkbox\",\n                          disabled: !(workspace.self || type === \"create\"),\n                          onChange: () => {\n                            setConfiguration(state => ({ ...state,\n                              early_stopping: !configuration.early_stopping\n                            }));\n                            setChangedSettings(true);\n                          },\n                          checked: configuration.early_stopping\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1099,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1097,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          children: \"Optimiser\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1112,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                          value: configuration.optimiser,\n                          disabled: !(workspace.self || type === \"create\"),\n                          onChange: e => {\n                            setConfiguration(state => ({ ...state,\n                              optimiser: e.target.value\n                            }));\n                            setChangedSettings(true);\n                          },\n                          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                            disabled: true,\n                            defaultValue: true,\n                            value: \"\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1122,\n                            columnNumber: 69\n                          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"Adadelta\",\n                            children: \"Adadelta\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1123,\n                            columnNumber: 69\n                          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"Adagrad\",\n                            children: \"Adagrad\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1124,\n                            columnNumber: 69\n                          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"Adam\",\n                            children: \"Adam\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1125,\n                            columnNumber: 69\n                          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"Adamax\",\n                            children: \"Adamax\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1126,\n                            columnNumber: 69\n                          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"Ftrl\",\n                            children: \"Ftrl\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1127,\n                            columnNumber: 69\n                          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"Nadam\",\n                            children: \"Nadam\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1128,\n                            columnNumber: 69\n                          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"RMSprop\",\n                            children: \"RMSprop\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1129,\n                            columnNumber: 69\n                          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"SGD\",\n                            children: \"SGD\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1130,\n                            columnNumber: 69\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1113,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1111,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          children: \"Loss\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1134,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                          value: configuration.loss,\n                          disabled: !(workspace.self || type === \"create\"),\n                          onChange: e => {\n                            setConfiguration(state => ({ ...state,\n                              loss: e.target.value\n                            }));\n                            setChangedSettings(true);\n                          },\n                          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                            disabled: true,\n                            defaultValue: true,\n                            value: \"\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1144,\n                            columnNumber: 69\n                          }, this), uploadedDataset.labels.length === 2 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"binary_crossentropy\",\n                              children: \"Binary Crossentropy\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1147,\n                              columnNumber: 77\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"hinge\",\n                              children: \"Hinge\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1148,\n                              columnNumber: 77\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"squared_hinge\",\n                              children: \"Squared Hinge\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1149,\n                              columnNumber: 77\n                            }, this)]\n                          }, void 0, true), uploadedDataset.labels.length > 2 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"categorical_crossentropy\",\n                              children: \"Categorical Crossentropy\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1154,\n                              columnNumber: 77\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"kl_divergence\",\n                              children: \"Kullback Leibler Divergence\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1155,\n                              columnNumber: 77\n                            }, this)]\n                          }, void 0, true)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1135,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1133,\n                        columnNumber: 61\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 998,\n                      columnNumber: 57\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 997,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 785,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 566,\n                columnNumber: 45\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"end-items\",\n                children: \"Select a dataset...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1165,\n                columnNumber: 45\n              }, this)\n            }, void 0, false) : stage === \"evaluation\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: trainEpochs.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Train your model...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1171,\n                columnNumber: 45\n              }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Training Time: \", timer, \" seconds\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1174,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(Line, {\n                  data: {\n                    labels: trainEpochs,\n                    datasets: [{\n                      label: 'Training Accuracy',\n                      data: trainAcc,\n                      borderColor: '#3C51F9',\n                      tension: 0\n                    }]\n                  },\n                  options: {\n                    scales: {\n                      yAxes: [{\n                        ticks: {\n                          beginAtZero: true,\n                          min: 0,\n                          max: 1,\n                          stepSize: 0.1,\n                          steps: 10\n                        }\n                      }]\n                    },\n                    maintainAspectRatio: false,\n                    animation: false,\n                    responsive: false\n                  },\n                  height: 300,\n                  width: 300\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1175,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true)\n            }, void 0, false) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"create-training-body\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Training Model...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1210,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Elapsed Time: \", timer, \" seconds\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1211,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1209,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 538,\n            columnNumber: 29\n          }, this), uploadedDataset && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: noData ? /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"end-items\",\n              children: \"Cannot find dataset\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1218,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"create-workspace-data\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"create-workspace-data-header\",\n                children: \"Selected Dataset:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1221,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"create-workspace-data-header-dataset\",\n                children: uploadedDataset.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1222,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"sidebar-divided\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1223,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-workspace-data-images-list\",\n                children: images.map((image, i) => {\n                  if (i >= start && i < end && assignedLabels[i] !== \"No label\") {\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"create-workspace-data-image\",\n                      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                        src: `http://127.0.0.1:5000/files/${uploadedDataset.imageFile}/images/${assignedLabels[i]}/${image}.jpg`\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1229,\n                        columnNumber: 65\n                      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                        children: assignedLabels[i]\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1230,\n                        columnNumber: 65\n                      }, this)]\n                    }, i, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1228,\n                      columnNumber: 61\n                    }, this);\n                  }\n                })\n              }, refreshData, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1224,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"sidebar-divided\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1236,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-workspace-pagination\",\n                children: [/*#__PURE__*/_jsxDEV(ArrowBackIosNewIcon, {\n                  className: \"create-workspace-pagination-icon\",\n                  onClick: () => {\n                    previousPage();\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1238,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Page \", page, \" / \", Math.ceil(images.length / 20)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1239,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(ArrowForwardIosIcon, {\n                  className: \"create-workspace-pagination-icon\",\n                  onClick: () => {\n                    nextPage();\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1240,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1237,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1220,\n              columnNumber: 41\n            }, this)\n          }, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 17\n    }, this) : loaded && !exist && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inner\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"item-exist\",\n        children: \"Cannot find workspace\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1251,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1250,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(Workspace, \"qQ034cPlOUSy/YCqQk5ntKhrLuI=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = Workspace;\nexport default Workspace;\n\nvar _c;\n\n$RefreshReg$(_c, \"Workspace\");","map":{"version":3,"sources":["/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Workspace.jsx"],"names":["React","useState","useEffect","useRef","useContext","useHistory","useParams","Link","Line","usersAPI","itemsAPI","globalAPI","imageAPI","trainAPI","ModelNode","OpenItemsContext","ArrowForwardIosIcon","ArrowBackIosNewIcon","ClearIcon","AddIcon","RemoveIcon","BookmarkIcon","ThumbUpIcon","VisibilityOffIcon","VisibilityIcon","OpenInNewIcon","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","register","Workspace","currentUser","type","stage","setStage","title","setTitle","description","setDescription","visibility","setVisibility","bookmarked","setBookmarked","upvoted","setUpvoted","upvotes","setUpvotes","updated","setUpdated","picture","setPicture","date","setDate","start","setStart","timer","setTimer","end","setEnd","page","setPage","image","setImage","datasetID","setDatasetID","uploadedDataset","setUploadedDataset","workspace","setWorkspace","images","setImages","assignedLabels","setAssignedLabels","refreshData","setRefreshData","refreshDiagram","setRefreshDiagram","changedSettings","setChangedSettings","model","setModel","selectedNode","setSelectedNode","configuration","setConfiguration","epochs","training_split","validation_split","improvement","early_stopping","patience","batch","lr_scheduler","initial_lr","optimiser","loss","addNode","setAddNode","testAcc","setTestAcc","testLoss","setTestLoss","trainAcc","setTrainAcc","trainLoss","setTrainLoss","trainEpochs","setTrainEpochs","validationAcc","setValidationAcc","validationLoss","setValidationLoss","loaded","setLoaded","exist","setExist","noData","setNoData","disableCreate","setDisabledCreate","disableTrain","setDisabledTrain","displayPublic","setDisplayPublic","displayExist","setDisplayExist","addOpenItems","removeOpenItems","modelRef","workspaceID","id","publicInterval","existInterval","history","fetchData","get","data","map","previous","self","_id","dataset","fetch","imageFile","then","response","json","state","filename","label","catch","err","timerID","setInterval","clearInterval","current","scrollIntoView","behavior","block","inline","length","updatedDate","Date","currentDate","getTime","Math","floor","toString","searchFunctionKey","e","key","existingDataset","updateUpvote","put","updateBookmark","updateVisibility","displayPublicInterval","displayExistInterval","previousPage","nextPage","checkPublic","success","uploadImage","formImage","FormData","append","imageResponse","post","uploadData","imageName","workspaceResponse","creator","bookmarks","toISOString","push","train","formData","rgb","height","width","labels","node","JSON","stringify","test_acc","test_loss","training","accuracy","val_accuracy","val_loss","Array","from","i","updateWorkspace","tempPicture","undefined","deleteWorkspace","delete","replace","target","value","files","creatorName","name","splice","stateCopy","filters","kernel","strides","padding","activation","pool","momentum","rate","units","Number","datasets","borderColor","tension","scales","yAxes","ticks","beginAtZero","min","max","stepSize","steps","maintainAspectRatio","animation","responsive","ceil"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef, useContext} from 'react'\nimport {useHistory, useParams, Link} from \"react-router-dom\"\nimport { Line } from 'react-chartjs-2';\nimport usersAPI from '../API/users'\nimport itemsAPI from '../API/items'\nimport globalAPI from '../API/global'\nimport imageAPI from '../API/images'\nimport trainAPI from '../API/train'\nimport ModelNode from '../Components/Model-Node';\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend,\n} from 'chart.js';\n  \nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n);\n\nconst Workspace = ({currentUser, type}) => {\n    const [stage, setStage] = useState(\"model\");\n    const [title, setTitle] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [visibility, setVisibility] = useState(false);\n    const [bookmarked, setBookmarked] = useState()\n    const [upvoted, setUpvoted] = useState()\n    const [upvotes, setUpvotes] = useState()\n    const [updated, setUpdated] = useState()\n    const [picture, setPicture] = useState()\n    const [date, setDate] = useState(\"\")\n    const [start, setStart] = useState(0)\n    const [timer, setTimer] = useState(0)\n    const [end, setEnd] = useState(20)\n    const [page, setPage] = useState(1)\n    const [image, setImage] = useState();\n    const [datasetID, setDatasetID] = useState(\"\")\n    const [uploadedDataset, setUploadedDataset] = useState()\n    const [workspace, setWorkspace] = useState([]);\n    const [images, setImages] = useState([])\n    const [assignedLabels, setAssignedLabels] = useState([])\n    const [refreshData, setRefreshData] = useState()\n    const [refreshDiagram, setRefreshDiagram] = useState()\n    const [changedSettings, setChangedSettings] = useState(false)\n    const [model, setModel] = useState([])\n    const [selectedNode, setSelectedNode] = useState(0)\n    const [configuration, setConfiguration] = useState({epochs: 0, training_split: 0, validation_split: 0, improvement: 0, early_stopping: false,\n                                                        patience: 0, batch: 32, lr_scheduler: false, initial_lr: 0.01, optimiser: \"\", loss: \"\"})\n    const [addNode, setAddNode] = useState(false)\n    const [testAcc, setTestAcc] = useState()\n    const [testLoss, setTestLoss] = useState()\n    const [trainAcc, setTrainAcc] = useState()\n    const [trainLoss, setTrainLoss] = useState()\n    const [trainEpochs, setTrainEpochs] = useState([])\n    const [validationAcc, setValidationAcc] = useState()\n    const [validationLoss, setValidationLoss] = useState()\n    const [loaded, setLoaded] = useState(false);\n    const [exist, setExist] = useState()\n    const [noData, setNoData] = useState()\n    const [disableCreate, setDisabledCreate] = useState(false)\n    const [disableTrain, setDisabledTrain] = useState(false)\n    const [displayPublic, setDisplayPublic] = useState(false)\n    const [displayExist, setDisplayExist] = useState(false)\n    const {addOpenItems, removeOpenItems} = useContext(OpenItemsContext);\n    const modelRef = useRef(null)\n    const workspaceID = useParams().id;\n    const publicInterval = useRef(0)\n    const existInterval = useRef(0)\n    const history = useHistory();\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                if (type === \"create\") {\n                    const workspace = await usersAPI.get(\"/created?type=workspace\");\n    \n                    workspace.data.data.map((workspace) => {\n                        setWorkspace(previous => [...previous, workspace.title]);\n                    })\n\n                    setExist(true)\n                    setLoaded(true)\n                } else {\n                    const workspace = await itemsAPI.get(`/${workspaceID}?type=workspace`);\n\n                    if (workspace.data.data.self) {\n                        addOpenItems(workspace.data.data._id, workspace.data.data.title, workspace.data.data.type)\n                    }\n\n                    setWorkspace(workspace.data.data);\n                    setUpdated(workspace.data.data.updated);\n                    setBookmarked(workspace.data.data.bookmarked)\n                    setUpvoted(workspace.data.data.upvoted)\n                    setPicture(workspace.data.data.picture)\n                    setUpvotes(workspace.data.data.upvotes)\n                    setDatasetID(workspace.data.data.dataset._id)\n                    setVisibility(workspace.data.data.visibility)\n                    setTitle(workspace.data.data.title)\n                    setDescription(workspace.data.data.description)\n                    setModel(workspace.data.data.model)\n                    setConfiguration(workspace.data.data.configuration)\n                    setUploadedDataset(workspace.data.data.dataset)\n\n                    fetch(`http://127.0.0.1:5000/files/${workspace.data.data.dataset.imageFile}/labels.json`)\n                        .then(response => response.json())\n                        .then(images => {\n                            images.map(image => {\n                                setImages(state => [...state, image.filename])\n                                setAssignedLabels(state => [...state, image.label])\n                            })\n                            setExist(true)\n                            setNoData(false)\n                            setLoaded(true)\n                        }).catch(() => {\n                            setExist(true)\n                            setNoData(true)\n                            setLoaded(true)\n                        });\n                }\n            } catch (err) {\n                setExist(false)\n                setLoaded(true)\n            }\n        }\n        fetchData();\n    }, [])\n\n    useEffect(() => {\n        const timerID = stage === \"train\" && setInterval(() => {\n            setTimer(previous => previous + 1);\n        }, 1000);\n        return () => {\n            clearInterval(timerID)\n        }\n    }, [timer, stage])\n\n    useEffect(() => {\n        if (modelRef.current) {\n            modelRef.current.scrollIntoView({\n                behavior: 'smooth',\n                block: 'end',\n                inline: 'end'\n            })\n        }\n    }, [model.length, addNode])\n\n    useEffect(() => {\n        if (loaded && exist) {\n            const updatedDate = new Date(updated);\n            const currentDate = new Date();\n    \n            if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} years ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} days ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hours ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minutes ago`)\n            } else {\n                setDate(\"Updated just now\")\n            }\n        }\n    }, [loaded, updated])\n\n    const searchFunctionKey = (e) => {\n        if (e.key === \"Enter\" && datasetID !== \"\") {\n            existingDataset()\n        }\n    }\n\n    const updateUpvote = async () => {\n        try {\n            await globalAPI.put(`/upvote/${workspaceID}?state=${upvoted}`);\n\n            if (upvoted) {\n                setUpvotes(state => state-1)\n            } else {\n                setUpvotes(state => state+1)\n            }\n\n            setUpvoted(state => !state)\n        } catch (err) {}\n    }\n\n    const updateBookmark = async () => {\n        try {\n            await globalAPI.put(`/bookmark/${workspaceID}?state=${bookmarked}`);\n            \n            setBookmarked(state => !state)\n        } catch (err) {}\n    }\n\n    const updateVisibility = async () => {\n        try {\n            await globalAPI.put(`/visibility/${workspaceID}`);\n\n            setVisibility(state => !state)\n        } catch (err) {}\n    }\n\n    const displayPublicInterval = () => {\n        clearInterval(publicInterval.current)\n        setDisplayPublic(true);\n        publicInterval.current = setInterval(() => {\n            setDisplayPublic(false);\n        }, 1200)\n        return ()=> {clearInterval(publicInterval.current)};\n    }\n\n    const displayExistInterval = () => {\n        clearInterval(existInterval.current)\n        setDisplayExist(true);\n        existInterval.current = setInterval(() => {\n            setDisplayExist(false);\n        }, 1200)\n        return ()=> {clearInterval(existInterval.current)};\n    }\n\n    const previousPage = () => {\n        if (page > 1) {\n            setStart((page-2)*20)\n            setEnd((page-1)*20)\n            setPage(state => state-1)\n            setRefreshData(new Date().getTime())\n        }\n    }\n    \n    const nextPage = () => {\n        if (page*20 < images.length && images.length > 20) {\n            setPage(state => state+1)\n            setStart((page)*20)\n            setEnd((page+1)*20)\n            setRefreshData(new Date().getTime())\n        }\n    }\n\n    const existingDataset = async () => {\n        try {\n            const checkPublic = await itemsAPI.get(`/check-public-dataset?id=${datasetID}`)\n    \n            if (checkPublic.data.success && checkPublic.data.data.visibility) {\n                fetch(`http://127.0.0.1:5000/files/${checkPublic.data.data.imageFile}/labels.json`)\n                        .then(response => response.json())\n                        .then(images => {\n                            images.map(image => {\n                                setImages(state => [...state, image.filename])\n                                setAssignedLabels(state => [...state, image.label])\n                            })\n                            setUploadedDataset(checkPublic.data.data)\n                            setRefreshData(new Date().getTime())\n                            {model.length === 0 &&\n                                setModel([{type: \"Input\"}])\n                            }\n                            setChangedSettings(true)\n                        })\n            } else if (checkPublic.data.success && !checkPublic.data.data.visibility) {\n                displayPublicInterval()\n            } else {\n                displayExistInterval()\n            }\n        } catch (err) {}\n    }\n\n    const uploadImage = async () => {\n        setDisabledCreate(true)\n\n        if (uploadedDataset && title !== \"\" && description !== \"\") {\n            const formImage = new FormData();\n            formImage.append('image', image);\n\n            try {\n                const imageResponse = await imageAPI.post(\"/upload\", formImage);\n\n                uploadData(imageResponse.data.data)\n            } catch (err) {}\n        } else {\n            uploadData(\"default.png\")\n        }\n    }\n\n    const uploadData = async (imageName) => {\n        try {\n            const workspaceResponse = await itemsAPI.post(\"/\", {\n                title: title,\n                dataset: uploadedDataset._id,\n                creator: currentUser.id,\n                description: description,\n                picture: imageName,\n                upvotes: [],\n                bookmarks: [],\n                model: model,\n                configuration: configuration,\n                updated: new Date().toISOString(),\n                visibility: visibility,\n                type: \"workspace\"\n            });\n\n            history.push(`/workspace/${workspaceResponse.data.data}`)\n        } catch (err) {}\n    }\n\n    const train = async () => {\n        try {\n            setTimer(0)\n            setDisabledTrain(true)\n            setStage(\"train\")\n    \n            const formData = new FormData();\n        \n            formData.append('epochs', configuration.epochs)\n            formData.append('training_split', configuration.training_split)\n            formData.append('validation_split', configuration.validation_split)\n            formData.append('improvement', configuration.improvement)\n            formData.append('patience', configuration.patience)\n            formData.append('batch', configuration.batch)\n            formData.append('early_stopping', configuration.early_stopping ? \"true\" : \"false\")\n            formData.append('lr_scheduler', configuration.lr_scheduler ? \"true\" : \"false\")\n            formData.append('initial_lr', configuration.initial_lr)\n            formData.append('optimiser', configuration.optimiser)\n            formData.append('loss', configuration.loss)\n            formData.append('rgb', uploadedDataset.rgb)\n            formData.append('imageFile', uploadedDataset.imageFile)\n            formData.append('height', uploadedDataset.height)\n            formData.append('width', uploadedDataset.width)\n            formData.append('label', uploadedDataset.labels.length)\n            formData.append('id', uploadedDataset._id)\n\n            model.map(node => {\n                formData.append('model[]', JSON.stringify(node))\n            })\n\n            const response = await trainAPI.post(\"\", formData);\n\n            setDisabledTrain(false)\n\n            if (response) {\n                setTestAcc(response.data.test_acc)\n                setTestLoss(response.data.test_loss)\n                setTrainAcc(response.data.training.accuracy)\n                setTrainLoss(response.data.training.loss)\n                setValidationAcc(response.data.training.val_accuracy)\n                setValidationLoss(response.data.training.val_loss)\n                setTrainEpochs(Array.from(Array(response.data.epochs + 1), (e, i) => (i + 1).toString()))\n                setStage(\"evaluation\")\n            }\n        } catch (err) {}\n    } \n\n    const updateWorkspace = async () => {\n        if (image) {\n            const formImage = new FormData();\n            formImage.append('image', image);\n            \n            try {\n                const tempPicture = picture\n                const imageResponse = await imageAPI.post(\"/upload\", formImage);\n\n                await itemsAPI.put(`/${workspaceID}?type=workspace`, {\n                    title: title,\n                    description: description,\n                    picture: imageResponse.data.data,\n                    dataset: uploadedDataset._id,\n                    model: model,\n                    configuration: configuration,\n                    updated: new Date().toISOString()\n                })\n\n                setImage(undefined)\n                setPicture(imageResponse.data.data)\n\n                if (tempPicture !== \"default.png\") {\n                    await imageAPI.put('/remove', {picture: tempPicture});\n                }\n            } catch (err) {}\n        } else {\n            try {\n                await itemsAPI.put(`/${workspaceID}?type=workspace`, {\n                    title: title,\n                    description: description,\n                    picture: picture,\n                    dataset: uploadedDataset._id,\n                    model: model,\n                    configuration: configuration,\n                    updated: new Date().toISOString()\n                })\n            } catch (err) {}\n        }\n\n        setUpdated(new Date().toISOString())\n        setChangedSettings(false)\n    }\n\n    const deleteWorkspace = async () => {\n        try {\n            await itemsAPI.delete(`/${workspaceID}`)\n\n            removeOpenItems(workspaceID)\n            history.replace(\"/home\")\n        } catch (err) {}\n    }\n\n    return (\n        <>\n            {loaded && exist ?\n                <div className=\"main-body\">\n                    <div className=\"sidebar\">\n                        <div className=\"sidebar-header\">\n                            <img src=\"http://localhost:3000/workspace.png\"\n                                    className={!(type === \"view\" && !workspace.self) ? \"create-item-edit-image\" : undefined} />\n                            <input className={`create-item-title ${!(type === \"view\" && !workspace.self) && \"create-item-edit-input\"}`}\n                                    placeholder=\"Title\"\n                                    onChange={e => {\n                                        setTitle(e.target.value)\n                                        setChangedSettings(true)\n                                    }}\n                                    disabled={!(workspace.self || type === \"create\")}\n                                    value={title} />\n                        </div>\n                        <textarea className={`create-item-description ${!(type === \"view\" && !workspace.self) && \"create-item-edit-textarea\"}`}\n                                    placeholder=\"Description\"\n                                    onChange={e => {\n                                        setDescription(e.target.value)\n                                        setChangedSettings(true)\n                                    }}\n                                    disabled={!(workspace.self || type === \"create\")}\n                                    value={description} />\n                        {(workspace.self || type === \"create\") &&\n                            <>\n                                <div className=\"create-item-setup\">\n                                    <label className=\"create-item-setup-label\">Picture</label>\n                                    <input className=\"create-item-setup-input\"\n                                            type=\"file\" \n                                            name=\"image\" \n                                            onChange={e => {\n                                                setImage(e.target.files[0])\n                                                setChangedSettings(true)\n                                            }} />\n                                </div>\n                                {type === \"create\" &&\n                                    <div className=\"create-item-setup\">\n                                        <label className=\"create-item-setup-label\">Public?</label>\n                                        <input type=\"checkbox\" \n                                                onChange={() => {\n                                                    setVisibility(previous => !previous)\n                                                    setChangedSettings(true)\n                                                }}\n                                                checked={visibility} />\n                                    </div>\n                                }\n                            </>\n                        }\n                        {!workspace.self && type !== \"create\" && <p className=\"item-creator\">{workspace.creatorName.name}</p>}\n                        <div className=\"item-information\">\n                            {type !== \"create\" && <p className=\"item-date\">{date}</p>}\n                            <span />\n                            {type !== \"create\" &&\n                                <>\n                                    <ThumbUpIcon className={`item-icon ${upvoted ? \"blue2\" : \"white\"}`} onClick={() => {updateUpvote()}} />\n                                    <p className={upvoted ? \"blue2\" : \"white\"}>{upvotes}</p>\n                                </>\n                            }\n                            {!workspace.self && type !== \"create\" && <BookmarkIcon className={`item-icon ${bookmarked ? \"blue2\" : \"white\"}`} onClick={() => {updateBookmark()}} />}\n                            {workspace.self && type !== \"create\" && \n                                <>\n                                    {visibility ? \n                                        <VisibilityIcon className=\"item-visibility\" onClick={() => {updateVisibility()}} />\n                                    :\n                                        <VisibilityOffIcon className=\"item-visibility\" onClick={() => {updateVisibility()}} />\n                                    }\n                                </>\n                            }\n                        </div>\n                        <div className=\"sidebar-divided\" />\n                        <div className=\"create-workspace-uploaded-dataset\">\n                            {(type === \"create\" || workspace.self) ?\n                                <>\n                                    <input className={`create-workspace-import-existing ${!(type === \"view\" && !workspace.self) && \"create-item-edit-input\"}`}\n                                            placeholder=\"Dataset ID\"\n                                            onChange={e => {setDatasetID(e.target.value)}}\n                                            onKeyPress={searchFunctionKey}\n                                            value={datasetID} />\n                                    {type === \"view\" && <Link className=\"create-item-view-dataset\" to={`/dataset/${datasetID}`}><OpenInNewIcon /></Link>}\n                                </>\n                            :\n                                <div>\n                                    <p className=\"create-workspace-uploaded-dataset-header\">Selected Dataset:</p>\n                                    <Link to={`/dataset/${datasetID}`} className=\"create-workspace-uploaded-dataset-link\">\n                                        <img src={`http://localhost:4000/images/${uploadedDataset.picture}`} />\n                                        <p>{uploadedDataset.title}</p>\n                                    </Link>\n                                </div>\n                            }\n                        </div>\n                        \n                        {type === \"view\" &&\n                            <>\n                                {workspace.self &&\n                                    <>\n                                        <div className=\"sidebar-divided\" />\n                                        <button className=\"blue-button item-save\"\n                                                disabled={!changedSettings}\n                                                onClick={() => {updateWorkspace()}}>Save Changes</button>\n                                        <button className=\"text-button item-delete\"\n                                                onClick={() => {deleteWorkspace()}}>Delete</button>\n                                    </>\n                                }\n                            </>\n                        }\n                        {displayPublic && <p className=\"create-item-data-notification\">Dataset not public</p>}\n                        {displayExist && <p className=\"create-item-data-notification\">Dataset does not exist</p>}\n                    </div>\n                    <div className=\"inner\">\n                        <div className=\"workspace-body\">\n                            <div className=\"workspace-inner\">\n                                <div className=\"view-items-top\">\n                                    {type === \"create\" &&\n                                        <>\n                                            <h1>Create Workspace</h1>\n                                            <button className=\"blue-button\"\n                                                    disabled={disableTrain}\n                                                    onClick={() => {train()}}>Train</button>\n                                        </>\n                                    }\n                                    {type === \"view\" &&\n                                        <>\n                                            <button className={`text-button ${stage === \"model\" ? \"item-header-button-selected\" : \"item-header-button-unselected\"}`}\n                                                    onClick={() => {setStage(\"model\")}}>Model</button>\n                                            <button className={`text-button ${stage === \"evaluation\" ? \"item-header-button-selected\" : \"item-header-button-unselected\"}`}\n                                                    onClick={() => {setStage(\"evaluation\")}}>Evaluation</button>\n                                            <span />\n                                            {workspace.self &&\n                                                <button className=\"blue-button\"\n                                                        disabled={disableTrain}\n                                                        onClick={() => {train()}}>Train</button>\n                                            }\n                                        </>\n                                    }\n                                </div>\n                                {stage === \"model\" ?\n                                    <>\n                                        {model.length !== 0 ?\n                                            <div className=\"create-modelling-body\">\n                                                <div className=\"create-model\">\n                                                    <div className=\"create-model-diagram\" key={refreshDiagram}>\n                                                        {model.map((node, i) => {\n                                                            return (\n                                                                <div key={i}>\n                                                                    <div className={\"create-model-diagram-node\"}>\n                                                                        <div onClick={() => {setSelectedNode(i)}}>\n                                                                            <ModelNode setSelectedNode={setSelectedNode} type={node.type} value={node.value} selected={i === selectedNode} last={i === model.length-1} />\n                                                                        </div>\n                                                                        {node.type !== \"Input\" && (workspace.self || type === \"create\") &&\n                                                                            <div onClick={() => {{selectedNode === i ?\n                                                                                                    setSelectedNode(state => state-1)\n                                                                                                : selectedNode < i ?\n                                                                                                    setSelectedNode(state => state)\n                                                                                                : selectedNode > i &&\n                                                                                                    <>\n                                                                                                        {selectedNode-i === 1 ?\n                                                                                                            setSelectedNode(state => state-1)\n                                                                                                        :\n                                                                                                            setSelectedNode(i)\n                                                                                                        } \n                                                                                                    </>  \n                                                                                                }\n                                                                                                model.splice(i, 1)\n                                                                                                setChangedSettings(true)\n                                                                                                setRefreshDiagram(new Date().getTime())}}>\n                                                                                <ClearIcon className=\"create-model-diagram-remove\" />\n                                                                            </div>\n                                                                        }\n                                                                    </div>\n                                                                    {i === model.length-1 && model[selectedNode].type !== \"Output\" &&\n                                                                        <>\n                                                                            {addNode && (workspace.self || type === \"create\") ?\n                                                                                <div className=\"create-model-diagram-add\">\n                                                                                    <div onClick={() => {setAddNode(false)}}>\n                                                                                        <RemoveIcon className=\"create-model-diagram-add-icon\" />\n                                                                                    </div>\n                                                                                    <div className=\"create-model-diagram-add-options\">\n                                                                                        {(model[selectedNode].type === \"Input\" || model[selectedNode].type === \"Conv2D\" || model[selectedNode].type === \"MaxPooling2D\" ||\n                                                                                            model[selectedNode].type === \"Dropout\" || model[selectedNode].type === \"BatchNormalisation\") &&\n                                                                                            <>\n                                                                                                <button onClick={() => {\n                                                                                                    setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy.splice(selectedNode+1, 0, {\n                                                                                                            type: \"Conv2D\",\n                                                                                                            filters: 0,\n                                                                                                            kernel: 3,\n                                                                                                            strides: 2,\n                                                                                                            padding: \"same\",\n                                                                                                            activation: \"\"\n                                                                                                        })\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n\n                                                                                                    setSelectedNode(model.length)\n                                                                                                    setAddNode(false)\n                                                                                                    setChangedSettings(true)\n                                                                                                }}>Conv2D</button>\n                                                                                                <button onClick={() => {\n                                                                                                    setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy.splice(selectedNode+1, 0, {\n                                                                                                            type: \"MaxPooling2D\",\n                                                                                                            pool: 3,\n                                                                                                            strides: 2,\n                                                                                                            padding: \"same\"\n                                                                                                        })\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n                                                                                                    \n                                                                                                    setSelectedNode(model.length)\n                                                                                                    setAddNode(false)\n                                                                                                    setChangedSettings(true)\n                                                                                                }}>MaxPooling2D</button>\n                                                                                                <button onClick={() => {\n                                                                                                    setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy.splice(selectedNode+1, 0, {\n                                                                                                            type: \"AvgPooling2D\",\n                                                                                                            pool: 3,\n                                                                                                            strides: 2,\n                                                                                                            padding: \"same\"\n                                                                                                        })\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n                                                                                                    \n                                                                                                    setSelectedNode(model.length)\n                                                                                                    setAddNode(false)\n                                                                                                    setChangedSettings(true)\n                                                                                                }}>AvgPooling2D</button>\n                                                                                                <button onClick={() => {\n                                                                                                    setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy.splice(selectedNode+1, 0, {\n                                                                                                            type: \"BatchNormalisation\",\n                                                                                                            momentum: 0\n                                                                                                        })\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n\n                                                                                                    setSelectedNode(model.length)\n                                                                                                    setAddNode(false)\n                                                                                                    setChangedSettings(true)\n                                                                                                }}>Batch Normalisation</button>\n                                                                                                <button onClick={() => {\n                                                                                                    setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy.splice(selectedNode+1, 0, {\n                                                                                                            type: \"Dropout\",\n                                                                                                            rate: 0\n                                                                                                        })\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n\n                                                                                                    setSelectedNode(model.length)\n                                                                                                    setAddNode(false)\n                                                                                                    setChangedSettings(true)\n                                                                                                }}>Dropout</button>\n                                                                                                {selectedNode === model.length-1 &&\n                                                                                                    <button onClick={() => {setModel(state => [...state, {\n                                                                                                            type: \"Flatten\"\n                                                                                                        }])\n                                                                                                        setSelectedNode(model.length)\n                                                                                                        setAddNode(false)\n                                                                                                        setChangedSettings(true)\n                                                                                                    }}>Flatten</button>\n                                                                                                }\n                                                                                            </>\n                                                                                        }\n                                                                                        {(model[selectedNode].type === \"Flatten\" || model[selectedNode].type === \"Dense\") &&\n                                                                                            <button onClick={() => {\n                                                                                                setModel(state => {\n                                                                                                    const stateCopy = [...state]\n                                                                                                \n                                                                                                    stateCopy.splice(selectedNode+1, 0, {\n                                                                                                        type: \"Dense\",\n                                                                                                        units: 0,\n                                                                                                        activation: \"\"\n                                                                                                    })\n                                                                                                \n                                                                                                    return stateCopy\n                                                                                                })\n                                                                                                \n                                                                                                setSelectedNode(model.length)\n                                                                                                setAddNode(false)\n                                                                                                setChangedSettings(true)\n                                                                                            }}>Dense</button>\n                                                                                        }\n                                                                                        {model[selectedNode].type === \"Dense\" &&\n                                                                                            <>\n                                                                                                <button onClick={() => {\n                                                                                                    setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy.splice(selectedNode+1, 0, {\n                                                                                                            type: \"Dropout\",\n                                                                                                            rate: 0\n                                                                                                        })\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n\n                                                                                                    setSelectedNode(model.length)\n                                                                                                    setAddNode(false)\n                                                                                                    setChangedSettings(true)\n                                                                                                }}>Dropout</button>\n                                                                                                {selectedNode === model.length-1 &&\n                                                                                                    <button onClick={() => {\n                                                                                                            {uploadedDataset.labels.length === 2 ?\n                                                                                                                setModel(state => [...state, {\n                                                                                                                    type: \"Output\",\n                                                                                                                    units: 1,\n                                                                                                                    activation: \"\"\n                                                                                                                }])\n                                                                                                            :\n                                                                                                                setModel(state => [...state, {\n                                                                                                                    type: \"Output\",\n                                                                                                                    units: uploadedDataset.labels.length,\n                                                                                                                    activation: \"\"\n                                                                                                                }])\n                                                                                                            }\n                                                                                                        setSelectedNode(model.length)\n                                                                                                        setAddNode(false)\n                                                                                                        setChangedSettings(true)\n                                                                                                    }}>Output</button>\n                                                                                                }\n                                                                                            </>\n                                                                                        }\n                                                                                    </div>\n                                                                                </div>\n                                                                            :\n                                                                                <>  \n                                                                                    {(workspace.self || type === \"create\") &&\n                                                                                        <div onClick={() => {setAddNode(true)}}>\n                                                                                            <AddIcon className=\"create-model-diagram-add-icon\" />\n                                                                                        </div>\n                                                                                    }\n                                                                                </>\n                                                                            }\n                                                                        </>\n                                                                    }\n                                                                </div>\n                                                            )\n                                                        })}\n                                                        <div ref={modelRef} />\n                                                    </div>\n                                                </div>\n                                                <div>\n                                                    <div className=\"create-model-selected\">\n                                                        <p>{model[selectedNode].type}</p>\n                                                        <div className=\"create-model-selected-input\">\n                                                            {model[selectedNode].type !== \"Flatten\" &&\n                                                                <>\n                                                                    {model[selectedNode].type === \"Dense\" &&\n                                                                        <div>\n                                                                            <label>Units</label>\n                                                                            <input value={model[selectedNode].units} \n                                                                                    disabled={!(workspace.self || type === \"create\")}\n                                                                                    onChange={e => {setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy[selectedNode] = {\n                                                                                                            ...stateCopy[selectedNode],\n                                                                                                            units: Number(e.target.value)\n                                                                                                        }\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n                                                                                                    setChangedSettings(true)\n                                                                                                    setRefreshDiagram(new Date().getTime())}} />\n                                                                        </div>\n                                                                    }\n                                                                    {(model[selectedNode].type === \"Dense\" || model[selectedNode].type === \"Conv2D\" || model[selectedNode].type === \"Output\") &&\n                                                                        <div>\n                                                                            <label>Activation</label>\n                                                                            <select value={model[selectedNode].activation} \n                                                                                    disabled={!(workspace.self || type === \"create\")}\n                                                                                    onChange={e => {setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy[selectedNode] = {\n                                                                                                            ...stateCopy[selectedNode],\n                                                                                                            activation: e.target.value\n                                                                                                        }\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n                                                                                                    setChangedSettings(true)\n                                                                                                    setRefreshDiagram(new Date().getTime())}}>\n                                                                                    <option disabled defaultValue value=\"\"></option>\n                                                                                    <option value=\"sigmoid\">Sigmoid</option>\n                                                                                    <option value=\"softmax\">Softmax</option>\n                                                                                    <option value=\"softplus\">Softplus</option>\n                                                                                    <option value=\"softsign\">Softsign</option>\n                                                                                    <option value=\"swish\">Swish</option>\n                                                                                    <option value=\"selu\">Selu</option>\n                                                                                    <option value=\"tanh\">Tanh</option>\n                                                                                    <option value=\"elu\">Elu</option>\n                                                                                    <option value=\"exponential\">Exponential</option>\n                                                                                    <option value=\"gelu\">Gelu</option>\n                                                                                    <option value=\"hard_sigmoid\">Hard Sigmoid</option>\n                                                                                    <option value=\"linear\">Linear</option>\n                                                                                    <option value=\"relu\">Relu</option>\n                                                                            </select>\n                                                                        </div>\n                                                                    }\n                                                                    {(model[selectedNode].type === \"Conv2D\" || model[selectedNode].type === \"MaxPooling2D\") &&\n                                                                        <>\n                                                                            <div>\n                                                                                <label>Padding</label>\n                                                                                <select value={model[selectedNode].padding} \n                                                                                    disabled={!(workspace.self || type === \"create\")}\n                                                                                    onChange={e => {setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy[selectedNode] = {\n                                                                                                            ...stateCopy[selectedNode],\n                                                                                                            padding: e.target.value\n                                                                                                        }\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n                                                                                                    setChangedSettings(true)\n                                                                                                    setRefreshDiagram(new Date().getTime())}}>\n                                                                                    <option disabled defaultValue value=\"\"></option>\n                                                                                    <option value=\"same\">Same</option>\n                                                                                    <option value=\"valid\">Valid</option>\n                                                                                </select>\n                                                                            </div>\n                                                                            <div>\n                                                                                <label>Strides</label>\n                                                                                <input value={model[selectedNode].strides} \n                                                                                    disabled={!(workspace.self || type === \"create\")}\n                                                                                    onChange={e => {setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy[selectedNode] = {\n                                                                                                            ...stateCopy[selectedNode],\n                                                                                                            strides: Number(e.target.value)\n                                                                                                        }\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n                                                                                                    setChangedSettings(true)\n                                                                                                    setRefreshDiagram(new Date().getTime())}} />\n                                                                            </div>\n                                                                        </>\n                                                                    }\n                                                                    {model[selectedNode].type === \"Conv2D\" &&\n                                                                        <>\n                                                                            <div>\n                                                                                <label>Filters</label>\n                                                                                <input value={model[selectedNode].filters} \n                                                                                    disabled={!(workspace.self || type === \"create\")}\n                                                                                    onChange={e => {setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy[selectedNode] = {\n                                                                                                            ...stateCopy[selectedNode],\n                                                                                                            filters: Number(e.target.value)\n                                                                                                        }\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n                                                                                                    setChangedSettings(true)\n                                                                                                    setRefreshDiagram(new Date().getTime())}} />\n                                                                            </div>\n                                                                            <div>\n                                                                                <label>Kernel Size</label>\n                                                                                <input value={model[selectedNode].kernel} \n                                                                                    disabled={!(workspace.self || type === \"create\")}\n                                                                                    onChange={e => {setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy[selectedNode] = {\n                                                                                                            ...stateCopy[selectedNode],\n                                                                                                            kernel: Number(e.target.value)\n                                                                                                        }\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n                                                                                                    setChangedSettings(true)\n                                                                                                    setRefreshDiagram(new Date().getTime())}} />\n                                                                            </div>\n                                                                        </>\n                                                                    }\n                                                                    {model[selectedNode].type === \"MaxPooling2D\" &&\n                                                                        <div>\n                                                                            <label>Pooling Size</label>\n                                                                            <input value={model[selectedNode].pool} \n                                                                                disabled={!(workspace.self || type === \"create\")}\n                                                                                onChange={e => {setModel(state => {\n                                                                                                    const stateCopy = [...state]\n                                                                                                \n                                                                                                    stateCopy[selectedNode] = {\n                                                                                                        ...stateCopy[selectedNode],\n                                                                                                        pool: Number(e.target.value)\n                                                                                                    }\n                                                                                                \n                                                                                                    return stateCopy\n                                                                                                })\n                                                                                                setChangedSettings(true)\n                                                                                                setRefreshDiagram(new Date().getTime())}} />\n                                                                        </div>\n                                                                    }\n                                                                    {model[selectedNode].type === \"Dropout\" &&\n                                                                        <div>\n                                                                            <label>Rate</label>\n                                                                            <input value={model[selectedNode].rate} \n                                                                                disabled={!(workspace.self || type === \"create\")}\n                                                                                onChange={e => {setModel(state => {\n                                                                                                    const stateCopy = [...state]\n                                                                                                \n                                                                                                    stateCopy[selectedNode] = {\n                                                                                                        ...stateCopy[selectedNode],\n                                                                                                        rate: Number(e.target.value)\n                                                                                                    }\n                                                                                                \n                                                                                                    return stateCopy\n                                                                                                })\n                                                                                                setChangedSettings(true)\n                                                                                                setRefreshDiagram(new Date().getTime())}} />\n                                                                        </div>\n                                                                    }\n                                                                    {model[selectedNode].type === \"BatchNormalisation\" &&\n                                                                        <div>\n                                                                            <label>Momentum</label>\n                                                                            <input value={model[selectedNode].momentum} \n                                                                                disabled={!(workspace.self || type === \"create\")}\n                                                                                onChange={e => {setModel(state => {\n                                                                                                    const stateCopy = [...state]\n                                                                                                \n                                                                                                    stateCopy[selectedNode] = {\n                                                                                                        ...stateCopy[selectedNode],\n                                                                                                        momentum: Number(e.target.value)\n                                                                                                    }\n                                                                                                \n                                                                                                    return stateCopy\n                                                                                                })\n                                                                                                setChangedSettings(true)\n                                                                                                setRefreshDiagram(new Date().getTime())}} />\n                                                                        </div>\n                                                                    }\n                                                                    {model[selectedNode].type === \"Input\" &&\n                                                                        <>\n                                                                            <div>\n                                                                                <label>Image Height</label>\n                                                                                <p>{uploadedDataset.height}</p>\n                                                                            </div>\n                                                                            <div>\n                                                                                <label>Image Width</label>\n                                                                                <p>{uploadedDataset.width}</p>\n                                                                            </div>\n                                                                        </>\n                                                                    }\n                                                                </>\n                                                            }\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"create-model-configuration\">\n                                                        <div className=\"create-model-configuration-option\">\n                                                            <div>\n                                                                <label>Epochs</label>\n                                                                <input value={configuration.epochs}\n                                                                        disabled={!(workspace.self || type === \"create\")} \n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                epochs: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Training Split</label>\n                                                                <input value={configuration.training_split} \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                training_split: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Validation Split</label>\n                                                                <input value={configuration.validation_split} \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                validation_split: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Minimum Improvement</label>\n                                                                <input value={configuration.improvement} \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                improvement: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Patience</label>\n                                                                <input value={configuration.patience} \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                patience: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Batch Size</label>\n                                                                <input value={configuration.batch} \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                batch: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Initial Learning Rate</label>\n                                                                <input value={configuration.initial_lr} \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                initial_lr: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Learning Rate Scheduler</label>\n                                                                <input className=\"create-model-configuration-option-checkbox\"\n                                                                        type=\"checkbox\" \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={() => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                lr_scheduler: !configuration.lr_scheduler\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }}\n                                                                        checked={configuration.lr_scheduler} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Early Stopping</label>\n                                                                <input className=\"create-model-configuration-option-checkbox\"\n                                                                        type=\"checkbox\" \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={() => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                early_stopping: !configuration.early_stopping\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }}\n                                                                        checked={configuration.early_stopping} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Optimiser</label>\n                                                                <select value={configuration.optimiser} \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                optimiser: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }}>\n                                                                    <option disabled defaultValue value=\"\"></option>\n                                                                    <option value=\"Adadelta\">Adadelta</option>\n                                                                    <option value=\"Adagrad\">Adagrad</option>\n                                                                    <option value=\"Adam\">Adam</option>\n                                                                    <option value=\"Adamax\">Adamax</option>\n                                                                    <option value=\"Ftrl\">Ftrl</option>\n                                                                    <option value=\"Nadam\">Nadam</option>\n                                                                    <option value=\"RMSprop\">RMSprop</option>\n                                                                    <option value=\"SGD\">SGD</option>\n                                                                </select>\n                                                            </div>\n                                                            <div>\n                                                                <label>Loss</label>\n                                                                <select value={configuration.loss} \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                loss: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }}>\n                                                                    <option disabled defaultValue value=\"\"></option>\n                                                                    {uploadedDataset.labels.length === 2 &&\n                                                                        <>\n                                                                            <option value=\"binary_crossentropy\">Binary Crossentropy</option>\n                                                                            <option value=\"hinge\">Hinge</option>\n                                                                            <option value=\"squared_hinge\">Squared Hinge</option>\n                                                                        </>\n                                                                    }\n                                                                    {uploadedDataset.labels.length > 2 &&\n                                                                        <>\n                                                                            <option value=\"categorical_crossentropy\">Categorical Crossentropy</option>\n                                                                            <option value=\"kl_divergence\">Kullback Leibler Divergence</option>\n                                                                        </>\n                                                                    }\n                                                                </select>\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        :\n                                            <p className=\"end-items\">Select a dataset...</p>\n                                        }\n                                    </>\n                                : (stage === \"evaluation\") ?\n                                    <>\n                                        {trainEpochs.length === 0 ?\n                                            <p>Train your model...</p>\n                                        :\n                                            <>\n                                                <p>Training Time: {timer} seconds</p>\n                                                <Line data={{\n                                                            labels: trainEpochs,\n                                                            datasets: [\n                                                                {\n                                                                    label: 'Training Accuracy',\n                                                                    data: trainAcc,\n                                                                    borderColor: '#3C51F9',\n                                                                    tension: 0\n                                                                },\n                                                            ],\n                                                        }} \n                                                        options={{\n                                                            scales: {\n                                                                yAxes: [{\n                                                                    ticks: {\n                                                                        beginAtZero: true,\n                                                                        min: 0,\n                                                                        max: 1,\n                                                                        stepSize: 0.1,\n                                                                        steps: 10,\n                                                                    }\n                                                                }]\n                                                            },\n                                                            maintainAspectRatio: false,\n                                                            animation: false,\n                                                            responsive: false\n                                                        }}\n                                                        height={300} \n                                                        width={300}\n                                                />\n                                            </>\n                                        }\n                                    </>\n                                : \n                                    <div className='create-training-body'>\n                                        <p>Training Model...</p>\n                                        <p>Elapsed Time: {timer} seconds</p>\n                                    </div>\n                                }\n                            </div>\n                            {uploadedDataset && \n                                <>\n                                    {noData ?\n                                        <p className=\"end-items\">Cannot find dataset</p>\n                                    :\n                                        <div className=\"create-workspace-data\">\n                                            <p className=\"create-workspace-data-header\">Selected Dataset:</p>\n                                            <p className=\"create-workspace-data-header-dataset\">{uploadedDataset.title}</p>\n                                            <div className=\"sidebar-divided\" />\n                                            <div className=\"create-workspace-data-images-list\" key={refreshData}>\n                                                {images.map((image, i) => {\n                                                    if (i >= start && i < end && assignedLabels[i] !== \"No label\") {\n                                                        return (\n                                                            <div className=\"create-workspace-data-image\" key={i}>\n                                                                <img src={`http://127.0.0.1:5000/files/${uploadedDataset.imageFile}/images/${assignedLabels[i]}/${image}.jpg`}  />\n                                                                <p>{assignedLabels[i]}</p>\n                                                            </div>\n                                                        )\n                                                    }\n                                                })}\n                                            </div>\n                                            <div className=\"sidebar-divided\" />\n                                            <div className=\"create-workspace-pagination\">\n                                                <ArrowBackIosNewIcon className=\"create-workspace-pagination-icon\" onClick={() => {previousPage()}} />\n                                                <p>Page {page} / {Math.ceil(images.length/20)}</p>\n                                                <ArrowForwardIosIcon className=\"create-workspace-pagination-icon\" onClick={() => {nextPage()}} />\n                                            </div>\n                                        </div>\n                                    }   \n                                </>\n                            }\n                        </div>\n                    </div>\n                </div>\n            : loaded && !exist &&\n                <div className=\"inner\">  \n                    <p className=\"item-exist\">Cannot find workspace</p>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default Workspace"]},"metadata":{},"sourceType":"module"}