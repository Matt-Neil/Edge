{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Contexts/openItemsContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const OpenItemsContext = /*#__PURE__*/createContext();\n\nconst OpenItemsContextProvider = props => {\n  _s();\n\n  // Initiates context provider array containing objects of opened items as empty\n  const [openItems, setOpenItems] = useState([]); // Fetches array of open items from local storage\n\n  useEffect(() => {\n    const localData = JSON.parse(localStorage.getItem('openItems')); // If local storage for attribute openItems exists, the context provider state is set to the array\n\n    if (localData !== null) {\n      setOpenItems(localData);\n    }\n  }, []); // Adds item object to array containing its id, title and whether it is a workspace or dataset\n\n  const addOpenItems = (id, title, type) => {\n    // Checks if item is already present in the array\n    if (openItems.filter(workspace => workspace.id.match(id)).length === 0) {\n      setOpenItems([{\n        id: id,\n        title: title,\n        type: type\n      }, ...openItems]);\n    }\n  }; // Removes item from the array\n\n\n  const removeOpenItems = id => {\n    setOpenItems(openItems.filter(workspace => workspace.id !== id));\n  }; // Clear local storage which is called when user is signed out\n\n\n  const clearItems = () => {\n    localStorage.removeItem('openItems');\n  }; // Updates local storage whenever the array is changed\n\n\n  useEffect(() => {\n    localStorage.setItem('openItems', JSON.stringify(openItems));\n  }, [openItems]);\n  return /*#__PURE__*/_jsxDEV(OpenItemsContext.Provider, {\n    value: {\n      openItems,\n      addOpenItems,\n      removeOpenItems,\n      clearItems\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(OpenItemsContextProvider, \"5IJmcEZ6O2PGupELo7tpq1aw4Mw=\");\n\n_c = OpenItemsContextProvider;\nexport default OpenItemsContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"OpenItemsContextProvider\");","map":{"version":3,"sources":["/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Contexts/openItemsContext.js"],"names":["React","createContext","useEffect","useState","OpenItemsContext","OpenItemsContextProvider","props","openItems","setOpenItems","localData","JSON","parse","localStorage","getItem","addOpenItems","id","title","type","filter","workspace","match","length","removeOpenItems","clearItems","removeItem","setItem","stringify","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,aAAf,EAA8BC,SAA9B,EAAyCC,QAAzC,QAAwD,OAAxD;;AAEA,OAAO,MAAMC,gBAAgB,gBAAGH,aAAa,EAAtC;;AAEP,MAAMI,wBAAwB,GAAIC,KAAD,IAAW;AAAA;;AACxC;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,EAAD,CAA1C,CAFwC,CAIxC;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMO,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAAlB,CADY,CAGZ;;AACA,QAAIJ,SAAS,KAAK,IAAlB,EAAwB;AACpBD,MAAAA,YAAY,CAACC,SAAD,CAAZ;AACH;AACJ,GAPQ,EAON,EAPM,CAAT,CALwC,CAcxC;;AACA,QAAMK,YAAY,GAAG,CAACC,EAAD,EAAKC,KAAL,EAAYC,IAAZ,KAAqB;AACtC;AACA,QAAIV,SAAS,CAACW,MAAV,CAAiBC,SAAS,IAAIA,SAAS,CAACJ,EAAV,CAAaK,KAAb,CAAmBL,EAAnB,CAA9B,EAAsDM,MAAtD,KAAiE,CAArE,EAAwE;AACpEb,MAAAA,YAAY,CAAC,CAAC;AACVO,QAAAA,EAAE,EAAEA,EADM;AAEVC,QAAAA,KAAK,EAAEA,KAFG;AAGVC,QAAAA,IAAI,EAAEA;AAHI,OAAD,EAIV,GAAGV,SAJO,CAAD,CAAZ;AAKH;AACJ,GATD,CAfwC,CA0BxC;;;AACA,QAAMe,eAAe,GAAIP,EAAD,IAAQ;AAC5BP,IAAAA,YAAY,CAACD,SAAS,CAACW,MAAV,CAAiBC,SAAS,IAAIA,SAAS,CAACJ,EAAV,KAAiBA,EAA/C,CAAD,CAAZ;AACH,GAFD,CA3BwC,CA+BxC;;;AACA,QAAMQ,UAAU,GAAG,MAAM;AACrBX,IAAAA,YAAY,CAACY,UAAb,CAAwB,WAAxB;AACH,GAFD,CAhCwC,CAoCxC;;;AACAtB,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,YAAY,CAACa,OAAb,CAAqB,WAArB,EAAkCf,IAAI,CAACgB,SAAL,CAAenB,SAAf,CAAlC;AACH,GAFQ,EAEN,CAACA,SAAD,CAFM,CAAT;AAIA,sBACI,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAACA,MAAAA,SAAD;AAAYO,MAAAA,YAAZ;AAA0BQ,MAAAA,eAA1B;AAA2CC,MAAAA;AAA3C,KAAlC;AAAA,cACKjB,KAAK,CAACqB;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA9CD;;GAAMtB,wB;;KAAAA,wB;AAgDN,eAAeA,wBAAf","sourcesContent":["import React, {createContext, useEffect, useState} from 'react'\n\nexport const OpenItemsContext = createContext()\n\nconst OpenItemsContextProvider = (props) => {\n    // Initiates context provider array containing objects of opened items as empty\n    const [openItems, setOpenItems] = useState([]);\n\n    // Fetches array of open items from local storage\n    useEffect(() => {\n        const localData = JSON.parse(localStorage.getItem('openItems'));\n        \n        // If local storage for attribute openItems exists, the context provider state is set to the array\n        if (localData !== null) {\n            setOpenItems(localData)\n        }\n    }, [])\n\n    // Adds item object to array containing its id, title and whether it is a workspace or dataset\n    const addOpenItems = (id, title, type) => {\n        // Checks if item is already present in the array\n        if (openItems.filter(workspace => workspace.id.match(id)).length === 0) {\n            setOpenItems([{\n                id: id,\n                title: title,\n                type: type\n            }, ...openItems]);\n        }\n    }\n\n    // Removes item from the array\n    const removeOpenItems = (id) => {\n        setOpenItems(openItems.filter(workspace => workspace.id !== id))\n    }\n\n    // Clear local storage which is called when user is signed out\n    const clearItems = () => {\n        localStorage.removeItem('openItems')\n    }\n\n    // Updates local storage whenever the array is changed\n    useEffect(() => {\n        localStorage.setItem('openItems', JSON.stringify(openItems));\n    }, [openItems])\n\n    return (\n        <OpenItemsContext.Provider value={{openItems, addOpenItems, removeOpenItems, clearItems}}>\n            {props.children}\n        </OpenItemsContext.Provider>\n    )\n}\n\nexport default OpenItemsContextProvider"]},"metadata":{},"sourceType":"module"}