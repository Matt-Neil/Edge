{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Dataset.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useContext } from 'react';\nimport { useHistory, useParams, Link } from \"react-router-dom\";\nimport usersAPI from '../API/users';\nimport itemsAPI from '../API/items';\nimport globalAPI from '../API/global';\nimport imageAPI from '../API/images';\nimport fileAPI from '../API/files';\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport CloseIcon from '@mui/icons-material/Close';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Dataset = _ref => {\n  _s();\n\n  let {\n    currentUser,\n    type\n  } = _ref;\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [visibility, setVisibility] = useState(false);\n  const [bookmarked, setBookmarked] = useState();\n  const [upvoted, setUpvoted] = useState();\n  const [upvotes, setUpvotes] = useState();\n  const [updated, setUpdated] = useState();\n  const [picture, setPicture] = useState();\n  const [date, setDate] = useState(\"\");\n  const [start, setStart] = useState(0);\n  const [end, setEnd] = useState(30);\n  const [page, setPage] = useState(1);\n  const [image, setImage] = useState();\n  const [dataset, setDataset] = useState([]);\n  const [labels, setLabels] = useState([]);\n  const [changedSettings, setChangedSettings] = useState(false);\n  const [changedData, setChangedData] = useState(false);\n  const [uploadedImages, setUploadedImages] = useState([]);\n  const [imageFiles, setImageFiles] = useState([]);\n  const [assignedLabels, setAssignedLabels] = useState([]);\n  const [refreshData, setRefreshData] = useState();\n  const [refreshLabels, setRefreshLabels] = useState();\n  const [loaded, setLoaded] = useState(false);\n  const [exist, setExist] = useState();\n  const [noData, setNoData] = useState();\n  const [addLabel, setAddLabel] = useState(\"\");\n  const [disableCreate, setDisabledCreate] = useState(false);\n  const {\n    addOpenItems,\n    removeOpenItems\n  } = useContext(OpenItemsContext);\n  const modelRef = useRef(null);\n  const datasetID = useParams().id;\n  const publicInterval = useRef(0);\n  const existInterval = useRef(0);\n  const history = useHistory();\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (type === \"create\") {\n          const dataset = await usersAPI.get(\"/created?type=dataset\");\n          dataset.data.data.map(dataset => {\n            setDataset(previous => [...previous, dataset.title]);\n          });\n          setExist(true);\n          setLoaded(true);\n        } else {\n          const dataset = await itemsAPI.get(`/${datasetID}?type=dataset`);\n\n          if (dataset.data.data.creator === currentUser.id) {\n            addOpenItems(dataset.data.data._id, dataset.data.data.title, dataset.data.data.type);\n          }\n\n          setDataset(dataset.data.data);\n          setUpdated(dataset.data.data.updated);\n          setBookmarked(dataset.data.data.bookmarked);\n          setUpvoted(dataset.data.data.upvoted);\n          setPicture(dataset.data.data.picture);\n          setUpvotes(dataset.data.data.upvotes);\n          setVisibility(dataset.data.data.visibility);\n          setTitle(dataset.data.data.title);\n          setDescription(dataset.data.data.description);\n          setLabels(dataset.data.data.labels);\n          fetch(`http://127.0.0.1:5000/files/${dataset.data.data.imageFile}/labels.json`).then(response => response.json()).then(images => {\n            images.map(image => {\n              setUploadedImages(state => [...state, image.filename]);\n              setAssignedLabels(state => [...state, image.label]);\n            });\n            setExist(true);\n            setLoaded(true);\n          }).catch(() => {\n            setExist(true);\n            setLoaded(true);\n          });\n        }\n      } catch (err) {\n        setExist(false);\n        setLoaded(true);\n      }\n    };\n\n    fetchData();\n  }, []);\n  useEffect(() => {\n    if (loaded && exist) {\n      const updatedDate = new Date(updated);\n      const currentDate = new Date();\n\n      if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365).toString()} years ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n        setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24)).toString()} days ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600)).toString()} hours ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60)).toString()} minutes ago`);\n      } else {\n        setDate(\"Updated just now\");\n      }\n    }\n  }, [loaded, updated]);\n\n  const addFunctionKey = e => {\n    if (e.key === \"Enter\" && addLabel !== \"\") {\n      setLabels(state => [...state, addLabel]);\n      setAddLabel(\"\");\n    }\n  };\n\n  const updateUpvote = async () => {\n    try {\n      await globalAPI.put(`/upvote/${datasetID}?state=${upvoted}`);\n\n      if (upvoted) {\n        setUpvotes(state => state - 1);\n      } else {\n        setUpvotes(state => state + 1);\n      }\n\n      setUpvoted(state => !state);\n    } catch (err) {}\n  };\n\n  const updateBookmark = async () => {\n    try {\n      await globalAPI.put(`/bookmark/${datasetID}?state=${bookmarked}`);\n      setBookmarked(state => !state);\n    } catch (err) {}\n  };\n\n  const updateVisibility = async () => {\n    try {\n      await globalAPI.put(`/visibility/${datasetID}`);\n      setVisibility(state => !state);\n    } catch (err) {}\n  };\n\n  const previousPage = () => {\n    if (page > 1) {\n      setStart((page - 2) * 30);\n      setEnd((page - 1) * 30);\n      setPage(state => state - 1);\n      setRefreshData(new Date().getTime());\n    }\n  };\n\n  const nextPage = () => {\n    if (page * 30 < uploadedImages.length && uploadedImages.length > 30) {\n      setPage(state => state + 1);\n      setStart(page * 30);\n      setEnd((page + 1) * 30);\n      setRefreshData(new Date().getTime());\n    }\n  };\n\n  const deleteImage = async index => {\n    // if (type === \"view\") {\n    // }\n    uploadedImages.splice(index, 1);\n    assignedLabels.splice(index, 1);\n    setRefreshData(new Date().getTime());\n  };\n\n  const replaceImages = async () => {\n    if (type === \"create\") {\n      for (let i = 0; i < imageFiles.length; i++) {\n        setUploadedImages(state => [...state, imageFiles[i]]);\n      }\n    } else {\n      setUploadedImages(imageFiles);\n    }\n\n    setAssignedLabels(Array(imageFiles).fill(\"No label\"));\n    setPage(1);\n    setRefreshData(new Date().getTime());\n    setImageFiles([]);\n  };\n\n  const appendImages = async () => {\n    if (type === \"create\") {\n      for (let i = 0; i < imageFiles.length; i++) {\n        setUploadedImages(state => [...state, imageFiles[i]]);\n      }\n    } else {}\n\n    setAssignedLabels(state => [...state, Array(imageFiles).fill(\"No label\")]);\n    setPage(1);\n    setRefreshData(new Date().getTime());\n    setImageFiles([]);\n  };\n\n  const uploadImage = async () => {\n    setDisabledCreate(true);\n\n    if (uploadedImages.length !== 0 && !assignedLabels.includes(\"No label\")) {\n      const formData = new FormData();\n      const id = new Date().toISOString();\n      formData.append('id', id);\n\n      for (let i = 0; i < uploadedImages.length; i++) {\n        formData.append('data[]', uploadedImages[i]);\n        formData.append('labels[]', assignedLabels[i]);\n      }\n\n      try {\n        await fileAPI.post(\"/upload\", formData);\n      } catch (err) {}\n\n      if (image) {\n        const formImage = new FormData();\n        formImage.append('image', image);\n\n        try {\n          const imageResponse = await imageAPI.post(\"/upload\", formImage);\n          uploadDataset(imageResponse.data.data, id);\n        } catch (err) {}\n      } else {\n        uploadDataset(\"default.png\", id);\n      }\n    } else {\n      setDisabledCreate(false);\n    }\n  };\n\n  const uploadDataset = async (imageName, id) => {\n    try {\n      const datasetResponse = await itemsAPI.post(\"/\", {\n        title: title,\n        imageFile: id,\n        creator: currentUser.id,\n        description: description,\n        picture: imageName,\n        upvotes: [],\n        bookmarks: [],\n        labels: labels,\n        updated: new Date().toISOString(),\n        visibility: visibility,\n        type: \"dataset\"\n      });\n      history.push(`/dataset/${datasetResponse.data.data}`);\n    } catch (err) {}\n  };\n\n  const updateDataset = async () => {\n    if (image) {\n      const formImage = new FormData();\n      formImage.append('image', image);\n\n      try {\n        const tempPicture = picture;\n        const imageResponse = await imageAPI.post(\"/upload\", formImage);\n        await itemsAPI.put(`/${datasetID}?type=dataset`, {\n          title: title,\n          description: description,\n          picture: imageResponse.data.data,\n          labels: labels,\n          updated: new Date().toISOString()\n        });\n        setImage(undefined);\n        setPicture(imageResponse.data.data);\n\n        if (tempPicture !== \"default.png\") {\n          await imageAPI.put('/remove', {\n            picture: tempPicture\n          });\n        }\n      } catch (err) {}\n    } else {\n      try {\n        await itemsAPI.put(`/${datasetID}?type=dataset`, {\n          title: title,\n          description: description,\n          picture: picture,\n          labels: labels,\n          updated: new Date().toISOString()\n        });\n      } catch (err) {}\n    }\n\n    setUpdated(new Date().toISOString());\n    setChangedSettings(false);\n  };\n\n  const deleteDataset = async () => {\n    try {\n      await itemsAPI.delete(`/${datasetID}`);\n      removeOpenItems(datasetID);\n      history.replace(\"/home\");\n    } catch (err) {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loaded && exist ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sidebar-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"http://localhost:3000/dataset.png\",\n            className: !(type === \"view\" && !dataset.self) ? \"create-item-edit-image\" : undefined\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: `create-item-title ${!(type === \"view\" && !dataset.self) && \"create-item-edit-input\"}`,\n            placeholder: \"Title\",\n            onChange: e => {\n              setTitle(e.target.value);\n              setChangedSettings(true);\n            },\n            disabled: !(dataset.self || type === \"create\"),\n            value: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: `create-item-description ${!(type === \"view\" && !dataset.self) && \"create-item-edit-textarea\"}`,\n          placeholder: \"Description\",\n          onChange: e => {\n            setDescription(e.target.value);\n            setChangedSettings(true);\n          },\n          disabled: !(dataset.self || type === \"create\"),\n          value: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 25\n        }, this), (dataset.self || type === \"create\") && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-item-setup\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"create-item-setup-label\",\n              children: \"Picture\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"create-item-setup-input\",\n              type: \"file\",\n              name: \"image\",\n              onChange: e => {\n                setImage(e.target.files[0]);\n                setChangedSettings(true);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-item-setup\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"create-item-setup-label\",\n              children: \"Public?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              onChange: () => {\n                setVisibility(previous => !previous);\n                setChangedSettings(true);\n              },\n              checked: visibility\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 362,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true), !dataset.self && type !== \"create\" && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"item-creator\",\n          children: dataset.creatorName.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 64\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-information\",\n          children: [type !== \"create\" && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"item-date\",\n            children: date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 51\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 29\n          }, this), !dataset.self && type !== \"create\" && /*#__PURE__*/_jsxDEV(BookmarkIcon, {\n            className: `item-icon ${bookmarked ? \"blue2\" : \"white\"}`,\n            onClick: () => {\n              updateBookmark();\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 68\n          }, this), dataset.self && type !== \"create\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: visibility ? /*#__PURE__*/_jsxDEV(VisibilityIcon, {\n              className: \"item-visibility\",\n              onClick: () => {\n                updateVisibility();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(VisibilityOffIcon, {\n              className: \"item-visibility\",\n              onClick: () => {\n                updateVisibility();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 41\n            }, this)\n          }, void 0, false), type !== \"create\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(ThumbUpIcon, {\n              className: `item-icon ${upvoted ? \"blue2\" : \"white\"}`,\n              onClick: () => {\n                updateUpvote();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: upvoted ? \"blue2\" : \"white\",\n              children: upvotes\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 25\n        }, this), type === \"view\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sidebar-divided\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Associated Workspaces:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true), type === \"view\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: dataset.self && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sidebar-divided\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"blue-button item-save\",\n              disabled: !changedSettings,\n              onClick: () => {\n                updateDataset();\n              },\n              children: \"Save Changes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"text-button item-delete\",\n              onClick: () => {\n                deleteDataset();\n              },\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true)\n        }, void 0, false)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"workspace-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"workspace-inner\",\n            children: type === \"create\" || dataset.self ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"view-items-top\",\n                children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                  children: \"Create Dataset\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 419,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 420,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"blue-button\",\n                  disabled: disableCreate,\n                  onClick: () => {\n                    uploadImage();\n                  },\n                  children: \"Create\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 421,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 418,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-dataset-upload\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"file\",\n                  name: \"data\",\n                  accept: \"image/*\",\n                  multiple: true,\n                  onChange: e => {\n                    setImageFiles(e.target.files);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 426,\n                  columnNumber: 45\n                }, this), type === \"create\" && uploadedImages.length === 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"white-button\",\n                  onClick: () => {\n                    replaceImages();\n                  },\n                  children: \"Add\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 434,\n                  columnNumber: 49\n                }, this), (dataset.self || type === \"create\") && uploadedImages.length !== 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"white-button\",\n                    onClick: () => {\n                      setUploadedImages([]);\n                      replaceImages();\n                    },\n                    children: \"Replace\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 439,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"white-button\",\n                    onClick: () => {\n                      appendImages();\n                    },\n                    children: \"Append\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 444,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true), uploadedImages.length !== 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"create-dataset-pagination\",\n                  children: [/*#__PURE__*/_jsxDEV(ArrowBackIosNewIcon, {\n                    className: \"create-dataset-pagination-icon\",\n                    onClick: () => {\n                      previousPage();\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 450,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"Page \", page, \" / \", Math.ceil(uploadedImages.length / 30)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 451,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(ArrowForwardIosIcon, {\n                    className: \"create-dataset-pagination-icon\",\n                    onClick: () => {\n                      nextPage();\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 452,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 449,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 425,\n                columnNumber: 41\n              }, this), type === \"create\" && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-dataset-images-list\",\n                children: uploadedImages.map((image, i) => {\n                  if (i >= start && i < end) {\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"create-dataset-image\",\n                      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                        src: URL.createObjectURL(image)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 462,\n                        columnNumber: 65\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                          value: assignedLabels[i],\n                          onChange: e => {\n                            setAssignedLabels(state => {\n                              const stateCopy = [...state];\n                              stateCopy[i] = e.target.value;\n                              return stateCopy;\n                            });\n                            setRefreshLabels(new Date().getTime());\n                          },\n                          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"No label\",\n                            children: \"No label\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 473,\n                            columnNumber: 73\n                          }, this), labels.map((label, j) => /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: label,\n                            children: label\n                          }, j, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 475,\n                            columnNumber: 77\n                          }, this))]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 464,\n                          columnNumber: 69\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          onClick: () => {\n                            deleteImage(i);\n                          },\n                          children: /*#__PURE__*/_jsxDEV(DeleteIcon, {\n                            className: \"create-dataset-image-delete\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 479,\n                            columnNumber: 73\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 478,\n                          columnNumber: 69\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 463,\n                        columnNumber: 65\n                      }, this)]\n                    }, i, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 461,\n                      columnNumber: 61\n                    }, this);\n                  }\n                })\n              }, refreshData, false, {\n                fileName: _jsxFileName,\n                lineNumber: 457,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"create-dataset-images-list\",\n              children: uploadedImages.map((image, i) => {\n                if (i >= start && i < end) {\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"create-dataset-image\",\n                    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                      src: `http://127.0.0.1:5000/files/${dataset.imageFile}/${image}.jpg`\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 495,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                        value: assignedLabels[i],\n                        onChange: e => {\n                          setAssignedLabels(state => {\n                            const stateCopy = [...state];\n                            stateCopy[i] = e.target.value;\n                            return stateCopy;\n                          });\n                          setRefreshLabels(new Date().getTime());\n                        },\n                        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                          value: \"No label\",\n                          children: \"No label\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 506,\n                          columnNumber: 65\n                        }, this), labels.map((label, j) => /*#__PURE__*/_jsxDEV(\"option\", {\n                          value: label,\n                          children: label\n                        }, j, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 508,\n                          columnNumber: 69\n                        }, this))]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 497,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        onClick: () => {\n                          deleteImage(i);\n                        },\n                        children: /*#__PURE__*/_jsxDEV(DeleteIcon, {\n                          className: \"create-dataset-image-delete\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 512,\n                          columnNumber: 65\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 511,\n                        columnNumber: 61\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 496,\n                      columnNumber: 57\n                    }, this)]\n                  }, i, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 494,\n                    columnNumber: 53\n                  }, this);\n                }\n              })\n            }, refreshData, false, {\n              fileName: _jsxFileName,\n              lineNumber: 490,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-workspace-data\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"create-workspace-data-header\",\n              children: \"Labels:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 523,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sidebar-divided\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 524,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"create-dataset-label-input\",\n              placeholder: \"Add Label\",\n              onChange: e => {\n                setAddLabel(e.target.value);\n              },\n              onKeyPress: addFunctionKey,\n              value: addLabel\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 525,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"create-dataset-labels-list\",\n              children: labels.map((label, i) => {\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"create-dataset-label\",\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    children: label\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 534,\n                    columnNumber: 49\n                  }, this), (type === \"create\" || dataset.self) && /*#__PURE__*/_jsxDEV(\"div\", {\n                    onClick: () => {\n                      assignedLabels.map((assignedLabel, j) => {\n                        if (assignedLabel === labels[i]) {\n                          setAssignedLabels(state => {\n                            const stateCopy = [...state];\n                            stateCopy[j] = \"No label\";\n                            return stateCopy;\n                          });\n                        }\n                      });\n                      labels.splice(i, 1);\n                      setRefreshLabels(new Date().getTime());\n                    },\n                    children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n                      className: \"create-dataset-label-icon\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 551,\n                      columnNumber: 57\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 536,\n                    columnNumber: 53\n                  }, this)]\n                }, i, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 533,\n                  columnNumber: 45\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 530,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 522,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 17\n    }, this) : loaded && !exist && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inner-body\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"item-exist\",\n        children: \"Cannot find dataset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 563,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(Dataset, \"wKXYemmAkBQlaYLXvn42p6/LvTg=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = Dataset;\nexport default Dataset;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dataset\");","map":{"version":3,"sources":["/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Dataset.jsx"],"names":["React","useState","useEffect","useRef","useContext","useHistory","useParams","Link","usersAPI","itemsAPI","globalAPI","imageAPI","fileAPI","OpenItemsContext","BookmarkIcon","ThumbUpIcon","VisibilityOffIcon","VisibilityIcon","CloseIcon","DeleteIcon","ArrowForwardIosIcon","ArrowBackIosNewIcon","Dataset","currentUser","type","title","setTitle","description","setDescription","visibility","setVisibility","bookmarked","setBookmarked","upvoted","setUpvoted","upvotes","setUpvotes","updated","setUpdated","picture","setPicture","date","setDate","start","setStart","end","setEnd","page","setPage","image","setImage","dataset","setDataset","labels","setLabels","changedSettings","setChangedSettings","changedData","setChangedData","uploadedImages","setUploadedImages","imageFiles","setImageFiles","assignedLabels","setAssignedLabels","refreshData","setRefreshData","refreshLabels","setRefreshLabels","loaded","setLoaded","exist","setExist","noData","setNoData","addLabel","setAddLabel","disableCreate","setDisabledCreate","addOpenItems","removeOpenItems","modelRef","datasetID","id","publicInterval","existInterval","history","fetchData","get","data","map","previous","creator","_id","fetch","imageFile","then","response","json","images","state","filename","label","catch","err","updatedDate","Date","currentDate","getTime","Math","floor","toString","addFunctionKey","e","key","updateUpvote","put","updateBookmark","updateVisibility","previousPage","nextPage","length","deleteImage","index","splice","replaceImages","i","Array","fill","appendImages","uploadImage","includes","formData","FormData","toISOString","append","post","formImage","imageResponse","uploadDataset","imageName","datasetResponse","bookmarks","push","updateDataset","tempPicture","undefined","deleteDataset","delete","replace","self","target","value","files","creatorName","name","ceil","URL","createObjectURL","stateCopy","j","assignedLabel"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef, useContext} from 'react'\nimport {useHistory, useParams, Link} from \"react-router-dom\"\nimport usersAPI from '../API/users'\nimport itemsAPI from '../API/items'\nimport globalAPI from '../API/global'\nimport imageAPI from '../API/images'\nimport fileAPI from '../API/files'\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport CloseIcon from '@mui/icons-material/Close';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\n\nconst Dataset = ({currentUser, type}) => {\n    const [title, setTitle] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [visibility, setVisibility] = useState(false);\n    const [bookmarked, setBookmarked] = useState()\n    const [upvoted, setUpvoted] = useState()\n    const [upvotes, setUpvotes] = useState()\n    const [updated, setUpdated] = useState()\n    const [picture, setPicture] = useState()\n    const [date, setDate] = useState(\"\")\n    const [start, setStart] = useState(0)\n    const [end, setEnd] = useState(30)\n    const [page, setPage] = useState(1)\n    const [image, setImage] = useState();\n    const [dataset, setDataset] = useState([]);\n    const [labels, setLabels] = useState([])\n    const [changedSettings, setChangedSettings] = useState(false)\n    const [changedData, setChangedData] = useState(false)\n    const [uploadedImages, setUploadedImages] = useState([])\n    const [imageFiles, setImageFiles] = useState([])\n    const [assignedLabels, setAssignedLabels] = useState([])\n    const [refreshData, setRefreshData] = useState()\n    const [refreshLabels, setRefreshLabels] = useState()\n    const [loaded, setLoaded] = useState(false);\n    const [exist, setExist] = useState()\n    const [noData, setNoData] = useState()\n    const [addLabel, setAddLabel] = useState(\"\")\n    const [disableCreate, setDisabledCreate] = useState(false)\n    const {addOpenItems, removeOpenItems} = useContext(OpenItemsContext);\n    const modelRef = useRef(null)\n    const datasetID = useParams().id;\n    const publicInterval = useRef(0)\n    const existInterval = useRef(0)\n    const history = useHistory();\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                if (type === \"create\") {\n                    const dataset = await usersAPI.get(\"/created?type=dataset\");\n    \n                    dataset.data.data.map((dataset) => {\n                        setDataset(previous => [...previous, dataset.title]);\n                    })\n\n                    setExist(true)\n                    setLoaded(true)\n                } else {\n                    const dataset = await itemsAPI.get(`/${datasetID}?type=dataset`);\n\n                    if (dataset.data.data.creator === currentUser.id) {\n                        addOpenItems(dataset.data.data._id, dataset.data.data.title, dataset.data.data.type)\n                    }\n\n                    setDataset(dataset.data.data);\n                    setUpdated(dataset.data.data.updated);\n                    setBookmarked(dataset.data.data.bookmarked)\n                    setUpvoted(dataset.data.data.upvoted)\n                    setPicture(dataset.data.data.picture)\n                    setUpvotes(dataset.data.data.upvotes)\n                    setVisibility(dataset.data.data.visibility)\n                    setTitle(dataset.data.data.title)\n                    setDescription(dataset.data.data.description)\n                    setLabels(dataset.data.data.labels)\n\n                    fetch(`http://127.0.0.1:5000/files/${dataset.data.data.imageFile}/labels.json`)\n                        .then(response => response.json())\n                        .then(images => {\n                            images.map(image => {\n                                setUploadedImages(state => [...state, image.filename])\n                                setAssignedLabels(state => [...state, image.label])\n                            })\n                            setExist(true)\n                            setLoaded(true)\n                        }).catch(() => {\n                            setExist(true)\n                            setLoaded(true)\n                        });\n                }\n            } catch (err) {\n              setExist(false)\n              setLoaded(true)\n            }\n        }\n        fetchData();\n    }, [])\n\n    useEffect(() => {\n        if (loaded && exist) {\n            const updatedDate = new Date(updated);\n            const currentDate = new Date();\n    \n            if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} years ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} days ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hours ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minutes ago`)\n            } else {\n                setDate(\"Updated just now\")\n            }\n        }\n    }, [loaded, updated])\n\n    const addFunctionKey = (e) => {\n        if (e.key === \"Enter\" && addLabel !== \"\") {\n            setLabels(state => [...state, addLabel])\n            setAddLabel(\"\")\n        }\n    }\n\n    const updateUpvote = async () => {\n        try {\n            await globalAPI.put(`/upvote/${datasetID}?state=${upvoted}`);\n\n            if (upvoted) {\n                setUpvotes(state => state-1)\n            } else {\n                setUpvotes(state => state+1)\n            }\n\n            setUpvoted(state => !state)\n        } catch (err) {}\n    }\n\n    const updateBookmark = async () => {\n        try {\n            await globalAPI.put(`/bookmark/${datasetID}?state=${bookmarked}`);\n            \n            setBookmarked(state => !state)\n        } catch (err) {}\n    }\n\n    const updateVisibility = async () => {\n        try {\n            await globalAPI.put(`/visibility/${datasetID}`);\n\n            setVisibility(state => !state)\n        } catch (err) {}\n    }\n\n    const previousPage = () => {\n        if (page > 1) {\n            setStart((page-2)*30)\n            setEnd((page-1)*30)\n            setPage(state => state-1)\n            setRefreshData(new Date().getTime())\n        }\n    }\n    \n    const nextPage = () => {\n        if (page*30 < uploadedImages.length && uploadedImages.length > 30) {\n            setPage(state => state+1)\n            setStart((page)*30)\n            setEnd((page+1)*30)\n            setRefreshData(new Date().getTime())\n        }\n    }\n\n    const deleteImage = async (index) => {\n        // if (type === \"view\") {\n        // }\n        uploadedImages.splice(index, 1)\n        assignedLabels.splice(index, 1)\n        setRefreshData(new Date().getTime())\n    }\n\n    const replaceImages = async () => {\n        if (type === \"create\") {\n            for (let i = 0; i < imageFiles.length; i++) {\n                setUploadedImages(state => [...state, imageFiles[i]])\n            }\n        } else {\n            setUploadedImages(imageFiles)\n        }\n\n        setAssignedLabels(Array(imageFiles).fill(\"No label\"))\n        setPage(1)\n        setRefreshData(new Date().getTime())\n        setImageFiles([])\n    }\n    \n    const appendImages = async () => {\n        if (type === \"create\") {\n            for (let i = 0; i < imageFiles.length; i++) {\n                setUploadedImages(state => [...state, imageFiles[i]])\n            }\n        } else {\n\n        }\n\n        setAssignedLabels(state => [...state, Array(imageFiles).fill(\"No label\")])\n        setPage(1)\n        setRefreshData(new Date().getTime())\n        setImageFiles([])\n    }\n\n    const uploadImage = async () => {\n        setDisabledCreate(true)\n\n        if (uploadedImages.length !== 0 && !assignedLabels.includes(\"No label\")) {\n            const formData = new FormData();\n            const id = new Date().toISOString();\n\n            formData.append('id', id)\n\n            for (let i = 0; i < uploadedImages.length; i++) {\n                formData.append('data[]', uploadedImages[i]);\n                formData.append('labels[]', assignedLabels[i]);\n            }\n\n            try {\n                await fileAPI.post(\"/upload\", formData);\n            } catch (err) {}\n\n            if (image) {\n                const formImage = new FormData();\n                formImage.append('image', image);\n                \n                try {\n                    const imageResponse = await imageAPI.post(\"/upload\", formImage);\n    \n                    uploadDataset(imageResponse.data.data, id)\n                } catch (err) {}\n            } else {\n                uploadDataset(\"default.png\", id)\n            }\n        } else {\n            setDisabledCreate(false)\n        }\n    }\n\n    const uploadDataset = async (imageName, id) => {\n        try {\n            const datasetResponse = await itemsAPI.post(\"/\", {\n                title: title,\n                imageFile: id,\n                creator: currentUser.id,\n                description: description,\n                picture: imageName,\n                upvotes: [],\n                bookmarks: [],\n                labels: labels,\n                updated: new Date().toISOString(),\n                visibility: visibility,\n                type: \"dataset\"\n            });\n\n            history.push(`/dataset/${datasetResponse.data.data}`)\n        } catch (err) {}\n    }\n\n    const updateDataset = async () => {\n        if (image) {\n            const formImage = new FormData();\n            formImage.append('image', image);\n            \n            try {\n                const tempPicture = picture\n                const imageResponse = await imageAPI.post(\"/upload\", formImage);\n\n                await itemsAPI.put(`/${datasetID}?type=dataset`, {\n                  title: title,\n                  description: description,\n                  picture: imageResponse.data.data,\n                  labels: labels,\n                  updated: new Date().toISOString()\n              })\n\n                setImage(undefined)\n                setPicture(imageResponse.data.data)\n\n                if (tempPicture !== \"default.png\") {\n                    await imageAPI.put('/remove', {picture: tempPicture});\n                }\n            } catch (err) {}\n        } else {\n            try {\n                await itemsAPI.put(`/${datasetID}?type=dataset`, {\n                  title: title,\n                  description: description,\n                  picture: picture,\n                  labels: labels,\n                  updated: new Date().toISOString()\n              })\n            } catch (err) {}\n        }\n\n        setUpdated(new Date().toISOString())\n        setChangedSettings(false)\n    }\n\n    const deleteDataset = async () => {\n        try {\n            await itemsAPI.delete(`/${datasetID}`)\n\n            removeOpenItems(datasetID)\n            history.replace(\"/home\")\n        } catch (err) {}\n    }\n\n    return (\n        <>\n            {loaded && exist ?\n                <div className=\"main-body\">\n                    <div className=\"sidebar\">\n                        <div className=\"sidebar-header\">\n                            <img src=\"http://localhost:3000/dataset.png\"\n                                    className={!(type === \"view\" && !dataset.self) ? \"create-item-edit-image\" : undefined} />\n                            <input className={`create-item-title ${!(type === \"view\" && !dataset.self) && \"create-item-edit-input\"}`}\n                                    placeholder=\"Title\"\n                                    onChange={e => {\n                                        setTitle(e.target.value)\n                                        setChangedSettings(true)\n                                    }}\n                                    disabled={!(dataset.self || type === \"create\")}\n                                    value={title} />\n                        </div>\n                        <textarea className={`create-item-description ${!(type === \"view\" && !dataset.self) && \"create-item-edit-textarea\"}`}\n                                    placeholder=\"Description\"\n                                    onChange={e => {\n                                        setDescription(e.target.value)\n                                        setChangedSettings(true)\n                                    }}\n                                    disabled={!(dataset.self || type === \"create\")}\n                                    value={description} />\n                        {(dataset.self || type === \"create\") &&\n                            <>\n                                <div className=\"create-item-setup\">\n                                    <label className=\"create-item-setup-label\">Picture</label>\n                                    <input className=\"create-item-setup-input\"\n                                            type=\"file\" \n                                            name=\"image\" \n                                            onChange={e => {\n                                                setImage(e.target.files[0])\n                                                setChangedSettings(true)\n                                            }} />\n                                </div>\n                                <div className=\"create-item-setup\">\n                                    <label className=\"create-item-setup-label\">Public?</label>\n                                    <input type=\"checkbox\" \n                                            onChange={() => {\n                                                setVisibility(previous => !previous)\n                                                setChangedSettings(true)\n                                            }}\n                                            checked={visibility} />\n                                </div>\n                            </>\n                        }\n                        {!dataset.self && type !== \"create\" && <p className=\"item-creator\">{dataset.creatorName.name}</p>}\n                        <div className=\"item-information\">\n                            {type !== \"create\" && <p className=\"item-date\">{date}</p>}\n                            <span />\n                            {!dataset.self && type !== \"create\" && <BookmarkIcon className={`item-icon ${bookmarked ? \"blue2\" : \"white\"}`} onClick={() => {updateBookmark()}} />}\n                            {dataset.self && type !== \"create\" && \n                                <>\n                                    {visibility ? \n                                        <VisibilityIcon className=\"item-visibility\" onClick={() => {updateVisibility()}} />\n                                    :\n                                        <VisibilityOffIcon className=\"item-visibility\" onClick={() => {updateVisibility()}} />\n                                    }\n                                </>\n                            }\n                            {type !== \"create\" &&\n                                <>\n                                    <ThumbUpIcon className={`item-icon ${upvoted ? \"blue2\" : \"white\"}`} onClick={() => {updateUpvote()}} />\n                                    <p className={upvoted ? \"blue2\" : \"white\"}>{upvotes}</p>\n                                </>\n                            }\n                        </div>\n                        {type === \"view\" &&\n                            <>\n                                <div className=\"sidebar-divided\" />\n                                <p>Associated Workspaces:</p>\n                            </>\n                        }\n                        {type === \"view\" &&\n                            <>\n                                {dataset.self &&\n                                    <>\n                                        <div className=\"sidebar-divided\" />\n                                        <button className=\"blue-button item-save\"\n                                                disabled={!changedSettings}\n                                                onClick={() => {updateDataset()}}>Save Changes</button>\n                                        <button className=\"text-button item-delete\"\n                                                onClick={() => {deleteDataset()}}>Delete</button>\n                                    </>\n                                }\n                            </>\n                        }\n                    </div>\n                    <div className=\"inner\">\n                        <div className=\"workspace-body\">\n                            <div className=\"workspace-inner\">\n                                {(type === \"create\" || dataset.self) ?\n                                    <>\n                                        <div className=\"view-items-top\">\n                                            <h1>Create Dataset</h1>\n                                            <span />\n                                            <button className=\"blue-button\"\n                                                    disabled={disableCreate}\n                                                    onClick={() => {uploadImage()}}>Create</button>\n                                        </div>\n                                        <div className=\"create-dataset-upload\">\n                                            <input type=\"file\" \n                                                    name=\"data\"\n                                                    accept=\"image/*\"\n                                                    multiple\n                                                    onChange={e => {\n                                                        setImageFiles(e.target.files)\n                                                    }} />\n                                            {type === \"create\" && uploadedImages.length === 0 && \n                                                <button className=\"white-button\"\n                                                        onClick={() => {replaceImages()}}>Add</button>\n                                            }\n                                            {(dataset.self || type === \"create\") && uploadedImages.length !== 0 && \n                                                <>\n                                                    <button className=\"white-button\"\n                                                            onClick={() => {\n                                                                setUploadedImages([])\n                                                                replaceImages()\n                                                            }}>Replace</button>\n                                                    <button className=\"white-button\"\n                                                            onClick={() => {appendImages()}}>Append</button>\n                                                </>\n                                            }\n                                            {uploadedImages.length !== 0 &&\n                                                <div className=\"create-dataset-pagination\">\n                                                    <ArrowBackIosNewIcon className=\"create-dataset-pagination-icon\" onClick={() => {previousPage()}} />\n                                                    <p>Page {page} / {Math.ceil(uploadedImages.length/30)}</p>\n                                                    <ArrowForwardIosIcon className=\"create-dataset-pagination-icon\" onClick={() => {nextPage()}} />\n                                                </div>\n                                            }\n                                        </div>\n                                        {type === \"create\" &&\n                                            <div className=\"create-dataset-images-list\" key={refreshData}>\n                                                {uploadedImages.map((image, i) => {\n                                                    if (i >= start && i < end) {\n                                                        return (\n                                                            <div className=\"create-dataset-image\" key={i}>\n                                                                <img src={URL.createObjectURL(image)} />\n                                                                <div>\n                                                                    <select value={assignedLabels[i]}\n                                                                            onChange={e => {setAssignedLabels(state => {\n                                                                                        const stateCopy = [...state]\n                                                                                    \n                                                                                        stateCopy[i] = e.target.value\n                                                                                    \n                                                                                        return stateCopy\n                                                                                    })\n                                                                                    setRefreshLabels(new Date().getTime())}}>\n                                                                        <option value=\"No label\">No label</option>\n                                                                        {labels.map((label, j) => \n                                                                            <option value={label} key={j}>{label}</option>\n                                                                        )}\n                                                                    </select>\n                                                                    <div onClick={() => {deleteImage(i)}}>\n                                                                        <DeleteIcon className=\"create-dataset-image-delete\" />\n                                                                    </div>\n                                                                </div>\n                                                            </div>\n                                                        )\n                                                    }\n                                                })}\n                                            </div>\n                                        }\n                                    </>\n                                :   \n                                    <div className=\"create-dataset-images-list\" key={refreshData}>\n                                        {uploadedImages.map((image, i) => {\n                                            if (i >= start && i < end) {\n                                                return (\n                                                    <div className=\"create-dataset-image\" key={i}>\n                                                        <img src={`http://127.0.0.1:5000/files/${dataset.imageFile}/${image}.jpg`} />\n                                                        <div>\n                                                            <select value={assignedLabels[i]}\n                                                                    onChange={e => {setAssignedLabels(state => {\n                                                                                const stateCopy = [...state]\n                                                                            \n                                                                                stateCopy[i] = e.target.value\n                                                                            \n                                                                                return stateCopy\n                                                                            })\n                                                                            setRefreshLabels(new Date().getTime())}}>\n                                                                <option value=\"No label\">No label</option>\n                                                                {labels.map((label, j) => \n                                                                    <option value={label} key={j}>{label}</option>\n                                                                )}\n                                                            </select>\n                                                            <div onClick={() => {deleteImage(i)}}>\n                                                                <DeleteIcon className=\"create-dataset-image-delete\" />\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                )\n                                            }\n                                        })}\n                                    </div>\n                                }\n                            </div>\n                            <div className=\"create-workspace-data\">\n                                <p className=\"create-workspace-data-header\">Labels:</p>\n                                <div className=\"sidebar-divided\" />\n                                <input className=\"create-dataset-label-input\"\n                                        placeholder=\"Add Label\"\n                                        onChange={e => {setAddLabel(e.target.value)}}\n                                        onKeyPress={addFunctionKey}\n                                        value={addLabel} />\n                                <div className=\"create-dataset-labels-list\">\n                                    {labels.map((label, i) => {\n                                        return (\n                                            <div className=\"create-dataset-label\" key={i}>\n                                                <p>{label}</p>\n                                                {(type === \"create\" || dataset.self) &&\n                                                    <div onClick={() => {\n                                                        assignedLabels.map((assignedLabel, j) => {\n                                                            if (assignedLabel === labels[i]) {\n                                                                setAssignedLabels(state => {\n                                                                    const stateCopy = [...state]\n                                                                \n                                                                    stateCopy[j] = \"No label\"\n                                                                \n                                                                    return stateCopy\n                                                                })\n                                                            }\n                                                        })\n                                                        labels.splice(i, 1)\n                                                        setRefreshLabels(new Date().getTime())\n                                                    }}>\n                                                        <CloseIcon className=\"create-dataset-label-icon\" /> \n                                                    </div>\n                                                }\n                                            </div>\n                                        )\n                                    })}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            : loaded && !exist &&\n                <div className=\"inner-body\">  \n                    <p className=\"item-exist\">Cannot find dataset</p>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default Dataset"]},"metadata":{},"sourceType":"module"}