{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Workspace.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useContext } from 'react';\nimport { useHistory, useParams, Link } from \"react-router-dom\";\nimport usersAPI from '../API/users';\nimport itemsAPI from '../API/items';\nimport globalAPI from '../API/global';\nimport imageAPI from '../API/images';\nimport filesAPI from '../API/files';\nimport trainAPI from '../API/train';\nimport predictAPI from '../API/predict';\nimport ModelNode from '../Components/Model-Node';\nimport Chart from '../Components/Chart';\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport { MessageContext } from '../Contexts/messageContext';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport MessageCard from '../Components/MessageCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Workspace = _ref => {\n  _s();\n\n  let {\n    currentUser,\n    type\n  } = _ref;\n  const [stage, setStage] = useState(\"model\");\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [visibility, setVisibility] = useState(false);\n  const [bookmarked, setBookmarked] = useState();\n  const [upvoted, setUpvoted] = useState();\n  const [upvotes, setUpvotes] = useState();\n  const [updated, setUpdated] = useState();\n  const [picture, setPicture] = useState();\n  const [date, setDate] = useState(\"\");\n  const [start, setStart] = useState(0);\n  const [trainTime, setTrainTime] = useState(0);\n  const [end, setEnd] = useState(20);\n  const [page, setPage] = useState(1);\n  const [image, setImage] = useState();\n  const [datasetID, setDatasetID] = useState(\"\");\n  const [uploadedDataset, setUploadedDataset] = useState();\n  const [workspace, setWorkspace] = useState([]);\n  const [images, setImages] = useState([]);\n  const [predictionFile, setPredictionFile] = useState();\n  const [prediction, setPrediction] = useState();\n  const [assignedLabels, setAssignedLabels] = useState([]);\n  const [refreshData, setRefreshData] = useState();\n  const [refreshDiagram, setRefreshDiagram] = useState();\n  const [changedSettings, setChangedSettings] = useState(false);\n  const [model, setModel] = useState([{\n    type: \"Input\"\n  }]);\n  const [evaluation, setEvaluation] = useState();\n  const [selectedNode, setSelectedNode] = useState(0);\n  const [configuration, setConfiguration] = useState({\n    epochs: 1,\n    training_split: 0,\n    validation_split: 0,\n    improvement: 0,\n    early_stopping: false,\n    decay_rate: 0,\n    decay_steps: 1,\n    patience: 0,\n    batch: 32,\n    lr_scheduler: false,\n    initial_lr: 0.01,\n    optimiser: \"\",\n    loss: \"\"\n  });\n  const [addNode, setAddNode] = useState(false);\n  const [loaded, setLoaded] = useState(false);\n  const [exist, setExist] = useState();\n  const [noData, setNoData] = useState();\n  const [disabledCreate, setDisabledCreate] = useState(false);\n  const [disabledTrain, setDisabledTrain] = useState(false);\n  const [displayPublic, setDisplayPublic] = useState(false);\n  const [displayExist, setDisplayExist] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const {\n    addOpenItems,\n    removeOpenItems\n  } = useContext(OpenItemsContext);\n  const {\n    displayMessage,\n    displayMessageInterval\n  } = useContext(MessageContext);\n  const modelRef = useRef(null);\n  const workspaceID = useParams().id;\n  const publicInterval = useRef(0);\n  const existInterval = useRef(0);\n  const history = useHistory();\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (type === \"create\") {\n          const workspace = await usersAPI.get(\"/created?type=workspace\");\n          workspace.data.data.map(workspace => {\n            setWorkspace(previous => [...previous, workspace.title]);\n          });\n          setExist(true);\n          setLoaded(true);\n        } else {\n          const workspace = await itemsAPI.get(`/${workspaceID}?type=workspace`);\n\n          if (workspace.data.data.self) {\n            addOpenItems(workspace.data.data._id, workspace.data.data.title, workspace.data.data.type);\n          }\n\n          setWorkspace(workspace.data.data);\n          setUpdated(workspace.data.data.updated);\n          setBookmarked(workspace.data.data.bookmarked);\n          setUpvoted(workspace.data.data.upvoted);\n          setPicture(workspace.data.data.picture);\n          setUpvotes(workspace.data.data.upvotes);\n          setDatasetID(workspace.data.data.dataset._id);\n          setVisibility(workspace.data.data.visibility);\n          setTitle(workspace.data.data.title);\n          setDescription(workspace.data.data.description);\n          setModel(workspace.data.data.model);\n          setConfiguration(workspace.data.data.configuration);\n          setUploadedDataset(workspace.data.data.dataset);\n          setEvaluation({\n            testAcc: workspace.data.data.evaluation.testAcc,\n            testLoss: workspace.data.data.evaluation.testLoss,\n            trainAcc: workspace.data.data.evaluation.trainAcc,\n            trainLoss: workspace.data.data.evaluation.trainLoss,\n            validationAcc: workspace.data.data.evaluation.validationAcc,\n            validationLoss: workspace.data.data.evaluation.validationLoss,\n            trainEpochs: Array.from(Array(workspace.data.data.evaluation.trainEpochs), (e, i) => (i + 1).toString())\n          });\n          setTrainTime(workspace.data.data.evaluation.trainTime);\n          fetch(`http://127.0.0.1:5000/files/${workspace.data.data.dataset.imageFile}/labels.json`).then(response => response.json()).then(images => {\n            images.map(image => {\n              setImages(state => [...state, image.filename]);\n              setAssignedLabels(state => [...state, image.label]);\n            });\n            setExist(true);\n            setNoData(false);\n            setLoaded(true);\n          }).catch(() => {\n            setExist(true);\n            setNoData(true);\n            setLoaded(true);\n          });\n        }\n      } catch (err) {\n        setExist(false);\n        setLoaded(true);\n      }\n    };\n\n    fetchData();\n  }, []);\n  useEffect(() => {\n    const timerID = stage === \"train\" && setInterval(() => {\n      setTrainTime(previous => previous + 1);\n    }, 1000);\n    return () => {\n      clearInterval(timerID);\n    };\n  }, [trainTime, stage]);\n  useEffect(() => {\n    if (modelRef.current) {\n      modelRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'end',\n        inline: 'end'\n      });\n    }\n  }, [model.length, addNode]);\n  useEffect(() => {\n    if (loaded && exist) {\n      const updatedDate = new Date(updated);\n      const currentDate = new Date();\n\n      if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365).toString()} years ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n        setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24)).toString()} days ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600)).toString()} hours ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60)).toString()} minutes ago`);\n      } else {\n        setDate(\"Updated just now\");\n      }\n    }\n  }, [loaded, updated]);\n\n  const searchFunctionKey = e => {\n    if (e.key === \"Enter\" && datasetID !== \"\") {\n      existingDataset();\n    }\n  };\n\n  const updateUpvote = async () => {\n    try {\n      await globalAPI.put(`/upvote/${workspaceID}?state=${upvoted}`);\n\n      if (upvoted) {\n        setUpvotes(state => state - 1);\n      } else {\n        setUpvotes(state => state + 1);\n      }\n\n      setUpvoted(state => !state);\n    } catch (err) {}\n  };\n\n  const updateBookmark = async () => {\n    try {\n      await globalAPI.put(`/bookmark/${workspaceID}?state=${bookmarked}`);\n      setBookmarked(state => !state);\n    } catch (err) {}\n  };\n\n  const updateVisibility = async () => {\n    try {\n      await globalAPI.put(`/visibility/${workspaceID}`);\n      setVisibility(state => !state);\n    } catch (err) {}\n  };\n\n  const displayPublicInterval = () => {\n    clearInterval(publicInterval.current);\n    setDisplayPublic(true);\n    publicInterval.current = setInterval(() => {\n      setDisplayPublic(false);\n    }, 1200);\n    return () => {\n      clearInterval(publicInterval.current);\n    };\n  };\n\n  const displayExistInterval = () => {\n    clearInterval(existInterval.current);\n    setDisplayExist(true);\n    existInterval.current = setInterval(() => {\n      setDisplayExist(false);\n    }, 1200);\n    return () => {\n      clearInterval(existInterval.current);\n    };\n  };\n\n  const previousPage = () => {\n    if (page > 1) {\n      setStart((page - 2) * 20);\n      setEnd((page - 1) * 20);\n      setPage(state => state - 1);\n      setRefreshData(new Date().getTime());\n    }\n  };\n\n  const nextPage = () => {\n    if (page * 20 < images.length && images.length > 20) {\n      setPage(state => state + 1);\n      setStart(page * 20);\n      setEnd((page + 1) * 20);\n      setRefreshData(new Date().getTime());\n    }\n  };\n\n  const existingDataset = async () => {\n    try {\n      const checkPublic = await itemsAPI.get(`/check-public-dataset?id=${datasetID}`);\n\n      if (checkPublic.data.success && checkPublic.data.data.visibility) {\n        fetch(`http://127.0.0.1:5000/files/${checkPublic.data.data.imageFile}/labels.json`).then(response => response.json()).then(images => {\n          images.map(image => {\n            setImages(state => [...state, image.filename]);\n            setAssignedLabels(state => [...state, image.label]);\n          });\n          setUploadedDataset(checkPublic.data.data);\n          setRefreshData(new Date().getTime());\n          setChangedSettings(true);\n        });\n      } else if (checkPublic.data.success && !checkPublic.data.data.visibility) {\n        displayPublicInterval();\n      } else {\n        displayExistInterval();\n      }\n    } catch (err) {}\n  };\n\n  const uploadImage = async () => {\n    setDisabledCreate(true);\n\n    if (uploadedDataset && evaluation && title !== \"\" && description !== \"\") {\n      if (image) {\n        const formImage = new FormData();\n        formImage.append('image', image);\n\n        try {\n          const imageResponse = await imageAPI.post(\"/upload\", formImage);\n          uploadData(imageResponse.data.data);\n        } catch (err) {}\n      } else {\n        uploadData(\"default.png\");\n      }\n    } else {\n      let error = \"\";\n\n      if (!uploadedDataset) {\n        error = \"Missing Dataset\";\n      }\n\n      if (!evaluation) {\n        error = error + \" | Model not Trained\";\n      }\n\n      if (title === \"\") {\n        error = error + \" | Title is Blank\";\n      }\n\n      if (description === \"\") {\n        error = error + \" | Description is Blank\";\n      }\n\n      setMessage(error);\n      displayMessageInterval();\n      setDisabledCreate(false);\n    }\n  };\n\n  const uploadData = async imageName => {\n    try {\n      const updatedEvaluation = {\n        testAcc: evaluation.testAcc,\n        testLoss: evaluation.testLoss,\n        trainAcc: evaluation.trainAcc,\n        trainLoss: evaluation.trainLoss,\n        validationAcc: evaluation.validationAcc,\n        validationLoss: evaluation.validationLoss,\n        trainEpochs: evaluation.trainEpochs[evaluation.trainEpochs.length - 1],\n        trainTime: trainTime\n      };\n      const workspaceResponse = await itemsAPI.post(\"/\", {\n        title: title,\n        dataset: uploadedDataset._id,\n        creator: currentUser.id,\n        description: description,\n        picture: imageName,\n        upvotes: [],\n        bookmarks: [],\n        model: model,\n        configuration: configuration,\n        updated: new Date().toISOString(),\n        visibility: visibility,\n        evaluation: updatedEvaluation,\n        type: \"workspace\"\n      });\n      setMessage(\"Workspace Created\");\n      displayMessageInterval();\n      history.push(`/workspace/${workspaceResponse.data.data}`);\n    } catch (err) {}\n  };\n\n  const train = async () => {\n    console.log(parseFloat(configuration.training_split) < 1 && parseFloat(configuration.validation_split) > 0 && parseFloat(configuration.validation_split) < 1 && parseFloat(configuration.validation_split) + parseFloat(configuration.training_split) === 1 && parseInt(configuration.batch) >= 1 && parseFloat(configuration.improvement) >= 0 && parseInt(configuration.patience) >= 1 && parseFloat(configuration.decay_rate) >= 0 && parseFloat(configuration.decay_rate) <= 1 && parseInt(configuration.decay_steps) >= 1 && parseFloat(configuration.initial_lr) > 0 && parseFloat(configuration.initial_lr) < 1);\n    if (parseInt(configuration.epochs) >= 1 && parseInt(configuration.epochs) <= 50 && parseFloat(configuration.training_split) > 0 && parseFloat(configuration.training_split) < 1 && parseFloat(configuration.validation_split) > 0 && parseFloat(configuration.validation_split) < 1 && parseFloat(configuration.validation_split) + parseFloat(configuration.training_split) === 1 && parseInt(configuration.batch) >= 1 && parseFloat(configuration.improvement) >= 0 && parseInt(configuration.patience) >= 1 && parseFloat(configuration.decay_rate) >= 0 && parseFloat(configuration.decay_rate) <= 1 && parseInt(configuration.decay_steps) >= 1 && parseFloat(configuration.initial_lr) > 0 && parseFloat(configuration.initial_lr) < 1) try {\n      setTrainTime(0);\n      setDisabledTrain(true);\n      setStage(\"train\");\n      const formData = new FormData();\n      formData.append('epochs', configuration.epochs);\n      formData.append('training_split', configuration.training_split);\n      formData.append('validation_split', configuration.validation_split);\n      formData.append('improvement', configuration.improvement);\n      formData.append('patience', configuration.patience);\n      formData.append('batch', configuration.batch);\n      formData.append('decay_rate', configuration.decay_rate);\n      formData.append('decay_steps', configuration.decay_steps);\n      formData.append('early_stopping', configuration.early_stopping ? \"true\" : \"false\");\n      formData.append('lr_scheduler', configuration.lr_scheduler ? \"true\" : \"false\");\n      formData.append('initial_lr', configuration.initial_lr);\n      formData.append('optimiser', configuration.optimiser);\n      formData.append('loss', configuration.loss);\n      formData.append('rgb', uploadedDataset.rgb);\n      formData.append('imageFile', uploadedDataset.imageFile);\n      formData.append('height', uploadedDataset.height);\n      formData.append('width', uploadedDataset.width);\n      formData.append('label', uploadedDataset.labels.length);\n      formData.append('id', workspaceID);\n      model.map(node => {\n        formData.append('model[]', JSON.stringify(node));\n      });\n      const response = await trainAPI.post(\"\", formData);\n      setDisabledTrain(false);\n\n      if (response) {\n        updateWorkspace();\n        setEvaluation({\n          testAcc: response.data.test_acc,\n          testLoss: response.data.test_loss,\n          trainAcc: response.data.training.accuracy,\n          trainLoss: response.data.training.loss,\n          validationAcc: response.data.training.val_accuracy,\n          validationLoss: response.data.training.val_loss,\n          trainEpochs: Array.from(Array(response.data.epochs), (e, i) => (i + 1).toString())\n        });\n        setStage(\"evaluation\");\n        setChangedSettings(true);\n      }\n    } catch (err) {\n      setStage(\"model\");\n      setDisabledTrain(false);\n      setMessage(\"Error Occurred\");\n      displayMessageInterval();\n    } else {\n      let error = \"No\";\n      setMessage(error);\n      displayMessageInterval();\n      setDisabledCreate(false);\n    }\n  };\n\n  const predictModel = async () => {\n    try {\n      setPrediction(\"\");\n      const formData = new FormData();\n      formData.append('id', workspaceID);\n      formData.append('rgb', uploadedDataset.rgb);\n      formData.append('height', uploadedDataset.height);\n      formData.append('width', uploadedDataset.width);\n      formData.append('image', predictionFile);\n      uploadedDataset.labels.map(label => {\n        formData.append('labels[]', label);\n      });\n      const response = await predictAPI.post(\"\", formData);\n      setPrediction(response.data);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const updateWorkspace = async () => {\n    const updatedEvaluation = {\n      testAcc: evaluation.testAcc,\n      testLoss: evaluation.testLoss,\n      trainAcc: evaluation.trainAcc,\n      trainLoss: evaluation.trainLoss,\n      validationAcc: evaluation.validationAcc,\n      validationLoss: evaluation.validationLoss,\n      trainEpochs: evaluation.trainEpochs[evaluation.trainEpochs.length - 1],\n      trainTime: trainTime\n    };\n\n    if (image) {\n      const formImage = new FormData();\n      formImage.append('image', image);\n\n      try {\n        const tempPicture = picture;\n        const imageResponse = await imageAPI.post(\"/upload\", formImage);\n        await itemsAPI.put(`/${workspaceID}?type=workspace`, {\n          title: title,\n          description: description,\n          picture: imageResponse.data.data,\n          dataset: uploadedDataset._id,\n          model: model,\n          evaluation: updatedEvaluation,\n          configuration: configuration,\n          updated: new Date().toISOString()\n        });\n        setImage(undefined);\n        setPicture(imageResponse.data.data);\n\n        if (tempPicture !== \"default.png\") {\n          await imageAPI.put('/remove', {\n            picture: tempPicture\n          });\n        }\n      } catch (err) {}\n    } else {\n      try {\n        await itemsAPI.put(`/${workspaceID}?type=workspace`, {\n          title: title,\n          description: description,\n          picture: picture,\n          dataset: uploadedDataset._id,\n          model: model,\n          evaluation: updatedEvaluation,\n          configuration: configuration,\n          updated: new Date().toISOString()\n        });\n      } catch (err) {}\n    }\n\n    setUpdated(new Date().toISOString());\n    setChangedSettings(false);\n    setMessage(\"Workspace Saved\");\n    displayMessageInterval();\n  };\n\n  const deleteWorkspace = async () => {\n    try {\n      const formData = new FormData();\n      formData.append('id', workspace._id);\n      await itemsAPI.delete(`/${workspaceID}`);\n      await filesAPI.post(`/remove-workspace`, formData);\n      removeOpenItems(workspaceID);\n      history.replace(\"/home\");\n    } catch (err) {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loaded && exist ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sidebar-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"http://localhost:3000/workspace.png\",\n            className: !(type === \"view\" && !workspace.self) ? \"create-item-edit-image\" : undefined\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: `create-item-title ${!(type === \"view\" && !workspace.self) && \"create-item-edit-input\"}`,\n            placeholder: \"Title\",\n            onChange: e => {\n              setTitle(e.target.value);\n              setChangedSettings(true);\n            },\n            disabled: !(workspace.self || type === \"create\"),\n            value: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 541,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: `create-item-description ${!(type === \"view\" && !workspace.self) && \"create-item-edit-textarea\"}`,\n          placeholder: \"Description\",\n          onChange: e => {\n            setDescription(e.target.value);\n            setChangedSettings(true);\n          },\n          disabled: !(workspace.self || type === \"create\"),\n          value: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 550,\n          columnNumber: 25\n        }, this), (workspace.self || type === \"create\") && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-item-setup\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"create-item-setup-label\",\n              children: \"Picture\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 561,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"create-item-setup-input\",\n              type: \"file\",\n              name: \"image\",\n              onChange: e => {\n                setImage(e.target.files[0]);\n                setChangedSettings(true);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 562,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 560,\n            columnNumber: 33\n          }, this), type === \"create\" && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-item-setup\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"create-item-setup-label\",\n              children: \"Public?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 572,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              onChange: () => {\n                setVisibility(previous => !previous);\n                setChangedSettings(true);\n              },\n              checked: visibility\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 573,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true), !workspace.self && type !== \"create\" && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"item-creator\",\n          children: workspace.creatorName.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 66\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-information\",\n          children: [type !== \"create\" && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"item-date\",\n            children: date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 585,\n            columnNumber: 51\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 586,\n            columnNumber: 29\n          }, this), type !== \"create\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(ThumbUpIcon, {\n              className: `item-icon ${upvoted ? \"blue2\" : \"white\"}`,\n              onClick: () => {\n                updateUpvote();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 589,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: upvoted ? \"blue2\" : \"white\",\n              children: upvotes\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 590,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true), !workspace.self && type !== \"create\" && /*#__PURE__*/_jsxDEV(BookmarkIcon, {\n            className: `item-icon ${bookmarked ? \"blue2\" : \"white\"}`,\n            onClick: () => {\n              updateBookmark();\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 593,\n            columnNumber: 70\n          }, this), workspace.self && type !== \"create\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: visibility ? /*#__PURE__*/_jsxDEV(VisibilityIcon, {\n              className: \"item-visibility\",\n              onClick: () => {\n                updateVisibility();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 597,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(VisibilityOffIcon, {\n              className: \"item-visibility\",\n              onClick: () => {\n                updateVisibility();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 599,\n              columnNumber: 41\n            }, this)\n          }, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sidebar-divided\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 604,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"create-workspace-uploaded-dataset\",\n          children: [type === \"create\" || workspace.self ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: `create-workspace-import-existing ${!(type === \"view\" && !workspace.self) && \"create-item-edit-input\"}`,\n              placeholder: \"Dataset ID\",\n              onChange: e => {\n                setDatasetID(e.target.value);\n              },\n              onKeyPress: searchFunctionKey,\n              value: datasetID\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 608,\n              columnNumber: 37\n            }, this), type === \"view\" && /*#__PURE__*/_jsxDEV(Link, {\n              className: \"create-item-view-dataset\",\n              to: `/dataset/${datasetID}`,\n              children: /*#__PURE__*/_jsxDEV(OpenInNewIcon, {\n                className: \"create-item-view-dataset-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 615,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 614,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"create-workspace-uploaded-dataset-header\",\n              children: \"Selected Dataset:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 621,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Link, {\n              to: `/dataset/${datasetID}`,\n              className: \"create-workspace-uploaded-dataset-link\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: `http://localhost:4000/images/${uploadedDataset.picture}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 623,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: uploadedDataset.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 624,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 622,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 620,\n            columnNumber: 33\n          }, this), type === \"view\" && /*#__PURE__*/_jsxDEV(\"a\", {\n            href: `http://127.0.0.1:5000/models/${workspaceID}/${workspaceID}-model.zip`,\n            download: true,\n            children: /*#__PURE__*/_jsxDEV(DownloadIcon, {\n              className: \"workspace-download-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 630,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 629,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 25\n        }, this), type === \"view\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: workspace.self && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sidebar-divided\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 638,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"blue-button item-save\",\n              disabled: !changedSettings,\n              onClick: () => {\n                updateWorkspace();\n              },\n              children: \"Save Workspace\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 639,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"text-button item-delete\",\n              onClick: () => {\n                deleteWorkspace();\n              },\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 642,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true)\n        }, void 0, false), displayPublic && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"create-item-data-notification\",\n          children: \"Dataset not public\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 648,\n          columnNumber: 43\n        }, this), displayExist && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"create-item-data-notification\",\n          children: \"Dataset does not exist\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 649,\n          columnNumber: 42\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"workspace-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"workspace-inner\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"view-items-top\",\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                children: type === \"create\" ? \"Create Workspace\" : \"Workspace\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 655,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `text-button ${stage === \"model\" ? \"item-header-button-selected\" : \"item-header-button-unselected\"}`,\n                  onClick: () => {\n                    setStage(\"model\");\n                  },\n                  children: \"Model\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 657,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `text-button ${stage === \"evaluation\" ? \"item-header-button-selected\" : \"item-header-button-unselected\"}`,\n                  onClick: () => {\n                    setStage(\"evaluation\");\n                  },\n                  children: \"Evaluation\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 659,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `text-button ${stage === \"prediction\" ? \"item-header-button-selected\" : \"item-header-button-unselected\"}`,\n                  onClick: () => {\n                    setStage(\"prediction\");\n                  },\n                  children: \"Prediction\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 661,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 663,\n                  columnNumber: 41\n                }, this), (workspace.self || type === \"create\") && /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"blue-button\",\n                  disabled: disabledTrain || model[model.length - 1].type !== \"Output\" || model.length === 0,\n                  onClick: () => {\n                    train();\n                  },\n                  children: \"Train\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 665,\n                  columnNumber: 45\n                }, this), type === \"create\" && /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"workspace-create blue-button\",\n                  disabled: disabledCreate,\n                  onClick: () => {\n                    uploadImage();\n                  },\n                  children: \"Create\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 670,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 656,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 654,\n              columnNumber: 33\n            }, this), stage === \"model\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: uploadedDataset ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-modelling-body\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"create-model\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"create-model-diagram\",\n                    children: [model.map((node, i) => {\n                      return /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"create-model-diagram-node\",\n                          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                            onClick: () => {\n                              setSelectedNode(i);\n                            },\n                            children: /*#__PURE__*/_jsxDEV(ModelNode, {\n                              setSelectedNode: setSelectedNode,\n                              type: node.type,\n                              value: node.value,\n                              selected: i === selectedNode,\n                              last: i === model.length - 1\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 687,\n                              columnNumber: 77\n                            }, this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 686,\n                            columnNumber: 73\n                          }, this), node.type !== \"Input\" && (workspace.self || type === \"create\") && /*#__PURE__*/_jsxDEV(\"div\", {\n                            onClick: () => {\n                              {\n                                selectedNode === i ? setSelectedNode(state => state - 1) : selectedNode < i ? setSelectedNode(state => state) : selectedNode > i && /*#__PURE__*/_jsxDEV(_Fragment, {\n                                  children: selectedNode - i === 1 ? setSelectedNode(state => state - 1) : setSelectedNode(i)\n                                }, void 0, false);\n                              }\n                              model.splice(i, 1);\n                              setChangedSettings(true);\n                              setRefreshDiagram(new Date().getTime());\n                            },\n                            children: /*#__PURE__*/_jsxDEV(ClearIcon, {\n                              className: \"create-model-diagram-remove\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 706,\n                              columnNumber: 81\n                            }, this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 690,\n                            columnNumber: 77\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 685,\n                          columnNumber: 69\n                        }, this), i === model.length - 1 && model[selectedNode].type !== \"Output\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                          children: addNode && (workspace.self || type === \"create\") ? /*#__PURE__*/_jsxDEV(\"div\", {\n                            className: \"create-model-diagram-add\",\n                            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                              onClick: () => {\n                                setAddNode(false);\n                              },\n                              children: /*#__PURE__*/_jsxDEV(RemoveIcon, {\n                                className: \"create-model-diagram-add-icon\"\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 715,\n                                columnNumber: 89\n                              }, this)\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 714,\n                              columnNumber: 85\n                            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                              className: \"create-model-diagram-add-options\",\n                              children: [(model[selectedNode].type === \"Input\" || model[selectedNode].type === \"Conv2D\" || model[selectedNode].type === \"MaxPooling2D\" || model[selectedNode].type === \"Dropout\" || model[selectedNode].type === \"BatchNormalisation\") && /*#__PURE__*/_jsxDEV(_Fragment, {\n                                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                                  onClick: () => {\n                                    setModel(state => {\n                                      const stateCopy = [...state];\n                                      stateCopy.splice(selectedNode + 1, 0, {\n                                        type: \"Conv2D\",\n                                        filters: 0,\n                                        kernel: 3,\n                                        strides: 2,\n                                        padding: \"same\",\n                                        activation: \"\"\n                                      });\n                                      return stateCopy;\n                                    });\n                                    setSelectedNode(state => state + 1);\n                                    setAddNode(false);\n                                    setChangedSettings(true);\n                                  },\n                                  children: \"Conv2D\"\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 721,\n                                  columnNumber: 97\n                                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                                  onClick: () => {\n                                    setModel(state => {\n                                      const stateCopy = [...state];\n                                      stateCopy.splice(selectedNode + 1, 0, {\n                                        type: \"MaxPooling2D\",\n                                        pool: 3,\n                                        strides: 2,\n                                        padding: \"same\"\n                                      });\n                                      return stateCopy;\n                                    });\n                                    setSelectedNode(state => state + 1);\n                                    setAddNode(false);\n                                    setChangedSettings(true);\n                                  },\n                                  children: \"MaxPooling2D\"\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 741,\n                                  columnNumber: 97\n                                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                                  onClick: () => {\n                                    setModel(state => {\n                                      const stateCopy = [...state];\n                                      stateCopy.splice(selectedNode + 1, 0, {\n                                        type: \"AvgPooling2D\",\n                                        pool: 3,\n                                        strides: 2,\n                                        padding: \"same\"\n                                      });\n                                      return stateCopy;\n                                    });\n                                    setSelectedNode(state => state + 1);\n                                    setAddNode(false);\n                                    setChangedSettings(true);\n                                  },\n                                  children: \"AvgPooling2D\"\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 759,\n                                  columnNumber: 97\n                                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                                  onClick: () => {\n                                    setModel(state => {\n                                      const stateCopy = [...state];\n                                      stateCopy.splice(selectedNode + 1, 0, {\n                                        type: \"BatchNormalisation\",\n                                        momentum: 0\n                                      });\n                                      return stateCopy;\n                                    });\n                                    setSelectedNode(state => state + 1);\n                                    setAddNode(false);\n                                    setChangedSettings(true);\n                                  },\n                                  children: \"Batch Normalisation\"\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 777,\n                                  columnNumber: 97\n                                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                                  onClick: () => {\n                                    setModel(state => {\n                                      const stateCopy = [...state];\n                                      stateCopy.splice(selectedNode + 1, 0, {\n                                        type: \"Dropout\",\n                                        rate: 0\n                                      });\n                                      return stateCopy;\n                                    });\n                                    setSelectedNode(state => state + 1);\n                                    setAddNode(false);\n                                    setChangedSettings(true);\n                                  },\n                                  children: \"Dropout\"\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 793,\n                                  columnNumber: 97\n                                }, this), selectedNode === model.length - 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n                                  onClick: () => {\n                                    setModel(state => [...state, {\n                                      type: \"Flatten\"\n                                    }]);\n                                    setSelectedNode(state => state + 1);\n                                    setAddNode(false);\n                                    setChangedSettings(true);\n                                  },\n                                  children: \"Flatten\"\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 810,\n                                  columnNumber: 101\n                                }, this)]\n                              }, void 0, true), (model[selectedNode].type === \"Flatten\" || model[selectedNode].type === \"Dense\") && /*#__PURE__*/_jsxDEV(\"button\", {\n                                onClick: () => {\n                                  setModel(state => {\n                                    const stateCopy = [...state];\n                                    stateCopy.splice(selectedNode + 1, 0, {\n                                      type: \"Dense\",\n                                      units: 0,\n                                      activation: \"\"\n                                    });\n                                    return stateCopy;\n                                  });\n                                  setSelectedNode(state => state + 1);\n                                  setAddNode(false);\n                                  setChangedSettings(true);\n                                },\n                                children: \"Dense\"\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 821,\n                                columnNumber: 93\n                              }, this), model[selectedNode].type === \"Dense\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                                  onClick: () => {\n                                    setModel(state => {\n                                      const stateCopy = [...state];\n                                      stateCopy.splice(selectedNode + 1, 0, {\n                                        type: \"Dropout\",\n                                        rate: 0\n                                      });\n                                      return stateCopy;\n                                    });\n                                    setSelectedNode(state => state + 1);\n                                    setAddNode(false);\n                                    setChangedSettings(true);\n                                  },\n                                  children: \"Dropout\"\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 841,\n                                  columnNumber: 97\n                                }, this), selectedNode === model.length - 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n                                  onClick: () => {\n                                    {\n                                      uploadedDataset.labels.length === 2 ? setModel(state => [...state, {\n                                        type: \"Output\",\n                                        units: 1,\n                                        activation: \"\"\n                                      }]) : setModel(state => [...state, {\n                                        type: \"Output\",\n                                        units: uploadedDataset.labels.length,\n                                        activation: \"\"\n                                      }]);\n                                    }\n                                    setSelectedNode(state => state + 1);\n                                    setAddNode(false);\n                                    setChangedSettings(true);\n                                  },\n                                  children: \"Output\"\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 858,\n                                  columnNumber: 101\n                                }, this)]\n                              }, void 0, true)]\n                            }, void 0, true, {\n                              fileName: _jsxFileName,\n                              lineNumber: 717,\n                              columnNumber: 85\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 713,\n                            columnNumber: 81\n                          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                            children: (workspace.self || type === \"create\") && /*#__PURE__*/_jsxDEV(\"div\", {\n                              onClick: () => {\n                                setAddNode(true);\n                              },\n                              children: /*#__PURE__*/_jsxDEV(AddIcon, {\n                                className: \"create-model-diagram-add-icon\"\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 885,\n                                columnNumber: 93\n                              }, this)\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 884,\n                              columnNumber: 89\n                            }, this)\n                          }, void 0, false)\n                        }, void 0, false)]\n                      }, i, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 684,\n                        columnNumber: 65\n                      }, this);\n                    }), /*#__PURE__*/_jsxDEV(\"div\", {\n                      ref: modelRef\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 895,\n                      columnNumber: 57\n                    }, this)]\n                  }, refreshDiagram, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 681,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 680,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"create-model-selected\",\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      children: model[selectedNode].type\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 900,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"create-model-selected-input\",\n                      children: model[selectedNode].type !== \"Flatten\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                        children: [model[selectedNode].type === \"Dense\" && /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                            children: \"Units\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 906,\n                            columnNumber: 77\n                          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                            value: model[selectedNode].units,\n                            disabled: !(workspace.self || type === \"create\"),\n                            onChange: e => {\n                              setModel(state => {\n                                const stateCopy = [...state];\n                                stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                                  units: Number(e.target.value)\n                                };\n                                return stateCopy;\n                              });\n                              setChangedSettings(true);\n                              setRefreshDiagram(new Date().getTime());\n                            }\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 907,\n                            columnNumber: 77\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 905,\n                          columnNumber: 73\n                        }, this), (model[selectedNode].type === \"Dense\" || model[selectedNode].type === \"Conv2D\" || model[selectedNode].type === \"Output\") && /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                            children: \"Activation\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 925,\n                            columnNumber: 77\n                          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                            value: model[selectedNode].activation,\n                            disabled: !(workspace.self || type === \"create\"),\n                            onChange: e => {\n                              setModel(state => {\n                                const stateCopy = [...state];\n                                stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                                  activation: e.target.value\n                                };\n                                return stateCopy;\n                              });\n                              setChangedSettings(true);\n                              setRefreshDiagram(new Date().getTime());\n                            },\n                            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                              disabled: true,\n                              defaultValue: true,\n                              value: \"\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 940,\n                              columnNumber: 85\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"sigmoid\",\n                              children: \"Sigmoid\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 941,\n                              columnNumber: 85\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"softmax\",\n                              children: \"Softmax\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 942,\n                              columnNumber: 85\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"softplus\",\n                              children: \"Softplus\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 943,\n                              columnNumber: 85\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"softsign\",\n                              children: \"Softsign\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 944,\n                              columnNumber: 85\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"swish\",\n                              children: \"Swish\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 945,\n                              columnNumber: 85\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"selu\",\n                              children: \"Selu\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 946,\n                              columnNumber: 85\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"tanh\",\n                              children: \"Tanh\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 947,\n                              columnNumber: 85\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"elu\",\n                              children: \"Elu\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 948,\n                              columnNumber: 85\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"exponential\",\n                              children: \"Exponential\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 949,\n                              columnNumber: 85\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"gelu\",\n                              children: \"Gelu\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 950,\n                              columnNumber: 85\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"hard_sigmoid\",\n                              children: \"Hard Sigmoid\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 951,\n                              columnNumber: 85\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"linear\",\n                              children: \"Linear\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 952,\n                              columnNumber: 85\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"relu\",\n                              children: \"Relu\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 953,\n                              columnNumber: 85\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 926,\n                            columnNumber: 77\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 924,\n                          columnNumber: 73\n                        }, this), (model[selectedNode].type === \"Conv2D\" || model[selectedNode].type === \"MaxPooling2D\") && /*#__PURE__*/_jsxDEV(_Fragment, {\n                          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                              children: \"Padding\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 960,\n                              columnNumber: 81\n                            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                              value: model[selectedNode].padding,\n                              disabled: !(workspace.self || type === \"create\"),\n                              onChange: e => {\n                                setModel(state => {\n                                  const stateCopy = [...state];\n                                  stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                                    padding: e.target.value\n                                  };\n                                  return stateCopy;\n                                });\n                                setChangedSettings(true);\n                                setRefreshDiagram(new Date().getTime());\n                              },\n                              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                                disabled: true,\n                                defaultValue: true,\n                                value: \"\"\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 975,\n                                columnNumber: 85\n                              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                                value: \"same\",\n                                children: \"Same\"\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 976,\n                                columnNumber: 85\n                              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                                value: \"valid\",\n                                children: \"Valid\"\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 977,\n                                columnNumber: 85\n                              }, this)]\n                            }, void 0, true, {\n                              fileName: _jsxFileName,\n                              lineNumber: 961,\n                              columnNumber: 81\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 959,\n                            columnNumber: 77\n                          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                              children: \"Strides\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 981,\n                              columnNumber: 81\n                            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                              value: model[selectedNode].strides,\n                              disabled: !(workspace.self || type === \"create\"),\n                              onChange: e => {\n                                setModel(state => {\n                                  const stateCopy = [...state];\n                                  stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                                    strides: Number(e.target.value)\n                                  };\n                                  return stateCopy;\n                                });\n                                setChangedSettings(true);\n                                setRefreshDiagram(new Date().getTime());\n                              }\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 982,\n                              columnNumber: 81\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 980,\n                            columnNumber: 77\n                          }, this)]\n                        }, void 0, true), model[selectedNode].type === \"Conv2D\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                              children: \"Filters\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1002,\n                              columnNumber: 81\n                            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                              value: model[selectedNode].filters,\n                              disabled: !(workspace.self || type === \"create\"),\n                              onChange: e => {\n                                setModel(state => {\n                                  const stateCopy = [...state];\n                                  stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                                    filters: Number(e.target.value)\n                                  };\n                                  return stateCopy;\n                                });\n                                setChangedSettings(true);\n                                setRefreshDiagram(new Date().getTime());\n                              }\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1003,\n                              columnNumber: 81\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1001,\n                            columnNumber: 77\n                          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                              children: \"Kernel Size\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1019,\n                              columnNumber: 81\n                            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                              value: model[selectedNode].kernel,\n                              disabled: !(workspace.self || type === \"create\"),\n                              onChange: e => {\n                                setModel(state => {\n                                  const stateCopy = [...state];\n                                  stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                                    kernel: Number(e.target.value)\n                                  };\n                                  return stateCopy;\n                                });\n                                setChangedSettings(true);\n                                setRefreshDiagram(new Date().getTime());\n                              }\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1020,\n                              columnNumber: 81\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1018,\n                            columnNumber: 77\n                          }, this)]\n                        }, void 0, true), model[selectedNode].type === \"MaxPooling2D\" && /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                            children: \"Pooling Size\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1039,\n                            columnNumber: 77\n                          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                            value: model[selectedNode].pool,\n                            disabled: !(workspace.self || type === \"create\"),\n                            onChange: e => {\n                              setModel(state => {\n                                const stateCopy = [...state];\n                                stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                                  pool: Number(e.target.value)\n                                };\n                                return stateCopy;\n                              });\n                              setChangedSettings(true);\n                              setRefreshDiagram(new Date().getTime());\n                            }\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1040,\n                            columnNumber: 77\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1038,\n                          columnNumber: 73\n                        }, this), model[selectedNode].type === \"Dropout\" && /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                            children: \"Rate\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1058,\n                            columnNumber: 77\n                          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                            value: model[selectedNode].rate,\n                            disabled: !(workspace.self || type === \"create\"),\n                            onChange: e => {\n                              setModel(state => {\n                                const stateCopy = [...state];\n                                stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                                  rate: Number(e.target.value)\n                                };\n                                return stateCopy;\n                              });\n                              setChangedSettings(true);\n                              setRefreshDiagram(new Date().getTime());\n                            }\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1059,\n                            columnNumber: 77\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1057,\n                          columnNumber: 73\n                        }, this), model[selectedNode].type === \"BatchNormalisation\" && /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                            children: \"Momentum\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1077,\n                            columnNumber: 77\n                          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                            value: model[selectedNode].momentum,\n                            disabled: !(workspace.self || type === \"create\"),\n                            onChange: e => {\n                              setModel(state => {\n                                const stateCopy = [...state];\n                                stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                                  momentum: Number(e.target.value)\n                                };\n                                return stateCopy;\n                              });\n                              setChangedSettings(true);\n                              setRefreshDiagram(new Date().getTime());\n                            }\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1078,\n                            columnNumber: 77\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1076,\n                          columnNumber: 73\n                        }, this), model[selectedNode].type === \"Input\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                              children: \"Image Height\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1097,\n                              columnNumber: 81\n                            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                              children: uploadedDataset.height\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1098,\n                              columnNumber: 81\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1096,\n                            columnNumber: 77\n                          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                              children: \"Image Width\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1101,\n                              columnNumber: 81\n                            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                              children: uploadedDataset.width\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1102,\n                              columnNumber: 81\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1100,\n                            columnNumber: 77\n                          }, this)]\n                        }, void 0, true)]\n                      }, void 0, true)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 901,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 899,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"create-model-configuration\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"create-model-configuration-option\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          children: \"Epochs\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1113,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                          value: configuration.epochs,\n                          disabled: !(workspace.self || type === \"create\"),\n                          onChange: e => {\n                            setConfiguration(state => ({ ...state,\n                              epochs: e.target.value\n                            }));\n                            setChangedSettings(true);\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1114,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1112,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          children: \"Training Split\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1125,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                          value: configuration.training_split,\n                          disabled: !(workspace.self || type === \"create\"),\n                          onChange: e => {\n                            setConfiguration(state => ({ ...state,\n                              training_split: e.target.value\n                            }));\n                            setChangedSettings(true);\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1126,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1124,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          children: \"Validation Split\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1137,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                          value: configuration.validation_split,\n                          disabled: !(workspace.self || type === \"create\"),\n                          onChange: e => {\n                            setConfiguration(state => ({ ...state,\n                              validation_split: e.target.value\n                            }));\n                            setChangedSettings(true);\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1138,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1136,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          children: \"Batch Size\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1149,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                          value: configuration.batch,\n                          disabled: !(workspace.self || type === \"create\"),\n                          onChange: e => {\n                            setConfiguration(state => ({ ...state,\n                              batch: e.target.value\n                            }));\n                            setChangedSettings(true);\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1150,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1148,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          children: \"Initial Learning Rate\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1161,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                          value: configuration.initial_lr,\n                          disabled: !(workspace.self || type === \"create\"),\n                          onChange: e => {\n                            setConfiguration(state => ({ ...state,\n                              initial_lr: e.target.value\n                            }));\n                            setChangedSettings(true);\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1162,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1160,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          children: \"Learning Rate Scheduler\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1173,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                          className: \"create-model-configuration-option-checkbox\",\n                          type: \"checkbox\",\n                          disabled: !(workspace.self || type === \"create\"),\n                          onChange: () => {\n                            setConfiguration(state => ({ ...state,\n                              lr_scheduler: !configuration.lr_scheduler\n                            }));\n                            setChangedSettings(true);\n                          },\n                          checked: configuration.lr_scheduler\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1174,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1172,\n                        columnNumber: 61\n                      }, this), configuration.lr_scheduler && /*#__PURE__*/_jsxDEV(_Fragment, {\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                            children: \"Decay Rate\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1189,\n                            columnNumber: 73\n                          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                            value: configuration.decay_rate,\n                            disabled: !(workspace.self || type === \"create\"),\n                            onChange: e => {\n                              setConfiguration(state => ({ ...state,\n                                decay_rate: e.target.value\n                              }));\n                              setChangedSettings(true);\n                            }\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1190,\n                            columnNumber: 73\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1188,\n                          columnNumber: 69\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                            children: \"Decay Steps\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1201,\n                            columnNumber: 73\n                          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                            value: configuration.decay_steps,\n                            disabled: !(workspace.self || type === \"create\"),\n                            onChange: e => {\n                              setConfiguration(state => ({ ...state,\n                                decay_steps: e.target.value\n                              }));\n                              setChangedSettings(true);\n                            }\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1202,\n                            columnNumber: 73\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1200,\n                          columnNumber: 69\n                        }, this)]\n                      }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          children: \"Early Stopping\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1215,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                          className: \"create-model-configuration-option-checkbox\",\n                          type: \"checkbox\",\n                          disabled: !(workspace.self || type === \"create\"),\n                          onChange: () => {\n                            setConfiguration(state => ({ ...state,\n                              early_stopping: !configuration.early_stopping\n                            }));\n                            setChangedSettings(true);\n                          },\n                          checked: configuration.early_stopping\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1216,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1214,\n                        columnNumber: 61\n                      }, this), configuration.early_stopping && /*#__PURE__*/_jsxDEV(_Fragment, {\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                            children: \"Minimum Improvement\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1231,\n                            columnNumber: 73\n                          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                            value: configuration.improvement,\n                            disabled: !(workspace.self || type === \"create\"),\n                            onChange: e => {\n                              setConfiguration(state => ({ ...state,\n                                improvement: e.target.value\n                              }));\n                              setChangedSettings(true);\n                            }\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1232,\n                            columnNumber: 73\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1230,\n                          columnNumber: 69\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                            children: \"Patience\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1243,\n                            columnNumber: 73\n                          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                            value: configuration.patience,\n                            disabled: !(workspace.self || type === \"create\"),\n                            onChange: e => {\n                              setConfiguration(state => ({ ...state,\n                                patience: e.target.value\n                              }));\n                              setChangedSettings(true);\n                            }\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1244,\n                            columnNumber: 73\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1242,\n                          columnNumber: 69\n                        }, this)]\n                      }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          children: \"Optimiser\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1257,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                          value: configuration.optimiser,\n                          disabled: !(workspace.self || type === \"create\"),\n                          onChange: e => {\n                            setConfiguration(state => ({ ...state,\n                              optimiser: e.target.value\n                            }));\n                            setChangedSettings(true);\n                          },\n                          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                            disabled: true,\n                            defaultValue: true,\n                            value: \"\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1267,\n                            columnNumber: 69\n                          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"Adadelta\",\n                            children: \"Adadelta\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1268,\n                            columnNumber: 69\n                          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"Adagrad\",\n                            children: \"Adagrad\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1269,\n                            columnNumber: 69\n                          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"Adam\",\n                            children: \"Adam\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1270,\n                            columnNumber: 69\n                          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"Adamax\",\n                            children: \"Adamax\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1271,\n                            columnNumber: 69\n                          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"Ftrl\",\n                            children: \"Ftrl\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1272,\n                            columnNumber: 69\n                          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"Nadam\",\n                            children: \"Nadam\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1273,\n                            columnNumber: 69\n                          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"RMSprop\",\n                            children: \"RMSprop\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1274,\n                            columnNumber: 69\n                          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"SGD\",\n                            children: \"SGD\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1275,\n                            columnNumber: 69\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1258,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1256,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          children: \"Loss\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1279,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                          value: configuration.loss,\n                          disabled: !(workspace.self || type === \"create\"),\n                          onChange: e => {\n                            setConfiguration(state => ({ ...state,\n                              loss: e.target.value\n                            }));\n                            setChangedSettings(true);\n                          },\n                          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                            disabled: true,\n                            defaultValue: true,\n                            value: \"\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1289,\n                            columnNumber: 69\n                          }, this), uploadedDataset.labels.length === 2 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"binary_crossentropy\",\n                              children: \"Binary Crossentropy\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1292,\n                              columnNumber: 77\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"hinge\",\n                              children: \"Hinge\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1293,\n                              columnNumber: 77\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"squared_hinge\",\n                              children: \"Squared Hinge\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1294,\n                              columnNumber: 77\n                            }, this)]\n                          }, void 0, true), uploadedDataset.labels.length > 2 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"categorical_crossentropy\",\n                              children: \"Categorical Crossentropy\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1299,\n                              columnNumber: 77\n                            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                              value: \"kl_divergence\",\n                              children: \"Kullback Leibler Divergence\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1300,\n                              columnNumber: 77\n                            }, this)]\n                          }, void 0, true)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1280,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1278,\n                        columnNumber: 61\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1111,\n                      columnNumber: 57\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1110,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 898,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 679,\n                columnNumber: 45\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"end-items\",\n                children: \"Select a dataset...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1310,\n                columnNumber: 45\n              }, this)\n            }, void 0, false) : stage === \"evaluation\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"create-evaluation-body\",\n              children: !evaluation ? /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"create-evaluation-header\",\n                children: \"Model must be trained first...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1316,\n                columnNumber: 45\n              }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"create-evaluation-test\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      children: \"Training Time:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1321,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [trainTime, \" seconds\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1322,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1320,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      children: \"Test Accuracy:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1325,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: evaluation.testAcc.toFixed(3)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1326,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1324,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      children: \"Test Loss:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1329,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: evaluation.testLoss.toFixed(3)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1330,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1328,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1319,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(Chart, {\n                  x: evaluation.trainEpochs,\n                  y1: evaluation.trainAcc,\n                  y2: evaluation.validationAcc,\n                  type: \"Accuracy\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1333,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(Chart, {\n                  x: evaluation.trainEpochs,\n                  y1: evaluation.trainLoss,\n                  y2: evaluation.validationLoss,\n                  type: \"Loss\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1334,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1314,\n              columnNumber: 37\n            }, this) : stage === \"train\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"create-training-body\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Training Model...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1340,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Elapsed Time: \", trainTime, \" seconds\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1341,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1339,\n              columnNumber: 37\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"create-prediction-body\",\n              children: !evaluation ? /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"create-prediction-header\",\n                children: \"Model must be trained first...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1346,\n                columnNumber: 45\n              }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"create-prediction-top\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"file\",\n                    name: \"data\",\n                    accept: \"image/*\",\n                    onChange: e => {\n                      setPrediction(\"\");\n                      setPredictionFile(e.target.files[0]);\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1350,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"white-button\",\n                    onClick: () => {\n                      predictModel();\n                    },\n                    children: \"Predict\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1357,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1349,\n                  columnNumber: 49\n                }, this), predictionFile && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"create-prediction-card\",\n                  children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                    src: URL.createObjectURL(predictionFile)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1362,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: prediction ? \"Predicted label:\" : \"Predict label...\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1363,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"create-prediction-card-prediction\",\n                    children: prediction\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1364,\n                    columnNumber: 57\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1361,\n                  columnNumber: 53\n                }, this)]\n              }, void 0, true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1344,\n              columnNumber: 37\n            }, this), displayMessage && /*#__PURE__*/_jsxDEV(MessageCard, {\n              message: message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1371,\n              columnNumber: 52\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 653,\n            columnNumber: 29\n          }, this), uploadedDataset && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: noData ? /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"end-items\",\n              children: \"Cannot find dataset\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1376,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"create-workspace-data\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"create-workspace-data-header\",\n                children: \"Selected Dataset:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1379,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"create-workspace-data-header-dataset\",\n                children: uploadedDataset.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1380,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"sidebar-divided\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1381,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-workspace-data-images-list\",\n                children: images.map((image, i) => {\n                  if (i >= start && i < end && assignedLabels[i] !== \"No label\") {\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"create-workspace-data-image\",\n                      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                        src: `http://127.0.0.1:5000/files/${uploadedDataset.imageFile}/images/${assignedLabels[i]}/${image}.jpg`\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1387,\n                        columnNumber: 65\n                      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                        children: assignedLabels[i]\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1388,\n                        columnNumber: 65\n                      }, this)]\n                    }, i, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1386,\n                      columnNumber: 61\n                    }, this);\n                  }\n                })\n              }, refreshData, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1382,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"sidebar-divided\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1394,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-workspace-pagination\",\n                children: [/*#__PURE__*/_jsxDEV(ArrowBackIosNewIcon, {\n                  className: \"create-workspace-pagination-icon\",\n                  onClick: () => {\n                    previousPage();\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1396,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Page \", page, \" / \", Math.ceil(images.length / 20)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1397,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(ArrowForwardIosIcon, {\n                  className: \"create-workspace-pagination-icon\",\n                  onClick: () => {\n                    nextPage();\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1398,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1395,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1378,\n              columnNumber: 41\n            }, this)\n          }, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 652,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 651,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 536,\n      columnNumber: 17\n    }, this) : loaded && !exist && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inner\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"item-exist\",\n        children: \"Cannot find workspace\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1409,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1408,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(Workspace, \"+GT3V9yY1a5hk68nWNKyfUHqJpk=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = Workspace;\nexport default Workspace;\n\nvar _c;\n\n$RefreshReg$(_c, \"Workspace\");","map":{"version":3,"sources":["/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Workspace.jsx"],"names":["React","useState","useEffect","useRef","useContext","useHistory","useParams","Link","usersAPI","itemsAPI","globalAPI","imageAPI","filesAPI","trainAPI","predictAPI","ModelNode","Chart","OpenItemsContext","MessageContext","ArrowForwardIosIcon","ArrowBackIosNewIcon","ClearIcon","AddIcon","RemoveIcon","BookmarkIcon","ThumbUpIcon","VisibilityOffIcon","VisibilityIcon","OpenInNewIcon","DownloadIcon","MessageCard","Workspace","currentUser","type","stage","setStage","title","setTitle","description","setDescription","visibility","setVisibility","bookmarked","setBookmarked","upvoted","setUpvoted","upvotes","setUpvotes","updated","setUpdated","picture","setPicture","date","setDate","start","setStart","trainTime","setTrainTime","end","setEnd","page","setPage","image","setImage","datasetID","setDatasetID","uploadedDataset","setUploadedDataset","workspace","setWorkspace","images","setImages","predictionFile","setPredictionFile","prediction","setPrediction","assignedLabels","setAssignedLabels","refreshData","setRefreshData","refreshDiagram","setRefreshDiagram","changedSettings","setChangedSettings","model","setModel","evaluation","setEvaluation","selectedNode","setSelectedNode","configuration","setConfiguration","epochs","training_split","validation_split","improvement","early_stopping","decay_rate","decay_steps","patience","batch","lr_scheduler","initial_lr","optimiser","loss","addNode","setAddNode","loaded","setLoaded","exist","setExist","noData","setNoData","disabledCreate","setDisabledCreate","disabledTrain","setDisabledTrain","displayPublic","setDisplayPublic","displayExist","setDisplayExist","message","setMessage","addOpenItems","removeOpenItems","displayMessage","displayMessageInterval","modelRef","workspaceID","id","publicInterval","existInterval","history","fetchData","get","data","map","previous","self","_id","dataset","testAcc","testLoss","trainAcc","trainLoss","validationAcc","validationLoss","trainEpochs","Array","from","e","i","toString","fetch","imageFile","then","response","json","state","filename","label","catch","err","timerID","setInterval","clearInterval","current","scrollIntoView","behavior","block","inline","length","updatedDate","Date","currentDate","getTime","Math","floor","searchFunctionKey","key","existingDataset","updateUpvote","put","updateBookmark","updateVisibility","displayPublicInterval","displayExistInterval","previousPage","nextPage","checkPublic","success","uploadImage","formImage","FormData","append","imageResponse","post","uploadData","error","imageName","updatedEvaluation","workspaceResponse","creator","bookmarks","toISOString","push","train","console","log","parseFloat","parseInt","formData","rgb","height","width","labels","node","JSON","stringify","updateWorkspace","test_acc","test_loss","training","accuracy","val_accuracy","val_loss","predictModel","tempPicture","undefined","deleteWorkspace","delete","replace","target","value","files","creatorName","name","splice","stateCopy","filters","kernel","strides","padding","activation","pool","momentum","rate","units","Number","toFixed","URL","createObjectURL","ceil"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef, useContext} from 'react'\nimport {useHistory, useParams, Link} from \"react-router-dom\"\nimport usersAPI from '../API/users'\nimport itemsAPI from '../API/items'\nimport globalAPI from '../API/global'\nimport imageAPI from '../API/images'\nimport filesAPI from '../API/files'\nimport trainAPI from '../API/train'\nimport predictAPI from '../API/predict'\nimport ModelNode from '../Components/Model-Node';\nimport Chart from '../Components/Chart'\nimport { OpenItemsContext } from '../Contexts/openItemsContext';\nimport { MessageContext } from '../Contexts/messageContext';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport MessageCard from '../Components/MessageCard'\n\nconst Workspace = ({currentUser, type}) => {\n    const [stage, setStage] = useState(\"model\");\n    const [title, setTitle] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [visibility, setVisibility] = useState(false);\n    const [bookmarked, setBookmarked] = useState()\n    const [upvoted, setUpvoted] = useState()\n    const [upvotes, setUpvotes] = useState()\n    const [updated, setUpdated] = useState()\n    const [picture, setPicture] = useState()\n    const [date, setDate] = useState(\"\")\n    const [start, setStart] = useState(0)\n    const [trainTime, setTrainTime] = useState(0)\n    const [end, setEnd] = useState(20)\n    const [page, setPage] = useState(1)\n    const [image, setImage] = useState();\n    const [datasetID, setDatasetID] = useState(\"\")\n    const [uploadedDataset, setUploadedDataset] = useState()\n    const [workspace, setWorkspace] = useState([]);\n    const [images, setImages] = useState([])\n    const [predictionFile, setPredictionFile] = useState()\n    const [prediction, setPrediction] = useState()\n    const [assignedLabels, setAssignedLabels] = useState([])\n    const [refreshData, setRefreshData] = useState()\n    const [refreshDiagram, setRefreshDiagram] = useState()\n    const [changedSettings, setChangedSettings] = useState(false)\n    const [model, setModel] = useState([{type: \"Input\"}])\n    const [evaluation, setEvaluation] = useState()\n    const [selectedNode, setSelectedNode] = useState(0)\n    const [configuration, setConfiguration] = useState({epochs: 1, training_split: 0, validation_split: 0, improvement: 0, early_stopping: false, decay_rate: 0,\n                                                        decay_steps: 1, patience: 0, batch: 32, lr_scheduler: false, initial_lr: 0.01, optimiser: \"\", loss: \"\"})\n    const [addNode, setAddNode] = useState(false)\n    const [loaded, setLoaded] = useState(false);\n    const [exist, setExist] = useState()\n    const [noData, setNoData] = useState()\n    const [disabledCreate, setDisabledCreate] = useState(false)\n    const [disabledTrain, setDisabledTrain] = useState(false)\n    const [displayPublic, setDisplayPublic] = useState(false)\n    const [displayExist, setDisplayExist] = useState(false)\n    const [message, setMessage] = useState(\"\")\n    const {addOpenItems, removeOpenItems} = useContext(OpenItemsContext);\n    const {displayMessage, displayMessageInterval} = useContext(MessageContext);\n    const modelRef = useRef(null)\n    const workspaceID = useParams().id;\n    const publicInterval = useRef(0)\n    const existInterval = useRef(0)\n    const history = useHistory();\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                if (type === \"create\") {\n                    const workspace = await usersAPI.get(\"/created?type=workspace\");\n    \n                    workspace.data.data.map((workspace) => {\n                        setWorkspace(previous => [...previous, workspace.title]);\n                    })\n\n                    setExist(true)\n                    setLoaded(true)\n                } else {\n                    const workspace = await itemsAPI.get(`/${workspaceID}?type=workspace`);\n\n                    if (workspace.data.data.self) {\n                        addOpenItems(workspace.data.data._id, workspace.data.data.title, workspace.data.data.type)\n                    }\n\n                    setWorkspace(workspace.data.data);\n                    setUpdated(workspace.data.data.updated);\n                    setBookmarked(workspace.data.data.bookmarked)\n                    setUpvoted(workspace.data.data.upvoted)\n                    setPicture(workspace.data.data.picture)\n                    setUpvotes(workspace.data.data.upvotes)\n                    setDatasetID(workspace.data.data.dataset._id)\n                    setVisibility(workspace.data.data.visibility)\n                    setTitle(workspace.data.data.title)\n                    setDescription(workspace.data.data.description)\n                    setModel(workspace.data.data.model)\n                    setConfiguration(workspace.data.data.configuration)\n                    setUploadedDataset(workspace.data.data.dataset)\n                    setEvaluation({\n                        testAcc: workspace.data.data.evaluation.testAcc,\n                        testLoss: workspace.data.data.evaluation.testLoss,\n                        trainAcc: workspace.data.data.evaluation.trainAcc,\n                        trainLoss: workspace.data.data.evaluation.trainLoss,\n                        validationAcc: workspace.data.data.evaluation.validationAcc,\n                        validationLoss: workspace.data.data.evaluation.validationLoss,\n                        trainEpochs: Array.from(Array(workspace.data.data.evaluation.trainEpochs), (e, i) => (i + 1).toString())\n                    })\n                    setTrainTime(workspace.data.data.evaluation.trainTime)\n\n                    fetch(`http://127.0.0.1:5000/files/${workspace.data.data.dataset.imageFile}/labels.json`)\n                        .then(response => response.json())\n                        .then(images => {\n                            images.map(image => {\n                                setImages(state => [...state, image.filename])\n                                setAssignedLabels(state => [...state, image.label])\n                            })\n                            setExist(true)\n                            setNoData(false)\n                            setLoaded(true)\n                        }).catch(() => {\n                            setExist(true)\n                            setNoData(true)\n                            setLoaded(true)\n                        });\n                }\n            } catch (err) {\n                setExist(false)\n                setLoaded(true)\n            }\n        }\n        fetchData();\n    }, [])\n\n    useEffect(() => {\n        const timerID = stage === \"train\" && setInterval(() => {\n            setTrainTime(previous => previous + 1);\n        }, 1000);\n        return () => {\n            clearInterval(timerID)\n        }\n    }, [trainTime, stage])\n\n    useEffect(() => {\n        if (modelRef.current) {\n            modelRef.current.scrollIntoView({\n                behavior: 'smooth',\n                block: 'end',\n                inline: 'end'\n            })\n        }\n    }, [model.length, addNode])\n\n    useEffect(() => {\n        if (loaded && exist) {\n            const updatedDate = new Date(updated);\n            const currentDate = new Date();\n    \n            if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} years ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} days ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hours ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minutes ago`)\n            } else {\n                setDate(\"Updated just now\")\n            }\n        }\n    }, [loaded, updated])\n\n    const searchFunctionKey = (e) => {\n        if (e.key === \"Enter\" && datasetID !== \"\") {\n            existingDataset()\n        }\n    }\n\n    const updateUpvote = async () => {\n        try {\n            await globalAPI.put(`/upvote/${workspaceID}?state=${upvoted}`);\n\n            if (upvoted) {\n                setUpvotes(state => state-1)\n            } else {\n                setUpvotes(state => state+1)\n            }\n\n            setUpvoted(state => !state)\n        } catch (err) {}\n    }\n\n    const updateBookmark = async () => {\n        try {\n            await globalAPI.put(`/bookmark/${workspaceID}?state=${bookmarked}`);\n            \n            setBookmarked(state => !state)\n        } catch (err) {}\n    }\n\n    const updateVisibility = async () => {\n        try {\n            await globalAPI.put(`/visibility/${workspaceID}`);\n\n            setVisibility(state => !state)\n        } catch (err) {}\n    }\n\n    const displayPublicInterval = () => {\n        clearInterval(publicInterval.current)\n        setDisplayPublic(true);\n        publicInterval.current = setInterval(() => {\n            setDisplayPublic(false);\n        }, 1200)\n        return ()=> {clearInterval(publicInterval.current)};\n    }\n\n    const displayExistInterval = () => {\n        clearInterval(existInterval.current)\n        setDisplayExist(true);\n        existInterval.current = setInterval(() => {\n            setDisplayExist(false);\n        }, 1200)\n        return ()=> {clearInterval(existInterval.current)};\n    }\n\n    const previousPage = () => {\n        if (page > 1) {\n            setStart((page-2)*20)\n            setEnd((page-1)*20)\n            setPage(state => state-1)\n            setRefreshData(new Date().getTime())\n        }\n    }\n    \n    const nextPage = () => {\n        if (page*20 < images.length && images.length > 20) {\n            setPage(state => state+1)\n            setStart((page)*20)\n            setEnd((page+1)*20)\n            setRefreshData(new Date().getTime())\n        }\n    }\n\n    const existingDataset = async () => {\n        try {\n            const checkPublic = await itemsAPI.get(`/check-public-dataset?id=${datasetID}`)\n    \n            if (checkPublic.data.success && checkPublic.data.data.visibility) {\n                fetch(`http://127.0.0.1:5000/files/${checkPublic.data.data.imageFile}/labels.json`)\n                        .then(response => response.json())\n                        .then(images => {\n                            images.map(image => {\n                                setImages(state => [...state, image.filename])\n                                setAssignedLabels(state => [...state, image.label])\n                            })\n                            setUploadedDataset(checkPublic.data.data)\n                            setRefreshData(new Date().getTime())\n                            setChangedSettings(true)\n                        })\n            } else if (checkPublic.data.success && !checkPublic.data.data.visibility) {\n                displayPublicInterval()\n            } else {\n                displayExistInterval()\n            }\n        } catch (err) {}\n    }\n\n    const uploadImage = async () => {\n        setDisabledCreate(true)\n        \n        if (uploadedDataset && evaluation && title !== \"\" && description !== \"\") {\n            if (image) {\n                const formImage = new FormData();\n                formImage.append('image', image);\n\n                try {\n                    const imageResponse = await imageAPI.post(\"/upload\", formImage);\n\n                    uploadData(imageResponse.data.data)\n                } catch (err) {}\n            } else {\n                uploadData(\"default.png\")\n            }\n        } else {\n            let error = \"\"\n\n            if (!uploadedDataset) {\n                error = \"Missing Dataset\"\n            }\n\n            if (!evaluation) {\n                error = error + \" | Model not Trained\"\n            }\n\n            if (title === \"\") {\n                error = error + \" | Title is Blank\"\n            }\n\n            if (description === \"\") {\n                error = error + \" | Description is Blank\"\n            }\n\n            setMessage(error)\n            displayMessageInterval()\n            setDisabledCreate(false)\n        }\n    }\n\n    const uploadData = async (imageName) => {\n        try {\n            const updatedEvaluation = {\n                testAcc: evaluation.testAcc,\n                testLoss: evaluation.testLoss,\n                trainAcc: evaluation.trainAcc,\n                trainLoss: evaluation.trainLoss,\n                validationAcc: evaluation.validationAcc,\n                validationLoss: evaluation.validationLoss,\n                trainEpochs: evaluation.trainEpochs[evaluation.trainEpochs.length-1],\n                trainTime: trainTime\n            }\n    \n            const workspaceResponse = await itemsAPI.post(\"/\", {\n                title: title,\n                dataset: uploadedDataset._id,\n                creator: currentUser.id,\n                description: description,\n                picture: imageName,\n                upvotes: [],\n                bookmarks: [],\n                model: model,\n                configuration: configuration,\n                updated: new Date().toISOString(),\n                visibility: visibility,\n                evaluation: updatedEvaluation,\n                type: \"workspace\"\n            });\n\n            setMessage(\"Workspace Created\")\n            displayMessageInterval()\n            history.push(`/workspace/${workspaceResponse.data.data}`)\n        } catch (err) {}\n    }\n\n    const train = async () => {\n        console.log(\n         parseFloat(configuration.training_split) < 1 &&\n        parseFloat(configuration.validation_split) > 0 && parseFloat(configuration.validation_split) < 1 &&\n        parseFloat(configuration.validation_split) + parseFloat(configuration.training_split) === 1 && \n        parseInt(configuration.batch) >= 1 && parseFloat(configuration.improvement) >= 0 && \n        parseInt(configuration.patience) >= 1 && parseFloat(configuration.decay_rate) >= 0 && \n        parseFloat(configuration.decay_rate) <= 1 && parseInt(configuration.decay_steps) >= 1 && \n        parseFloat(configuration.initial_lr) > 0 && parseFloat(configuration.initial_lr) < 1)\n        if (parseInt(configuration.epochs) >= 1 && parseInt(configuration.epochs) <= 50 &&\n            parseFloat(configuration.training_split) > 0 && parseFloat(configuration.training_split) < 1 &&\n            parseFloat(configuration.validation_split) > 0 && parseFloat(configuration.validation_split) < 1 &&\n            parseFloat(configuration.validation_split) + parseFloat(configuration.training_split) === 1 && \n            parseInt(configuration.batch) >= 1 && parseFloat(configuration.improvement) >= 0 && \n            parseInt(configuration.patience) >= 1 && parseFloat(configuration.decay_rate) >= 0 && \n            parseFloat(configuration.decay_rate) <= 1 && parseInt(configuration.decay_steps) >= 1 && \n            parseFloat(configuration.initial_lr) > 0 && parseFloat(configuration.initial_lr) < 1)\n\n            try {\n                setTrainTime(0)\n                setDisabledTrain(true)\n                setStage(\"train\")\n        \n                const formData = new FormData();\n            \n                formData.append('epochs', configuration.epochs)\n                formData.append('training_split', configuration.training_split)\n                formData.append('validation_split', configuration.validation_split)\n                formData.append('improvement', configuration.improvement)\n                formData.append('patience', configuration.patience)\n                formData.append('batch', configuration.batch)\n                formData.append('decay_rate', configuration.decay_rate)\n                formData.append('decay_steps', configuration.decay_steps)\n                formData.append('early_stopping', configuration.early_stopping ? \"true\" : \"false\")\n                formData.append('lr_scheduler', configuration.lr_scheduler ? \"true\" : \"false\")\n                formData.append('initial_lr', configuration.initial_lr)\n                formData.append('optimiser', configuration.optimiser)\n                formData.append('loss', configuration.loss)\n                formData.append('rgb', uploadedDataset.rgb)\n                formData.append('imageFile', uploadedDataset.imageFile)\n                formData.append('height', uploadedDataset.height)\n                formData.append('width', uploadedDataset.width)\n                formData.append('label', uploadedDataset.labels.length)\n                formData.append('id', workspaceID)\n\n                model.map(node => {\n                    formData.append('model[]', JSON.stringify(node))\n                })\n\n                const response = await trainAPI.post(\"\", formData);\n\n                setDisabledTrain(false)\n\n                if (response) {\n                    updateWorkspace()\n\n                    setEvaluation({\n                        testAcc: response.data.test_acc,\n                        testLoss: response.data.test_loss,\n                        trainAcc: response.data.training.accuracy,\n                        trainLoss: response.data.training.loss,\n                        validationAcc: response.data.training.val_accuracy,\n                        validationLoss: response.data.training.val_loss,\n                        trainEpochs: Array.from(Array(response.data.epochs), (e, i) => (i + 1).toString())\n                    })\n                    setStage(\"evaluation\")\n                    setChangedSettings(true)\n                }\n            } catch (err) {\n                setStage(\"model\")\n                setDisabledTrain(false)\n                setMessage(\"Error Occurred\")\n                displayMessageInterval()\n            }\n        else {\n            let error = \"No\"\n\n            \n\n            setMessage(error)\n            displayMessageInterval()\n            setDisabledCreate(false)\n        }\n    }\n\n    const predictModel = async () => {\n        try {\n            setPrediction(\"\")\n\n            const formData = new FormData();\n\n            formData.append('id', workspaceID)\n            formData.append('rgb', uploadedDataset.rgb)\n            formData.append('height', uploadedDataset.height)\n            formData.append('width', uploadedDataset.width)\n            formData.append('image', predictionFile)\n\n            uploadedDataset.labels.map(label => {\n                formData.append('labels[]', label)\n            })\n\n            const response = await predictAPI.post(\"\", formData);\n            \n            setPrediction(response.data)\n        } catch (err) {console.log(err)}\n    }\n\n    const updateWorkspace = async () => {\n        const updatedEvaluation = {\n            testAcc: evaluation.testAcc,\n            testLoss: evaluation.testLoss,\n            trainAcc: evaluation.trainAcc,\n            trainLoss: evaluation.trainLoss,\n            validationAcc: evaluation.validationAcc,\n            validationLoss: evaluation.validationLoss,\n            trainEpochs: evaluation.trainEpochs[evaluation.trainEpochs.length-1],\n            trainTime: trainTime\n        }\n\n        if (image) {\n            const formImage = new FormData();\n            formImage.append('image', image);\n            \n            try {\n                const tempPicture = picture\n                const imageResponse = await imageAPI.post(\"/upload\", formImage);\n\n                await itemsAPI.put(`/${workspaceID}?type=workspace`, {\n                    title: title,\n                    description: description,\n                    picture: imageResponse.data.data,\n                    dataset: uploadedDataset._id,\n                    model: model,\n                    evaluation: updatedEvaluation,\n                    configuration: configuration,\n                    updated: new Date().toISOString()\n                })\n\n                setImage(undefined)\n                setPicture(imageResponse.data.data)\n\n                if (tempPicture !== \"default.png\") {\n                    await imageAPI.put('/remove', {picture: tempPicture});\n                }\n            } catch (err) {}\n        } else {\n            try {\n                await itemsAPI.put(`/${workspaceID}?type=workspace`, {\n                    title: title,\n                    description: description,\n                    picture: picture,\n                    dataset: uploadedDataset._id,\n                    model: model,\n                    evaluation: updatedEvaluation,\n                    configuration: configuration,\n                    updated: new Date().toISOString()\n                })\n            } catch (err) {}\n        }\n\n        setUpdated(new Date().toISOString())\n        setChangedSettings(false)\n        setMessage(\"Workspace Saved\")\n        displayMessageInterval()\n    }\n\n    const deleteWorkspace = async () => {\n        try {\n            const formData = new FormData();\n            formData.append('id', workspace._id);\n\n            await itemsAPI.delete(`/${workspaceID}`)\n            await filesAPI.post(`/remove-workspace`, formData)\n\n            removeOpenItems(workspaceID)\n            history.replace(\"/home\")\n        } catch (err) {}\n    }\n\n    return (\n        <>\n            {loaded && exist ?\n                <div className=\"main-body\">\n                    <div className=\"sidebar\">\n                        <div className=\"sidebar-header\">\n                            <img src=\"http://localhost:3000/workspace.png\"\n                                    className={!(type === \"view\" && !workspace.self) ? \"create-item-edit-image\" : undefined} />\n                            <input className={`create-item-title ${!(type === \"view\" && !workspace.self) && \"create-item-edit-input\"}`}\n                                    placeholder=\"Title\"\n                                    onChange={e => {\n                                        setTitle(e.target.value)\n                                        setChangedSettings(true)\n                                    }}\n                                    disabled={!(workspace.self || type === \"create\")}\n                                    value={title} />\n                        </div>\n                        <textarea className={`create-item-description ${!(type === \"view\" && !workspace.self) && \"create-item-edit-textarea\"}`}\n                                    placeholder=\"Description\"\n                                    onChange={e => {\n                                        setDescription(e.target.value)\n                                        setChangedSettings(true)\n                                    }}\n                                    disabled={!(workspace.self || type === \"create\")}\n                                    value={description} />\n                        {(workspace.self || type === \"create\") &&\n                            <>\n                                <div className=\"create-item-setup\">\n                                    <label className=\"create-item-setup-label\">Picture</label>\n                                    <input className=\"create-item-setup-input\"\n                                            type=\"file\" \n                                            name=\"image\" \n                                            onChange={e => {\n                                                setImage(e.target.files[0])\n                                                setChangedSettings(true)\n                                            }} />\n                                </div>\n                                {type === \"create\" &&\n                                    <div className=\"create-item-setup\">\n                                        <label className=\"create-item-setup-label\">Public?</label>\n                                        <input type=\"checkbox\" \n                                                onChange={() => {\n                                                    setVisibility(previous => !previous)\n                                                    setChangedSettings(true)\n                                                }}\n                                                checked={visibility} />\n                                    </div>\n                                }\n                            </>\n                        }\n                        {!workspace.self && type !== \"create\" && <p className=\"item-creator\">{workspace.creatorName.name}</p>}\n                        <div className=\"item-information\">\n                            {type !== \"create\" && <p className=\"item-date\">{date}</p>}\n                            <span />\n                            {type !== \"create\" &&\n                                <>\n                                    <ThumbUpIcon className={`item-icon ${upvoted ? \"blue2\" : \"white\"}`} onClick={() => {updateUpvote()}} />\n                                    <p className={upvoted ? \"blue2\" : \"white\"}>{upvotes}</p>\n                                </>\n                            }\n                            {!workspace.self && type !== \"create\" && <BookmarkIcon className={`item-icon ${bookmarked ? \"blue2\" : \"white\"}`} onClick={() => {updateBookmark()}} />}\n                            {workspace.self && type !== \"create\" && \n                                <>\n                                    {visibility ? \n                                        <VisibilityIcon className=\"item-visibility\" onClick={() => {updateVisibility()}} />\n                                    :\n                                        <VisibilityOffIcon className=\"item-visibility\" onClick={() => {updateVisibility()}} />\n                                    }\n                                </>\n                            }\n                        </div>\n                        <div className=\"sidebar-divided\" />\n                        <div className=\"create-workspace-uploaded-dataset\">\n                            {(type === \"create\" || workspace.self) ?\n                                <>\n                                    <input className={`create-workspace-import-existing ${!(type === \"view\" && !workspace.self) && \"create-item-edit-input\"}`}\n                                            placeholder=\"Dataset ID\"\n                                            onChange={e => {setDatasetID(e.target.value)}}\n                                            onKeyPress={searchFunctionKey}\n                                            value={datasetID} />\n                                    {type === \"view\" && \n                                        <Link className=\"create-item-view-dataset\" to={`/dataset/${datasetID}`}>\n                                            <OpenInNewIcon className=\"create-item-view-dataset-icon\" />\n                                        </Link>\n                                    }\n                                </>\n                            :\n                                <div>\n                                    <p className=\"create-workspace-uploaded-dataset-header\">Selected Dataset:</p>\n                                    <Link to={`/dataset/${datasetID}`} className=\"create-workspace-uploaded-dataset-link\">\n                                        <img src={`http://localhost:4000/images/${uploadedDataset.picture}`} />\n                                        <p>{uploadedDataset.title}</p>\n                                    </Link>\n                                </div>\n                            }\n                            {type === \"view\" &&\n                                <a href={`http://127.0.0.1:5000/models/${workspaceID}/${workspaceID}-model.zip`} download>\n                                    <DownloadIcon className=\"workspace-download-icon\" />\n                                </a>\n                            }\n                        </div>\n                        {type === \"view\" &&\n                            <>\n                                {workspace.self &&\n                                    <>\n                                        <div className=\"sidebar-divided\" />\n                                        <button className=\"blue-button item-save\"\n                                                disabled={!changedSettings}\n                                                onClick={() => {updateWorkspace()}}>Save Workspace</button>\n                                        <button className=\"text-button item-delete\"\n                                                onClick={() => {deleteWorkspace()}}>Delete</button>\n                                    </>\n                                }\n                            </>\n                        }\n                        {displayPublic && <p className=\"create-item-data-notification\">Dataset not public</p>}\n                        {displayExist && <p className=\"create-item-data-notification\">Dataset does not exist</p>}\n                    </div>\n                    <div className=\"inner\">\n                        <div className=\"workspace-body\">\n                            <div className=\"workspace-inner\">\n                                <div className=\"view-items-top\">\n                                    <h1>{type === \"create\" ? \"Create Workspace\" : \"Workspace\"}</h1>\n                                    <div>\n                                        <button className={`text-button ${stage === \"model\" ? \"item-header-button-selected\" : \"item-header-button-unselected\"}`}\n                                                onClick={() => {setStage(\"model\")}}>Model</button>\n                                        <button className={`text-button ${stage === \"evaluation\" ? \"item-header-button-selected\" : \"item-header-button-unselected\"}`}\n                                                onClick={() => {setStage(\"evaluation\")}}>Evaluation</button>\n                                        <button className={`text-button ${stage === \"prediction\" ? \"item-header-button-selected\" : \"item-header-button-unselected\"}`}\n                                                onClick={() => {setStage(\"prediction\")}}>Prediction</button>\n                                        <span />\n                                        {(workspace.self || type === \"create\") &&\n                                            <button className=\"blue-button\"\n                                                    disabled={disabledTrain || model[model.length-1].type !== \"Output\" || model.length === 0}\n                                                    onClick={() => {train()}}>Train</button>\n                                        }\n                                        {type === \"create\" &&\n                                            <button className=\"workspace-create blue-button\"\n                                                    disabled={disabledCreate}\n                                                    onClick={() => {uploadImage()}}>Create</button>\n                                        }\n                                    </div>\n                                </div>\n                                {stage === \"model\" ?\n                                    <>\n                                        {uploadedDataset ?\n                                            <div className=\"create-modelling-body\">\n                                                <div className=\"create-model\">\n                                                    <div className=\"create-model-diagram\" key={refreshDiagram}>\n                                                        {model.map((node, i) => {\n                                                            return (\n                                                                <div key={i}>\n                                                                    <div className={\"create-model-diagram-node\"}>\n                                                                        <div onClick={() => {setSelectedNode(i)}}>\n                                                                            <ModelNode setSelectedNode={setSelectedNode} type={node.type} value={node.value} selected={i === selectedNode} last={i === model.length-1} />\n                                                                        </div>\n                                                                        {node.type !== \"Input\" && (workspace.self || type === \"create\") &&\n                                                                            <div onClick={() => {{selectedNode === i ?\n                                                                                                    setSelectedNode(state => state-1)\n                                                                                                : selectedNode < i ?\n                                                                                                    setSelectedNode(state => state)\n                                                                                                : selectedNode > i &&\n                                                                                                    <>\n                                                                                                        {selectedNode-i === 1 ?\n                                                                                                            setSelectedNode(state => state-1)\n                                                                                                        :\n                                                                                                            setSelectedNode(i)\n                                                                                                        } \n                                                                                                    </>  \n                                                                                                }\n                                                                                                model.splice(i, 1)\n                                                                                                setChangedSettings(true)\n                                                                                                setRefreshDiagram(new Date().getTime())}}>\n                                                                                <ClearIcon className=\"create-model-diagram-remove\" />\n                                                                            </div>\n                                                                        }\n                                                                    </div>\n                                                                    {i === model.length-1 && model[selectedNode].type !== \"Output\" &&\n                                                                        <>\n                                                                            {addNode && (workspace.self || type === \"create\") ?\n                                                                                <div className=\"create-model-diagram-add\">\n                                                                                    <div onClick={() => {setAddNode(false)}}>\n                                                                                        <RemoveIcon className=\"create-model-diagram-add-icon\" />\n                                                                                    </div>\n                                                                                    <div className=\"create-model-diagram-add-options\">\n                                                                                        {(model[selectedNode].type === \"Input\" || model[selectedNode].type === \"Conv2D\" || model[selectedNode].type === \"MaxPooling2D\" ||\n                                                                                            model[selectedNode].type === \"Dropout\" || model[selectedNode].type === \"BatchNormalisation\") &&\n                                                                                            <>\n                                                                                                <button onClick={() => {\n                                                                                                    setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy.splice(selectedNode+1, 0, {\n                                                                                                            type: \"Conv2D\",\n                                                                                                            filters: 0,\n                                                                                                            kernel: 3,\n                                                                                                            strides: 2,\n                                                                                                            padding: \"same\",\n                                                                                                            activation: \"\"\n                                                                                                        })\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n\n                                                                                                    setSelectedNode(state => state + 1)\n                                                                                                    setAddNode(false)\n                                                                                                    setChangedSettings(true)\n                                                                                                }}>Conv2D</button>\n                                                                                                <button onClick={() => {\n                                                                                                    setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy.splice(selectedNode+1, 0, {\n                                                                                                            type: \"MaxPooling2D\",\n                                                                                                            pool: 3,\n                                                                                                            strides: 2,\n                                                                                                            padding: \"same\"\n                                                                                                        })\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n                                                                                                    \n                                                                                                    setSelectedNode(state => state + 1)\n                                                                                                    setAddNode(false)\n                                                                                                    setChangedSettings(true)\n                                                                                                }}>MaxPooling2D</button>\n                                                                                                <button onClick={() => {\n                                                                                                    setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy.splice(selectedNode+1, 0, {\n                                                                                                            type: \"AvgPooling2D\",\n                                                                                                            pool: 3,\n                                                                                                            strides: 2,\n                                                                                                            padding: \"same\"\n                                                                                                        })\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n                                                                                                    \n                                                                                                    setSelectedNode(state => state + 1)\n                                                                                                    setAddNode(false)\n                                                                                                    setChangedSettings(true)\n                                                                                                }}>AvgPooling2D</button>\n                                                                                                <button onClick={() => {\n                                                                                                    setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy.splice(selectedNode+1, 0, {\n                                                                                                            type: \"BatchNormalisation\",\n                                                                                                            momentum: 0\n                                                                                                        })\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n\n                                                                                                    setSelectedNode(state => state + 1)\n                                                                                                    setAddNode(false)\n                                                                                                    setChangedSettings(true)\n                                                                                                }}>Batch Normalisation</button>\n                                                                                                <button onClick={() => {\n                                                                                                    setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy.splice(selectedNode+1, 0, {\n                                                                                                            type: \"Dropout\",\n                                                                                                            rate: 0\n                                                                                                        })\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n\n                                                                                                    setSelectedNode(state => state + 1)\n                                                                                                    setAddNode(false)\n                                                                                                    setChangedSettings(true)\n                                                                                                }}>Dropout</button>\n                                                                                                {selectedNode === model.length-1 &&\n                                                                                                    <button onClick={() => {setModel(state => [...state, {\n                                                                                                            type: \"Flatten\"\n                                                                                                        }])\n                                                                                                        setSelectedNode(state => state + 1)\n                                                                                                        setAddNode(false)\n                                                                                                        setChangedSettings(true)\n                                                                                                    }}>Flatten</button>\n                                                                                                }\n                                                                                            </>\n                                                                                        }\n                                                                                        {(model[selectedNode].type === \"Flatten\" || model[selectedNode].type === \"Dense\") &&\n                                                                                            <button onClick={() => {\n                                                                                                setModel(state => {\n                                                                                                    const stateCopy = [...state]\n                                                                                                \n                                                                                                    stateCopy.splice(selectedNode+1, 0, {\n                                                                                                        type: \"Dense\",\n                                                                                                        units: 0,\n                                                                                                        activation: \"\"\n                                                                                                    })\n                                                                                                \n                                                                                                    return stateCopy\n                                                                                                })\n                                                                                                \n                                                                                                setSelectedNode(state => state + 1)\n                                                                                                setAddNode(false)\n                                                                                                setChangedSettings(true)\n                                                                                            }}>Dense</button>\n                                                                                        }\n                                                                                        {model[selectedNode].type === \"Dense\" &&\n                                                                                            <>\n                                                                                                <button onClick={() => {\n                                                                                                    setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy.splice(selectedNode+1, 0, {\n                                                                                                            type: \"Dropout\",\n                                                                                                            rate: 0\n                                                                                                        })\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n\n                                                                                                    setSelectedNode(state => state + 1)\n                                                                                                    setAddNode(false)\n                                                                                                    setChangedSettings(true)\n                                                                                                }}>Dropout</button>\n                                                                                                {selectedNode === model.length-1 &&\n                                                                                                    <button onClick={() => {\n                                                                                                            {uploadedDataset.labels.length === 2 ?\n                                                                                                                setModel(state => [...state, {\n                                                                                                                    type: \"Output\",\n                                                                                                                    units: 1,\n                                                                                                                    activation: \"\"\n                                                                                                                }])\n                                                                                                            :\n                                                                                                                setModel(state => [...state, {\n                                                                                                                    type: \"Output\",\n                                                                                                                    units: uploadedDataset.labels.length,\n                                                                                                                    activation: \"\"\n                                                                                                                }])\n                                                                                                            }\n                                                                                                        setSelectedNode(state => state + 1)\n                                                                                                        setAddNode(false)\n                                                                                                        setChangedSettings(true)\n                                                                                                    }}>Output</button>\n                                                                                                }\n                                                                                            </>\n                                                                                        }\n                                                                                    </div>\n                                                                                </div>\n                                                                            :\n                                                                                <>  \n                                                                                    {(workspace.self || type === \"create\") &&\n                                                                                        <div onClick={() => {setAddNode(true)}}>\n                                                                                            <AddIcon className=\"create-model-diagram-add-icon\" />\n                                                                                        </div>\n                                                                                    }\n                                                                                </>\n                                                                            }\n                                                                        </>\n                                                                    }\n                                                                </div>\n                                                            )\n                                                        })}\n                                                        <div ref={modelRef} />\n                                                    </div>\n                                                </div>\n                                                <div>\n                                                    <div className=\"create-model-selected\">\n                                                        <p>{model[selectedNode].type}</p>\n                                                        <div className=\"create-model-selected-input\">\n                                                            {model[selectedNode].type !== \"Flatten\" &&\n                                                                <>\n                                                                    {model[selectedNode].type === \"Dense\" &&\n                                                                        <div>\n                                                                            <label>Units</label>\n                                                                            <input value={model[selectedNode].units} \n                                                                                    disabled={!(workspace.self || type === \"create\")}\n                                                                                    onChange={e => {setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy[selectedNode] = {\n                                                                                                            ...stateCopy[selectedNode],\n                                                                                                            units: Number(e.target.value)\n                                                                                                        }\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n                                                                                                    setChangedSettings(true)\n                                                                                                    setRefreshDiagram(new Date().getTime())}} />\n                                                                        </div>\n                                                                    }\n                                                                    {(model[selectedNode].type === \"Dense\" || model[selectedNode].type === \"Conv2D\" || model[selectedNode].type === \"Output\") &&\n                                                                        <div>\n                                                                            <label>Activation</label>\n                                                                            <select value={model[selectedNode].activation} \n                                                                                    disabled={!(workspace.self || type === \"create\")}\n                                                                                    onChange={e => {setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy[selectedNode] = {\n                                                                                                            ...stateCopy[selectedNode],\n                                                                                                            activation: e.target.value\n                                                                                                        }\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n                                                                                                    setChangedSettings(true)\n                                                                                                    setRefreshDiagram(new Date().getTime())}}>\n                                                                                    <option disabled defaultValue value=\"\"></option>\n                                                                                    <option value=\"sigmoid\">Sigmoid</option>\n                                                                                    <option value=\"softmax\">Softmax</option>\n                                                                                    <option value=\"softplus\">Softplus</option>\n                                                                                    <option value=\"softsign\">Softsign</option>\n                                                                                    <option value=\"swish\">Swish</option>\n                                                                                    <option value=\"selu\">Selu</option>\n                                                                                    <option value=\"tanh\">Tanh</option>\n                                                                                    <option value=\"elu\">Elu</option>\n                                                                                    <option value=\"exponential\">Exponential</option>\n                                                                                    <option value=\"gelu\">Gelu</option>\n                                                                                    <option value=\"hard_sigmoid\">Hard Sigmoid</option>\n                                                                                    <option value=\"linear\">Linear</option>\n                                                                                    <option value=\"relu\">Relu</option>\n                                                                            </select>\n                                                                        </div>\n                                                                    }\n                                                                    {(model[selectedNode].type === \"Conv2D\" || model[selectedNode].type === \"MaxPooling2D\") &&\n                                                                        <>\n                                                                            <div>\n                                                                                <label>Padding</label>\n                                                                                <select value={model[selectedNode].padding} \n                                                                                    disabled={!(workspace.self || type === \"create\")}\n                                                                                    onChange={e => {setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy[selectedNode] = {\n                                                                                                            ...stateCopy[selectedNode],\n                                                                                                            padding: e.target.value\n                                                                                                        }\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n                                                                                                    setChangedSettings(true)\n                                                                                                    setRefreshDiagram(new Date().getTime())}}>\n                                                                                    <option disabled defaultValue value=\"\"></option>\n                                                                                    <option value=\"same\">Same</option>\n                                                                                    <option value=\"valid\">Valid</option>\n                                                                                </select>\n                                                                            </div>\n                                                                            <div>\n                                                                                <label>Strides</label>\n                                                                                <input value={model[selectedNode].strides} \n                                                                                    disabled={!(workspace.self || type === \"create\")}\n                                                                                    onChange={e => {setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy[selectedNode] = {\n                                                                                                            ...stateCopy[selectedNode],\n                                                                                                            strides: Number(e.target.value)\n                                                                                                        }\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n                                                                                                    setChangedSettings(true)\n                                                                                                    setRefreshDiagram(new Date().getTime())}} />\n                                                                            </div>\n                                                                        </>\n                                                                    }\n                                                                    {model[selectedNode].type === \"Conv2D\" &&\n                                                                        <>\n                                                                            <div>\n                                                                                <label>Filters</label>\n                                                                                <input value={model[selectedNode].filters} \n                                                                                    disabled={!(workspace.self || type === \"create\")}\n                                                                                    onChange={e => {setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy[selectedNode] = {\n                                                                                                            ...stateCopy[selectedNode],\n                                                                                                            filters: Number(e.target.value)\n                                                                                                        }\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n                                                                                                    setChangedSettings(true)\n                                                                                                    setRefreshDiagram(new Date().getTime())}} />\n                                                                            </div>\n                                                                            <div>\n                                                                                <label>Kernel Size</label>\n                                                                                <input value={model[selectedNode].kernel} \n                                                                                    disabled={!(workspace.self || type === \"create\")}\n                                                                                    onChange={e => {setModel(state => {\n                                                                                                        const stateCopy = [...state]\n                                                                                                    \n                                                                                                        stateCopy[selectedNode] = {\n                                                                                                            ...stateCopy[selectedNode],\n                                                                                                            kernel: Number(e.target.value)\n                                                                                                        }\n                                                                                                    \n                                                                                                        return stateCopy\n                                                                                                    })\n                                                                                                    setChangedSettings(true)\n                                                                                                    setRefreshDiagram(new Date().getTime())}} />\n                                                                            </div>\n                                                                        </>\n                                                                    }\n                                                                    {model[selectedNode].type === \"MaxPooling2D\" &&\n                                                                        <div>\n                                                                            <label>Pooling Size</label>\n                                                                            <input value={model[selectedNode].pool} \n                                                                                disabled={!(workspace.self || type === \"create\")}\n                                                                                onChange={e => {setModel(state => {\n                                                                                                    const stateCopy = [...state]\n                                                                                                \n                                                                                                    stateCopy[selectedNode] = {\n                                                                                                        ...stateCopy[selectedNode],\n                                                                                                        pool: Number(e.target.value)\n                                                                                                    }\n                                                                                                \n                                                                                                    return stateCopy\n                                                                                                })\n                                                                                                setChangedSettings(true)\n                                                                                                setRefreshDiagram(new Date().getTime())}} />\n                                                                        </div>\n                                                                    }\n                                                                    {model[selectedNode].type === \"Dropout\" &&\n                                                                        <div>\n                                                                            <label>Rate</label>\n                                                                            <input value={model[selectedNode].rate} \n                                                                                disabled={!(workspace.self || type === \"create\")}\n                                                                                onChange={e => {setModel(state => {\n                                                                                                    const stateCopy = [...state]\n                                                                                                \n                                                                                                    stateCopy[selectedNode] = {\n                                                                                                        ...stateCopy[selectedNode],\n                                                                                                        rate: Number(e.target.value)\n                                                                                                    }\n                                                                                                \n                                                                                                    return stateCopy\n                                                                                                })\n                                                                                                setChangedSettings(true)\n                                                                                                setRefreshDiagram(new Date().getTime())}} />\n                                                                        </div>\n                                                                    }\n                                                                    {model[selectedNode].type === \"BatchNormalisation\" &&\n                                                                        <div>\n                                                                            <label>Momentum</label>\n                                                                            <input value={model[selectedNode].momentum} \n                                                                                disabled={!(workspace.self || type === \"create\")}\n                                                                                onChange={e => {setModel(state => {\n                                                                                                    const stateCopy = [...state]\n                                                                                                \n                                                                                                    stateCopy[selectedNode] = {\n                                                                                                        ...stateCopy[selectedNode],\n                                                                                                        momentum: Number(e.target.value)\n                                                                                                    }\n                                                                                                \n                                                                                                    return stateCopy\n                                                                                                })\n                                                                                                setChangedSettings(true)\n                                                                                                setRefreshDiagram(new Date().getTime())}} />\n                                                                        </div>\n                                                                    }\n                                                                    {model[selectedNode].type === \"Input\" &&\n                                                                        <>\n                                                                            <div>\n                                                                                <label>Image Height</label>\n                                                                                <p>{uploadedDataset.height}</p>\n                                                                            </div>\n                                                                            <div>\n                                                                                <label>Image Width</label>\n                                                                                <p>{uploadedDataset.width}</p>\n                                                                            </div>\n                                                                        </>\n                                                                    }\n                                                                </>\n                                                            }\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"create-model-configuration\">\n                                                        <div className=\"create-model-configuration-option\">\n                                                            <div>\n                                                                <label>Epochs</label>\n                                                                <input value={configuration.epochs}\n                                                                        disabled={!(workspace.self || type === \"create\")} \n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                epochs: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Training Split</label>\n                                                                <input value={configuration.training_split} \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                training_split: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Validation Split</label>\n                                                                <input value={configuration.validation_split} \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                validation_split: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Batch Size</label>\n                                                                <input value={configuration.batch} \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                batch: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Initial Learning Rate</label>\n                                                                <input value={configuration.initial_lr} \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                initial_lr: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }} />\n                                                            </div>\n                                                            <div>\n                                                                <label>Learning Rate Scheduler</label>\n                                                                <input className=\"create-model-configuration-option-checkbox\"\n                                                                        type=\"checkbox\" \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={() => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                lr_scheduler: !configuration.lr_scheduler\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }}\n                                                                        checked={configuration.lr_scheduler} />\n                                                            </div>\n                                                            {configuration.lr_scheduler &&\n                                                                <>\n                                                                    <div>\n                                                                        <label>Decay Rate</label>\n                                                                        <input value={configuration.decay_rate} \n                                                                                disabled={!(workspace.self || type === \"create\")}\n                                                                                onChange={e => {\n                                                                                    setConfiguration(state => ({\n                                                                                        ...state,\n                                                                                        decay_rate: e.target.value\n                                                                                    }))\n                                                                                    setChangedSettings(true)\n                                                                                }} />\n                                                                    </div>\n                                                                    <div>\n                                                                        <label>Decay Steps</label>\n                                                                        <input value={configuration.decay_steps} \n                                                                                disabled={!(workspace.self || type === \"create\")}\n                                                                                onChange={e => {\n                                                                                    setConfiguration(state => ({\n                                                                                        ...state,\n                                                                                        decay_steps: e.target.value\n                                                                                    }))\n                                                                                    setChangedSettings(true)\n                                                                                }} />\n                                                                    </div>\n                                                                </>\n                                                            }\n                                                            <div>\n                                                                <label>Early Stopping</label>\n                                                                <input className=\"create-model-configuration-option-checkbox\"\n                                                                        type=\"checkbox\" \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={() => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                early_stopping: !configuration.early_stopping\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }}\n                                                                        checked={configuration.early_stopping} />\n                                                            </div>\n                                                            {configuration.early_stopping &&\n                                                                <>\n                                                                    <div>\n                                                                        <label>Minimum Improvement</label>\n                                                                        <input value={configuration.improvement} \n                                                                                disabled={!(workspace.self || type === \"create\")}\n                                                                                onChange={e => {\n                                                                                    setConfiguration(state => ({\n                                                                                        ...state,\n                                                                                        improvement: e.target.value\n                                                                                    }))\n                                                                                    setChangedSettings(true)\n                                                                                }} />\n                                                                    </div>\n                                                                    <div>\n                                                                        <label>Patience</label>\n                                                                        <input value={configuration.patience} \n                                                                                disabled={!(workspace.self || type === \"create\")}\n                                                                                onChange={e => {\n                                                                                    setConfiguration(state => ({\n                                                                                        ...state,\n                                                                                        patience: e.target.value\n                                                                                    }))\n                                                                                    setChangedSettings(true)\n                                                                                }} />\n                                                                    </div>\n                                                                </>\n                                                            }\n                                                            <div>\n                                                                <label>Optimiser</label>\n                                                                <select value={configuration.optimiser} \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                optimiser: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }}>\n                                                                    <option disabled defaultValue value=\"\"></option>\n                                                                    <option value=\"Adadelta\">Adadelta</option>\n                                                                    <option value=\"Adagrad\">Adagrad</option>\n                                                                    <option value=\"Adam\">Adam</option>\n                                                                    <option value=\"Adamax\">Adamax</option>\n                                                                    <option value=\"Ftrl\">Ftrl</option>\n                                                                    <option value=\"Nadam\">Nadam</option>\n                                                                    <option value=\"RMSprop\">RMSprop</option>\n                                                                    <option value=\"SGD\">SGD</option>\n                                                                </select>\n                                                            </div>\n                                                            <div>\n                                                                <label>Loss</label>\n                                                                <select value={configuration.loss} \n                                                                        disabled={!(workspace.self || type === \"create\")}\n                                                                        onChange={e => {\n                                                                            setConfiguration(state => ({\n                                                                                ...state,\n                                                                                loss: e.target.value\n                                                                            }))\n                                                                            setChangedSettings(true)\n                                                                        }}>\n                                                                    <option disabled defaultValue value=\"\"></option>\n                                                                    {uploadedDataset.labels.length === 2 &&\n                                                                        <>\n                                                                            <option value=\"binary_crossentropy\">Binary Crossentropy</option>\n                                                                            <option value=\"hinge\">Hinge</option>\n                                                                            <option value=\"squared_hinge\">Squared Hinge</option>\n                                                                        </>\n                                                                    }\n                                                                    {uploadedDataset.labels.length > 2 &&\n                                                                        <>\n                                                                            <option value=\"categorical_crossentropy\">Categorical Crossentropy</option>\n                                                                            <option value=\"kl_divergence\">Kullback Leibler Divergence</option>\n                                                                        </>\n                                                                    }\n                                                                </select>\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        :\n                                            <p className=\"end-items\">Select a dataset...</p>\n                                        }\n                                    </>\n                                : (stage === \"evaluation\") ?\n                                    <div className='create-evaluation-body'>\n                                        {!evaluation ?\n                                            <p className='create-evaluation-header'>Model must be trained first...</p>\n                                        :\n                                            <>\n                                                <div className=\"create-evaluation-test\">\n                                                    <div>\n                                                        <p>Training Time:</p>\n                                                        <p>{trainTime} seconds</p>\n                                                    </div>\n                                                    <div>\n                                                        <p>Test Accuracy:</p>\n                                                        <p>{evaluation.testAcc.toFixed(3)}</p>\n                                                    </div>\n                                                    <div>\n                                                        <p>Test Loss:</p>\n                                                        <p>{evaluation.testLoss.toFixed(3)}</p>\n                                                    </div>\n                                                </div>\n                                                <Chart x={evaluation.trainEpochs} y1={evaluation.trainAcc} y2={evaluation.validationAcc} type={\"Accuracy\"} />\n                                                <Chart x={evaluation.trainEpochs} y1={evaluation.trainLoss} y2={evaluation.validationLoss} type={\"Loss\"} />\n                                            </>\n                                        }\n                                    </div>\n                                : (stage === \"train\") ?\n                                    <div className='create-training-body'>\n                                        <p>Training Model...</p>\n                                        <p>Elapsed Time: {trainTime} seconds</p>\n                                    </div>\n                                :\n                                    <div className='create-prediction-body'>\n                                        {!evaluation ?\n                                            <p className='create-prediction-header'>Model must be trained first...</p>\n                                        :\n                                            <>\n                                                <div className=\"create-prediction-top\">\n                                                    <input type=\"file\" \n                                                            name=\"data\"\n                                                            accept=\"image/*\"\n                                                            onChange={e => {\n                                                                setPrediction(\"\")\n                                                                setPredictionFile(e.target.files[0])}} \n                                                            />\n                                                    <button className=\"white-button\"\n                                                            onClick={() => {predictModel()}}>Predict</button>\n                                                </div>\n                                                {predictionFile && \n                                                    <div className=\"create-prediction-card\">\n                                                        <img src={URL.createObjectURL(predictionFile)} />\n                                                        <p>{prediction ? \"Predicted label:\" : \"Predict label...\"}</p>\n                                                        <p className=\"create-prediction-card-prediction\">{prediction}</p>\n                                                    </div>\n                                                }\n                                            </>\n                                        }\n                                    </div>\n                                }\n                                {displayMessage && <MessageCard message={message} />}\n                            </div>\n                            {uploadedDataset && \n                                <>\n                                    {noData ?\n                                        <p className=\"end-items\">Cannot find dataset</p>\n                                    :\n                                        <div className=\"create-workspace-data\">\n                                            <p className=\"create-workspace-data-header\">Selected Dataset:</p>\n                                            <p className=\"create-workspace-data-header-dataset\">{uploadedDataset.title}</p>\n                                            <div className=\"sidebar-divided\" />\n                                            <div className=\"create-workspace-data-images-list\" key={refreshData}>\n                                                {images.map((image, i) => {\n                                                    if (i >= start && i < end && assignedLabels[i] !== \"No label\") {\n                                                        return (\n                                                            <div className=\"create-workspace-data-image\" key={i}>\n                                                                <img src={`http://127.0.0.1:5000/files/${uploadedDataset.imageFile}/images/${assignedLabels[i]}/${image}.jpg`}  />\n                                                                <p>{assignedLabels[i]}</p>\n                                                            </div>\n                                                        )\n                                                    }\n                                                })}\n                                            </div>\n                                            <div className=\"sidebar-divided\" />\n                                            <div className=\"create-workspace-pagination\">\n                                                <ArrowBackIosNewIcon className=\"create-workspace-pagination-icon\" onClick={() => {previousPage()}} />\n                                                <p>Page {page} / {Math.ceil(images.length/20)}</p>\n                                                <ArrowForwardIosIcon className=\"create-workspace-pagination-icon\" onClick={() => {nextPage()}} />\n                                            </div>\n                                        </div>\n                                    }   \n                                </>\n                            }\n                        </div>\n                    </div>\n                </div>\n            : loaded && !exist &&\n                <div className=\"inner\">  \n                    <p className=\"item-exist\">Cannot find workspace</p>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default Workspace"]},"metadata":{},"sourceType":"module"}