{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Experiment.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams, useHistory } from \"react-router-dom\";\nimport itemsAPI from '../API/items';\nimport globalAPI from '../API/global';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport ModelNode from '../Components/Model-Node';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Experiment = _ref => {\n  _s();\n\n  let {\n    currentUser\n  } = _ref;\n  const [loaded, setLoaded] = useState(false);\n  const [exist, setExist] = useState();\n  const [model, setModel] = useState();\n  const [configuration, setConfiguration] = useState();\n  const [updated, setUpdated] = useState();\n  const [changedSettings, setChangedSettings] = useState(false);\n  const [changedModel, setChangedModel] = useState(false);\n  const [disabledTrain, setDisableTrain] = useState(true);\n  const [date, setDate] = useState();\n  const [visibility, setVisibility] = useState();\n  const [section, setSection] = useState(\"model\");\n  const [experiment, setExperiment] = useState();\n  const [selectedNode, setSelectedNode] = useState(0);\n  const [addNode, setAddNode] = useState(false);\n  const [refreshDiagram, setRefreshDiagram] = useState();\n  const [title, setTitle] = useState(\"\");\n  const modelRef = useRef(null);\n  const workspaceID = useParams().workspace;\n  const experimentID = useParams().experiment;\n  const history = useHistory();\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const experiment = await itemsAPI.get(`/experiment/${experimentID}?workspace=${workspaceID}`);\n        setExperiment(experiment.data.data);\n        setUpdated(experiment.data.data.experiments.updated);\n        setTitle(experiment.data.data.experiments.title);\n        setModel(experiment.data.data.experiments.model);\n        setVisibility(experiment.data.data.experiments.visibility);\n        setConfiguration(experiment.data.data.experiments.configuration);\n        setExist(true);\n        setLoaded(true);\n      } catch (err) {\n        setExist(false);\n        setLoaded(true);\n      }\n    };\n\n    fetchData();\n  }, []);\n  useEffect(() => {\n    if (loaded && exist) {\n      const updatedDate = new Date(updated);\n      const currentDate = new Date();\n\n      if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365).toString()} years ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n        setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24)).toString()} days ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600)).toString()} hours ago`);\n      } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n        setDate(`Updated ${Math.floor((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60)).toString()} minutes ago`);\n      } else {\n        setDate(\"Updated just now\");\n      }\n    }\n  }, [loaded, updated]);\n\n  const updateVisibility = async () => {\n    try {\n      await itemsAPI.put(`/experiment-visibility/${experimentID}?workspace=${workspaceID}`);\n      setVisibility(state => !state);\n    } catch (err) {}\n  };\n\n  const updateExperiment = async () => {\n    try {\n      if (changedModel) {\n        setDisableTrain(false);\n      }\n\n      setUpdated(new Date().toISOString());\n      setChangedSettings(false);\n      setChangedModel(false);\n    } catch (err) {}\n  };\n\n  const deleteExperiment = async () => {\n    try {\n      await itemsAPI.delete(`/experiment/${experimentID}?workspace=${workspaceID}`);\n      history.replace(`/workspace/${workspaceID}`);\n    } catch (err) {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loaded && exist ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"width-body\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-top\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"item-heading\",\n            children: experiment.self ? /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"item-title-input\",\n              placeholder: \"Title\",\n              value: title,\n              onChange: e => {\n                setTitle(e.target.value);\n                {\n                  !changedSettings && setChangedSettings(true);\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 37\n            }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"hi\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"item-meta\",\n              children: date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 33\n            }, this), experiment.self && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: visibility ? /*#__PURE__*/_jsxDEV(VisibilityIcon, {\n                className: \"item-visibility\",\n                onClick: () => {\n                  updateVisibility();\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 45\n              }, this) : /*#__PURE__*/_jsxDEV(VisibilityOffIcon, {\n                className: \"item-visibility\",\n                onClick: () => {\n                  updateVisibility();\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 45\n              }, this)\n            }, void 0, false)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 29\n          }, this), experiment.self && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"item-middle\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"dark-grey-button item-delete\",\n              onClick: () => {\n                deleteExperiment();\n              },\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `item-save ${!changedSettings && !changedModel ? \"grey-button\" : \"blue-button\"}`,\n              disabled: !changedSettings && !changedModel,\n              onClick: () => {\n                updateExperiment();\n              },\n              children: \"Save Changes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"item-select\",\n            onChange: e => {\n              setSection(e.target.value);\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"model\",\n              children: \"Model\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"results\",\n              children: \"Results\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-bottom\",\n          children: section === \"model\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"experiment-modelling-body\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"experiment-model\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"model-diagram\",\n                children: [model.map((node, i) => {\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"model-diagram-node\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        disabled: !experiment.self,\n                        onClick: () => {\n                          setSelectedNode(i);\n                        },\n                        children: /*#__PURE__*/_jsxDEV(ModelNode, {\n                          setSelectedNode: setSelectedNode,\n                          type: node.type,\n                          value: node.value,\n                          selected: i === selectedNode,\n                          last: i === model.length - 1\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 160,\n                          columnNumber: 65\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 159,\n                        columnNumber: 61\n                      }, this), experiment.self && /*#__PURE__*/_jsxDEV(_Fragment, {\n                        children: node.type !== \"Input\" && /*#__PURE__*/_jsxDEV(\"div\", {\n                          onClick: () => {\n                            {\n                              selectedNode === i ? setSelectedNode(state => state - 1) : selectedNode < i ? setSelectedNode(state => state) : selectedNode > i && /*#__PURE__*/_jsxDEV(_Fragment, {\n                                children: selectedNode - i === 1 ? setSelectedNode(state => state - 1) : setSelectedNode(i)\n                              }, void 0, false);\n                            }\n                            model.splice(i, 1);\n                            {\n                              !changedModel && setChangedModel(true);\n                            }\n                            setRefreshDiagram(new Date().getTime());\n                          },\n                          children: /*#__PURE__*/_jsxDEV(ClearIcon, {\n                            className: \"model-diagram-remove\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 181,\n                            columnNumber: 77\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 165,\n                          columnNumber: 73\n                        }, this)\n                      }, void 0, false)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 158,\n                      columnNumber: 57\n                    }, this), i === model.length - 1 && node.type !== \"Output\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                      children: addNode ? /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"model-diagram-add\",\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          onClick: () => {\n                            setAddNode(false);\n                          },\n                          children: /*#__PURE__*/_jsxDEV(RemoveIcon, {\n                            className: \"model-diagram-add-icon\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 192,\n                            columnNumber: 77\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 191,\n                          columnNumber: 73\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"model-diagram-add-options\",\n                          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                            onClick: () => {\n                              setModel(state => [...state, {\n                                type: \"Dense\",\n                                value: 0,\n                                activation: \"\"\n                              }]);\n                              setAddNode(false);\n                              setSelectedNode(state => state + 1);\n                              {\n                                !changedModel && setChangedModel(true);\n                              }\n                            },\n                            children: \"Dense\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 195,\n                            columnNumber: 77\n                          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                            onClick: () => {\n                              setModel(state => [...state, {\n                                type: \"Output\",\n                                value: 0,\n                                activation: \"\"\n                              }]);\n                              setAddNode(false);\n                              setSelectedNode(state => state + 1);\n                              {\n                                !changedModel && setChangedModel(true);\n                              }\n                            },\n                            children: \"Output\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 204,\n                            columnNumber: 77\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 194,\n                          columnNumber: 73\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 190,\n                        columnNumber: 69\n                      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                        children: experiment.self && /*#__PURE__*/_jsxDEV(\"div\", {\n                          onClick: () => {\n                            setAddNode(true);\n                          },\n                          children: /*#__PURE__*/_jsxDEV(AddIcon, {\n                            className: \"model-diagram-add-icon\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 219,\n                            columnNumber: 81\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 218,\n                          columnNumber: 77\n                        }, this)\n                      }, void 0, false)\n                    }, void 0, false)]\n                  }, i, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 157,\n                    columnNumber: 53\n                  }, this);\n                }), /*#__PURE__*/_jsxDEV(\"div\", {\n                  ref: modelRef\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 229,\n                  columnNumber: 45\n                }, this)]\n              }, refreshDiagram, true, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"model-configuration\",\n              children: [experiment.self && /*#__PURE__*/_jsxDEV(\"button\", {\n                className: disabledTrain ? \"grey-button\" : \"blue-button\",\n                disabled: disabledTrain,\n                onClick: () => {},\n                children: \"Train\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 234,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"model-configuration-option\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Epochs\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 240,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    value: configuration.epochs,\n                    disabled: !experiment.self,\n                    onChange: e => {\n                      setConfiguration(state => ({ ...state,\n                        epochs: e.target.value\n                      }));\n                      {\n                        !changedModel && setChangedModel(true);\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 241,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 239,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Training Split\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 250,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    value: configuration.trainingSplit,\n                    disabled: !experiment.self,\n                    onChange: e => {\n                      setConfiguration(state => ({ ...state,\n                        trainingSplit: e.target.value\n                      }));\n                      {\n                        !changedModel && setChangedModel(true);\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 251,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 249,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Validation Split\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 260,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    value: configuration.validationSplit,\n                    disabled: !experiment.self,\n                    onChange: e => {\n                      setConfiguration(state => ({ ...state,\n                        validationSplit: e.target.value\n                      }));\n                      {\n                        !changedModel && setChangedModel(true);\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 261,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 259,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Test Split\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 270,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    value: configuration.testSplit,\n                    disabled: !experiment.self,\n                    onChange: e => {\n                      setConfiguration(state => ({ ...state,\n                        testSplit: e.target.value\n                      }));\n                      {\n                        !changedModel && setChangedModel(true);\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 271,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 269,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Maximum Error\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 280,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    value: configuration.maxError,\n                    disabled: !experiment.self,\n                    onChange: e => {\n                      setConfiguration(state => ({ ...state,\n                        maxError: e.target.value\n                      }));\n                      {\n                        !changedModel && setChangedModel(true);\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 281,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 279,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Batch Size\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 290,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    value: configuration.batch,\n                    disabled: !experiment.self,\n                    onChange: e => {\n                      setConfiguration(state => ({ ...state,\n                        batch: e.target.value\n                      }));\n                      {\n                        !changedModel && setChangedModel(true);\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 291,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 289,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Optimiser\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 300,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                    value: configuration.optimiser,\n                    disabled: !experiment.self,\n                    onChange: e => {\n                      setConfiguration(state => ({ ...state,\n                        optimiser: e.target.value\n                      }));\n                      {\n                        !changedModel && setChangedModel(true);\n                      }\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      disabled: true,\n                      selected: true,\n                      value: \"\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 308,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"Sigmoid\",\n                      children: \"Sigmoid\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 309,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"Relu\",\n                      children: \"Relu\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 310,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 301,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 299,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Model Type\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 314,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                    value: configuration.model,\n                    disabled: !experiment.self,\n                    onChange: e => {\n                      setConfiguration(state => ({ ...state,\n                        model: e.target.value\n                      }));\n                      {\n                        !changedModel && setChangedModel(true);\n                      }\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      disabled: true,\n                      selected: true,\n                      value: \"\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 322,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"Regression\",\n                      children: \"Regression\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 323,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"Classification\",\n                      children: \"Classification\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 324,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 315,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 313,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 41\n              }, this), experiment.self && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"model-selected\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: model[selectedNode].type\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 330,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Units\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 332,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    value: model[selectedNode].value,\n                    disabled: model[selectedNode].type === \"Input\",\n                    onChange: e => {\n                      setModel(state => {\n                        const stateCopy = [...state];\n                        stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                          value: Number(e.target.value)\n                        };\n                        return stateCopy;\n                      });\n                      setRefreshDiagram(new Date().getTime());\n                      {\n                        !changedModel && setChangedModel(true);\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 333,\n                    columnNumber: 53\n                  }, this), model[selectedNode].type !== \"Output\" && model[selectedNode].type !== \"Input\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Activation\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 349,\n                      columnNumber: 61\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      value: model[selectedNode].activation,\n                      onChange: e => {\n                        setModel(state => {\n                          const stateCopy = [...state];\n                          stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                            activation: e.target.value\n                          };\n                          return stateCopy;\n                        });\n                        setRefreshDiagram(new Date().getTime());\n                        {\n                          !changedModel && setChangedModel(true);\n                        }\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        disabled: true,\n                        selected: true,\n                        value: \"\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 363,\n                        columnNumber: 69\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"Relu\",\n                        children: \"Relu\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 364,\n                        columnNumber: 69\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"Sigmoid\",\n                        children: \"Sigmoid\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 365,\n                        columnNumber: 69\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 350,\n                      columnNumber: 61\n                    }, this)]\n                  }, void 0, true)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 331,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 329,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }, this) : loaded && !exist && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"width-body\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"item-exist\",\n        children: \"Cannot find experiment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(Experiment, \"M747BYRZNo/I6TTAvHTWldAc8Tg=\", false, function () {\n  return [useParams, useParams, useHistory];\n});\n\n_c = Experiment;\nexport default Experiment;\n\nvar _c;\n\n$RefreshReg$(_c, \"Experiment\");","map":{"version":3,"sources":["/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Experiment.jsx"],"names":["React","useState","useEffect","useRef","useParams","useHistory","itemsAPI","globalAPI","VisibilityOffIcon","VisibilityIcon","ModelNode","ClearIcon","AddIcon","RemoveIcon","Experiment","currentUser","loaded","setLoaded","exist","setExist","model","setModel","configuration","setConfiguration","updated","setUpdated","changedSettings","setChangedSettings","changedModel","setChangedModel","disabledTrain","setDisableTrain","date","setDate","visibility","setVisibility","section","setSection","experiment","setExperiment","selectedNode","setSelectedNode","addNode","setAddNode","refreshDiagram","setRefreshDiagram","title","setTitle","modelRef","workspaceID","workspace","experimentID","history","fetchData","get","data","experiments","err","updatedDate","Date","currentDate","getTime","Math","floor","toString","updateVisibility","put","state","updateExperiment","toISOString","deleteExperiment","delete","replace","self","e","target","value","map","node","i","type","length","splice","activation","epochs","trainingSplit","validationSplit","testSplit","maxError","batch","optimiser","stateCopy","Number"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\nimport {useParams, useHistory} from \"react-router-dom\"\nimport itemsAPI from '../API/items'\nimport globalAPI from '../API/global'\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport ModelNode from '../Components/Model-Node';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\n\nconst Experiment = ({currentUser}) => {\n    const [loaded, setLoaded] = useState(false)\n    const [exist, setExist] = useState()\n    const [model, setModel] = useState()\n    const [configuration, setConfiguration] = useState()\n    const [updated, setUpdated] = useState()\n    const [changedSettings, setChangedSettings] = useState(false)\n    const [changedModel, setChangedModel] = useState(false)\n    const [disabledTrain, setDisableTrain] = useState(true)\n    const [date, setDate] = useState()\n    const [visibility, setVisibility] = useState()\n    const [section, setSection] = useState(\"model\")\n    const [experiment, setExperiment] = useState()\n    const [selectedNode, setSelectedNode] = useState(0)\n    const [addNode, setAddNode] = useState(false)\n    const [refreshDiagram, setRefreshDiagram] = useState()\n    const [title, setTitle] = useState(\"\")\n    const modelRef = useRef(null)\n    const workspaceID = useParams().workspace;\n    const experimentID = useParams().experiment;\n    const history = useHistory()\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const experiment = await itemsAPI.get(`/experiment/${experimentID}?workspace=${workspaceID}`);\n\n                setExperiment(experiment.data.data);\n                setUpdated(experiment.data.data.experiments.updated);\n                setTitle(experiment.data.data.experiments.title)\n                setModel(experiment.data.data.experiments.model)\n                setVisibility(experiment.data.data.experiments.visibility)\n                setConfiguration(experiment.data.data.experiments.configuration)\n\n                setExist(true)\n                setLoaded(true)\n            } catch (err) {\n                setExist(false)\n                setLoaded(true)\n            }\n        }\n        fetchData();\n    }, [])    \n\n    useEffect(() => {\n        if (loaded && exist) {\n            const updatedDate = new Date(updated);\n            const currentDate = new Date();\n    \n            if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 365) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 365)).toString()} years ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 30) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) % 30).toString())} months ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600 * 24))).toString()} days ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 3600))).toString()} hours ago`)\n            } else if ((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60) >= 1) {\n                setDate(`Updated ${Math.floor(((currentDate.getTime() - updatedDate.getTime()) / (1000 * 60))).toString()} minutes ago`)\n            } else {\n                setDate(\"Updated just now\")\n            }\n        }\n    }, [loaded, updated])\n\n    const updateVisibility = async () => {\n        try {\n            await itemsAPI.put(`/experiment-visibility/${experimentID}?workspace=${workspaceID}`);\n\n            setVisibility(state => !state)\n        } catch (err) {}\n    }\n\n    const updateExperiment = async () => {\n        try {\n            if (changedModel) {\n                setDisableTrain(false)\n            }\n            setUpdated(new Date().toISOString())\n            setChangedSettings(false)\n            setChangedModel(false)\n        } catch (err) {}\n    }\n\n    const deleteExperiment = async () => {\n        try {\n            await itemsAPI.delete(`/experiment/${experimentID}?workspace=${workspaceID}`)\n\n            history.replace(`/workspace/${workspaceID}`)\n        } catch (err) {}\n    }\n\n    return (\n        <>\n            {loaded && exist ?\n                <div className=\"width-body\">  \n                    <div className=\"item-body\">\n                        <div className=\"item-top\">\n                            <div className=\"item-heading\">\n                                {experiment.self ? \n                                    <input className=\"item-title-input\"\n                                            placeholder=\"Title\" \n                                            value={title}\n                                            onChange={e => {\n                                                setTitle(e.target.value)\n                                                {!changedSettings && setChangedSettings(true)}\n                                            }} /> \n                                : \n                                    <h1>hi</h1>\n                                }\n                            </div>\n                            <div>\n                                <p className=\"item-meta\">{date}</p>\n                                <span />\n                                {experiment.self && \n                                    <>\n                                        {visibility ? \n                                            <VisibilityIcon className=\"item-visibility\" onClick={() => {updateVisibility()}} />\n                                        :\n                                            <VisibilityOffIcon className=\"item-visibility\" onClick={() => {updateVisibility()}} />\n                                        }\n                                    </>\n                                }\n                            </div>\n                            {experiment.self &&\n                                <div className=\"item-middle\">\n                                    <button className=\"dark-grey-button item-delete\"\n                                            onClick={() => {deleteExperiment()}}>Delete</button>\n                                    <button className={`item-save ${!changedSettings && !changedModel ? \"grey-button\" : \"blue-button\"}`}\n                                            disabled={!changedSettings && !changedModel}\n                                            onClick={() => {updateExperiment()}}>Save Changes</button>\n                                </div>\n                            }\n                            <select className=\"item-select\" onChange={e => {setSection(e.target.value)}}>\n                                <option value=\"model\">Model</option>\n                                <option value=\"results\">Results</option>\n                            </select>\n                        </div>\n                        <div className=\"item-bottom\">\n                            {section === \"model\" ? \n                                <div className=\"experiment-modelling-body\">\n                                    <div className=\"experiment-model\">\n                                        <div className=\"model-diagram\" key={refreshDiagram}>\n                                            {model.map((node, i) => {\n                                                return (\n                                                    <div key={i}>\n                                                        <div className={\"model-diagram-node\"}>\n                                                            <div disabled={!experiment.self} onClick={() => {setSelectedNode(i)}}>\n                                                                <ModelNode setSelectedNode={setSelectedNode} type={node.type} value={node.value} selected={i === selectedNode} last={i === model.length-1} />\n                                                            </div>\n                                                            {experiment.self &&\n                                                                <>\n                                                                    {node.type !== \"Input\" &&\n                                                                        <div onClick={() => {{selectedNode === i ?\n                                                                                                setSelectedNode(state => state-1)\n                                                                                            : selectedNode < i ?\n                                                                                                setSelectedNode(state => state)\n                                                                                            : selectedNode > i &&\n                                                                                                <>\n                                                                                                    {selectedNode-i === 1 ?\n                                                                                                        setSelectedNode(state => state-1)\n                                                                                                    :\n                                                                                                        setSelectedNode(i)\n                                                                                                    } \n                                                                                                </>  \n                                                                                            }\n                                                                                            model.splice(i, 1)\n                                                                                            {!changedModel && setChangedModel(true)}\n                                                                                            setRefreshDiagram(new Date().getTime())}}>\n                                                                            <ClearIcon className=\"model-diagram-remove\" />\n                                                                        </div>\n                                                                    }\n                                                                </>\n                                                            }\n                                                        </div>\n                                                        {i === model.length-1 && node.type !== \"Output\" &&\n                                                            <>\n                                                                {addNode ?\n                                                                    <div className=\"model-diagram-add\">\n                                                                        <div onClick={() => {setAddNode(false)}}>\n                                                                            <RemoveIcon className=\"model-diagram-add-icon\" />\n                                                                        </div>\n                                                                        <div className=\"model-diagram-add-options\">\n                                                                            <button onClick={() => {setModel(state => [...state, {\n                                                                                type: \"Dense\",\n                                                                                value: 0,\n                                                                                activation: \"\"\n                                                                            }])\n                                                                            setAddNode(false)\n                                                                            setSelectedNode(state => state + 1)\n                                                                            {!changedModel && setChangedModel(true)}\n                                                                            }}>Dense</button>\n                                                                            <button onClick={() => {setModel(state => [...state, {\n                                                                                type: \"Output\",\n                                                                                value: 0,\n                                                                                activation: \"\"\n                                                                            }])\n                                                                            setAddNode(false)\n                                                                            setSelectedNode(state => state + 1)\n                                                                            {!changedModel && setChangedModel(true)}\n                                                                            }}>Output</button>\n                                                                        </div>\n                                                                    </div>\n                                                                :\n                                                                    <>\n                                                                        {experiment.self &&\n                                                                            <div onClick={() => {setAddNode(true)}}>\n                                                                                <AddIcon className=\"model-diagram-add-icon\" />\n                                                                            </div>\n                                                                        }\n                                                                    </>\n                                                                }\n                                                            </>\n                                                        }\n                                                    </div>\n                                                )\n                                            })}\n                                            <div ref={modelRef} />\n                                        </div>\n                                    </div>\n                                    <div className=\"model-configuration\">\n                                        {experiment.self &&\n                                            <button className={disabledTrain ? \"grey-button\" : \"blue-button\"}\n                                                    disabled={disabledTrain}\n                                                    onClick={() => {}}>Train</button>\n                                        }\n                                        <div className=\"model-configuration-option\">\n                                            <div>\n                                                <label>Epochs</label>\n                                                <input value={configuration.epochs} \n                                                        disabled={!experiment.self}\n                                                        onChange={e => {setConfiguration(state => ({\n                                                            ...state,\n                                                            epochs: e.target.value\n                                                        }))\n                                                        {!changedModel && setChangedModel(true)}}} />\n                                            </div>\n                                            <div>\n                                                <label>Training Split</label>\n                                                <input value={configuration.trainingSplit} \n                                                        disabled={!experiment.self}\n                                                        onChange={e => {setConfiguration(state => ({\n                                                            ...state,\n                                                            trainingSplit: e.target.value\n                                                        }))\n                                                        {!changedModel && setChangedModel(true)}}} />\n                                            </div>\n                                            <div>\n                                                <label>Validation Split</label>\n                                                <input value={configuration.validationSplit} \n                                                        disabled={!experiment.self}\n                                                        onChange={e => {setConfiguration(state => ({\n                                                            ...state,\n                                                            validationSplit: e.target.value\n                                                        }))\n                                                        {!changedModel && setChangedModel(true)}}} />\n                                            </div>\n                                            <div>\n                                                <label>Test Split</label>\n                                                <input value={configuration.testSplit} \n                                                        disabled={!experiment.self}\n                                                        onChange={e => {setConfiguration(state => ({\n                                                            ...state,\n                                                            testSplit: e.target.value\n                                                        }))\n                                                        {!changedModel && setChangedModel(true)}}} />\n                                            </div>\n                                            <div>\n                                                <label>Maximum Error</label>\n                                                <input value={configuration.maxError} \n                                                        disabled={!experiment.self}\n                                                        onChange={e => {setConfiguration(state => ({\n                                                            ...state,\n                                                            maxError: e.target.value\n                                                        }))\n                                                        {!changedModel && setChangedModel(true)}}} />\n                                            </div>\n                                            <div>\n                                                <label>Batch Size</label>\n                                                <input value={configuration.batch} \n                                                        disabled={!experiment.self}\n                                                        onChange={e => {setConfiguration(state => ({\n                                                            ...state,\n                                                            batch: e.target.value\n                                                        }))\n                                                        {!changedModel && setChangedModel(true)}}} />\n                                            </div>\n                                            <div>\n                                                <label>Optimiser</label>\n                                                <select value={configuration.optimiser} \n                                                        disabled={!experiment.self}\n                                                        onChange={e => {setConfiguration(state => ({\n                                                            ...state,\n                                                            optimiser: e.target.value\n                                                        }))\n                                                        {!changedModel && setChangedModel(true)}}}>\n                                                    <option disabled selected value=\"\"></option>\n                                                    <option value=\"Sigmoid\">Sigmoid</option>\n                                                    <option value=\"Relu\">Relu</option>\n                                                </select>\n                                            </div>\n                                            <div>\n                                                <label>Model Type</label>\n                                                <select value={configuration.model}\n                                                        disabled={!experiment.self} \n                                                        onChange={e => {setConfiguration(state => ({\n                                                            ...state,\n                                                            model: e.target.value\n                                                        }))\n                                                        {!changedModel && setChangedModel(true)}}}>\n                                                    <option disabled selected value=\"\"></option>\n                                                    <option value=\"Regression\">Regression</option>\n                                                    <option value=\"Classification\">Classification</option>\n                                                </select>\n                                            </div>\n                                        </div>\n                                        {experiment.self && \n                                            <div className=\"model-selected\">\n                                                <p>{model[selectedNode].type}</p>\n                                                <div>\n                                                    <label>Units</label>\n                                                    <input value={model[selectedNode].value} \n                                                            disabled={model[selectedNode].type === \"Input\"}\n                                                            onChange={e => {setModel(state => {\n                                                                                const stateCopy = [...state]\n                                                                            \n                                                                                stateCopy[selectedNode] = {\n                                                                                    ...stateCopy[selectedNode],\n                                                                                    value: Number(e.target.value)\n                                                                                }\n                                                                            \n                                                                                return stateCopy\n                                                                            })\n                                                                            setRefreshDiagram(new Date().getTime())\n                                                                            {!changedModel && setChangedModel(true)}}} />\n                                                    {model[selectedNode].type !== \"Output\" && model[selectedNode].type !== \"Input\" &&\n                                                        <>\n                                                            <label>Activation</label>\n                                                            <select value={model[selectedNode].activation} \n                                                                    onChange={e => {setModel(state => {\n                                                                                        const stateCopy = [...state]\n                                                                                    \n                                                                                        stateCopy[selectedNode] = {\n                                                                                            ...stateCopy[selectedNode],\n                                                                                            activation: e.target.value\n                                                                                        }\n                                                                                    \n                                                                                        return stateCopy\n                                                                                    })\n                                                                                    setRefreshDiagram(new Date().getTime())\n                                                                                    {!changedModel && setChangedModel(true)}}}>\n                                                                    <option disabled selected value=\"\"></option>\n                                                                    <option value=\"Relu\">Relu</option>\n                                                                    <option value=\"Sigmoid\">Sigmoid</option>\n                                                            </select>\n                                                        </>\n                                                    }  \n                                                </div>\n                                            </div>\n                                        }\n                                    </div>\n                                </div>\n                            :\n                                <div></div>\n                            }\n                        </div>\n                    </div>\n                </div>\n            : loaded && !exist &&\n                <div className=\"width-body\">  \n                    <p className=\"item-exist\">Cannot find experiment</p>\n                </div>\n            }   \n        </>\n    )\n}\n\nexport default Experiment"]},"metadata":{},"sourceType":"module"}