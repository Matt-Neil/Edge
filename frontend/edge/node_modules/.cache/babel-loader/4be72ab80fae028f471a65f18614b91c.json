{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Workspace.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport usersAPI from '../API/users';\nimport itemsAPI from '../API/items';\nimport imageAPI from '../API/images';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport ModelNode from '../Components/Model-Node';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Workspace = _ref => {\n  _s();\n\n  let {\n    currentUser,\n    type\n  } = _ref;\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [visibility, setVisibility] = useState(false);\n  const [start, setStart] = useState(0);\n  const [end, setEnd] = useState(30);\n  const [page, setPage] = useState(1);\n  const [image, setImage] = useState();\n  const [dataID, setDataID] = useState(\"\");\n  const [uploadedDataset, setUploadedDataset] = useState();\n  const [workspaces, setWorkspaces] = useState([]);\n  const [images, setImages] = useState([]);\n  const [assignedLabels, setAssignedLabels] = useState([]);\n  const [refreshData, setRefreshData] = useState();\n  const [refreshDiagram, setRefreshDiagram] = useState();\n  const [model, setModel] = useState([]);\n  const [dataset, setDataset] = useState();\n  const [selectedNode, setSelectedNode] = useState(0);\n  const [configuration, setConfiguration] = useState({\n    epochs: \"\",\n    training_split: \"\",\n    validation_split: \"\",\n    test_split: \"\",\n    improvement: \"\",\n    patience: \"\",\n    batch: \"\",\n    lr_scheduler: false,\n    optimiser: \"\",\n    loss: \"\"\n  });\n  const [addNode, setAddNode] = useState(false);\n  const [results, setResults] = useState();\n  const [experimentID, setExperimentID] = useState();\n  const [loaded, setLoaded] = useState(false);\n  const [disableCreate, setDisabledCreate] = useState(false);\n  const [disableTrain, setDisabledTrain] = useState(true);\n  const [displayPublic, setDisplayPublic] = useState(false);\n  const [displayExist, setDisplayExist] = useState(false);\n  const modelRef = useRef(null);\n  const publicInterval = useRef(0);\n  const existInterval = useRef(0);\n  const history = useHistory();\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const workspaces = await usersAPI.get(\"/created?type=workspace\");\n        workspaces.data.data.map(workspace => {\n          setWorkspaces(previous => [...previous, workspace.title]);\n        });\n        setLoaded(true);\n      } catch (err) {}\n    };\n\n    fetchData();\n  }, []);\n\n  const displayPublicInterval = () => {\n    clearInterval(publicInterval.current);\n    setDisplayPublic(true);\n    publicInterval.current = setInterval(() => {\n      setDisplayPublic(false);\n    }, 1200);\n    return () => {\n      clearInterval(publicInterval.current);\n    };\n  };\n\n  const displayExistInterval = () => {\n    clearInterval(existInterval.current);\n    setDisplayExist(true);\n    existInterval.current = setInterval(() => {\n      setDisplayExist(false);\n    }, 1200);\n    return () => {\n      clearInterval(existInterval.current);\n    };\n  };\n\n  const previousPage = () => {\n    if (page > 1) {\n      setStart((page - 2) * 30);\n      setEnd((page - 1) * 30);\n      setPage(state => state - 1);\n      setRefreshData(new Date().getTime());\n    }\n  };\n\n  const nextPage = () => {\n    if (page * 30 < images.length && images.length > 30) {\n      setPage(state => state + 1);\n      setStart(page * 30);\n      setEnd((page + 1) * 30);\n      setRefreshData(new Date().getTime());\n    }\n  };\n\n  const existingDataset = async () => {\n    try {\n      const checkPublic = await itemsAPI.get(`/check-public-dataset?datafile=${dataID}`);\n\n      if (checkPublic.data.success && checkPublic.data.data.visibility) {\n        fetch(`http://127.0.0.1:5000/files/${dataID}/labels.json`).then(response => response.json()).then(images => {\n          images.map(image => {\n            setImages(state => [...state, image.filename]);\n            setAssignedLabels(state => [...state, image.label]);\n          });\n          setUploadedDataset(checkPublic.data.data);\n          setModel([{\n            type: \"Input\",\n            value: 1,\n            activation: \"\"\n          }]);\n        });\n      } else if (checkPublic.data.success && !checkPublic.data.data.visibility) {\n        displayPublicInterval();\n      } else {\n        displayExistInterval();\n      }\n    } catch (err) {}\n  };\n\n  const uploadImage = async () => {\n    setDisabledCreate(true);\n\n    if (image) {\n      const formImage = new FormData();\n      formImage.append('image', image);\n\n      try {\n        const imageResponse = await imageAPI.post(\"/upload\", formImage);\n        uploadData(imageResponse.data.data);\n      } catch (err) {}\n    } else {\n      uploadData(\"default.png\");\n    }\n  };\n\n  const uploadData = async imageName => {\n    try {\n      const workspaceResponse = await itemsAPI.post(\"/\", {\n        title: title,\n        dataset: uploadedDataset._id,\n        creator: currentUser.id,\n        description: description,\n        picture: imageName,\n        upvotes: [],\n        bookmarks: [],\n        updated: new Date().toISOString(),\n        visibility: visibility,\n        type: \"workspace\"\n      });\n      history.push(`/workspace/${workspaceResponse.data.data}`);\n    } catch (err) {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loaded && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: type === \"create\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sidebar\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"create-item-title\",\n            placeholder: \"Title\",\n            onChange: e => {\n              setTitle(e.target.value);\n            },\n            value: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"create-item-description\",\n            placeholder: \"Description\",\n            onChange: e => {\n              setDescription(e.target.value);\n            },\n            value: description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-item-setup\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"create-item-setup-label\",\n              children: \"Picture\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"create-item-setup-input\",\n              type: \"file\",\n              name: \"image\",\n              onChange: e => {\n                setImage(e.target.files[0]);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-item-setup\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"create-item-setup-label\",\n              children: \"Public?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              onChange: () => {\n                setVisibility(previous => !previous);\n              },\n              checked: visibility\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sidebar-divided\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"create-workspace-import-existing\",\n            placeholder: \"Dataset ID\",\n            onChange: e => {\n              setDataID(e.target.value);\n            },\n            value: dataID\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 33\n          }, this), displayPublic && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"create-item-data-notification\",\n            children: \"Dataset not public\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 51\n          }, this), displayExist && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"create-item-data-notification\",\n            children: \"Dataset does not exist\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 50\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inner\",\n          children: type === \"create\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"view-items-top\",\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                children: \"Create Workspace\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"blue-button\",\n                disabled: disableTrain,\n                onClick: () => {\n                  uploadImage();\n                },\n                children: \"Train\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 41\n            }, this), model.length !== 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"create-modelling-body\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-model\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"create-model-diagram\",\n                  children: [model.map((node, i) => {\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"create-model-diagram-node\",\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          onClick: () => {\n                            setSelectedNode(i);\n                          },\n                          children: /*#__PURE__*/_jsxDEV(ModelNode, {\n                            setSelectedNode: setSelectedNode,\n                            type: node.type,\n                            value: node.value,\n                            selected: i === selectedNode,\n                            last: i === model.length - 1\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 210,\n                            columnNumber: 77\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 209,\n                          columnNumber: 73\n                        }, this), node.type !== \"Input\" && /*#__PURE__*/_jsxDEV(\"div\", {\n                          onClick: () => {\n                            {\n                              selectedNode === i ? setSelectedNode(state => state - 1) : selectedNode < i ? setSelectedNode(state => state) : selectedNode > i && /*#__PURE__*/_jsxDEV(_Fragment, {\n                                children: selectedNode - i === 1 ? setSelectedNode(state => state - 1) : setSelectedNode(i)\n                              }, void 0, false);\n                            }\n                            model.splice(i, 1);\n                            setRefreshDiagram(new Date().getTime());\n                          },\n                          children: /*#__PURE__*/_jsxDEV(ClearIcon, {\n                            className: \"create-model-diagram-remove\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 228,\n                            columnNumber: 81\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 213,\n                          columnNumber: 77\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 208,\n                        columnNumber: 69\n                      }, this), i === model.length - 1 && node.type !== \"Output\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                        children: addNode ? /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"create-model-diagram-add\",\n                          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                            onClick: () => {\n                              setAddNode(false);\n                            },\n                            children: /*#__PURE__*/_jsxDEV(RemoveIcon, {\n                              className: \"create-model-diagram-add-icon\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 237,\n                              columnNumber: 89\n                            }, this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 236,\n                            columnNumber: 85\n                          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                            className: \"create-model-diagram-add-options\",\n                            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                              onClick: () => {\n                                setModel(state => [...state, {\n                                  type: \"Dense\",\n                                  value: 0,\n                                  activation: \"\"\n                                }]);\n                                setSelectedNode(model.length);\n                                setAddNode(false);\n                              },\n                              children: \"Dense\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 240,\n                              columnNumber: 89\n                            }, this), model.length > 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n                              onClick: () => {\n                                {\n                                  dataset.labels.length === 2 ? setModel(state => [...state, {\n                                    type: \"Output\",\n                                    value: 1,\n                                    activation: \"\"\n                                  }]) : setModel(state => [...state, {\n                                    type: \"Output\",\n                                    value: dataset.labels.length,\n                                    activation: \"\"\n                                  }]);\n                                }\n                                setSelectedNode(model.length);\n                                setAddNode(false);\n                              },\n                              children: \"Output\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 249,\n                              columnNumber: 93\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 239,\n                            columnNumber: 85\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 235,\n                          columnNumber: 81\n                        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                          onClick: () => {\n                            setAddNode(true);\n                          },\n                          children: /*#__PURE__*/_jsxDEV(AddIcon, {\n                            className: \"create-model-diagram-add-icon\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 271,\n                            columnNumber: 85\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 270,\n                          columnNumber: 81\n                        }, this)\n                      }, void 0, false)]\n                    }, i, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 207,\n                      columnNumber: 65\n                    }, this);\n                  }), /*#__PURE__*/_jsxDEV(\"div\", {\n                    ref: modelRef\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 279,\n                    columnNumber: 57\n                  }, this)]\n                }, refreshDiagram, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 204,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"create-model-selected\",\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    children: model[selectedNode].type\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 282,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Units\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 283,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    value: model[selectedNode].value,\n                    disabled: model[selectedNode].type === \"Input\" || model[selectedNode].type === \"Output\",\n                    onChange: e => {\n                      setModel(state => {\n                        const stateCopy = [...state];\n                        stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                          value: Number(e.target.value)\n                        };\n                        return stateCopy;\n                      });\n                      setRefreshDiagram(new Date().getTime());\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 284,\n                    columnNumber: 57\n                  }, this), model[selectedNode].type !== \"Input\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Activation\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 299,\n                      columnNumber: 65\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      value: model[selectedNode].activation,\n                      onChange: e => {\n                        setModel(state => {\n                          const stateCopy = [...state];\n                          stateCopy[selectedNode] = { ...stateCopy[selectedNode],\n                            activation: e.target.value\n                          };\n                          return stateCopy;\n                        });\n                        setRefreshDiagram(new Date().getTime());\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        disabled: true,\n                        defaultValue: true,\n                        value: \"\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 312,\n                        columnNumber: 73\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"sigmoid\",\n                        children: \"Sigmoid\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 313,\n                        columnNumber: 73\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"softmax\",\n                        children: \"Softmax\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 314,\n                        columnNumber: 73\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"softplus\",\n                        children: \"Softplus\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 315,\n                        columnNumber: 73\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"softsign\",\n                        children: \"Softsign\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 316,\n                        columnNumber: 73\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"swish\",\n                        children: \"Swish\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 317,\n                        columnNumber: 73\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"selu\",\n                        children: \"Selu\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 318,\n                        columnNumber: 73\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"tanh\",\n                        children: \"Tanh\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 319,\n                        columnNumber: 73\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"elu\",\n                        children: \"Elu\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 320,\n                        columnNumber: 73\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"exponential\",\n                        children: \"Exponential\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 321,\n                        columnNumber: 73\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"gelu\",\n                        children: \"Gelu\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 322,\n                        columnNumber: 73\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"hard_sigmoid\",\n                        children: \"Hard Sigmoid\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 323,\n                        columnNumber: 73\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"linear\",\n                        children: \"Linear\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 324,\n                        columnNumber: 73\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"relu\",\n                        children: \"Relu\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 325,\n                        columnNumber: 73\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 300,\n                      columnNumber: 65\n                    }, this)]\n                  }, void 0, true)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 281,\n                  columnNumber: 53\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"create-model-configuration\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"create-model-configuration-option\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Epochs\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 334,\n                      columnNumber: 61\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: configuration.epochs,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          epochs: e.target.value\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 335,\n                      columnNumber: 61\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 333,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Training Split\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 341,\n                      columnNumber: 61\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: configuration.training_split,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          training_split: e.target.value\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 342,\n                      columnNumber: 61\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 340,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Validation Split\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 348,\n                      columnNumber: 61\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: configuration.validation_split,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          validation_split: e.target.value\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 349,\n                      columnNumber: 61\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 347,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Test Split\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 355,\n                      columnNumber: 61\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: configuration.test_split,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          test_split: e.target.value\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 356,\n                      columnNumber: 61\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 354,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Minimum Improvement\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 362,\n                      columnNumber: 61\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: configuration.improvement,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          improvement: e.target.value\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 363,\n                      columnNumber: 61\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 361,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Patience\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 369,\n                      columnNumber: 61\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: configuration.patience,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          patience: e.target.value\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 370,\n                      columnNumber: 61\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 368,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Batch Size\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 376,\n                      columnNumber: 61\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      value: configuration.batch,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          batch: e.target.value\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 377,\n                      columnNumber: 61\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 375,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Learning Rate Scheduler\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 383,\n                      columnNumber: 61\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      className: \"create-model-configuration-option-checkbox\",\n                      type: \"checkbox\",\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          lr_scheduler: !configuration.lr_scheduler\n                        }));\n                      },\n                      checked: configuration.lr_scheduler\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 384,\n                      columnNumber: 61\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 382,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Optimiser\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 393,\n                      columnNumber: 61\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      value: configuration.optimiser,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          optimiser: e.target.value\n                        }));\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        disabled: true,\n                        defaultValue: true,\n                        value: \"\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 398,\n                        columnNumber: 65\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"Adadelta\",\n                        children: \"Adadelta\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 399,\n                        columnNumber: 65\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"Adagrad\",\n                        children: \"Adagrad\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 400,\n                        columnNumber: 65\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"Adam\",\n                        children: \"Adam\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 401,\n                        columnNumber: 65\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"Adamax\",\n                        children: \"Adamax\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 402,\n                        columnNumber: 65\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"Ftrl\",\n                        children: \"Ftrl\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 403,\n                        columnNumber: 65\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"Nadam\",\n                        children: \"Nadam\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 404,\n                        columnNumber: 65\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"RMSprop\",\n                        children: \"RMSprop\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 405,\n                        columnNumber: 65\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"SGD\",\n                        children: \"SGD\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 406,\n                        columnNumber: 65\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 394,\n                      columnNumber: 61\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 392,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Loss\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 410,\n                      columnNumber: 61\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      value: configuration.loss,\n                      onChange: e => {\n                        setConfiguration(state => ({ ...state,\n                          loss: e.target.value\n                        }));\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        disabled: true,\n                        defaultValue: true,\n                        value: \"\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 415,\n                        columnNumber: 65\n                      }, this), dataset.labels.length === 2 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                          value: \"binary_crossentropy\",\n                          children: \"Binary Crossentropy\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 418,\n                          columnNumber: 73\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          value: \"hinge\",\n                          children: \"Hinge\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 419,\n                          columnNumber: 73\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          value: \"squared_hinge\",\n                          children: \"Squared Hinge\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 420,\n                          columnNumber: 73\n                        }, this)]\n                      }, void 0, true), dataset.labels.length > 2 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                          value: \"categorical_crossentropy\",\n                          children: \"Categorical Crossentropy\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 425,\n                          columnNumber: 73\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          value: \"sparse_categorical_crossentropy\",\n                          children: \"Sparse Categorical Crossentropy\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 426,\n                          columnNumber: 73\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          value: \"kl_divergence\",\n                          children: \"Kullback Leibler Divergence\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 427,\n                          columnNumber: 73\n                        }, this)]\n                      }, void 0, true)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 411,\n                      columnNumber: 61\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 409,\n                    columnNumber: 57\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 332,\n                  columnNumber: 53\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 331,\n                columnNumber: 49\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n    }, void 0, false)\n  }, void 0, false);\n};\n\n_s(Workspace, \"iuN3B/iRIxiEefBW537yrvx/Gm8=\", false, function () {\n  return [useHistory];\n});\n\n_c = Workspace;\nexport default Workspace;\n\nvar _c;\n\n$RefreshReg$(_c, \"Workspace\");","map":{"version":3,"sources":["/Users/matt/Documents/GitHub/Edge/frontend/edge/src/Pages/Workspace.jsx"],"names":["React","useState","useEffect","useRef","useHistory","usersAPI","itemsAPI","imageAPI","ArrowForwardIosIcon","ArrowBackIosNewIcon","ModelNode","ClearIcon","AddIcon","RemoveIcon","Workspace","currentUser","type","title","setTitle","description","setDescription","visibility","setVisibility","start","setStart","end","setEnd","page","setPage","image","setImage","dataID","setDataID","uploadedDataset","setUploadedDataset","workspaces","setWorkspaces","images","setImages","assignedLabels","setAssignedLabels","refreshData","setRefreshData","refreshDiagram","setRefreshDiagram","model","setModel","dataset","setDataset","selectedNode","setSelectedNode","configuration","setConfiguration","epochs","training_split","validation_split","test_split","improvement","patience","batch","lr_scheduler","optimiser","loss","addNode","setAddNode","results","setResults","experimentID","setExperimentID","loaded","setLoaded","disableCreate","setDisabledCreate","disableTrain","setDisabledTrain","displayPublic","setDisplayPublic","displayExist","setDisplayExist","modelRef","publicInterval","existInterval","history","fetchData","get","data","map","workspace","previous","err","displayPublicInterval","clearInterval","current","setInterval","displayExistInterval","previousPage","state","Date","getTime","nextPage","length","existingDataset","checkPublic","success","fetch","then","response","json","filename","label","value","activation","uploadImage","formImage","FormData","append","imageResponse","post","uploadData","imageName","workspaceResponse","_id","creator","id","picture","upvotes","bookmarks","updated","toISOString","push","e","target","files","node","i","splice","labels","stateCopy","Number"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\nimport {useHistory} from \"react-router-dom\"\nimport usersAPI from '../API/users'\nimport itemsAPI from '../API/items'\nimport imageAPI from '../API/images'\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport ModelNode from '../Components/Model-Node';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\n\nconst Workspace = ({currentUser, type}) => {\n    const [title, setTitle] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [visibility, setVisibility] = useState(false);\n    const [start, setStart] = useState(0)\n    const [end, setEnd] = useState(30)\n    const [page, setPage] = useState(1)\n    const [image, setImage] = useState();\n    const [dataID, setDataID] = useState(\"\")\n    const [uploadedDataset, setUploadedDataset] = useState()\n    const [workspaces, setWorkspaces] = useState([]);\n    const [images, setImages] = useState([])\n    const [assignedLabels, setAssignedLabels] = useState([])\n    const [refreshData, setRefreshData] = useState()\n    const [refreshDiagram, setRefreshDiagram] = useState()\n    const [model, setModel] = useState([])\n    const [dataset, setDataset] = useState()\n    const [selectedNode, setSelectedNode] = useState(0)\n    const [configuration, setConfiguration] = useState({epochs: \"\", training_split: \"\", validation_split: \"\", test_split: \"\", improvement: \"\",\n                                                        patience: \"\", batch: \"\", lr_scheduler: false, optimiser: \"\", loss: \"\"})\n    const [addNode, setAddNode] = useState(false)\n    const [results, setResults] = useState()\n    const [experimentID, setExperimentID] = useState()\n    const [loaded, setLoaded] = useState(false);\n    const [disableCreate, setDisabledCreate] = useState(false)\n    const [disableTrain, setDisabledTrain] = useState(true)\n    const [displayPublic, setDisplayPublic] = useState(false)\n    const [displayExist, setDisplayExist] = useState(false)\n    const modelRef = useRef(null)\n    const publicInterval = useRef(0)\n    const existInterval = useRef(0)\n    const history = useHistory();\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const workspaces = await usersAPI.get(\"/created?type=workspace\");\n\n                workspaces.data.data.map((workspace) => {\n                    setWorkspaces(previous => [...previous, workspace.title]);\n                })\n                setLoaded(true);\n            } catch (err) {}\n        }\n        fetchData();\n    }, [])\n\n    const displayPublicInterval = () => {\n        clearInterval(publicInterval.current)\n        setDisplayPublic(true);\n        publicInterval.current = setInterval(() => {\n            setDisplayPublic(false);\n        }, 1200)\n        return ()=> {clearInterval(publicInterval.current)};\n    }\n\n    const displayExistInterval = () => {\n        clearInterval(existInterval.current)\n        setDisplayExist(true);\n        existInterval.current = setInterval(() => {\n            setDisplayExist(false);\n        }, 1200)\n        return ()=> {clearInterval(existInterval.current)};\n    }\n\n    const previousPage = () => {\n        if (page > 1) {\n            setStart((page-2)*30)\n            setEnd((page-1)*30)\n            setPage(state => state-1)\n            setRefreshData(new Date().getTime())\n        }\n    }\n    \n    const nextPage = () => {\n        if (page*30 < images.length && images.length > 30) {\n            setPage(state => state+1)\n            setStart((page)*30)\n            setEnd((page+1)*30)\n            setRefreshData(new Date().getTime())\n        }\n    }\n\n    const existingDataset = async () => {\n        try {\n            const checkPublic = await itemsAPI.get(`/check-public-dataset?datafile=${dataID}`)\n    \n            if (checkPublic.data.success && checkPublic.data.data.visibility) {\n                fetch(`http://127.0.0.1:5000/files/${dataID}/labels.json`)\n                        .then(response => response.json())\n                        .then(images => {\n                            images.map(image => {\n                                setImages(state => [...state, image.filename])\n                                setAssignedLabels(state => [...state, image.label])\n                            })\n                            setUploadedDataset(checkPublic.data.data)\n                            setModel([{type: \"Input\", value: 1, activation: \"\"}])\n                        })\n            } else if (checkPublic.data.success && !checkPublic.data.data.visibility) {\n                displayPublicInterval()\n            } else {\n                displayExistInterval()\n            }\n        } catch (err) {}\n    }\n\n    const uploadImage = async () => {\n        setDisabledCreate(true)\n\n        if (image) {\n            const formImage = new FormData();\n            formImage.append('image', image);\n\n            try {\n                const imageResponse = await imageAPI.post(\"/upload\", formImage);\n\n                uploadData(imageResponse.data.data)\n            } catch (err) {}\n        } else {\n            uploadData(\"default.png\")\n        }\n    }\n\n    const uploadData = async (imageName) => {\n        try {\n            const workspaceResponse = await itemsAPI.post(\"/\", {\n                title: title,\n                dataset: uploadedDataset._id,\n                creator: currentUser.id,\n                description: description,\n                picture: imageName,\n                upvotes: [],\n                bookmarks: [],\n                updated: new Date().toISOString(),\n                visibility: visibility,\n                type: \"workspace\"\n            });\n\n            history.push(`/workspace/${workspaceResponse.data.data}`)\n        } catch (err) {}\n    }\n\n    return (\n        <>\n            {loaded &&\n                <>\n                    {type === \"create\" ?\n                        <div className=\"main-body\">\n                            <div className=\"sidebar\">\n                                <input className=\"create-item-title\"\n                                        placeholder=\"Title\"\n                                        onChange={e => {setTitle(e.target.value)}}\n                                        value={title} />\n                                <textarea className=\"create-item-description\"\n                                            placeholder=\"Description\"\n                                            onChange={e => {setDescription(e.target.value)}}\n                                            value={description} />\n                                <div className=\"create-item-setup\">\n                                    <label className=\"create-item-setup-label\">Picture</label>\n                                    <input className=\"create-item-setup-input\"\n                                            type=\"file\" \n                                            name=\"image\" \n                                            onChange={e => {setImage(e.target.files[0])}} />\n                                </div>\n                                <div className=\"create-item-setup\">\n                                    <label className=\"create-item-setup-label\">Public?</label>\n                                    <input type=\"checkbox\" \n                                            onChange={() => {setVisibility(previous => !previous)}}\n                                            checked={visibility} />\n                                </div>\n                                <div className=\"sidebar-divided\" />\n                                <input className=\"create-workspace-import-existing\"\n                                        placeholder=\"Dataset ID\"\n                                        onChange={e => {setDataID(e.target.value)}}\n                                        value={dataID} />\n                                {displayPublic && <p className=\"create-item-data-notification\">Dataset not public</p>}\n                                {displayExist && <p className=\"create-item-data-notification\">Dataset does not exist</p>}\n                            </div>\n                            <div className=\"inner\">\n                                {type === \"create\" &&\n                                    <>\n                                        <div className=\"view-items-top\">\n                                            <h1>Create Workspace</h1>\n                                            <span />\n                                            <button className=\"blue-button\"\n                                                    disabled={disableTrain}\n                                                    onClick={() => {uploadImage()}}>Train</button>\n                                        </div>\n                                        {model.length !== 0 &&\n                                            <div className=\"create-modelling-body\">\n                                                <div className=\"create-model\">\n                                                    <div className=\"create-model-diagram\" key={refreshDiagram}>\n                                                        {model.map((node, i) => {\n                                                            return (\n                                                                <div key={i}>\n                                                                    <div className={\"create-model-diagram-node\"}>\n                                                                        <div onClick={() => {setSelectedNode(i)}}>\n                                                                            <ModelNode setSelectedNode={setSelectedNode} type={node.type} value={node.value} selected={i === selectedNode} last={i === model.length-1} />\n                                                                        </div>\n                                                                        {node.type !== \"Input\" &&\n                                                                            <div onClick={() => {{selectedNode === i ?\n                                                                                                    setSelectedNode(state => state-1)\n                                                                                                : selectedNode < i ?\n                                                                                                    setSelectedNode(state => state)\n                                                                                                : selectedNode > i &&\n                                                                                                    <>\n                                                                                                        {selectedNode-i === 1 ?\n                                                                                                            setSelectedNode(state => state-1)\n                                                                                                        :\n                                                                                                            setSelectedNode(i)\n                                                                                                        } \n                                                                                                    </>  \n                                                                                                }\n                                                                                                model.splice(i, 1)\n                                                                                                setRefreshDiagram(new Date().getTime())}}>\n                                                                                <ClearIcon className=\"create-model-diagram-remove\" />\n                                                                            </div>\n                                                                        }\n                                                                    </div>\n                                                                    {i === model.length-1 && node.type !== \"Output\" &&\n                                                                        <>\n                                                                            {addNode ?\n                                                                                <div className=\"create-model-diagram-add\">\n                                                                                    <div onClick={() => {setAddNode(false)}}>\n                                                                                        <RemoveIcon className=\"create-model-diagram-add-icon\" />\n                                                                                    </div>\n                                                                                    <div className=\"create-model-diagram-add-options\">\n                                                                                        <button onClick={() => {setModel(state => [...state, {\n                                                                                            type: \"Dense\",\n                                                                                            value: 0,\n                                                                                            activation: \"\"\n                                                                                        }])\n                                                                                        setSelectedNode(model.length)\n                                                                                        setAddNode(false)\n                                                                                        }}>Dense</button>\n                                                                                        {model.length > 1 &&\n                                                                                            <button onClick={() => {\n                                                                                                {dataset.labels.length === 2 ?\n                                                                                                    setModel(state => [...state, {\n                                                                                                        type: \"Output\",\n                                                                                                        value: 1,\n                                                                                                        activation: \"\"\n                                                                                                    }])\n                                                                                                :\n                                                                                                    setModel(state => [...state, {\n                                                                                                        type: \"Output\",\n                                                                                                        value: dataset.labels.length,\n                                                                                                        activation: \"\"\n                                                                                                    }])\n                                                                                                }\n                                                                                            setSelectedNode(model.length)\n                                                                                            setAddNode(false)\n                                                                                            }}>Output</button>\n                                                                                        }\n                                                                                    </div>\n                                                                                </div>\n                                                                            :\n                                                                                <div onClick={() => {setAddNode(true)}}>\n                                                                                    <AddIcon className=\"create-model-diagram-add-icon\" />\n                                                                                </div>\n                                                                            }\n                                                                        </>\n                                                                    }\n                                                                </div>\n                                                            )\n                                                        })}\n                                                        <div ref={modelRef} />\n                                                    </div>\n                                                    <div className=\"create-model-selected\">\n                                                        <p>{model[selectedNode].type}</p>\n                                                        <label>Units</label>\n                                                        <input value={model[selectedNode].value} \n                                                                disabled={model[selectedNode].type === \"Input\" || model[selectedNode].type === \"Output\"}\n                                                                onChange={e => {setModel(state => {\n                                                                                    const stateCopy = [...state]\n                                                                                \n                                                                                    stateCopy[selectedNode] = {\n                                                                                        ...stateCopy[selectedNode],\n                                                                                        value: Number(e.target.value)\n                                                                                    }\n                                                                                \n                                                                                    return stateCopy\n                                                                                })\n                                                                                setRefreshDiagram(new Date().getTime())}} />\n                                                        {model[selectedNode].type !== \"Input\" &&\n                                                            <>\n                                                                <label>Activation</label>\n                                                                <select value={model[selectedNode].activation} \n                                                                        onChange={e => {setModel(state => {\n                                                                                            const stateCopy = [...state]\n                                                                                        \n                                                                                            stateCopy[selectedNode] = {\n                                                                                                ...stateCopy[selectedNode],\n                                                                                                activation: e.target.value\n                                                                                            }\n                                                                                        \n                                                                                            return stateCopy\n                                                                                        })\n                                                                                        setRefreshDiagram(new Date().getTime())}}>\n                                                                        <option disabled defaultValue value=\"\"></option>\n                                                                        <option value=\"sigmoid\">Sigmoid</option>\n                                                                        <option value=\"softmax\">Softmax</option>\n                                                                        <option value=\"softplus\">Softplus</option>\n                                                                        <option value=\"softsign\">Softsign</option>\n                                                                        <option value=\"swish\">Swish</option>\n                                                                        <option value=\"selu\">Selu</option>\n                                                                        <option value=\"tanh\">Tanh</option>\n                                                                        <option value=\"elu\">Elu</option>\n                                                                        <option value=\"exponential\">Exponential</option>\n                                                                        <option value=\"gelu\">Gelu</option>\n                                                                        <option value=\"hard_sigmoid\">Hard Sigmoid</option>\n                                                                        <option value=\"linear\">Linear</option>\n                                                                        <option value=\"relu\">Relu</option>\n                                                                </select>\n                                                            </>\n                                                        }  \n                                                    </div>\n                                                </div>\n                                                <div className=\"create-model-configuration\">\n                                                    <div className=\"create-model-configuration-option\">\n                                                        <div>\n                                                            <label>Epochs</label>\n                                                            <input value={configuration.epochs} onChange={e => {setConfiguration(state => ({\n                                                                                                                    ...state,\n                                                                                                                    epochs: e.target.value\n                                                                                                                }))}} />\n                                                        </div>\n                                                        <div>\n                                                            <label>Training Split</label>\n                                                            <input value={configuration.training_split} onChange={e => {setConfiguration(state => ({\n                                                                                                                    ...state,\n                                                                                                                    training_split: e.target.value\n                                                                                                                }))}} />\n                                                        </div>\n                                                        <div>\n                                                            <label>Validation Split</label>\n                                                            <input value={configuration.validation_split} onChange={e => {setConfiguration(state => ({\n                                                                                                                    ...state,\n                                                                                                                    validation_split: e.target.value\n                                                                                                                }))}} />\n                                                        </div>\n                                                        <div>\n                                                            <label>Test Split</label>\n                                                            <input value={configuration.test_split} onChange={e => {setConfiguration(state => ({\n                                                                                                                    ...state,\n                                                                                                                    test_split: e.target.value\n                                                                                                                }))}} />\n                                                        </div>\n                                                        <div>\n                                                            <label>Minimum Improvement</label>\n                                                            <input value={configuration.improvement} onChange={e => {setConfiguration(state => ({\n                                                                                                                    ...state,\n                                                                                                                    improvement: e.target.value\n                                                                                                                }))}} />\n                                                        </div>\n                                                        <div>\n                                                            <label>Patience</label>\n                                                            <input value={configuration.patience} onChange={e => {setConfiguration(state => ({\n                                                                                                                    ...state,\n                                                                                                                    patience: e.target.value\n                                                                                                                }))}} />\n                                                        </div>\n                                                        <div>\n                                                            <label>Batch Size</label>\n                                                            <input value={configuration.batch} onChange={e => {setConfiguration(state => ({\n                                                                                                                    ...state,\n                                                                                                                    batch: e.target.value\n                                                                                                                }))}} />\n                                                        </div>\n                                                        <div>\n                                                            <label>Learning Rate Scheduler</label>\n                                                            <input className=\"create-model-configuration-option-checkbox\"\n                                                                    type=\"checkbox\" \n                                                                    onChange={e => {setConfiguration(state => ({\n                                                                        ...state,\n                                                                        lr_scheduler: !configuration.lr_scheduler\n                                                                    }))}}\n                                                                    checked={configuration.lr_scheduler} />\n                                                        </div>\n                                                        <div>\n                                                            <label>Optimiser</label>\n                                                            <select value={configuration.optimiser} onChange={e => {setConfiguration(state => ({\n                                                                                                                    ...state,\n                                                                                                                    optimiser: e.target.value\n                                                                                                                }))}}>\n                                                                <option disabled defaultValue value=\"\"></option>\n                                                                <option value=\"Adadelta\">Adadelta</option>\n                                                                <option value=\"Adagrad\">Adagrad</option>\n                                                                <option value=\"Adam\">Adam</option>\n                                                                <option value=\"Adamax\">Adamax</option>\n                                                                <option value=\"Ftrl\">Ftrl</option>\n                                                                <option value=\"Nadam\">Nadam</option>\n                                                                <option value=\"RMSprop\">RMSprop</option>\n                                                                <option value=\"SGD\">SGD</option>\n                                                            </select>\n                                                        </div>\n                                                        <div>\n                                                            <label>Loss</label>\n                                                            <select value={configuration.loss} onChange={e => {setConfiguration(state => ({\n                                                                                                                    ...state,\n                                                                                                                    loss: e.target.value\n                                                                                                                }))}}>\n                                                                <option disabled defaultValue value=\"\"></option>\n                                                                {dataset.labels.length === 2 &&\n                                                                    <>\n                                                                        <option value=\"binary_crossentropy\">Binary Crossentropy</option>\n                                                                        <option value=\"hinge\">Hinge</option>\n                                                                        <option value=\"squared_hinge\">Squared Hinge</option>\n                                                                    </>\n                                                                }\n                                                                {dataset.labels.length > 2 &&\n                                                                    <>\n                                                                        <option value=\"categorical_crossentropy\">Categorical Crossentropy</option>\n                                                                        <option value=\"sparse_categorical_crossentropy\">Sparse Categorical Crossentropy</option>\n                                                                        <option value=\"kl_divergence\">Kullback Leibler Divergence</option>\n                                                                    </>\n                                                                }\n                                                            </select>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        }\n                                    </>\n                                }\n                            </div>\n                        </div>\n                    :\n                        <></>\n                    }\n                </>\n            }\n        </>\n    )\n}\n\nexport default Workspace"]},"metadata":{},"sourceType":"module"}